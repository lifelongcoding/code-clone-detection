FUNCTION_ONE,FUNCTION_TWO,LABEL,SIMILARITY
"            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }","    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }",1,0.9979912
"    void sortIds(int a[]) {
        ExecutionTimer t = new ExecutionTimer();
        t.start();
        for (int i = a.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (a[j] > a[j + 1]) {
                    int T = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = T;
                }
            }
        }
        t.end();
        TimerRecordFile timerFile = new TimerRecordFile(""sort"", ""BufferSorting"", ""sortIds"", t.duration());
    }","    public static int[] sortAscending(double input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] > input[j + 1]) {
                    double mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }",1,0.99733317
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","    public static Element[][] transpose(Element[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                Element temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        return matrix;
    }",1,0.9973267
"    public static final float[][] transposeMatrix(float[][] a) {
        int ra = a.length;
        int ca = a[0].length;
        float[][] m = new float[ca][ra];
        for (int i = 0; i < ra; i++) {
            for (int j = 0; j < ca; j++) m[j][i] = a[i][j];
        }
        return m;
    }","    public static double[][] transpose(double[][] in) {
        assert in != null;
        int h = in.length;
        int w = in[0].length;
        double[][] out = new double[w][h];
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                out[x][y] = in[y][x];
            }
        }
        return out;
    }",1,0.9975789
"    public static final float[][] transposeMatrix(float[][] a) {
        int ra = a.length;
        int ca = a[0].length;
        float[][] m = new float[ca][ra];
        for (int i = 0; i < ra; i++) {
            for (int j = 0; j < ca; j++) m[j][i] = a[i][j];
        }
        return m;
    }","    public CMatrix transpose() {
        CMatrix X = new CMatrix(n, m);
        Complex[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99627143
"    public void deleteDirectory(File dir) {
        if (!dir.exists()) {
            return;
        }
        System.out.println("">> "" + dir.getName());
        File[] files = dir.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isDirectory()) {
                deleteDir(files[i]);
            } else {
                files[i].delete();
                return;
            }
        }
    }","    public static boolean deleteDirectory(final File pPath) {
        if (pPath.exists()) {
            final File[] files = pPath.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return pPath.delete();
    }",1,0.99878305
"    public static Image[][] getFlipHorizintalImage2D(Image[][] pixels) {
        int w = pixels.length;
        int h = pixels[0].length;
        Image pixel[][] = new Image[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                pixel[i][j] = pixels[j][i];
            }
        }
        return pixel;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99720454
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public int calculate(int x) {
        if (x < 0) throw new IllegalArgumentException(""positive numbers only"");
        if (x <= 1) return x;
        return calculate(x - 1) + calculate(x - 2);
    }",1,0.99808085
"    public static SRPGAnimation makeObject(String fileName, int row, int col, int tileWidth, int tileHeight) {
        String key = fileName.trim().toLowerCase();
        SRPGAnimation animation = (SRPGAnimation) animations.get(key);
        if (animation == null) {
            Image[][] images = GraphicsUtils.getSplit2Images(fileName, tileWidth, tileHeight);
            Image[][] result = new Image[row][col];
            for (int y = 0; y < col; y++) {
                for (int x = 0; x < row; x++) {
                    result[x][y] = images[y][x];
                }
            }
            images = null;
            animations.put(key, animation = makeObject(result[0], result[1], result[2], result[3]));
        }
        return animation;
    }","    public static LImage[][] reversalXandY(final LImage[][] array) {
        int col = array[0].length;
        int row = array.length;
        LImage[][] result = new LImage[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }",1,0.99120456
"    public static MathComplexMatrix Transpone(MathComplexMatrix matrix) {
        int m = matrix.getM();
        int n = matrix.getN();
        Complex[][] mData = matrix.getAllItems();
        Complex[][] newData = new Complex[n][m];
        for (int ni = 0; ni < n; ni++) {
            for (int mi = 0; mi < m; mi++) {
                newData[ni][mi] = mData[mi][ni];
            }
        }
        return new MathComplexMatrix(newData);
    }","    public final Matrix getTranspose() {
        double[][] newData = new double[width_][height_];
        for (int row = 0; row < height_; row++) {
            for (int col = 0; col < width_; col++) {
                newData[col][row] = data_[row][col];
            }
        }
        return new Matrix(newData);
    }",1,0.99650615
"    public static int[] bubbleSort(int... a) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < a.length - 1; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
        } while (swapped);
        return a;
    }","    public void bubbleSort(int[] arr) {
        boolean swapped = true;
        int j = 0;
        int tmp;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < arr.length - j; i++) {
                if (arr[i] > arr[i + 1]) {
                    tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    swapped = true;
                }
            }
        }
    }",1,0.99899423
"            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }","    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }",1,0.9979912
"    private static double[][] createCostMatrix(SimplePoint2d[] cities) {
        final int noCity = cities.length;
        double[][] dMat = new double[noCity][noCity];
        for (int i = 0; i < noCity; i++) {
            dMat[i][i] = 0.0;
            for (int j = i + 1; j < noCity; j++) {
                dMat[i][j] = SimplePoint2d.distance(cities[i], cities[j]);
                dMat[j][i] = dMat[i][j];
            }
        }
        return dMat;
    }","    public RealSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }",1,0.9938827
"    public Matrix transpose() {
        int n = rows();
        int m = columns();
        double[][] newComponents = new double[m][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) newComponents[j][i] = components[i][j];
        }
        return new Matrix(newComponents);
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99835324
"    public void transpose() {
        Matrix t = new Matrix(_column, _row);
        for (int row = 0; row < _row; row++) {
            for (int column = 0; column < _column; column++) {
                t._cell[column][row] = _cell[row][column];
            }
        }
        _row = t._row;
        _column = t._column;
        _cell = t._cell;
    }","    public static double[][] transpose(double[][] in) {
        assert in != null;
        int h = in.length;
        int w = in[0].length;
        double[][] out = new double[w][h];
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                out[x][y] = in[y][x];
            }
        }
        return out;
    }",1,0.9968688
"    public static Image[][] reversalXandY(final Image[][] array) {
        int col = array[0].length;
        int row = array.length;
        Image[][] result = new Image[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9967332
"    public static double[][] calcTranspose(double[][] mat) {
        double[][] transpose = new double[mat[0].length][mat.length];
        for (int a = 0; a < transpose.length; a++) {
            for (int b = 0; b < transpose[0].length; b++) {
                transpose[a][b] = mat[b][a];
            }
        }
        return transpose;
    }","    public Matrix44 transpose() {
        Matrix44 result = new Matrix44();
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                result._m[i][j] = _m[j][i];
            }
        }
        return result;
    }",1,0.99346936
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(MasteryCards.SITE_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + MasteryCards.SITE_URL + ""' to check latest version"");
            }
        }","            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    try {
                        if (Desktop.isDesktopSupported()) {
                            Desktop.getDesktop().browse(e.getURL().toURI());
                        } else Tools.openURL(e.getURL().toString());
                    } catch (Exception x) {
                        JOptionPane.showMessageDialog(module.getActions().getFrame(), x.getMessage());
                    }
                }
            }",1,0.99571556
"    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
        }
    }","                public void actionPerformed(ActionEvent e) {
                    checkAndDisplayMessages();
                    if (Desktop.isDesktopSupported()) {
                        try {
                            URI uri = new URI(""https://www.google.com/voice/"");
                            Desktop.getDesktop().browse(uri);
                        } catch (URISyntaxException e1) {
                            e1.printStackTrace();
                        } catch (IOException e1) {
                            e1.printStackTrace();
                        }
                    }
                }",1,0.9933579
"    public static <E> E[][] transpose(final E[][] matrix, final E[][] transposed) {
        for (int i = matrix.length; --i >= 0; ) {
            for (int j = matrix[i].length; --j >= 0; ) {
                transposed[j][i] = matrix[i][j];
            }
        }
        return transposed;
    }","    public IntSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",1,0.9934863
"            public void mouseClicked(MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(""http://www.ignissoft.com""));
                    } catch (Exception e) {
                        log.log(Level.WARNING, ""Failed openning browser to Ignis website: "" + e.getMessage());
                    }
                }
            }","    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
        }
    }",1,0.9951583
"    public void actionPerformed(ActionEvent e) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URL(url).toURI());
            } catch (IOException e1) {
                e1.printStackTrace();
            } catch (URISyntaxException e1) {
                e1.printStackTrace();
            }
        } else {
            JOptionPane.showConfirmDialog(null, ""Can not determine the default web browser.\n"" + url);
        }
    }","            @Override
            public void mouseClicked(MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    try {
                        Desktop.getDesktop().browse(new URI(resourceMap.getString(""Application.homepage"")));
                    } catch (URISyntaxException urise) {
                        logger.log(Level.WARNING, ""Incorrect URI"", urise);
                    } catch (IOException ioe) {
                        logger.log(Level.WARNING, ""General IO Error"", ioe);
                    }
                }
            }",1,0.9967685
"    public static Object[] append(Object[] oldArray, Object o) {
        NullArgumentException.check(oldArray);
        NullArgumentException.check(o);
        Object[] newArray = (Object[]) Array.newInstance(oldArray.getClass().getComponentType(), oldArray.length + 1);
        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);
        newArray[oldArray.length] = o;
        return newArray;
    }","    public static Object[] add(final Object[] array, final Object obj) {
        final Object[] newArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = obj;
        return newArray;
    }",1,0.9979668
"    public CMatrix transpose() {
        CMatrix X = new CMatrix(n, m);
        Complex[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public IntSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",1,0.99690557
"    private float[][] transpose(float[][] m) {
        float[][] toReturn = new float[m[0].length][m.length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++) {
                toReturn[j][i] = m[i][j];
            }
        }
        return toReturn;
    }","    @Override
    public BasicCohoMatrix<V> transpose() {
        V[][] d = createArray(data[0].length, data.length);
        int[][] p = new int[pos[0].length][pos.length];
        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data[0].length; j++) {
                d[j][i] = data[i][j];
                p[j][i] = pos[i][j];
            }
        }
        BasicCohoMatrix<V> result = new BasicCohoMatrix(type.zero(), d, p, ncols, nrows, !isDual);
        return result;
    }",1,0.9894026
"    public static LImage[][] reversalXandY(final LImage[][] array) {
        int col = array[0].length;
        int row = array.length;
        LImage[][] result = new LImage[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","    public static int[][] transpose(int[][] array) {
        int[][] result = new int[array[0].length][array.length];
        for (int i = 0; i < array[0].length; i++) {
            for (int j = 0; j < array.length; j++) {
                result[i][j] = array[j][i];
            }
        }
        return result;
    }",1,0.99793774
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    public int fib(int n) {
        if (n == 0 || n == 1) return 1; else return fib(n - 1) + fib(n - 2);
    }",1,0.99876314
"    public static double[][] invertMatrix(double[][] matrix) {
        int firstDimentionOfResultMatrix = matrix[0].length;
        int secondDimentionOfResultMatrix = matrix.length;
        double[][] resultMatrix = new double[firstDimentionOfResultMatrix][secondDimentionOfResultMatrix];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                resultMatrix[j][i] = matrix[i][j];
            }
        }
        return resultMatrix;
    }","    public RoutesMap getInverse() {
        DenseRoutesMap transposed = new DenseRoutesMap(distances.length);
        for (int i = 0; i < distances.length; i++) {
            for (int j = 0; j < distances.length; j++) {
                transposed.distances[i][j] = distances[j][i];
            }
        }
        return transposed;
    }",1,0.9976566
"    private void openDateFormatHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(""http://java.sun.com/javase/6/docs/api/java/text/SimpleDateFormat.html""));
            } catch (Exception err) {
            }
        }
    }","    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }",1,0.994906
"    private static boolean deleteFile(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                deleteFile(child);
            }
        }
        return resource.delete();
    }","    protected boolean recursiveFileDelete(File file) {
        if (file.isDirectory()) {
            for (File fChild : file.listFiles()) {
                recursiveFileDelete(fChild);
            }
        }
        return file.delete();
    }",1,0.99904263
"    public static double[][] Transpose(double[][] a) {
        if (logger.isLoggable(Level.FINEST)) {
            logger.finest(""Performing Transpose..."");
        }
        int tms = a.length;
        double m[][] = new double[tms][tms];
        for (int i = 0; i < tms; i++) {
            for (int j = 0; j < tms; j++) {
                m[i][j] = a[j][i];
            }
        }
        return m;
    }","    public GCGCDatum[][] toArray() {
        GCGCDatum tempArray[][] = new GCGCDatum[getNumberRows()][];
        GCGCDatum returnedArray[][] = new GCGCDatum[getNumberCols()][getNumberRows()];
        for (int i = 0; i < getNumberRows(); i++) {
            tempArray[i] = ((List<GCGCDatum>) peakList.get(i).getVar(""getDatumArray"")).toArray(new GCGCDatum[0]);
        }
        for (int i = 0; i < getNumberRows(); i++) {
            for (int j = 0; j < getNumberCols(); j++) {
                returnedArray[j][i] = tempArray[i][j];
            }
        }
        return returnedArray;
    }",1,0.99438137
"    public static double[][] transposed(double[][] matrix) {
        int row = matrix[0].length;
        int line = matrix.length;
        double[][] ans = new double[row][line];
        for (int i = 0; i < line; i++) {
            for (int j = 0; j < row; j++) {
                ans[j][i] = matrix[i][j];
            }
        }
        return ans;
    }","    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }",1,0.99748677
"    public static void delete(File f) {
        File[] files = f.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(f);
    }","    private static void deleteDir(final File dir) {
        File[] outDirContents = dir.listFiles();
        for (int i = 0; i < outDirContents.length; i++) {
            if (isLink(outDirContents[i])) {
                continue;
            }
            if (outDirContents[i].isDirectory()) {
                deleteDir(outDirContents[i]);
            }
            if (!outDirContents[i].delete() && outDirContents[i].exists()) {
                log.error(""Could not delete "" + outDirContents[i].getAbsolutePath());
            }
        }
        if (!dir.delete()) {
            log.error(""Could not delete "" + dir.getAbsolutePath());
        }
    }",1,0.9976806
"    public static int binarySearch(int[] a, int key) {
        int low = 0;
        int high = a.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            int midVal = a[mid];
            if (midVal < key) low = mid + 1; else if (midVal > key) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }","	public static <T extends Comparable<T>> int binarySearch4(T[] arr, T key) {
		int imin = 0;
		int imax = arr.length - 1;
		while(imin <= imax) {
			int imid = imin + (imax - imin)/2;
			if (key.compareTo(arr[imid]) < 0)//(key < arr[imid])
				imax = imid-1;
			else if (key.compareTo(arr[imid]) > 0)//(key > arr[imid])
				imin = imid + 1;
			else
				return imid;
		}
		return -1;
	}",1,0.9912792
"    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }","            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }",1,0.9979912
"    public IntSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }","    public static double[][] transpose(double[][] object) {
        double[][] transpose = new double[object[0].length][object.length];
        for (int i = 0; i < object.length; i++) {
            for (int x = 0; x < transpose.length; x++) {
                transpose[x][i] = object[i][x];
            }
        }
        return transpose;
    }",1,0.99565756
"    public static double[][] getCorrMatrix(Gene[] gene) {
        double[][] c = new double[gene.length][gene.length];
        for (int i = 0; i < c.length - 1; i++) {
            for (int j = i + 1; j < c.length; j++) {
                c[i][j] = Pearson.calcCorrelation(gene[i].value, gene[j].value);
                c[j][i] = c[i][j];
            }
        }
        return c;
    }","    public FloatMatrix transpose() {
        FloatMatrix X = new FloatMatrix(n, m);
        float[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9978037
"    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    @Ignore
    public static void deleteTestFiles(File dir) {
        assertTrue(ensureDirIsTest(dir));
        File[] files = dir.listFiles();
        for (File f : files) {
            if (f.isDirectory()) {
                deleteTestFiles(f);
            }
            f.delete();
        }
    }",1,0.99708056
"    protected void saveClassifier() {
        JFileChooser chooser = new JFileChooser();
        try {
            chooser.setCurrentDirectory(new File(new File(""."").getCanonicalPath()));
        } catch (IOException ioe) {
        }
        int returnVal = chooser.showSaveDialog(frame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            if (classifiers.size() < 1) return;
            classifiers.get(INDEX_RUBINE).save(chooser.getSelectedFile());
        }
    }","            public void actionPerformed(ActionEvent e) {
                JFileChooser chooser = new JFileChooser();
                try {
                    chooser.setCurrentDirectory(new File(new File(""."").getCanonicalPath()));
                } catch (IOException ioe) {
                }
                int returnVal = chooser.showOpenDialog(frame);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    openFile(chooser.getSelectedFile());
                }
            }",1,0.99683166
"    public static double[][] transpose(double[][] doubleBox) {
        YeriDebug.ASSERT(CollectionsToolkit.isRectangular(doubleBox));
        double[][] returnBox = new double[doubleBox[0].length][doubleBox.length];
        for (int i = 0; i < doubleBox.length; i++) {
            for (int j = 0; j < doubleBox[i].length; j++) {
                returnBox[j][i] = doubleBox[i][j];
            }
        }
        return returnBox;
    }","    public RealSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }",1,0.9957922
"    public static double[][] invertMatrix(double[][] matrix) {
        int firstDimentionOfResultMatrix = matrix[0].length;
        int secondDimentionOfResultMatrix = matrix.length;
        double[][] resultMatrix = new double[firstDimentionOfResultMatrix][secondDimentionOfResultMatrix];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                resultMatrix[j][i] = matrix[i][j];
            }
        }
        return resultMatrix;
    }","    public double[][] getMatrixFromTree(double p) {
        double[][] Mat = new double[numdata][numdata];
        for (int i = 0; i < numdata; i++) {
            for (int j = 0; j < i; j++) {
                Mat[i][j] = -p * Math.log(getTreeDist(i, j));
                Mat[j][i] = Mat[i][j];
            }
        }
        return Mat;
    }",1,0.9971224
"    public static double[][] transposeMatrix(double[][] vector) {
        double[][] tm = new double[vector[0].length][vector.length];
        for (int i = 0; i < tm.length; i++) {
            for (int j = 0; j < tm[i].length; j++) {
                tm[i][j] = vector[j][i];
            }
        }
        return tm;
    }","    public FloatMatrix transpose() {
        FloatMatrix X = new FloatMatrix(n, m);
        float[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9952723
"    public void delete(int id) throws FidoDatabaseException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                String sql = ""delete from Instructions where InstructionId = "" + id;
                stmt.executeUpdate(sql);
                sql = ""delete from InstructionGroups where InstructionId = "" + id;
                stmt.executeUpdate(sql);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }","    static void test() throws SQLException {
        Connection conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            conn = JdbcUtils.getConnection();
            conn.setAutoCommit(false);
            st = conn.createStatement();
            String sql = ""update user set money=money-10 where id=15"";
            st.executeUpdate(sql);
            sql = ""select money from user where id=13"";
            rs = st.executeQuery(sql);
            float money = 0.0f;
            while (rs.next()) {
                money = rs.getFloat(""money"");
            }
            if (money > 1000) throw new RuntimeException(""�Ѿ��������ֵ��"");
            sql = ""update user set money=money+10 where id=13"";
            st.executeUpdate(sql);
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            JdbcUtils.free(rs, st, conn);
        }
    }",1,0.9973712
"    public Matrix transpose() {
        Matrix result = new Matrix(columns(), rows());
        for (int i = 0; i < rows(); i++) {
            for (int k = 0; k < columns(); k++) {
                result.elements[k][i] = elements[i][k];
            }
        }
        return result;
    }","    public float[][] getSubints() {
        int[][] subintsInt = this.getSubints(32, 1, 32);
        float[][] subintsfold = new float[subintsInt[0].length][subintsInt.length];
        for (int i = 0; i < subintsInt.length; i++) {
            for (int j = 0; j < subintsInt[0].length; j++) {
                subintsfold[j][i] = subintsInt[i][j];
            }
        }
        return subintsfold;
    }",1,0.99773693
"    private static Object resizeArray(Object oldArray, int newSize) {
        int oldSize = java.lang.reflect.Array.getLength(oldArray);
        Class elementType = oldArray.getClass().getComponentType();
        Object newArray = java.lang.reflect.Array.newInstance(elementType, newSize);
        int preserveLength = Math.min(oldSize, newSize);
        if (preserveLength > 0) System.arraycopy(oldArray, 0, newArray, 0, preserveLength);
        return newArray;
    }","    public static final Object addElementToArray(Object array, Object item) {
        Class fc = array.getClass().getComponentType();
        int n = Array.getLength(array);
        Object newArray = Array.newInstance(fc, n + 1);
        if (n > 0) System.arraycopy(array, 0, newArray, 0, n);
        Array.set(newArray, n, item);
        return newArray;
    }",1,0.9979937
"    public void accueil() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                _frameMain._statusBar.isWork(true);
                try {
                    desktop.browse(new URI(TEXT_URL_APPLICATION));
                    _frameMain._statusBar.setStatusText(TEXT_OUVERTURE_URL_APPLICATION);
                } catch (URISyntaxException ex) {
                    Logger.getLogger(MenuAction.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(MenuAction.class.getName()).log(Level.SEVERE, null, ex);
                }
                _frameMain._statusBar.isWork(false);
            }
        }
    }","    private void projlblMouseClicked(java.awt.event.MouseEvent evt) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(""http://sourceforge.net/projects/w2sc/""));
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        }
    }",1,0.99705637
"    static void BuildSqSymmBasisMatrix(double[][] lSVsqss, int lnv, double[][] lelectrodesub, int lnChan) {
        for (int j = 0; j < lnv; j++) {
            for (int k = 0; k <= j; k++) {
                lSVsqss[j][k] = Dot(lelectrodesub[j], lelectrodesub[k], lnChan);
                if (k != j) lSVsqss[k][j] = lSVsqss[j][k];
            }
        }
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        int[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9961402
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(JCards.SITE_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + JCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + JCards.SITE_URL + ""' to check latest version"");
            }
        }","        public void actionPerformed(ActionEvent e) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().browse(this.uri);
                } catch (IOException err) {
                }
            }
        }",1,0.99489
"    public static int getIdNameIndexSort(final FudaaExec[] _ex, final String _idName) {
        if (_idName == null) {
            return -1;
        }
        int lowIndex = 0;
        int highIndex = _ex.length;
        int temp, tempMid;
        while (lowIndex <= highIndex) {
            tempMid = (lowIndex + highIndex) / 2;
            temp = _ex[tempMid].getIDName().compareTo(_idName);
            if (temp < 0) {
                lowIndex = tempMid + 1;
            } else if (temp > 0) {
                highIndex = tempMid - 1;
            } else {
                return tempMid;
            }
        }
        return -1;
    }","    public static int findUpperBoundaryVariation(Variation var, ArrayList<Variation> variations) {
        if (variations == null) {
            return Integer.MAX_VALUE;
        }
        int top = 0;
        int bot = variations.size();
        int mid = 0;
        while (top < bot) {
            mid = (top + bot) / 2;
            if (var.compareTo(variations.get(mid)) < 0) {
                bot = mid - 1;
            } else if (var.compareTo(variations.get(mid)) > 0) {
                top = mid + 1;
            } else {
                return mid;
            }
        }
        return Utils.max2(0, Utils.min2(top, variations.size() - 1));
    }",1,0.99877965
"    @Override
    public void playSpotifySong(Track track) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(track.getId()));
            } catch (IOException e) {
                GroofyLogger.getInstance().logException(e);
            } catch (URISyntaxException e) {
                GroofyLogger.getInstance().logException(e);
            }
        }
    }","    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(uri);
            } catch (IOException e) {
                ourLog.error(""Failed to create hyperlink"", e);
            }
        } else {
            ourLog.error(""Failed to create hyperlink, no desktop available"");
        }
    }",1,0.99796623
"    @Override
    public BasicCohoMatrix<V> transpose() {
        V[][] d = createArray(data[0].length, data.length);
        int[][] p = new int[pos[0].length][pos.length];
        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data[0].length; j++) {
                d[j][i] = data[i][j];
                p[j][i] = pos[i][j];
            }
        }
        BasicCohoMatrix<V> result = new BasicCohoMatrix(type.zero(), d, p, ncols, nrows, !isDual);
        return result;
    }","    private double[][] transpose(double[][] in) {
        double[][] out = new double[in[0].length][in.length];
        for (int r = 0; r < in.length; r++) {
            for (int c = 0; c < in[0].length; c++) {
                out[c][r] = in[r][c];
            }
        }
        return out;
    }",1,0.98888266
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(JCards.SITE_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + JCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + JCards.SITE_URL + ""' to check latest version"");
            }
        }","    private void projlblMouseClicked(java.awt.event.MouseEvent evt) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(""http://sourceforge.net/projects/w2sc/""));
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        }
    }",1,0.99724233
"    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9977419
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    @Override
    public Matrix transpose(Factory factory) {
        if (factory == null) throw new NullPointerException();
        double result[][] = new double[columns][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                result[j][i] = self[i][j];
            }
        }
        return factory.createMatrix(result);
    }",1,0.9984374
"    private float[][] transpose(float[][] m) {
        float[][] toReturn = new float[m[0].length][m.length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++) {
                toReturn[j][i] = m[i][j];
            }
        }
        return toReturn;
    }","    public static double[][] getCorrelations(double[][] v) {
        double[][] c = new double[v.length][v.length];
        for (int i = 0; i < v.length - 1; i++) {
            for (int j = i + 1; j < v.length; j++) {
                c[i][j] = Pearson.calcCorrelation(v[i], v[j]);
                c[j][i] = c[i][j];
            }
        }
        return c;
    }",1,0.9972089
"    public static <T> T remove(T array, int idx, int length) {
        Class componentType = array.getClass().getComponentType();
        int originalLength = Array.getLength(array);
        T newarray = (T) Array.newInstance(componentType, originalLength - length);
        if (idx > 0) System.arraycopy(array, 0, newarray, 0, idx);
        if (idx + length < originalLength) System.arraycopy(array, idx + length, newarray, idx, originalLength - (idx + length));
        return newarray;
    }","    private static Object resizeArray(Object oldArray, int newSize) {
        int oldSize = java.lang.reflect.Array.getLength(oldArray);
        @SuppressWarnings(""rawtypes"") Class elementType = oldArray.getClass().getComponentType();
        Object newArray = java.lang.reflect.Array.newInstance(elementType, newSize);
        int preserveLength = Math.min(oldSize, newSize);
        if (preserveLength > 0) System.arraycopy(oldArray, 0, newArray, 0, preserveLength);
        return newArray;
    }",1,0.9966544
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(MasteryCards.SITE_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + MasteryCards.SITE_URL + ""' to check latest version"");
            }
        }","        @Override
        public void actionPerformed(ActionEvent e) {
            if (Desktop.isDesktopSupported()) {
                Desktop d = Desktop.getDesktop();
                try {
                    if (d.isSupported(Desktop.Action.BROWSE)) {
                        d.browse(new URI(url));
                    }
                } catch (Exception ex) {
                    System.err.println(""DialogHinweis.BeobUrl: "" + ex.getMessage());
                }
            }
        }",1,0.99777836
"    private int[][] balanceMatchDayMatrix(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = i + 1; j < matrix.length; j++) {
                if (matrix[i][j] % 2 != 0) {
                    int tmp = matrix[i][j];
                    matrix[i][j] = matrix[j][i];
                    matrix[j][i] = tmp;
                }
            }
        }
        return matrix;
    }","    private float[][] transpose(float[][] m) {
        float[][] toReturn = new float[m[0].length][m.length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++) {
                toReturn[j][i] = m[i][j];
            }
        }
        return toReturn;
    }",1,0.99462175
"    public static float[][] TransposeMatrix(float[][] M) {
        int lines = M.length;
        int columns = M[0].length;
        float[][] Mi = new float[columns][lines];
        for (int i = 0; i < lines; i++) {
            for (int j = 0; j < columns; j++) {
                Mi[j][i] = M[i][j];
            }
        }
        return Mi;
    }","    public Matrix transpose() {
        Matrix output = new Matrix(cols, rows);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                output.contents[j][i] = contents[i][j];
            }
        }
        return output;
    }",1,0.9979764
"    public static int[][] transpose(int[][] M) {
        int[][] tM = new int[M[0].length][M.length];
        for (int i = 0; i < tM.length; i++) {
            for (int j = 0; j < tM[0].length; j++) {
                tM[i][j] = M[j][i];
            }
        }
        return tM;
    }","    public RealSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }",1,0.995079
"    private static int[][] transpose(int[][] matrix) {
        int[][] transposed = new int[matrix.length][matrix[0].length];
        for (int k = 0; k < matrix.length; k++) {
            for (int j = 0; j < matrix.length; j++) {
                transposed[j][k] = matrix[k][j];
            }
        }
        return transposed;
    }","    public static double[][] transpose(double[][] in) {
        assert in != null;
        int h = in.length;
        int w = in[0].length;
        double[][] out = new double[w][h];
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                out[x][y] = in[y][x];
            }
        }
        return out;
    }",1,0.9981205
"    public static void browseToURI(final String strURI) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(new URI(strURI));
            } catch (IOException exp) {
                log.error(exp.toString());
            } catch (URISyntaxException exp) {
                log.error(exp.toString());
            }
        } else {
            log.fatal(""Java Desktop API is not supported on this platform."");
        }
    }","    @Override
    public void actionPerformed(ActionEvent e) {
        if (Desktop.isDesktopSupported()) {
            Desktop d = Desktop.getDesktop();
            try {
                if (d.isSupported(Desktop.Action.BROWSE)) {
                    d.browse(new URI(""http://zdfmediathk.sourceforge.net/""));
                }
            } catch (Exception ex) {
            }
        }
    }",1,0.9966382
"    private void openDateFormatHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(""http://java.sun.com/javase/6/docs/api/java/text/SimpleDateFormat.html""));
            } catch (Exception err) {
            }
        }
    }","            public void hyperlinkUpdate(HyperlinkEvent hle) {
                if (HyperlinkEvent.EventType.ACTIVATED.equals(hle.getEventType())) {
                    if (Desktop.isDesktopSupported()) {
                        try {
                            Desktop.getDesktop().browse(hle.getURL().toURI());
                        } catch (Exception ex) {
                            Logger.getLogger(Navigator.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
                        }
                    }
                }
            }",1,0.9921184
"    public static LImage[][] getFlipHorizintalImage2D(LImage[][] pixels) {
        int w = pixels.length;
        int h = pixels[0].length;
        LImage pixel[][] = new LImage[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                pixel[i][j] = pixels[j][i];
            }
        }
        return pixel;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9971025
"    public Matrix transpose() {
        Matrix matrixT = new Matrix(columnCount, rowCount);
        int i, j;
        for (i = 0; i < rowCount; i++) {
            for (j = 0; j < columnCount; j++) {
                matrixT.matrix[j][i] = matrix[i][j];
            }
        }
        return matrixT;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9989732
"    public void metodo1() {
        int temp;
        boolean flagDesordenado = true;
        while (flagDesordenado) {
            flagDesordenado = false;
            for (int i = 0; i < this.tamanoTabla - 1; i++) {
                if (tabla[i] > tabla[i + 1]) {
                    flagDesordenado = true;
                    temp = tabla[i];
                    tabla[i] = tabla[i + 1];
                    tabla[i + 1] = temp;
                }
            }
        }
    }","	public static void BubbleSortLong2(long[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					long temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}",1,0.9912245
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public void transpose() {
        double[][] new_data = new double[size_y][size_x];
        for (int i = 0; i < size_x; i++) {
            for (int j = 0; j < size_y; j++) {
                new_data[j][i] = data[i][j];
            }
        }
        int dummy = size_x;
        size_x = size_y;
        size_y = dummy;
        data = new_data;
    }",1,0.99592775
"                @Override
                public void actionPerformed(ActionEvent e) {
                    if (!Desktop.isDesktopSupported()) return;
                    try {
                        Desktop.getDesktop().browse(URI.create(Slideshow.this.items.elementAt(imageIndex).link));
                    } catch (Exception e2) {
                        JOptionPane.showMessageDialog(Slideshow.this, e2.getMessage());
                    }
                }","    private void aboutMyTwitterMouseClicked(java.awt.event.MouseEvent evt) {
        if (!Desktop.isDesktopSupported()) return;
        try {
            Desktop.getDesktop().browse(new URI(""http://twitter.com/vigneshwaranr""));
        } catch (URISyntaxException ex) {
            Logger.getLogger(JJSplit.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JJSplit.class.getName()).log(Level.SEVERE, null, ex);
        }
    }",1,0.997021
"                @Override
                public void mouseClicked(MouseEvent e) {
                    if (!e.isPopupTrigger() && SwingUtilities.isLeftMouseButton(e)) {
                        if (Desktop.isDesktopSupported()) {
                            try {
                                StyledDocument doc = (StyledDocument) getJtpChannelText().getDocument();
                                String url = (String) doc.getCharacterElement(getJtpChannelText().viewToModel(e.getPoint())).getAttributes().getAttribute(TextStyle.IDENTIFIER_URL);
                                if (url != null) {
                                    Desktop.getDesktop().browse(new java.net.URI(StringHelper.addProcotol(url, ""http://"")));
                                }
                            } catch (Exception ex) {
                            }
                        }
                    }
                }","    @Override
    public void widgetSelected(SelectionEvent e) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(e.text));
            } catch (IOException e1) {
                GroofyLogger.getInstance().logException(e1);
            } catch (URISyntaxException e1) {
                GroofyLogger.getInstance().logException(e1);
            }
        }
    }",1,0.99394464
"        private int fib(int n) {
            if (n < 2) return 1; else return fib(n - 1) + fib(n - 2);
        }","    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }",1,0.997255
"            @Override
            public void mouseClicked(MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    try {
                        Desktop.getDesktop().browse(new URI(resourceMap.getString(""Application.homepage"")));
                    } catch (URISyntaxException urise) {
                        logger.log(Level.WARNING, ""Incorrect URI"", urise);
                    } catch (IOException ioe) {
                        logger.log(Level.WARNING, ""General IO Error"", ioe);
                    }
                }
            }","            public void actionPerformed(ActionEvent evt) {
                Object[] buttons = { ""Visit our Website"", ""Ok"" };
                if (JOptionPane.showOptionDialog(JPCApplication.this, ABOUT_US, ""About JPC"", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, buttons, buttons[1]) == 0) {
                    if (Desktop.isDesktopSupported()) {
                        try {
                            Desktop.getDesktop().browse(JPC_URI);
                        } catch (IOException e) {
                            LOGGING.log(Level.INFO, ""Couldn't find or launch the default browser."", e);
                        } catch (UnsupportedOperationException e) {
                            LOGGING.log(Level.INFO, ""Browse action not supported."", e);
                        } catch (SecurityException e) {
                            LOGGING.log(Level.INFO, ""Browse action not permitted."", e);
                        }
                    }
                }
            }",1,0.99509627
"    public void transpose() {
        Matrix t = new Matrix(_column, _row);
        for (int row = 0; row < _row; row++) {
            for (int column = 0; column < _column; column++) {
                t._cell[column][row] = _cell[row][column];
            }
        }
        _row = t._row;
        _column = t._column;
        _cell = t._cell;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99638456
"    private void bubbleSort(int values[]) {
        int len = values.length - 1;
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < len - i; j++) {
                if (values[j] > values[j + 1]) {
                    int tmp = values[j];
                    values[j] = values[j + 1];
                    values[j + 1] = tmp;
                }
            }
        }
    }","    private static String sort(final String item) {
        final char[] chars = item.toCharArray();
        for (int i = 1; i < chars.length; i++) {
            for (int j = 0; j < chars.length - 1; j++) {
                if (chars[j] > chars[j + 1]) {
                    final char temp = chars[j];
                    chars[j] = chars[j + 1];
                    chars[j + 1] = temp;
                }
            }
        }
        return String.valueOf(chars);
    }",1,0.9978864
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public IntSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",1,0.99635404
"    public TypedObjectChoice randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            int tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    public static synchronized void shuffle(double[] anArray) {
        int n = anArray.length;
        for (int i = n - 1; i >= 1; i--) {
            int j = randomSource.nextInt(i + 1);
            double temp = anArray[j];
            anArray[j] = anArray[i];
            anArray[i] = temp;
        }
    }",1,0.9976413
"    public static double[][] calcTranspose(double[][] mat) {
        double[][] transpose = new double[mat[0].length][mat.length];
        for (int a = 0; a < transpose.length; a++) {
            for (int b = 0; b < transpose[0].length; b++) {
                transpose[a][b] = mat[b][a];
            }
        }
        return transpose;
    }","    public RealSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",1,0.9942288
"    void bubbleSort(int[] a) {
        int i = 0;
        int j = a.length - 1;
        int aux = 0;
        int stop = 0;
        while (stop == 0) {
            stop = 1;
            i = 0;
            while (i < j) {
                if (a[i] > a[i + 1]) {
                    aux = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = aux;
                    stop = 0;
                }
                i = i + 1;
            }
            j = j - 1;
        }
    }","	public static void BubbleSortFloat1(float[] num) {
		boolean flag = true; // set flag to true to begin first pass
		float temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}",1,0.9896461
"    public static double[][] calcTranspose(double[][] mat) {
        double[][] transpose = new double[mat[0].length][mat.length];
        for (int a = 0; a < transpose.length; a++) {
            for (int b = 0; b < transpose[0].length; b++) {
                transpose[a][b] = mat[b][a];
            }
        }
        return transpose;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9967792
"    public void actionPerformed(ActionEvent event) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                Logging.LOG.error(""Failed to open web browser"", e);
            }
        }
    }","    public void getBrowser() {
        if (Desktop.isDesktopSupported()) {
            Desktop desk = Desktop.getDesktop();
            if (desk.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desk.browse(new URI(""http://code.google.com/p/gpsnutzung/""));
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        }
    }",1,0.99474484
"    public static void openDonationLink(String uri) throws IOException {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            URI donationURI;
            try {
                donationURI = new URI(uri);
                desktop.browse(donationURI);
            } catch (URISyntaxException e) {
            }
        }
    }","    public static void browse(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(uri);
                } catch (Exception e) {
                    handleException(e);
                }
            }
        }
    }",1,0.9980684
"    public static boolean[][] transpose(boolean[][] booleanBox) {
        YeriDebug.ASSERT(CollectionsToolkit.isRectangular(booleanBox));
        boolean[][] returnBox = new boolean[booleanBox[0].length][booleanBox.length];
        for (int i = 0; i < booleanBox.length; i++) {
            for (int j = 0; j < booleanBox[i].length; j++) {
                returnBox[j][i] = booleanBox[i][j];
            }
        }
        return returnBox;
    }","    @Override
    public BasicCohoMatrix<V> transpose() {
        V[][] d = createArray(data[0].length, data.length);
        int[][] p = new int[pos[0].length][pos.length];
        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data[0].length; j++) {
                d[j][i] = data[i][j];
                p[j][i] = pos[i][j];
            }
        }
        BasicCohoMatrix<V> result = new BasicCohoMatrix(type.zero(), d, p, ncols, nrows, !isDual);
        return result;
    }",1,0.99575865
"    static void BuildSqSymmBasisMatrix(double[][] lSVsqss, int lnv, double[][] lelectrodesub, int lnChan) {
        for (int j = 0; j < lnv; j++) {
            for (int k = 0; k <= j; k++) {
                lSVsqss[j][k] = Dot(lelectrodesub[j], lelectrodesub[k], lnChan);
                if (k != j) lSVsqss[k][j] = lSVsqss[j][k];
            }
        }
    }","    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }",1,0.99571365
"    public static Object[][] dimTransform(Object[][] obj) {
        if ((obj == null) || (obj.length <= 0)) {
            return null;
        }
        Object[][] newArr = new Object[obj[0].length][obj.length];
        for (int i = 0; i < newArr.length; ++i) {
            for (int j = 0; j < obj.length; ++j) {
                newArr[i][j] = obj[j][i];
            }
        }
        return newArr;
    }","    public static int[][] transpose(int[][] array) {
        int[][] result = new int[array[0].length][array.length];
        for (int i = 0; i < array[0].length; i++) {
            for (int j = 0; j < array.length; j++) {
                result[i][j] = array[j][i];
            }
        }
        return result;
    }",1,0.9971313
"    @SuppressWarnings(""unchecked"")
    public static final <T> T[] subArray(final T[] array, final int offset, final int length) {
        final T[] newArray;
        System.arraycopy(array, offset, newArray = (T[]) Array.newInstance(array.getClass().getComponentType(), length), 0, length);
        return newArray;
    }","    @SuppressWarnings(""unchecked"")
    public static final <E> E[] subArray(E[] array, int start, int end) {
        E[] result = (E[]) Array.newInstance(array.getClass().getComponentType(), end - start);
        System.arraycopy(array, start, result, 0, end - start);
        return result;
    }",1,0.9989167
"    public static void openDesktop(final File fileToOpen) {
        if (fileToOpen != null && fileToOpen.exists()) {
            try {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    desktop.open(fileToOpen);
                }
            } catch (IOException e) {
                log.log(Level.WARNING, ""Error"", e);
            }
        }
    }","            @Override
            public void open(OpenEvent event) {
                IStructuredSelection selection = (IStructuredSelection) event.getSelection();
                File file = (File) selection.getFirstElement();
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    if (desktop.isSupported(Desktop.Action.OPEN)) {
                        try {
                            desktop.open(file);
                        } catch (IOException e) {
                        }
                    }
                }
            }",1,0.9955513
"    static Object setLength(Object array, int newLength) {
        Object t = Array.newInstance(array.getClass().getComponentType(), newLength);
        int oldLength = Array.getLength(array);
        System.arraycopy(array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
        return t;
    }","    public static Object copyArray(Object array) {
        int len = Array.getLength(array);
        Object copy = Array.newInstance(array.getClass().getComponentType(), len);
        System.arraycopy(array, 0, copy, 0, len);
        return copy;
    }",1,0.9990256
"    private void desktopBrowse(String uri) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(uri));
            } catch (URISyntaxException urise) {
                logger.log(Level.WARNING, ""Incorrect URI"", urise);
            } catch (IOException ioe) {
                logger.log(Level.WARNING, ""General IO Error"", ioe);
            }
        }
    }","    public void getBrowser() {
        if (Desktop.isDesktopSupported()) {
            Desktop desk = Desktop.getDesktop();
            if (desk.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desk.browse(new URI(""http://code.google.com/p/gpsnutzung/""));
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        }
    }",1,0.9973661
"    public QMatrix transposed() {
        QMatrix m = new QMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }","	public static int[][] transpose(int[][] m) {
		int[][] retval = new int[m[0].length][m.length];
		for(int i = 0; i < m.length; i++) {
			for(int j = 0; j < m[0].length; j++) {
				retval[j][i] = m[i][j];
			}
		}
		return retval;
	}",1,0.9915568
"    public TaggedDoubleChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            double tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    public static synchronized void shuffle(double[] anArray) {
        int n = anArray.length;
        for (int i = n - 1; i >= 1; i--) {
            int j = randomSource.nextInt(i + 1);
            double temp = anArray[j];
            anArray[j] = anArray[i];
            anArray[i] = temp;
        }
    }",1,0.9982088
"    public static void main(String[] args) {
        System.out.println(""Chapter 1 example 1: Hello World"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0101.pdf""));
            document.open();
            document.add(new Paragraph(""Hello World""));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public static void main(String[] args) {
        System.out.println(""Chapter 6 example 1: Adding a Gif, Jpeg and Png-file using urls"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0601.pdf""));
            HtmlWriter.getInstance(document, new FileOutputStream(""Chap0601.html""));
            document.open();
            Image gif = Image.getInstance(new URL(""http://www.lowagie.com/iText/tutorial/vonnegut.gif""));
            Image jpeg = Image.getInstance(new URL(""http://www.lowagie.com/iText/tutorial/myKids.jpg""));
            Image png = Image.getInstance(new URL(""http://www.lowagie.com/iText/tutorial/hitchcock.png""));
            document.add(gif);
            document.add(jpeg);
            document.add(png);
        } catch (MalformedURLException mue) {
            System.err.println(mue.getMessage());
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",1,0.9964637
"    public static void openUrl(Component parentComponent, String url) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            URI uri = null;
            try {
                uri = new URI(url);
                desktop.browse(uri);
            } catch (IOException ioe) {
                JOptionPane.showMessageDialog(parentComponent, ioe.getMessage(), Messages.getString(""VcMainFrame.msgTitleError""), JOptionPane.ERROR_MESSAGE);
            } catch (URISyntaxException use) {
                JOptionPane.showMessageDialog(parentComponent, use.getMessage(), Messages.getString(""VcMainFrame.msgTitleError""), JOptionPane.ERROR_MESSAGE);
            }
        }
    }","    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }",1,0.99475396
"    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }","            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }",1,0.997991
"    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }","    private void titelOeffnen() {
        if (!textarray[Konstanten.FILM_URL_THEMA_NR].getText().equals("""")) {
            if (Desktop.isDesktopSupported()) {
                Desktop d = Desktop.getDesktop();
                try {
                    if (d.isSupported(Desktop.Action.BROWSE)) {
                        d.browse(new URI(textarray[Konstanten.FILM_URL_THEMA_NR].getText()));
                    }
                } catch (Exception ex) {
                }
            }
        }
    }",1,0.99343514
"    public static void shuffle(double[] source, Random randomizer) {
        int n = source.length;
        for (int i = n - 1; i > 0; i--) {
            int j = randomizer.nextInt(i + 1);
            double k = source[j];
            source[j] = source[i];
            source[i] = k;
        }
    }","    public static void shuffle(int[] array, int n) {
        for (int i = 1; i < n; ++i) {
            int swap = s_random.nextInt(i + 1);
            int temp = array[swap];
            array[swap] = array[i];
            array[i] = temp;
        }
    }",1,0.9982901
"                public void actionPerformed(ActionEvent e) {
                    if (Desktop.isDesktopSupported()) {
                        try {
                            Desktop.getDesktop().browse(monitor.getBuildURI(e.getActionCommand()));
                        } catch (IOException err) {
                        }
                    }
                }","    @Override
    public void hyperlinkUpdate(HyperlinkEvent e) {
        if (EventType.ACTIVATED.equals(e.getEventType())) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().browse(e.getURL().toURI());
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (URISyntaxException e1) {
                    e1.printStackTrace();
                }
            }
        }
    }",1,0.9959812
"    int[] slowSort() {
        int[] values = getValues();
        int n = values.length;
        for (int pass = 1; pass < n; pass++) {
            for (int i = 0; i < n - pass; i++) {
                if (values[i] > values[i + 1]) {
                    int temp = values[i];
                    values[i] = values[i + 1];
                    values[i + 1] = temp;
                }
            }
        }
        return values;
    }","    public static int[] sortAscending(float input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] > input[j + 1]) {
                    float mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }",1,0.9971708
"    public void save(String oid, String key, Serializable obj) throws PersisterException {
        String lock = getLock(oid);
        if (lock == null) {
            throw new PersisterException(""Object does not exist: OID = "" + oid);
        } else if (!NULL.equals(lock) && (!lock.equals(key))) {
            throw new PersisterException(""The object is currently locked with another key: OID = "" + oid + "", LOCK = "" + lock + "", KEY = "" + key);
        }
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            byte[] data = serialize(obj);
            conn = _ds.getConnection();
            conn.setAutoCommit(true);
            ps = conn.prepareStatement(""update "" + _table_name + "" set "" + _data_col + "" = ?, "" + _ts_col + "" = ? where "" + _oid_col + "" = ?"");
            ps.setBinaryStream(1, new ByteArrayInputStream(data), data.length);
            ps.setLong(2, System.currentTimeMillis());
            ps.setString(3, oid);
            ps.executeUpdate();
        } catch (Throwable th) {
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (Throwable th2) {
                }
            }
            throw new PersisterException(""Failed to save object: OID = "" + oid, th);
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (Throwable th) {
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (Throwable th) {
                }
            }
        }
    }","    public static int deleteOrder(String likePatten) {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append("" DELETE FROM JHF_ALIVE_ORDER "").append("" WHERE   ORDER_ID LIKE  ? "");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            psmt.setString(1, ""%"" + likePatten + ""%"");
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println("" error when roll back !"");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println("" error  when psmt close or conn close ."");
            }
        }
        return deleted;
    }",1,0.9971965
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(JCards.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + JCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + JCards.GPL_URL + ""' to view GPL"");
            }
        }","    @Override
    public void hyperlinkUpdate(HyperlinkEvent e) {
        if (EventType.ACTIVATED.equals(e.getEventType())) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().browse(e.getURL().toURI());
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (URISyntaxException e1) {
                    e1.printStackTrace();
                }
            }
        }
    }",1,0.9968592
"    private void calculate(int entier) {
        double n = entier;
        for (double i = 2; i <= n / i; i++) {
            while (n % i == 0) {
                add(i);
                n /= i;
            }
        }
        if (n > 1) {
            add(n);
        }
    }","        private Factorisation(int entier) {
            factL = new ArrayList<Integer>();
            int n = entier;
            for (int i = 2; i <= n / i; i++) {
                while (n % i == 0) {
                    factL.add(i);
                    n /= i;
                }
            }
            if (n > 1) {
                factL.add(n);
            }
        }",1,0.9969196
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","    public static double[][] calcTranspose(double[][] mat) {
        double[][] transpose = new double[mat[0].length][mat.length];
        for (int a = 0; a < transpose.length; a++) {
            for (int b = 0; b < transpose[0].length; b++) {
                transpose[a][b] = mat[b][a];
            }
        }
        return transpose;
    }",1,0.9967423
"            public void mouseClicked(MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(""http://www.ignissoft.com""));
                    } catch (Exception e) {
                        log.log(Level.WARNING, ""Failed openning browser to Ignis website: "" + e.getMessage());
                    }
                }
            }","    public static void openDonationLink(String uri) throws IOException {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            URI donationURI;
            try {
                donationURI = new URI(uri);
                desktop.browse(donationURI);
            } catch (URISyntaxException e) {
            }
        }
    }",1,0.9961859
"    public static double[][] transposeMatrix(double[][] vector) {
        double[][] tm = new double[vector[0].length][vector.length];
        for (int i = 0; i < tm.length; i++) {
            for (int j = 0; j < tm[i].length; j++) {
                tm[i][j] = vector[j][i];
            }
        }
        return tm;
    }","    public static void symmetrizeComponents(double[][] components) {
        for (int i = 0; i < components.length; i++) {
            for (int j = i + 1; j < components.length; j++) {
                components[i][j] += components[j][i];
                components[i][j] *= 0.5;
                components[j][i] = components[i][j];
            }
        }
    }",1,0.9967777
"    public static MathComplexMatrix Transpone(MathComplexMatrix matrix) {
        int m = matrix.getM();
        int n = matrix.getN();
        Complex[][] mData = matrix.getAllItems();
        Complex[][] newData = new Complex[n][m];
        for (int ni = 0; ni < n; ni++) {
            for (int mi = 0; mi < m; mi++) {
                newData[ni][mi] = mData[mi][ni];
            }
        }
        return new MathComplexMatrix(newData);
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99597955
"    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    public static boolean recursiveDelete(File d) {
        if (d.isDirectory()) {
            File children[] = d.listFiles();
            for (File f : children) {
                Assert.assertTrue(""delete "" + f.toString(), recursiveDelete(f));
            }
        }
        return d.delete();
    }",1,0.99819124
"    public static LImage[][] getFlipHorizintalImage2D(LImage[][] pixels) {
        int w = pixels.length;
        int h = pixels[0].length;
        LImage pixel[][] = new LImage[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                pixel[i][j] = pixels[j][i];
            }
        }
        return pixel;
    }","    public RealSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }",1,0.9962907
"    public IntSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }","    public double[][] getMatrixFromTree(double p) {
        double[][] Mat = new double[numdata][numdata];
        for (int i = 0; i < numdata; i++) {
            for (int j = 0; j < i; j++) {
                Mat[i][j] = -p * Math.log(getTreeDist(i, j));
                Mat[j][i] = Mat[i][j];
            }
        }
        return Mat;
    }",1,0.9954114
"    public static int[][] mergeColumns(int[]... x) {
        int[][] array = new int[x[0].length][x.length];
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                array[i][j] = x[j][i];
            }
        }
        return array;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99750876
"            public void mouseClicked(MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(""http://www.ignissoft.com""));
                    } catch (Exception e) {
                        log.log(Level.WARNING, ""Failed openning browser to Ignis website: "" + e.getMessage());
                    }
                }
            }","            public void onClickDo(final MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    final Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(""http://eworld.sourceforge.net""));
                    } catch (final Exception e) {
                        e.printStackTrace();
                    }
                }
            }",1,0.9990398
"    @SuppressWarnings(""unchecked"")
    public static <T> T[] appendArrays(T[] array1, T[] array2) {
        Class<?> type = array1.getClass().getComponentType();
        T[] newArray = (T[]) Array.newInstance(type, array1.length + array2.length);
        System.arraycopy(array1, 0, newArray, 0, array1.length);
        System.arraycopy(array2, 0, newArray, array1.length, array2.length);
        return newArray;
    }","    public static Object[] concat(Object[] source, Object[] objs) {
        Object[] copy = (Object[]) Array.newInstance(source.getClass().getComponentType(), source.length + objs.length);
        System.arraycopy(source, 0, copy, 0, source.length);
        System.arraycopy(objs, 0, copy, source.length, objs.length);
        return copy;
    }",1,0.99612546
"    public static Matrix transpose(final Matrix input) {
        final double[][] transposeMatrix = new double[input.getCols()][input.getRows()];
        final double[][] d = input.getData();
        for (int r = 0; r < input.getRows(); r++) {
            for (int c = 0; c < input.getCols(); c++) {
                transposeMatrix[c][r] = d[r][c];
            }
        }
        return new Matrix(transposeMatrix);
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9981515
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public void transpose() {
        double[][] new_data = new double[size_y][size_x];
        for (int i = 0; i < size_x; i++) {
            for (int j = 0; j < size_y; j++) {
                new_data[j][i] = data[i][j];
            }
        }
        int dummy = size_x;
        size_x = size_y;
        size_y = dummy;
        data = new_data;
    }",1,0.99592775
"    public static Object resizeArray(Object old, int newLength) {
        int oldLength = Array.getLength(old);
        Class elementType = old.getClass().getComponentType();
        Object newArray = Array.newInstance(elementType, newLength);
        int upto = (oldLength < newLength) ? oldLength : newLength;
        System.arraycopy(old, 0, newArray, 0, upto);
        return newArray;
    }","    static Object arrayExpand(Object a, int amount) {
        Class cl = a.getClass();
        if (!cl.isArray()) return null;
        int length = Array.getLength(a);
        int newLength = length + amount;
        Class componentType = a.getClass().getComponentType();
        Object newArray = Array.newInstance(componentType, newLength);
        System.arraycopy(a, 0, newArray, 0, length);
        return newArray;
    }",1,0.99780077
"    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }","            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }",1,0.9979912
"    public static double[][] transpose(double[][] A) {
        if (logger.isDebugEnabled()) {
            debug(""Matrix A:"", A);
        }
        int _dimension = A.length;
        double[][] B = new double[_dimension][_dimension];
        for (int i = 0; i < _dimension; i++) {
            for (int k = 0; k < _dimension; k++) {
                B[k][i] = A[i][k];
            }
        }
        if (logger.isDebugEnabled()) {
            debug(""B = transpose(A):"", B);
        }
        return B;
    }","    public static float[][] TransposeMatrix(float[][] M) {
        int lines = M.length;
        int columns = M[0].length;
        float[][] Mi = new float[columns][lines];
        for (int i = 0; i < lines; i++) {
            for (int j = 0; j < columns; j++) {
                Mi[j][i] = M[i][j];
            }
        }
        return Mi;
    }",1,0.9941019
"    public static double[][] transpose(double[][] matrix) {
        double[][] result = new double[matrix.length][matrix[0].length];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                result[i][j] = matrix[j][i];
            }
        }
        return result;
    }","    public RealSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }",1,0.9954609
"    public static double[][] getCorrelations(double[][] v) {
        double[][] c = new double[v.length][v.length];
        for (int i = 0; i < v.length - 1; i++) {
            for (int j = i + 1; j < v.length; j++) {
                c[i][j] = Pearson.calcCorrelation(v[i], v[j]);
                c[j][i] = c[i][j];
            }
        }
        return c;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99751383
"            @Override
            public void hyperlinkUpdate(HyperlinkEvent hyperlinkEvent) {
                if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                    HyperlinkEvent.EventType eventType = hyperlinkEvent.getEventType();
                    if (eventType == HyperlinkEvent.EventType.ACTIVATED) {
                        try {
                            Desktop.getDesktop().browse(hyperlinkEvent.getURL().toURI());
                        } catch (URISyntaxException uriSyntaxException) {
                            showMessageDialog(null, new MessageFormat(Messages.getString(""MessageDialog.6"")).format(new Object[] { hyperlinkEvent.getURL() }), JOptionPane.ERROR_MESSAGE, JOptionPane.DEFAULT_OPTION);
                        } catch (IOException ioException) {
                            showMessageDialog(null, Messages.getString(""MessageDialog.8""), JOptionPane.ERROR_MESSAGE, JOptionPane.DEFAULT_OPTION);
                        }
                    }
                } else {
                    showMessageDialog(null, Messages.getString(""MessageDialog.7""), JOptionPane.ERROR_MESSAGE, JOptionPane.DEFAULT_OPTION);
                }
            }","    @Override
    public void hyperlinkUpdate(HyperlinkEvent e) {
        if (EventType.ACTIVATED.equals(e.getEventType())) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().browse(e.getURL().toURI());
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (URISyntaxException e1) {
                    e1.printStackTrace();
                }
            }
        }
    }",1,0.99615085
"    public static double[][] transpose(double[][] A) {
        if (logger.isDebugEnabled()) {
            debug(""Matrix A:"", A);
        }
        int _dimension = A.length;
        double[][] B = new double[_dimension][_dimension];
        for (int i = 0; i < _dimension; i++) {
            for (int k = 0; k < _dimension; k++) {
                B[k][i] = A[i][k];
            }
        }
        if (logger.isDebugEnabled()) {
            debug(""B = transpose(A):"", B);
        }
        return B;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99362534
"    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    @Ignore
    public static void deleteTestFiles(File dir) {
        assertTrue(ensureDirIsTest(dir));
        File[] files = dir.listFiles();
        for (File f : files) {
            if (f.isDirectory()) {
                deleteTestFiles(f);
            }
            f.delete();
        }
    }",1,0.9970385
"    public MathRealMatrix transpose() {
        int m = this.M;
        int n = this.N;
        double[][] mData = this.Data;
        double[][] newData = new double[n][m];
        for (int ni = 0; ni < n; ni++) {
            for (int mi = 0; mi < m; mi++) {
                newData[ni][mi] = mData[mi][ni];
            }
        }
        return new MathRealMatrix(newData);
    }","    public static double[][] triangularToComplete(double[][] omatrix) {
        int n = omatrix.length + 1;
        double[][] M = new double[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (i < j) {
                    M[i][j] = omatrix[i][j - 1 - i];
                    M[j][i] = M[i][j];
                }
            }
        }
        return M;
    }",1,0.9976763
"    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }","            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }",1,0.9979912
"    public static int[][] reversalXandY(final int[][] array) {
        int col = array[0].length;
        int row = array.length;
        int[][] result = new int[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","    public static int[][] getPixels2D(int[] pixels, int w, int h, int size) {
        int[][] npixels = new int[w][h];
        for (int i = 0; i < npixels.length; i++) {
            for (int j = 0; j < npixels[i].length; j++) {
                npixels[i][j] = pixels[i + j * size];
            }
        }
        int pixel[][] = new int[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                pixel[i][j] = npixels[j][i];
            }
        }
        return pixel;
    }",1,0.99586207
"    public void shuffle() {
        currentDeckPosition = 0;
        int n = 52;
        while (--n > 0) {
            int k = rand.nextInt(n + 1);
            int temp = deck[n];
            deck[n] = deck[k];
            deck[k] = temp;
        }
    }","    public final void randomize(int[] index, Random random) {
        for (int j = index.length - 1; j > 0; j--) {
            int k = random.nextInt(j + 1);
            int temp = index[j];
            index[j] = index[k];
            index[k] = temp;
        }
    }",1,0.996594
"    int[] slowSort() {
        int[] values = getValues();
        int n = values.length;
        for (int pass = 1; pass < n; pass++) {
            for (int i = 0; i < n - pass; i++) {
                if (values[i] > values[i + 1]) {
                    int temp = values[i];
                    values[i] = values[i + 1];
                    values[i + 1] = temp;
                }
            }
        }
        return values;
    }","    public static int[] sortstring(int[] a1) {
        int temp;
        for (int j = 0; j < (a1.length * a1.length); j++) {
            for (int i = 0; i < a1.length - 1; i++) {
                if (a1[i] > a1[i + 1]) {
                    temp = a1[i];
                    a1[i] = a1[i + 1];
                    a1[i + 1] = temp;
                }
            }
        }
        return a1;
    }",1,0.99763703
"    void logCorrectMatrix(double p) {
        for (int i = 0; i < numdata; i++) {
            for (int j = 0; j < i; j++) {
                depMatrix[i][j] = 1 / Math.pow(depMatrix[i][j], p);
                depMatrix[j][i] = depMatrix[i][j];
            }
        }
    }","    public RealSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",1,0.9965003
"    public void actionPerformed(ActionEvent e) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URL(url).toURI());
            } catch (IOException e1) {
                e1.printStackTrace();
            } catch (URISyntaxException e1) {
                e1.printStackTrace();
            }
        } else {
            JOptionPane.showConfirmDialog(null, ""Can not determine the default web browser.\n"" + url);
        }
    }","    public void webpageAction() {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(controller.getUrlLinks().getWebpageUri());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(getFrame(), ""Can't find the default web browser\nto open the web page "" + controller.getUrlLinks().getWebpageUrlStr() + ""."", ""Cannot open web page"", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(getFrame(), ""Operation not supported on this platform.\nPlease go to "" + controller.getUrlLinks().getWebpageUrlStr(), ""Cannot open web page"", JOptionPane.INFORMATION_MESSAGE);
        }
    }",1,0.99669594
"    @TestTargetNew(level = TestLevel.PARTIAL_COMPLETE, notes = ""Verifies that find() method returns correct value."", method = ""find"", args = {  })
    public void testFind() {
        String testPattern = ""(abb)"";
        String testString = ""cccabbabbabbabbabb"";
        Pattern pat = Pattern.compile(testPattern);
        Matcher mat = pat.matcher(testString);
        int start = 3;
        int end = 6;
        while (mat.find()) {
            assertEquals(start, mat.start(1));
            assertEquals(end, mat.end(1));
            start = end;
            end += 3;
        }
        testPattern = ""(\\d{1,3})"";
        testString = ""aaaa123456789045"";
        Pattern pat2 = Pattern.compile(testPattern);
        Matcher mat2 = pat2.matcher(testString);
        start = 4;
        int length = 3;
        while (mat2.find()) {
            assertEquals(testString.substring(start, start + length), mat2.group(1));
            start += length;
        }
    }","    @TestTargetNew(level = TestLevel.COMPLETE, notes = """", method = ""find"", args = { int.class })
    public void test_findI() {
        String testPattern = ""(abb)"";
        String testString = ""cccabbabbabbabbabb"";
        Pattern pat = Pattern.compile(testPattern);
        Matcher mat = pat.matcher(testString);
        int start = 3;
        int end = 6;
        int j;
        for (j = 0; j < 3; j++) {
            while (mat.find(start + j - 2)) {
                assertEquals(start, mat.start(1));
                assertEquals(end, mat.end(1));
                start = end;
                end += 3;
            }
            start = 6;
            end = 9;
        }
        testPattern = ""(\\d{1,3})"";
        testString = ""aaaa123456789045"";
        Pattern pat2 = Pattern.compile(testPattern);
        Matcher mat2 = pat2.matcher(testString);
        start = 4;
        int length = 3;
        for (j = 0; j < length; j++) {
            for (int i = 4 + j; i < testString.length() - length; i += length) {
                mat2.find(i);
                assertEquals(testString.substring(i, i + length), mat2.group(1));
            }
        }
        Pattern pat3 = Pattern.compile(""new"");
        Matcher mat3 = pat3.matcher(""Brave new world"");
        assertTrue(mat3.find(-1));
        assertTrue(mat3.find(6));
        assertFalse(mat3.find(7));
        mat3.region(7, 10);
        assertFalse(mat3.find(3));
        assertFalse(mat3.find(6));
        assertFalse(mat3.find(7));
    }",1,0.9993006
"    public static CLocation convertSecondaryStructure(String secondary) {
        CLocation location = new CLocation();
        String regex = ""H+|E+"";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(secondary);
        while (matcher.find()) {
            if (matcher.group().substring(0, 1).equals(""H"")) location.add(""H"", matcher.start(), matcher.end()); else if (matcher.group().substring(0, 1).equals(""E"")) location.add(""E"", matcher.start(), matcher.end());
        }
        return location;
    }","    private String filterReferences(String text) {
        String pattern = ""\\`([^\\`]+)\\`"";
        Pattern p = Pattern.compile(pattern);
        Matcher m = p.matcher(text);
        StringBuffer myStringBuffer = new StringBuffer();
        while (m.find()) {
            String ref = text.substring(m.start() + 1, m.end() - 1);
            m.appendReplacement(myStringBuffer, oxdoc.project.linkToSymbol(ref));
        }
        return m.appendTail(myStringBuffer).toString();
    }",1,0.99806577
"    public static void startBrowser(String link) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                URI uri;
                try {
                    uri = new URI(link);
                    desktop.browse(uri);
                } catch (URISyntaxException e2) {
                    e2.printStackTrace();
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            }
        }
    }","    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }",1,0.9942458
"    static void sort(int[] a) {
        int i = 0;
        while (i < a.length - 1) {
            int j = 0;
            while (j < (a.length - i) - 1) {
                if (a[j] > a[j + 1]) {
                    int aux = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = aux;
                }
                j = j + 1;
            }
            i = i + 1;
        }
    }","    public int[] do_it(final int[] x) {
        int temp = 0;
        int j = x.length;
        while (j > 0) {
            for (int i = 0; i < j - 1; i++) {
                if (x[i] > x[i + 1]) {
                    temp = x[i];
                    x[i] = x[i + 1];
                    x[i + 1] = temp;
                }
                ;
            }
            ;
            j--;
        }
        ;
        return x;
    }",1,0.99824136
"    public static String getAlbumName(String author, String track) {
        String url = ""http://musicbrainz.org/ws/1/track/?type=xml&title="" + track.replace(' ', '+') + ""&artist="" + author.replace(' ', '+');
        String ret = HTTP.get(url);
        System.out.println(url);
        String regexp = ""<title>[^<]*</title>"";
        Pattern p = Pattern.compile(regexp);
        Matcher m = p.matcher(ret);
        while (m.find()) {
            String s = ret.substring(m.start() + 7, m.end() - 8);
            if (!s.toUpperCase().equals(track.toUpperCase())) return s;
        }
        return """";
    }","    public static CLocation convertSecondaryStructure(String secondary) {
        CLocation location = new CLocation();
        String regex = ""H+|E+"";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(secondary);
        while (matcher.find()) {
            if (matcher.group().substring(0, 1).equals(""H"")) location.add(""H"", matcher.start(), matcher.end()); else if (matcher.group().substring(0, 1).equals(""E"")) location.add(""E"", matcher.start(), matcher.end());
        }
        return location;
    }",1,0.99668765
"    public static double[][] transpose(double[][] doubleBox) {
        YeriDebug.ASSERT(CollectionsToolkit.isRectangular(doubleBox));
        double[][] returnBox = new double[doubleBox[0].length][doubleBox.length];
        for (int i = 0; i < doubleBox.length; i++) {
            for (int j = 0; j < doubleBox[i].length; j++) {
                returnBox[j][i] = doubleBox[i][j];
            }
        }
        return returnBox;
    }","    public static String[][] transpose(String[][] object) {
        String[][] transpose = new String[object[0].length][object.length];
        for (int i = 0; i < object.length; i++) {
            for (int x = 0; x < transpose.length; x++) {
                transpose[x][i] = object[i][x];
            }
        }
        return transpose;
    }",1,0.99713254
"    public static float[][] TransposeMatrix(float[][] M) {
        int lines = M.length;
        int columns = M[0].length;
        float[][] Mi = new float[columns][lines];
        for (int i = 0; i < lines; i++) {
            for (int j = 0; j < columns; j++) {
                Mi[j][i] = M[i][j];
            }
        }
        return Mi;
    }","    public final void transpose() {
        if (!isSquare()) {
            throw new RuntimeException(""Cannot transpose no square matrix!"");
        }
        for (int row = 0; row < height_; row++) {
            for (int col = row + 1; col < width_; col++) {
                double temp = data_[row][col];
                data_[row][col] = data_[col][row];
                data_[col][row] = temp;
            }
        }
    }",1,0.99604154
"    public static void deleteDirectory(File fileDir) {
        File[] fileList = fileDir.listFiles();
        for (int i = 0; i < fileList.length; ++i) {
            if (fileList[i].isDirectory()) {
                deleteDirectory(fileList[i].getAbsoluteFile());
                fileList[i].delete();
            }
            if (fileList[i].isFile()) {
                fileList[i].delete();
            }
        }
    }","    public static void deleteDir(File path) throws Exception {
        if (path != null) {
            File[] files = path.listFiles();
            if (files != null) {
                for (int i = 0; i < files.length; ++i) {
                    if (files[i].isDirectory()) {
                        deleteDir(files[i]);
                    }
                    files[i].delete();
                }
            }
            path.delete();
        }
    }",1,0.99784434
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    public int getFibonacci(int n) {
        if (n < 2) return 1; else return getFibonacci(n - 1) + getFibonacci(n - 2);
    }",1,0.99865115
"    public void actionPerformed(ActionEvent e) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URL(url).toURI());
            } catch (IOException e1) {
                e1.printStackTrace();
            } catch (URISyntaxException e1) {
                e1.printStackTrace();
            }
        } else {
            JOptionPane.showConfirmDialog(null, ""Can not determine the default web browser.\n"" + url);
        }
    }","    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException exc) {
                feedback.registerBug(""IOException occurred opening a link in the browser."", exc);
            }
        } else {
            feedback.registerBug(""Desktop is not supported, cannot open browser to show link!"");
        }
    }",1,0.9980026
"    public static Object expand(Object obj, int i, boolean flag) {
        int j = Array.getLength(obj);
        Object obj1 = Array.newInstance(obj.getClass().getComponentType(), j + i);
        System.arraycopy(obj, 0, obj1, flag ? 0 : i, j);
        return obj1;
    }","    private static Object extendArray(Object a1) {
        int n = Array.getLength(a1);
        Object a2 = Array.newInstance(a1.getClass().getComponentType(), n + ARRAY_SIZE_INCREMENT);
        System.arraycopy(a1, 0, a2, 0, n);
        return a2;
    }",1,0.99876416
"    public static void zipFile(String from, String to) throws IOException {
        FileInputStream in = new FileInputStream(from);
        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(to));
        out.putNextEntry(new ZipEntry(getFilename(from)));
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = in.read(buffer)) != -1) {
            out.write(buffer, 0, bytesRead);
        }
        in.close();
        out.closeEntry();
        out.close();
    }","    private void addEntry(ZipOutputStream out, String filePath) throws IOException {
        byte[] buf = new byte[1024];
        FileInputStream in = new FileInputStream(filePath);
        out.putNextEntry(new ZipEntry(filePath));
        int len;
        while ((len = in.read(buf)) > 0) {
            out.write(buf, 0, len);
        }
        out.closeEntry();
        in.close();
    }",1,0.99851984
"            public void actionPerformed(ActionEvent actionEvent) {
                Desktop desktop = null;
                if (Desktop.isDesktopSupported()) {
                    desktop = Desktop.getDesktop();
                    try {
                        desktop.open(XDCCConnectionManager.completedFiles.get(finishedFiles.getSelectedRow()));
                    } catch (IOException e) {
                        DialogBuilder.showErrorDialog(""Error"", ""Could not open file!"");
                    }
                }
            }","    @Override
    protected void afterSave(File outFile) {
        Desktop desktop = null;
        if (Desktop.isDesktopSupported()) {
            desktop = Desktop.getDesktop();
            try {
                desktop.open(outFile);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }",1,0.9959485
"    public void actionPerformed(ActionEvent evt) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(HOMEPAGE));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }","                @Override
                public void actionPerformed(ActionEvent e) {
                    if (!Desktop.isDesktopSupported()) return;
                    try {
                        Desktop.getDesktop().browse(URI.create(Slideshow.this.items.elementAt(imageIndex).link));
                    } catch (Exception e2) {
                        JOptionPane.showMessageDialog(Slideshow.this, e2.getMessage());
                    }
                }",1,0.99686664
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    private void initSsGrid() {
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < i + 1; j++) {
                ss[i][j] = (int) (Math.random() * 9);
                ss[j][i] = ss[i][j];
            }
        }
    }",1,0.99701756
"    public static Double[][] transposeMatrix(Double[][] m) {
        int r = m.length;
        int c = m[0].length;
        Double[][] t = new Double[c][r];
        for (int i = 0; i < r; ++i) {
            for (int j = 0; j < c; ++j) {
                t[j][i] = m[i][j];
            }
        }
        return t;
    }","    public static double[][] transpose(double[][] matrix) {
        double[][] result = new double[matrix.length][matrix[0].length];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                result[i][j] = matrix[j][i];
            }
        }
        return result;
    }",1,0.9979069
"    public static void openUrl(Component parentComponent, String url) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            URI uri = null;
            try {
                uri = new URI(url);
                desktop.browse(uri);
            } catch (IOException ioe) {
                JOptionPane.showMessageDialog(parentComponent, ioe.getMessage(), Messages.getString(""VcMainFrame.msgTitleError""), JOptionPane.ERROR_MESSAGE);
            } catch (URISyntaxException use) {
                JOptionPane.showMessageDialog(parentComponent, use.getMessage(), Messages.getString(""VcMainFrame.msgTitleError""), JOptionPane.ERROR_MESSAGE);
            }
        }
    }","    private void goToWebsite(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }",1,0.9946282
"    public RMatrix transposed() {
        RMatrix m = new RMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }","    private static double[][] createCostMatrix(SimplePoint2d[] cities) {
        final int noCity = cities.length;
        double[][] dMat = new double[noCity][noCity];
        for (int i = 0; i < noCity; i++) {
            dMat[i][i] = 0.0;
            for (int j = i + 1; j < noCity; j++) {
                dMat[i][j] = SimplePoint2d.distance(cities[i], cities[j]);
                dMat[j][i] = dMat[i][j];
            }
        }
        return dMat;
    }",1,0.9951205
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public RealSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }",1,0.99634695
"            public void mouseClicked(MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(""http://trac.jsystemtest.org/wiki/DetailedOSProjectsList""));
                    } catch (Exception e) {
                        log.log(Level.WARNING, ""Failed openning browser to JSystem website: "" + e.getMessage());
                    }
                }
            }","            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    try {
                        if (Desktop.isDesktopSupported()) {
                            Desktop.getDesktop().browse(e.getURL().toURI());
                        } else Tools.openURL(e.getURL().toString());
                    } catch (Exception x) {
                        JOptionPane.showMessageDialog(module.getActions().getFrame(), x.getMessage());
                    }
                }
            }",1,0.99480957
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        int[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    @Override
    public Matrix transpose(Factory factory) {
        if (factory == null) throw new NullPointerException();
        double result[][] = new double[columns][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                result[j][i] = self[i][j];
            }
        }
        return factory.createMatrix(result);
    }",1,0.9983335
"    @Override
    public void actionPerformed(ActionEvent e) {
        if (Desktop.isDesktopSupported()) {
            Desktop d = Desktop.getDesktop();
            try {
                if (d.isSupported(Desktop.Action.BROWSE)) {
                    d.browse(new URI(""http://zdfmediathk.sourceforge.net/""));
                }
            } catch (Exception ex) {
            }
        }
    }","    public void help() {
        if (Desktop.isDesktopSupported()) {
            URI uri = URI.create(props.getProperty(""help.url""));
            try {
                Desktop.getDesktop().browse(uri);
            } catch (IOException ex) {
                logger.error(ex, ex);
            }
        }
    }",1,0.9975925
"    private void doAboutWeb() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(KlangConstants.KLANGEDITOR_URL_PROJECT));
                } catch (Exception err) {
                    err.printStackTrace();
                }
            }
        }
    }","        public void ejecutarSeleccionado() {
            String ruta = GestorCompartidos.getInstancia().getGestorDisco().getDirectorioCompletos() + ""/"" + _lblNombre.getText();
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop desktop = Desktop.getDesktop();
                    if (desktop.isSupported(Desktop.Action.BROWSE)) {
                        desktop.browse(new URI(ruta));
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }",1,0.9985874
"    public static LImage[][] reversalXandY(final LImage[][] array) {
        int col = array[0].length;
        int row = array.length;
        LImage[][] result = new LImage[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","    public RealSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }",1,0.9950946
"    public static void bubbleSort(int[] polje) {
        boolean swapped;
        int temp;
        int n = polje.length;
        do {
            swapped = false;
            n--;
            for (int i = 0; i < n - 1; i++) {
                if (polje[i] > polje[i + 1]) {
                    temp = polje[i];
                    polje[i] = polje[i + 1];
                    polje[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }","	public static void BubbleSortFloat2(float[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					float temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}",1,0.99020886
"    public static Double[][] transposeMatrix(Double[][] m) {
        int r = m.length;
        int c = m[0].length;
        Double[][] t = new Double[c][r];
        for (int i = 0; i < r; ++i) {
            for (int j = 0; j < c; ++j) {
                t[j][i] = m[i][j];
            }
        }
        return t;
    }","    public static int[][] reversalXandY(final int[][] array) {
        int col = array[0].length;
        int row = array.length;
        int[][] result = new int[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }",1,0.99864805
"    public static final float[][] transposeMatrix(float[][] a) {
        int ra = a.length;
        int ca = a[0].length;
        float[][] m = new float[ca][ra];
        for (int i = 0; i < ra; i++) {
            for (int j = 0; j < ca; j++) m[j][i] = a[i][j];
        }
        return m;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9978292
"    public void test_reset() {
        CRC32 crc = new CRC32();
        crc.update(1);
        assertEquals(""update(int) failed to update the checksum to the correct value "", 2768625435L, crc.getValue());
        crc.reset();
        assertEquals(""reset failed to reset the checksum value to zero"", 0, crc.getValue());
    }","    public void test_update$B() {
        byte byteArray[] = { 1, 2 };
        CRC32 crc = new CRC32();
        crc.update(byteArray);
        assertEquals(""update(byte[]) failed to update the checksum to the correct value "", 3066839698L, crc.getValue());
        crc.reset();
        byte byteEmpty[] = new byte[10000];
        crc.update(byteEmpty);
        assertEquals(""update(byte[]) failed to update the checksum to the correct value "", 1295764014L, crc.getValue());
    }",1,0.99597955
"            @Override
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == EventType.ACTIVATED && Desktop.isDesktopSupported()) {
                    try {
                        logger.info(""Url: "" + e.getDescription());
                        Desktop.getDesktop().browse(e.getURL().toURI());
                    } catch (Exception ex) {
                        logger.error(ex);
                    }
                }
            }","    @Override
    public void launchUpdate() {
        if (getUpdateUrl() != null && Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(getUpdateUrl().toURI());
            } catch (IOException e) {
                GroofyLogger.getInstance().logException(e);
            } catch (URISyntaxException e) {
                GroofyLogger.getInstance().logException(e);
            }
        }
    }",1,0.99742603
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static double[][] transpose(final double[][] m) {
        final double[][] mt = new double[m[0].length][m.length];
        for (int i = 0; i < mt.length; i++) {
            for (int j = 0; j < mt[i].length; j++) {
                mt[i][j] = m[j][i];
            }
        }
        return mt;
    }",1,0.99629694
"    private double[][] getInputColumn(double[][] vectors) {
        double[][] columns = new double[vectors[0].length][vectors.length];
        for (int i = 0; i < columns.length; i++) {
            for (int j = 0; j < columns[0].length; j++) {
                columns[i][j] = vectors[j][i];
            }
        }
        return columns;
    }","    private Object[][] transform(Object[][] src) {
        int col = src.length;
        int row = src[0].length;
        Object[][] dest = new Object[row][col];
        for (int i = 0; i < col; i++) {
            for (int j = 0; j < row; j++) {
                dest[j][i] = src[i][j];
            }
        }
        return dest;
    }",1,0.9969291
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static final double fibonacciNumber(int n) {
        if (n < 0) return Double.NaN;
        if (n == 0) return 0;
        if (n == 1) return 1;
        return fibonacciNumber(n - 1) + fibonacciNumber(n - 2);
    }",1,0.9969406
"    public Matrix transpose() {
        Matrix output = new Matrix(cols, rows);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                output.contents[j][i] = contents[i][j];
            }
        }
        return output;
    }","    public static double[][] transpose(final double[][] m) {
        final double[][] mt = new double[m[0].length][m.length];
        for (int i = 0; i < mt.length; i++) {
            for (int j = 0; j < mt[i].length; j++) {
                mt[i][j] = m[j][i];
            }
        }
        return mt;
    }",1,0.9970721
"    public static void bubbleSort(int[] a) {
        for (int i = a.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                if (a[j] > a[j + 1]) {
                    int tmp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = tmp;
                }
            }
        }
    }","    @DeclarePerfMonTimer(""SortingTest.bubbleSort"")
    private void bubbleSort(int values[]) {
        int len = values.length - 1;
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < len - i; j++) {
                if (values[j] > values[j + 1]) {
                    int tmp = values[j];
                    values[j] = values[j + 1];
                    values[j + 1] = tmp;
                }
            }
        }
    }",1,0.9980142
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                int t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }",1,0.99776787
"    public static double[][] transpose(double[][] a) {
        double[][] c = new double[3][3];
        for (int i = 0; i < 3; i++) {
            for (int k = 0; k < 3; k++) {
                c[i][k] = a[k][i];
            }
        }
        return c;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99713695
"    public Matrix transpose() {
        Matrix result = new Matrix(height, width);
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                result.elements[i][j] = elements[j][i];
            }
        }
        return result;
    }","    public static Element[][] transpose(Element[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                Element temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        return matrix;
    }",1,0.99781835
"    public static void synchronizeConnectionTable(int[][] contab) {
        int N = contab.length;
        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                contab[j][i] = contab[i][j];
            }
        }
    }","    private static double[][] createCostMatrix(SimplePoint2d[] cities) {
        final int noCity = cities.length;
        double[][] dMat = new double[noCity][noCity];
        for (int i = 0; i < noCity; i++) {
            dMat[i][i] = 0.0;
            for (int j = i + 1; j < noCity; j++) {
                dMat[i][j] = SimplePoint2d.distance(cities[i], cities[j]);
                dMat[j][i] = dMat[i][j];
            }
        }
        return dMat;
    }",1,0.99441284
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static double[][] transpose(final double[][] m) {
        final double[][] mt = new double[m[0].length][m.length];
        for (int i = 0; i < mt.length; i++) {
            for (int j = 0; j < mt[i].length; j++) {
                mt[i][j] = m[j][i];
            }
        }
        return mt;
    }",1,0.9962968
"    static final float[][] transposeMatrix(float[][] a) {
        int ra = a.length;
        int ca = a[0].length;
        float[][] m = new float[ca][ra];
        for (int i = 0; i < ra; i++) {
            for (int j = 0; j < ca; j++) m[j][i] = a[i][j];
        }
        return m;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99793965
"    public static AnimationHelper makeObject(String fileName, int row, int col, int tileWidth, int tileHeight) {
        String key = fileName.trim().toLowerCase();
        AnimationHelper animation = (AnimationHelper) animations.get(key);
        if (animation == null) {
            LTexture[][] images = TextureUtils.getSplit2Textures(fileName, tileWidth, tileHeight);
            LTexture[][] result = new LTexture[row][col];
            for (int y = 0; y < col; y++) {
                for (int x = 0; x < row; x++) {
                    result[x][y] = images[y][x];
                }
            }
            images = null;
            animations.put(key, animation = makeObject(result[0], result[1], result[2], result[3]));
        }
        return animation;
    }","    public static final double[][] transpose(double[][] a) {
        int am = a.length;
        int an = a[0].length;
        double[][] result = new double[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                result[j][i] = a[i][j];
            }
        }
        return result;
    }",1,0.9922873
"    public void actionPerformed(ActionEvent evt) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(HOMEPAGE));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }","        @Override
        public void actionPerformed(ActionEvent e) {
            if (Desktop.isDesktopSupported()) {
                Desktop d = Desktop.getDesktop();
                try {
                    if (d.isSupported(Desktop.Action.BROWSE)) {
                        d.browse(new URI(url));
                    }
                } catch (Exception ex) {
                    System.err.println(""DialogHinweis.BeobUrl: "" + ex.getMessage());
                }
            }
        }",1,0.9956545
"    public static int[][] createMatrix(List<String> list, List<Relation> ers) {
        int[][] adjMatrix = new int[list.size()][list.size()];
        for (int i = 0; i < list.size(); i++) {
            adjMatrix[i][i] = -1;
        }
        for (int i = 0; i < list.size(); i++) {
            for (int j = i + 1; j < list.size(); j++) {
                adjMatrix[i][j] = distance(list.get(i), list.get(j), ers);
            }
        }
        for (int i = 0; i < list.size(); i++) {
            for (int j = 0; j < i; j++) {
                adjMatrix[i][j] = adjMatrix[j][i];
            }
        }
        return adjMatrix;
    }","    public static double[][] dissim(int nrow, int ncol, double[] mass, double[][] A) {
        double[][] Adiss = new double[nrow][nrow];
        for (int i1 = 0; i1 < nrow; i1++) {
            for (int i2 = 0; i2 < nrow; i2++) {
                Adiss[i1][i2] = 0.0;
            }
        }
        for (int i1 = 0; i1 < nrow; i1++) {
            for (int i2 = 0; i2 < i1; i2++) {
                for (int j = 0; j < ncol; j++) {
                    Adiss[i1][i2] += 0.5 * Math.pow(A[i1][j] - A[i2][j], 2.0);
                }
                Adiss[i2][i1] = Adiss[i1][i2];
            }
        }
        return Adiss;
    }",1,0.99817705
"    @Override
    public void playSpotifySong(Track track) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(track.getId()));
            } catch (IOException e) {
                GroofyLogger.getInstance().logException(e);
            } catch (URISyntaxException e) {
                GroofyLogger.getInstance().logException(e);
            }
        }
    }","                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    Desktop desktop = null;
                                    if (Desktop.isDesktopSupported()) {
                                        desktop = Desktop.getDesktop();
                                        try {
                                            desktop.browse(uri);
                                        } catch (IOException ioe) {
                                            JOptionPane.showMessageDialog((Component) aggregator, ioe.getMessage());
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog((Component) aggregator, ""Hyperlinks not supported by OS."");
                                    }
                                }",1,0.9927048
"    private void bubbleSort(int values[]) {
        PerfMonTimer timerOuter = PerfMonTimer.start(""SortingTest.bubbleSort"");
        try {
            int len = values.length - 1;
            for (int i = 0; i < len; i++) {
                for (int j = 0; j < len - i; j++) {
                    if (values[j] > values[j + 1]) {
                        int tmp = values[j];
                        values[j] = values[j + 1];
                        values[j + 1] = tmp;
                    }
                }
            }
        } finally {
            PerfMonTimer.stop(timerOuter);
        }
    }","    public void sortingByBubble(int[] array) {
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array.length - 1 - i; j++) {
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }",1,0.9970466
"    public TypedObjectChoice randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            int tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    public void shuffle() {
        currentDeckPosition = 0;
        int n = 52;
        while (--n > 0) {
            int k = rand.nextInt(n + 1);
            int temp = deck[n];
            deck[n] = deck[k];
            deck[k] = temp;
        }
    }",1,0.9967231
"    public static Object expand(Object src, int increase, boolean bottom) {
        int size = Array.getLength(src);
        Object dest = Array.newInstance(src.getClass().getComponentType(), size + increase);
        System.arraycopy(src, 0, dest, (bottom) ? 0 : increase, size);
        return dest;
    }","    public static Object copyArray(Object array) {
        int len = Array.getLength(array);
        Object copy = Array.newInstance(array.getClass().getComponentType(), len);
        System.arraycopy(array, 0, copy, 0, len);
        return copy;
    }",1,0.99830043
"    public static double[][] transpose(double[][] M) {
        int lines = M.length;
        int columns = M[0].length;
        double[][] Mtrans = new double[columns][lines];
        for (int i = 0; i < lines; i++) {
            for (int j = 0; j < columns; j++) {
                Mtrans[j][i] = M[i][j];
            }
        }
        return Mtrans;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9980879
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(JCards.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + JCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + JCards.GPL_URL + ""' to view GPL"");
            }
        }","        public void ejecutarSeleccionado() {
            String ruta = GestorCompartidos.getInstancia().getGestorDisco().getDirectorioCompletos() + ""/"" + _lblNombre.getText();
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop desktop = Desktop.getDesktop();
                    if (desktop.isSupported(Desktop.Action.BROWSE)) {
                        desktop.browse(new URI(ruta));
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }",1,0.995675
"    public static double[][] transpose(double[][] a) {
        int rows = a.length;
        int cols = a[0].length;
        double[][] res = new double[cols][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                res[j][i] = a[i][j];
            }
        }
        return res;
    }","    public static double[][] calcTranspose(double[][] mat) {
        double[][] transpose = new double[mat[0].length][mat.length];
        for (int a = 0; a < transpose.length; a++) {
            for (int b = 0; b < transpose[0].length; b++) {
                transpose[a][b] = mat[b][a];
            }
        }
        return transpose;
    }",1,0.9972843
"            @Override
            public void mouseClicked(MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    try {
                        Desktop.getDesktop().browse(new URI(resourceMap.getString(""Application.homepage"")));
                    } catch (URISyntaxException urise) {
                        logger.log(Level.WARNING, ""Incorrect URI"", urise);
                    } catch (IOException ioe) {
                        logger.log(Level.WARNING, ""General IO Error"", ioe);
                    }
                }
            }","                public void actionPerformed(ActionEvent e) {
                    checkAndDisplayMessages();
                    if (Desktop.isDesktopSupported()) {
                        try {
                            URI uri = new URI(""https://www.google.com/voice/"");
                            Desktop.getDesktop().browse(uri);
                        } catch (URISyntaxException e1) {
                            e1.printStackTrace();
                        } catch (IOException e1) {
                            e1.printStackTrace();
                        }
                    }
                }",1,0.99581516
"    public static Double[][] transposeMatrix(Double[][] m) {
        int r = m.length;
        int c = m[0].length;
        Double[][] t = new Double[c][r];
        for (int i = 0; i < r; ++i) {
            for (int j = 0; j < c; ++j) {
                t[j][i] = m[i][j];
            }
        }
        return t;
    }","    public static double[][] transpose(double[][] M) {
        double[][] O = new double[M[0].length][M.length];
        for (int i = 0; i < M.length; i++) {
            for (int j = 0; j < M[0].length; j++) {
                O[j][i] = M[i][j];
            }
        }
        return O;
    }",1,0.9985281
"    public void getBrowser() {
        if (Desktop.isDesktopSupported()) {
            Desktop desk = Desktop.getDesktop();
            if (desk.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desk.browse(new URI(""http://code.google.com/p/gpsnutzung/""));
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        }
    }","            public void hyperlinkUpdate(HyperlinkEvent event) {
                if (HyperlinkEvent.EventType.ACTIVATED.equals(event.getEventType())) {
                    if (Desktop.isDesktopSupported()) {
                        Desktop desktop = Desktop.getDesktop();
                        if (desktop.isSupported(Desktop.Action.BROWSE)) {
                            try {
                                desktop.browse(event.getURL().toURI());
                            } catch (IOException e) {
                                log.error(""Cannot open URL"", e);
                            } catch (URISyntaxException e) {
                                log.error(""Cannot open URL"", e);
                            }
                        } else log.info(""Clicked on info URL, but no browser support detected"");
                    } else log.info(""Clicked on info URL, but no browser support detected"");
                }
            }",1,0.9972924
"    public static int[][] transpose(int[][] mat) {
        int[][] a = new int[mat[0].length][mat.length];
        for (int i = 0; i < mat[0].length; i++) {
            for (int j = 0; j < mat.length; j++) {
                a[i][j] = mat[j][i];
            }
        }
        return a;
    }","    public RealSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }",1,0.9965732
"    public float[][] transposeMatrix(float[][] a) {
        int n = a.length;
        int m = a[0].length;
        float[][] b = new float[m][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                b[j][i] = a[i][j];
            }
        }
        return (b);
    }","    public static double[][] transpose(final double[][] A) {
        int N = A.length;
        double[][] B = alloc(N, N);
        for (int r = 0; r < N; r++) {
            for (int c = 0; c < N; c++) {
                B[r][c] = A[c][r];
            }
        }
        return B;
    }",1,0.9962156
"    public void openSite(final URI uri) {
        if (Desktop.isDesktopSupported()) {
            final Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(uri);
                } catch (final IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }","    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
        }
    }",1,0.99741083
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","    public static double[][] transpose(final double[][] m) {
        final double[][] mt = new double[m[0].length][m.length];
        for (int i = 0; i < mt.length; i++) {
            for (int j = 0; j < mt[i].length; j++) {
                mt[i][j] = m[j][i];
            }
        }
        return mt;
    }",1,0.99708027
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public Matrix transpose() {
        Matrix matrix = new Matrix();
        matrix.m = new double[m[0].length][m.length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++) {
                matrix.m[j][i] = m[i][j];
            }
        }
        return matrix;
    }",1,0.99658525
"    public void removeJarFiles() throws IOException {
        HashSet<GridNode> nodes = (HashSet) batchTask.returnNodeCollection();
        Iterator<GridNode> ic = nodes.iterator();
        InetAddress addLocal = InetAddress.getLocalHost();
        String hostnameLocal = addLocal.getHostName();
        while (ic.hasNext()) {
            GridNode node = ic.next();
            String address = node.getPhysicalAddress();
            InetAddress addr = InetAddress.getByName(address);
            byte[] rawAddr = addr.getAddress();
            Map<String, String> attributes = node.getAttributes();
            InetAddress hostname = InetAddress.getByAddress(rawAddr);
            if (hostname.getHostName().equals(hostnameLocal)) continue;
            String gridPath = attributes.get(""GRIDGAIN_HOME"");
            FTPClient ftp = new FTPClient();
            try {
                String[] usernamePass = inputNodes.get(hostname.getHostName());
                ftp.connect(hostname);
                ftp.login(usernamePass[0], usernamePass[1]);
                int reply = ftp.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftp.disconnect();
                    System.err.println(""FTP server refused connection."");
                    continue;
                }
                ftp.login(usernamePass[0], usernamePass[1]);
                String directory = gridPath + ""/libs/ext/"";
                ftp.changeWorkingDirectory(directory);
                FTPFile[] fs = ftp.listFiles();
                for (FTPFile f : fs) {
                    if (f.isDirectory()) continue;
                    System.out.println(f.getName());
                    ftp.deleteFile(f.getName());
                }
                ftp.sendCommand(""rm *"");
                ftp.logout();
                ftp.disconnect();
            } catch (Exception e) {
                MessageCenter.getMessageCenter(BatchMainSetup.class).error(""Problems with the FTP connection."" + ""A file has not been succesfully transfered"", e);
                e.printStackTrace();
            }
        }
    }","    public void transferOutputFiles() throws IOException {
        HashSet<GridNode> nodes = (HashSet) batchTask.returnNodeCollection();
        Iterator<GridNode> ic = nodes.iterator();
        InetAddress addLocal = InetAddress.getLocalHost();
        String hostnameLocal = addLocal.getHostName();
        while (ic.hasNext()) {
            GridNode node = ic.next();
            String address = node.getPhysicalAddress();
            InetAddress addr = InetAddress.getByName(address);
            byte[] rawAddr = addr.getAddress();
            Map<String, String> attributes = node.getAttributes();
            InetAddress hostname = InetAddress.getByAddress(rawAddr);
            if (hostname.getHostName().equals(hostnameLocal)) continue;
            String[] usernamePass = inputNodes.get(hostname.getHostName());
            String gridPath = attributes.get(""GRIDGAIN_HOME"");
            FTPClient ftp = new FTPClient();
            ftp.connect(hostname);
            ftp.login(usernamePass[0], usernamePass[1]);
            int reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                System.err.println(""FTP server refused connection."");
                continue;
            }
            ftp.changeWorkingDirectory(gridPath + ""/bin"");
            ftp.setFileType(FTPClient.COMPRESSED_TRANSFER_MODE);
            ftp.setRemoteVerificationEnabled(false);
            ftp.setFileType(FTPClient.ASCII_FILE_TYPE);
            FTPFile[] fs = ftp.listFiles();
            for (FTPFile f : fs) {
                if (f.isDirectory()) continue;
                String fileName = f.getName();
                if (!fileName.endsWith("".txt"")) continue;
                System.out.println(f.getName());
                FileOutputStream out = new FileOutputStream(""../repast.simphony.distributedBatch/"" + ""remoteOutput/"" + f.getName());
                try {
                    ftp.retrieveFile(fileName, out);
                } catch (Exception e) {
                    continue;
                } finally {
                    if (out != null) out.close();
                }
            }
            ftp.logout();
            ftp.disconnect();
        }
    }",1,0.9997983
"    public static double[][] invertMatrix(double[][] matrix) {
        int firstDimentionOfResultMatrix = matrix[0].length;
        int secondDimentionOfResultMatrix = matrix.length;
        double[][] resultMatrix = new double[firstDimentionOfResultMatrix][secondDimentionOfResultMatrix];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                resultMatrix[j][i] = matrix[i][j];
            }
        }
        return resultMatrix;
    }","    public static double[][] triangularToComplete(double[][] omatrix) {
        int n = omatrix.length + 1;
        double[][] M = new double[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (i < j) {
                    M[i][j] = omatrix[i][j - 1 - i];
                    M[j][i] = M[i][j];
                }
            }
        }
        return M;
    }",1,0.99804175
"    public static Element[][] transpose(Element[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                Element temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        return matrix;
    }","    public static double[][] transpose(double[][] in) {
        assert in != null;
        int h = in.length;
        int w = in[0].length;
        double[][] out = new double[w][h];
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                out[x][y] = in[y][x];
            }
        }
        return out;
    }",1,0.9987408
"    public static double[][] Kendall(double[][] X) {
        double[][] output = new double[X.length][X.length];
        try {
            for (int i = 0; i < X.length; i++) {
                output[i][i] = 1.0;
                for (int j = 0; j < i; j++) {
                    output[i][j] = GeneUtils.kendalltau(X[i], X[j]);
                    output[j][i] = output[i][j];
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Statistic.class.getName()).log(Level.SEVERE, null, ex);
        }
        return output;
    }","    public static double[][] transpose(double[][] M) {
        int lines = M.length;
        int columns = M[0].length;
        double[][] Mtrans = new double[columns][lines];
        for (int i = 0; i < lines; i++) {
            for (int j = 0; j < columns; j++) {
                Mtrans[j][i] = M[i][j];
            }
        }
        return Mtrans;
    }",1,0.9946987
"    public FloatMatrix transpose() {
        FloatMatrix X = new FloatMatrix(n, m);
        float[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static double[][] transposeMatrix(double[][] vector) {
        double[][] tm = new double[vector[0].length][vector.length];
        for (int i = 0; i < tm.length; i++) {
            for (int j = 0; j < tm[i].length; j++) {
                tm[i][j] = vector[j][i];
            }
        }
        return tm;
    }",1,0.9952723
"    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                p(""IOException "");
                e.printStackTrace();
            }
        } else {
            System.out.println(""Desktop.isDesktopSupported() - NOT"");
        }
    }","        public void ejecutarSeleccionado() {
            String ruta = GestorCompartidos.getInstancia().getGestorDisco().getDirectorioCompletos() + ""/"" + _lblNombre.getText();
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop desktop = Desktop.getDesktop();
                    if (desktop.isSupported(Desktop.Action.BROWSE)) {
                        desktop.browse(new URI(ruta));
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }",1,0.99666804
"            public void actionPerformed(ActionEvent e) {
                String sql = ""select * from jadwalUjian where MP='"" + FieldNim.getText() + ""'"";
                try {
                    Connection connection = DriverManager.getConnection(""jdbc:odbc:db_Sekolah"");
                    Statement statement = connection.createStatement();
                    ResultSet rs = statement.executeQuery(sql);
                    if (rs.next()) {
                        FieldNama.setText(rs.getString(2));
                        FieldTtl.setText(rs.getString(3));
                        FieldJk.setText(rs.getString(4));
                        FieldNim.requestFocus();
                    } else {
                        FieldNim.setText("""");
                        FieldNama.setText("""");
                        FieldTtl.setText("""");
                        FieldJk.setText("""");
                        JOptionPane.showMessageDialog(frame, ""Maaf,Tidak Ada Data Jadwal Ujian yang bisa di Tampilkan..."", ""Cari Data"", JOptionPane.WARNING_MESSAGE);
                        FieldNim.requestFocus();
                    }
                    statement.close();
                    connection.close();
                } catch (Exception exc) {
                    System.err.println(""Error: "" + exc);
                }
            }","            public void actionPerformed(ActionEvent e) {
                String sql = ""insert into jadwalUjian values('"" + FieldNim.getText() + ""','"" + FieldNama.getText() + ""','"" + FieldTtl.getText() + ""','"" + FieldJk.getText() + ""')"";
                if (FieldNim.getText().trim().equals("""")) {
                    JOptionPane.showMessageDialog(frame, ""Nama Mata_Pelajaran Wajib di Isi"", ""Simpan Data"", JOptionPane.WARNING_MESSAGE);
                    FieldNim.requestFocus();
                } else {
                    try {
                        Connection connection = DriverManager.getConnection(""jdbc:odbc:db_Sekolah"");
                        Statement statement = connection.createStatement();
                        statement.executeUpdate(sql);
                        statement.close();
                        FieldNim.setText("""");
                        FieldNama.setText("""");
                        FieldTtl.setText("""");
                        FieldJk.setText("""");
                        JOptionPane.showMessageDialog(frame, ""Simpan berhasil"", ""Simpan Data"", JOptionPane.WARNING_MESSAGE);
                        FieldNim.requestFocus();
                        FieldNim.requestFocus();
                        FieldNim.requestFocus();
                    } catch (Exception exc) {
                        System.err.println(""Error : "" + exc);
                    }
                }
            }",1,0.9982629
"                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (Desktop.isDesktopSupported()) {
                            Desktop desktop = Desktop.getDesktop();
                            try {
                                desktop.browse(new URI(""http://acts202.sourceforge.net""));
                                d.dispose();
                            } catch (IOException e1) {
                            } catch (URISyntaxException e2) {
                            }
                        } else {
                        }
                    }","            @Override
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    if (Desktop.isDesktopSupported()) {
                        Desktop desktop = Desktop.getDesktop();
                        if (desktop.isSupported(Desktop.Action.BROWSE)) {
                            try {
                                URI uri = e.getURL().toURI();
                                desktop.browse(uri);
                            } catch (URISyntaxException ex) {
                                System.err.println(""A link in the description.html is not correct: "" + e.getURL());
                            } catch (IOException ex) {
                                System.err.println(""Cannot navigate to link since a default program is not set or does not exist."");
                            }
                        }
                    }
                }
            }",1,0.9936774
"    private static long[][] transposeMatrix(long[][] A) {
        long[][] result = cloneMatrix(A);
        for (int i = 0; i < A.length; i++) {
            for (int j = 0; j < A[i].length; j++) {
                result[i][j] = A[j][i];
            }
        }
        return result;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9977848
"    public static Image[][] reversalXandY(final Image[][] array) {
        int col = array[0].length;
        int row = array.length;
        Image[][] result = new Image[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","    public static final float[][] transposeMatrix(float[][] a) {
        int ra = a.length;
        int ca = a[0].length;
        float[][] m = new float[ca][ra];
        for (int i = 0; i < ra; i++) {
            for (int j = 0; j < ca; j++) m[j][i] = a[i][j];
        }
        return m;
    }",1,0.99677294
"            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }","    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }",1,0.9979912
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    @Override
    public Matrix transpose(Factory factory) {
        if (factory == null) throw new NullPointerException();
        double result[][] = new double[columns][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                result[j][i] = self[i][j];
            }
        }
        return factory.createMatrix(result);
    }",1,0.9984374
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public Matrix transpose() {
        Matrix matrixT = new Matrix(columnCount, rowCount);
        int i, j;
        for (i = 0; i < rowCount; i++) {
            for (j = 0; j < columnCount; j++) {
                matrixT.matrix[j][i] = matrix[i][j];
            }
        }
        return matrixT;
    }",1,0.99897325
"    public static Object resizeArray(Object old, int newLength) {
        int oldLength = Array.getLength(old);
        Class elementType = old.getClass().getComponentType();
        Object newArray = Array.newInstance(elementType, newLength);
        int upto = (oldLength < newLength) ? oldLength : newLength;
        System.arraycopy(old, 0, newArray, 0, upto);
        return newArray;
    }","    private static Object extendArray(Object a1) {
        int n = Array.getLength(a1);
        Object a2 = Array.newInstance(a1.getClass().getComponentType(), n + ARRAY_SIZE_INCREMENT);
        System.arraycopy(a1, 0, a2, 0, n);
        return a2;
    }",1,0.9979127
"    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }","            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }",1,0.9979912
"    public ISpieler[] sortiereSpielerRamsch(ISpieler[] spieler) {
        for (int i = 0; i < spieler.length; i++) {
            for (int j = 0; j < spieler.length - 1; j++) {
                if (werteAugen(spieler[j].getStiche()) > werteAugen(spieler[j + 1].getStiche())) {
                    ISpieler a = spieler[j];
                    spieler[j] = spieler[j + 1];
                    spieler[j + 1] = a;
                }
            }
        }
        return spieler;
    }","    @DeclarePerfMonTimer(""SortingTest.bubbleSort"")
    private void bubbleSort(int values[]) {
        int len = values.length - 1;
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < len - i; j++) {
                if (values[j] > values[j + 1]) {
                    int tmp = values[j];
                    values[j] = values[j + 1];
                    values[j + 1] = tmp;
                }
            }
        }
    }",1,0.99754906
"    public IntSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        int[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.996315
"    public static double[][] transpose(double[][] a) {
        double[][] c = new double[3][3];
        for (int i = 0; i < 3; i++) {
            for (int k = 0; k < 3; k++) {
                c[i][k] = a[k][i];
            }
        }
        return c;
    }","    public static double[][] getCorrelations(double[][] v) {
        double[][] c = new double[v.length][v.length];
        for (int i = 0; i < v.length - 1; i++) {
            for (int j = i + 1; j < v.length; j++) {
                c[i][j] = Pearson.calcCorrelation(v[i], v[j]);
                c[j][i] = c[i][j];
            }
        }
        return c;
    }",1,0.9968103
"    public static final int[][] transpose(final int m1[][]) {
        int[][] m3 = new int[m1[0].length][m1.length];
        for (int ii = 0; ii < m1.length; ii++) for (int jj = 0; jj < m1[ii].length; jj++) m3[jj][ii] = m1[ii][jj];
        return m3;
    }","    public static byte[][] transpose(byte[][] m) {
        byte[][] n = new byte[m[0].length][m.length];
        for (int j = 0; j < m.length; j++) for (int i = 0; i < m[0].length; i++) n[i][j] = m[j][i];
        return n;
    }",1,0.9978624
"    public static double[][] transpose(double[][] doubleBox) {
        YeriDebug.ASSERT(CollectionsToolkit.isRectangular(doubleBox));
        double[][] returnBox = new double[doubleBox[0].length][doubleBox.length];
        for (int i = 0; i < doubleBox.length; i++) {
            for (int j = 0; j < doubleBox[i].length; j++) {
                returnBox[j][i] = doubleBox[i][j];
            }
        }
        return returnBox;
    }","    public RealSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",1,0.9958353
"    protected static float[][] trans(float[][] a) {
        int am = a.length;
        int an = a[0].length;
        float[][] t = new float[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                t[j][i] = a[i][j];
            }
        }
        return t;
    }","    public FloatMatrix transpose() {
        FloatMatrix X = new FloatMatrix(n, m);
        float[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99630034
"            @Override
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == EventType.ACTIVATED && Desktop.isDesktopSupported()) {
                    try {
                        logger.info(""Url: "" + e.getDescription());
                        Desktop.getDesktop().browse(e.getURL().toURI());
                    } catch (Exception ex) {
                        logger.error(ex);
                    }
                }
            }","            public void actionPerformed(ActionEvent e) {
                if (Desktop.isDesktopSupported()) {
                    try {
                        Desktop.getDesktop().browse(new URI(""http://popcornforum.de/forumdisplay.php?fid=67""));
                    } catch (Exception exc) {
                        JOptionPane.showMessageDialog(null, ""Could not acces http://popcornforum.de/forumdisplay.php?fid=67"", ""Error"", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }",1,0.99829984
"    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                int t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }","    public static String[][] transpose(String[][] object) {
        String[][] transpose = new String[object[0].length][object.length];
        for (int i = 0; i < object.length; i++) {
            for (int x = 0; x < transpose.length; x++) {
                transpose[x][i] = object[i][x];
            }
        }
        return transpose;
    }",1,0.9970298
"    public void bubblesort(String filenames[]) {
        for (int i = filenames.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                String temp;
                if (filenames[j].compareTo(filenames[j + 1]) > 0) {
                    temp = filenames[j];
                    filenames[j] = filenames[j + 1];
                    filenames[j + 1] = temp;
                }
            }
        }
    }","    public void sort(int[] mas) {
        int temp;
        boolean t = true;
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    temp = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = temp;
                    t = true;
                }
            }
        }
    }",1,0.9975357
"    public CMatrix transpose() {
        CMatrix X = new CMatrix(n, m);
        Complex[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public IntSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }",1,0.99680847
"    public static double[][] transpose(double[][] data) {
        double[][] dataTransposed = new double[0][0];
        if (data != null) {
            int numRows = data.length;
            if (numRows > 0) {
                int numCols = data[0].length;
                dataTransposed = new double[numCols][numRows];
                for (int i = 0; i < numRows; i++) {
                    for (int j = 0; j < numCols; j++) {
                        dataTransposed[j][i] = data[i][j];
                    }
                }
            }
        }
        return dataTransposed;
    }","    public FloatMatrix transpose() {
        FloatMatrix X = new FloatMatrix(n, m);
        float[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9956959
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static double[][] transpose(double[][] M) {
        double[][] tM = new double[M[0].length][M.length];
        for (int i = 0; i < tM.length; i++) {
            for (int j = 0; j < tM[0].length; j++) {
                tM[i][j] = M[j][i];
            }
        }
        return tM;
    }",1,0.9966319
"    private void openItemActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == openItem) {
            int returnVal = fc.showOpenDialog(Demarcations.this);
            treeFile = null;
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                inputFile = fc.getSelectedFile();
                if (!BinningFasta.verifyInputFile(inputFile)) {
                    log.append(""That is not a valid fasta file, please choose"" + "" a properly formatted fasta file.\n"");
                    return;
                }
                (new Thread() {

                    public void run() {
                        runTree();
                    }
                }).start();
            } else {
                log.append(""Dialog Cancelled by User.\n"");
            }
        }
    }","    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == saveFile) {
            int returnVal = fc.showSaveDialog(ParameterSolutions.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File userFile = fc.getSelectedFile();
                String path = userFile.getPath();
                if (!((path.substring(path.length() - 4, path.length())).equals("".cpm""))) userFile = new File(userFile.getPath() + "".cpm"");
                log.append(""Saving to: "" + userFile.getName() + ""\n"");
                narr.println(""Saving to: "" + userFile.getName());
                if (!saveFile(userFile)) {
                    log.append(""Please run up to hillclimbing before"" + "" saving to a file.\n"");
                }
            } else {
                log.append(""Dialog Cancelled by User.\n"");
            }
        }
    }",1,0.9986609
"    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }","    public static MathComplexMatrix Transpone(MathComplexMatrix matrix) {
        int m = matrix.getM();
        int n = matrix.getN();
        Complex[][] mData = matrix.getAllItems();
        Complex[][] newData = new Complex[n][m];
        for (int ni = 0; ni < n; ni++) {
            for (int mi = 0; mi < m; mi++) {
                newData[ni][mi] = mData[mi][ni];
            }
        }
        return new MathComplexMatrix(newData);
    }",1,0.99384546
"    public void accueil() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                _frameMain._statusBar.isWork(true);
                try {
                    desktop.browse(new URI(TEXT_URL_APPLICATION));
                    _frameMain._statusBar.setStatusText(TEXT_OUVERTURE_URL_APPLICATION);
                } catch (URISyntaxException ex) {
                    Logger.getLogger(MenuAction.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(MenuAction.class.getName()).log(Level.SEVERE, null, ex);
                }
                _frameMain._statusBar.isWork(false);
            }
        }
    }","                        public void run() {
                            if (Desktop.isDesktopSupported()) {
                                Desktop desktop = Desktop.getDesktop();
                                if (desktop.isSupported(Desktop.Action.BROWSE)) {
                                    try {
                                        desktop.browse(URI.create(""http://drop.to/goblin""));
                                    } catch (Exception exc) {
                                        System.err.println(""Nije omoguceno krstarenje Internetom"");
                                    }
                                }
                            }
                        }",1,0.99405944
"    public static int binarySearch(Object[] a, Object key) {
        int low = 0;
        int high = a.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            Object midVal = a[mid];
            int cmp = ((Comparable) midVal).compareTo(key);
            if (cmp < 0) low = mid + 1; else if (cmp > 0) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }","    public int binarySearchFromTo(boolean key, int from, int to) {
        int low = from;
        int high = to;
        int intKey = toInt(key);
        while (low <= high) {
            int mid = (low + high) / 2;
            boolean midVal = get(mid);
            if (toInt(midVal) < intKey) low = mid + 1; else if (toInt(midVal) > intKey) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }",1,0.9987277
"            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (Desktop.isDesktopSupported() && e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    try {
                        Desktop desktop = Desktop.getDesktop();
                        desktop.browse(e.getURL().toURI());
                    } catch (IOException ex) {
                        Logger.getLogger(KeySizeChooser.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (URISyntaxException ex) {
                        Logger.getLogger(KeySizeChooser.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }","        public void hyperlinkUpdate(HyperlinkEvent evt) {
            if (evt.getSource() == jta) {
                if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    try {
                        if (Desktop.isDesktopSupported()) Desktop.getDesktop().browse(new URI(evt.getURL().toString()));
                    } catch (IOException e1) {
                        JOptionPane.showMessageDialog(null, e1.getMessage(), ""Error"", JOptionPane.ERROR_MESSAGE);
                    } catch (URISyntaxException e2) {
                        JOptionPane.showMessageDialog(null, e2.getMessage(), ""Error"", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }",1,0.99863166
"    static void BuildSqSymmBasisMatrix(double[][] lSVsqss, int lnv, double[][] lelectrodesub, int lnChan) {
        for (int j = 0; j < lnv; j++) {
            for (int k = 0; k <= j; k++) {
                lSVsqss[j][k] = Dot(lelectrodesub[j], lelectrodesub[k], lnChan);
                if (k != j) lSVsqss[k][j] = lSVsqss[j][k];
            }
        }
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9961388
"    public static double[][] transpose(double[][] a) {
        int rows = a.length;
        int cols = a[0].length;
        double[][] res = new double[cols][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                res[j][i] = a[i][j];
            }
        }
        return res;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9980303
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static String[][] dimTransform(String[][] obj) {
        if ((obj == null) || (obj.length <= 0)) {
            return null;
        }
        String[][] newArr = new String[obj[0].length][obj.length];
        for (int i = 0; i < newArr.length; ++i) {
            for (int j = 0; j < obj.length; ++j) {
                newArr[i][j] = obj[j][i];
            }
        }
        return newArr;
    }",1,0.9969466
"    private void launchLocalFile() {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop desktop = Desktop.getDesktop();
                desktop.browse(getCurrentFile().toURI());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ""Could not display file."");
            }
        }
    }","    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
        }
    }",1,0.9975315
"    public static int[][] reversalXandY(final int[][] array) {
        int col = array[0].length;
        int row = array.length;
        int[][] result = new int[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9966638
"    public String fetchSpecificText(String regularExpress, String contents) {
        String resultStr = """";
        try {
            Pattern p = Pattern.compile(regularExpress);
            Matcher matcher = p.matcher(contents);
            String startTag = regularExpress.substring(0, regularExpress.indexOf(""[""));
            String endTag = regularExpress.substring(regularExpress.indexOf(""]""), regularExpress.length());
            while (matcher.find()) {
                int start = matcher.start();
                int end = matcher.end();
                String match = contents.substring(start, end);
                resultStr = match.replaceAll(startTag, """").replaceAll(endTag, """");
            }
        } catch (Exception ex) {
            this.logAffectuException(ex, ""fetchSpecificText出错:"" + contents);
        }
        return resultStr;
    }","    private void highlight(String styleName, String regex) {
        Document doc = m_textPane.getDocument();
        Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);
        try {
            CharSequence text = doc.getText(0, doc.getLength());
            Matcher matcher = pattern.matcher(text);
            while (matcher.find()) {
                int start = matcher.start();
                int end = matcher.end();
                GuiUtil.setStyle(m_textPane, start, end - start, styleName);
            }
        } catch (BadLocationException e) {
            assert false;
        }
    }",1,0.9967636
"    public static int[][] mergeColumns(int[]... x) {
        int[][] array = new int[x[0].length][x.length];
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                array[i][j] = x[j][i];
            }
        }
        return array;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99750876
"    @Override
    public void hyperlinkUpdate(HyperlinkEvent event) {
        if (event.getEventType() == HyperlinkEvent.EventType.ENTERED) {
        } else if (event.getEventType() == HyperlinkEvent.EventType.EXITED) {
        } else if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            try {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    desktop.browse(event.getURL().toURI());
                }
            } catch (URISyntaxException ex) {
                Exceptions.printStackTrace(ex);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }","                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    Desktop desktop = null;
                                    if (Desktop.isDesktopSupported()) {
                                        desktop = Desktop.getDesktop();
                                        try {
                                            desktop.browse(uri);
                                        } catch (IOException ioe) {
                                            ErrorDialog.show(ioe);
                                        }
                                    } else {
                                        JOptionPane.showInputDialog(desktop, ""Hyperlinks not supported by OS."");
                                    }
                                }",1,0.9902763
"    public float[][] transposeMatrix(float[][] a) {
        int n = a.length;
        int m = a[0].length;
        float[][] b = new float[m][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                b[j][i] = a[i][j];
            }
        }
        return (b);
    }","    @Override
    public Matrix transpose(Factory factory) {
        if (factory == null) throw new NullPointerException();
        double result[][] = new double[columns][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                result[j][i] = self[i][j];
            }
        }
        return factory.createMatrix(result);
    }",1,0.99824023
"    public void changeSData() {
        String[][] fTempData = new String[sData[0].length][sData.length];
        for (int i = 0; i < sData.length; i++) for (int j = 0; j < sData[0].length; j++) fTempData[j][i] = sData[i][j];
        sData = fTempData;
    }","    public static double[][] invert(double[][] matrix) {
        double[][] result = new double[matrix[0].length][matrix.length];
        for (int row = 0; row < matrix.length; row++) for (int col = 0; col < matrix[row].length; col++) result[col][row] = result[row][col];
        return result;
    }",1,0.9967469
"    public static double[][] Transpose(double[][] a) {
        if (logger.isLoggable(Level.FINEST)) {
            logger.finest(""Performing Transpose..."");
        }
        int tms = a.length;
        double m[][] = new double[tms][tms];
        for (int i = 0; i < tms; i++) {
            for (int j = 0; j < tms; j++) {
                m[i][j] = a[j][i];
            }
        }
        return m;
    }","    public static LImage[][] reversalXandY(final LImage[][] array) {
        int col = array[0].length;
        int row = array.length;
        LImage[][] result = new LImage[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }",1,0.99661225
"    static void sort(int[] a) {
        int i = 0;
        while (i < a.length - 1) {
            int j = 0;
            while (j < (a.length - i) - 1) {
                if (a[j] > a[j + 1]) {
                    int aux = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = aux;
                }
                j = j + 1;
            }
            i = i + 1;
        }
    }","    void bubbleSort(int[] a) {
        int i = 0;
        int j = a.length - 1;
        int aux = 0;
        int stop = 0;
        while (stop == 0) {
            stop = 1;
            i = 0;
            while (i < j) {
                if (a[i] > a[i + 1]) {
                    aux = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = aux;
                    stop = 0;
                }
                i = i + 1;
            }
            j = j - 1;
        }
    }",1,0.99837905
"    private int[][] balanceMatchDayMatrix(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = i + 1; j < matrix.length; j++) {
                if (matrix[i][j] % 2 != 0) {
                    int tmp = matrix[i][j];
                    matrix[i][j] = matrix[j][i];
                    matrix[j][i] = tmp;
                }
            }
        }
        return matrix;
    }","    public RealSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",1,0.9959077
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public Matrix transpose() {
        Matrix matrixT = new Matrix(columnCount, rowCount);
        int i, j;
        for (i = 0; i < rowCount; i++) {
            for (j = 0; j < columnCount; j++) {
                matrixT.matrix[j][i] = matrix[i][j];
            }
        }
        return matrixT;
    }",1,0.99897325
"    private Object[][] transform(Object[][] src) {
        int col = src.length;
        int row = src[0].length;
        Object[][] dest = new Object[row][col];
        for (int i = 0; i < col; i++) {
            for (int j = 0; j < row; j++) {
                dest[j][i] = src[i][j];
            }
        }
        return dest;
    }","    public void transpose() {
        double[][] new_data = new double[size_y][size_x];
        for (int i = 0; i < size_x; i++) {
            for (int j = 0; j < size_y; j++) {
                new_data[j][i] = data[i][j];
            }
        }
        int dummy = size_x;
        size_x = size_y;
        size_y = dummy;
        data = new_data;
    }",1,0.99586725
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","    public static double[][] mergeColumns(double[]... x) {
        double[][] array = new double[x[0].length][x.length];
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                array[i][j] = x[j][i];
            }
        }
        return array;
    }",1,0.99815035
"    public static Image[][] getFlipHorizintalImage2D(Image[][] pixels) {
        int w = pixels.length;
        int h = pixels[0].length;
        Image pixel[][] = new Image[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                pixel[i][j] = pixels[j][i];
            }
        }
        return pixel;
    }","    @Override
    public Matrix transpose(Factory factory) {
        if (factory == null) throw new NullPointerException();
        double result[][] = new double[columns][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                result[j][i] = self[i][j];
            }
        }
        return factory.createMatrix(result);
    }",1,0.99752027
"    public static double[][] transpose(double[][] doubleBox) {
        YeriDebug.ASSERT(CollectionsToolkit.isRectangular(doubleBox));
        double[][] returnBox = new double[doubleBox[0].length][doubleBox.length];
        for (int i = 0; i < doubleBox.length; i++) {
            for (int j = 0; j < doubleBox[i].length; j++) {
                returnBox[j][i] = doubleBox[i][j];
            }
        }
        return returnBox;
    }","    private int[][] balanceMatchDayMatrix(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = i + 1; j < matrix.length; j++) {
                if (matrix[i][j] % 2 != 0) {
                    int tmp = matrix[i][j];
                    matrix[i][j] = matrix[j][i];
                    matrix[j][i] = tmp;
                }
            }
        }
        return matrix;
    }",1,0.99712646
"    public static double[][] transpose(double[][] a) {
        double[][] c = new double[3][3];
        for (int i = 0; i < 3; i++) {
            for (int k = 0; k < 3; k++) {
                c[i][k] = a[k][i];
            }
        }
        return c;
    }","    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }",1,0.99782526
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static Double[][] transpor(Double[][] matriz) {
        validarMatriz(matriz);
        Double[][] transposta = new Double[matriz[0].length][matriz.length];
        for (int x = 0; x < matriz.length; x++) {
            Double[] linha = matriz[x];
            for (int y = 0; y < linha.length; y++) {
                transposta[y][x] = matriz[x][y];
            }
        }
        return transposta;
    }",1,0.997119
"    File createJar() throws IOException {
        byte[] dummy_data = new byte[10];
        File f = new File(""a b.jar"");
        OutputStream out = new FileOutputStream(f);
        try {
            JarOutputStream jar = new JarOutputStream(out);
            jar.putNextEntry(new ZipEntry(""dummy.class""));
            jar.write(dummy_data);
            jar.close();
        } finally {
            out.close();
        }
        return f;
    }","    File createJar(String name, String... entries) throws IOException {
        File jar = new File(name);
        OutputStream out = new FileOutputStream(jar);
        try {
            JarOutputStream jos = new JarOutputStream(out);
            for (String e : entries) {
                jos.putNextEntry(new ZipEntry(e));
                jos.write(e.getBytes());
            }
            jos.close();
        } finally {
            out.close();
        }
        return jar;
    }",1,0.99819434
"    public static void main(String[] args) {
        System.out.println(""Chapter 2 example 4: Negative leading"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0204.pdf""));
            document.open();
            document.add(new Phrase(16, ""\n\n\n""));
            document.add(new Phrase(-16, ""Hello, this is a very long phrase to show you the somewhat odd effect of a negative leading. You can write from bottom to top. This is not fully supported. It's something between a feature and a bug.""));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public static void main(String[] args) {
        System.out.println(""True Types (embedded)"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""truetype.pdf""));
            document.open();
            BaseFont bfComic = BaseFont.createFont(""c:\\windows\\fonts\\comic.ttf"", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
            Font font = new Font(bfComic, 12);
            String text1 = ""This is the quite popular True Type font 'Comic'."";
            String text2 = ""Some greek characters: ΓΔζ"";
            String text3 = ""Some cyrillic characters: Ия"";
            document.add(new Paragraph(text1, font));
            document.add(new Paragraph(text2, font));
            document.add(new Paragraph(text3, font));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",1,0.9976989
"    public static double[][] transpose(final double[][] m) {
        final double[][] mt = new double[m[0].length][m.length];
        for (int i = 0; i < mt.length; i++) {
            for (int j = 0; j < mt[i].length; j++) {
                mt[i][j] = m[j][i];
            }
        }
        return mt;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99629694
"    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }","	public static void openURL(URI uri) throws IOException, URISyntaxException {
		if(Desktop.isDesktopSupported()) {
			Desktop desktop = Desktop.getDesktop();
			desktop.browse(uri);
		} else {
			throw new UnsupportedOperationException(""Desktop is not supported on this platform."");
		}
	}",1,0.9916119
"    public static float[][] Transpose(float[][] a) {
        int righe = a.length;
        int colonne = a[0].length;
        float m[][] = new float[colonne][righe];
        for (int i = 0; i < colonne; i++) for (int j = 0; j < righe; j++) {
            m[i][j] = a[j][i];
        }
        return m;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.997749
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public Matrix transpose() {
        Matrix matrixT = new Matrix(columnCount, rowCount);
        int i, j;
        for (i = 0; i < rowCount; i++) {
            for (j = 0; j < columnCount; j++) {
                matrixT.matrix[j][i] = matrix[i][j];
            }
        }
        return matrixT;
    }",1,0.9989732
"	public static void BubbleSortFloat1(float[] num) {
		boolean flag = true; // set flag to true to begin first pass
		float temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}","	public static void BubbleSortFloat2(float[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					float temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}",1,0.99664086
"    public void run() throws Exception {
        logger.debug(""#run enter"");
        logger.debug(""#run lineId : "" + lineId);
        logger.debug(""#run quantityNew : "" + quantityNew);
        logger.debug(""#run priceNew : "" + priceNew);
        ResultSet rs = null;
        PreparedStatement ps = null;
        try {
            connection.setAutoCommit(false);
            Integer itemId = null;
            Integer quantity = null;
            ps = connection.prepareStatement(SQL_SELECT_ORDER_LINE);
            ps.setInt(1, lineId);
            rs = ps.executeQuery();
            while (rs.next()) {
                itemId = rs.getInt(""ITEM_ID"");
                quantity = rs.getInt(""QUANTITY"");
            }
            rs.close();
            ps.close();
            ps = connection.prepareStatement(SQL_UPDATE_ITEM_BALANCE);
            ps.setInt(1, quantityNew - quantity);
            ps.setInt(2, itemId);
            ps.executeUpdate();
            ps = connection.prepareStatement(SQL_UPDATE_ORDER_LINE);
            ps.setDouble(1, priceNew);
            ps.setInt(2, quantityNew);
            ps.setInt(3, lineId);
            ps.executeUpdate();
            ps.close();
            ps.close();
            connection.commit();
        } catch (SQLException ex) {
            logger.error(""SQLException"", ex);
            connection.rollback();
            throw new Exception(""Не удалось обновить позицию в заказе. Ошибка : "" + ex.getMessage());
        } finally {
            connection.setAutoCommit(true);
        }
        logger.debug(""#run exit"");
    }","    public void run() throws Exception {
        logger.debug(""#run enter"");
        PreparedStatement psNextId = null;
        ResultSet rsNextId = null;
        PreparedStatement ps = null;
        try {
            PreparedStatement psCount = connection.prepareStatement(COUNT_ACTIVE_ORDERS);
            psCount.setString(1, login);
            ResultSet rsCount = psCount.executeQuery();
            if (rsCount.next()) {
                Integer count = rsCount.getInt(1);
                if (count > 0) {
                    DBHelper.closeAll(null, rsCount, psCount);
                    throw new RuntimeException(""У вас уже есть один активный заказ. Вы не можете создать второй."");
                }
            }
            connection.setAutoCommit(false);
            psNextId = connection.prepareStatement(NEXT_ORDER);
            rsNextId = psNextId.executeQuery();
            if (rsNextId.next()) {
                orderId = rsNextId.getInt(1);
            }
            rsNextId.close();
            psNextId.close();
            logger.info(""#run orderId  = "" + orderId);
            ps = connection.prepareStatement(INSERT_ORDER);
            ps.setInt(1, orderId);
            if (order.getCustomerId() != null) {
                ps.setInt(2, order.getCustomerId());
            } else {
                ps.setNull(2, Types.INTEGER);
            }
            ps.setString(3, order.getSellerLogin());
            ps.executeUpdate();
            ps.close();
            logger.info(""#run order insert OK"");
            Iterator<OrderLine> lines = order.getLines().iterator();
            while (lines.hasNext()) {
                OrderLine line = lines.next();
                CreateOrderLineAction action = new CreateOrderLineAction();
                action.execute(connection, orderId, line);
            }
            connection.commit();
        } catch (SQLException ex) {
            logger.error(""SQLException"", ex);
            connection.rollback();
            throw new Exception(""Не удалось создать заказ. Ошибка : "" + ex.getMessage());
        } finally {
            connection.setAutoCommit(true);
        }
        logger.debug(""#run exit"");
    }",1,0.9973259
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public float[][] transposeMatrix(float[][] mat) {
        float[][] transmat = createNullMatrix(mat[0].length, mat.length);
        for (int i = 0; i < mat.length; i++) {
            for (int j = 0; j < mat[i].length; j++) {
                transmat[j][i] = mat[i][j];
            }
        }
        return transmat;
    }",1,0.99775827
"    public static Double[][] transpor(Double[][] matriz) {
        validarMatriz(matriz);
        Double[][] transposta = new Double[matriz[0].length][matriz.length];
        for (int x = 0; x < matriz.length; x++) {
            Double[] linha = matriz[x];
            for (int y = 0; y < linha.length; y++) {
                transposta[y][x] = matriz[x][y];
            }
        }
        return transposta;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99711895
"    public static Object[] concat(Object[] source, Object[] objs) {
        Object[] copy = (Object[]) Array.newInstance(source.getClass().getComponentType(), source.length + objs.length);
        System.arraycopy(source, 0, copy, 0, source.length);
        System.arraycopy(objs, 0, copy, source.length, objs.length);
        return copy;
    }","    public static <T> T[] arrayCopy(T[] array) {
        T[] copy = (T[]) Array.newInstance(array.getClass().getComponentType(), array.length);
        System.arraycopy(array, 0, copy, 0, array.length);
        return copy;
    }",1,0.9975362
"            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    try {
                        if (Desktop.isDesktopSupported()) {
                            Desktop.getDesktop().browse(e.getURL().toURI());
                        } else Tools.openURL(e.getURL().toString());
                    } catch (Exception x) {
                        x.printStackTrace();
                    }
                }
            }","                public void actionPerformed(ActionEvent e) {
                    if (Desktop.isDesktopSupported()) {
                        try {
                            Desktop.getDesktop().browse(monitor.getBuildURI(e.getActionCommand()));
                        } catch (IOException err) {
                        }
                    }
                }",1,0.9983767
"    public static int[][] reversalXandY(final int[][] array) {
        int col = array[0].length;
        int row = array.length;
        int[][] result = new int[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9966638
"    public static void main(String[] args) {
        System.out.println(""Chapter 1 example 2: PageSize"");
        Rectangle pageSize = new Rectangle(144, 720);
        pageSize.setBackgroundColor(new java.awt.Color(0xFF, 0xFF, 0xDE));
        Document document = new Document(pageSize);
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0102.pdf""));
            document.open();
            for (int i = 0; i < 5; i++) {
                document.add(new Paragraph(""Hello World""));
            }
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public static void main(String[] args) {
        System.out.println(""Chapter 6 example 1: Adding a Gif, Jpeg and Png-file using urls"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0601.pdf""));
            HtmlWriter.getInstance(document, new FileOutputStream(""Chap0601.html""));
            document.open();
            Image gif = Image.getInstance(new URL(""http://www.lowagie.com/iText/tutorial/vonnegut.gif""));
            Image jpeg = Image.getInstance(new URL(""http://www.lowagie.com/iText/tutorial/myKids.jpg""));
            Image png = Image.getInstance(new URL(""http://www.lowagie.com/iText/tutorial/hitchcock.png""));
            document.add(gif);
            document.add(jpeg);
            document.add(png);
        } catch (MalformedURLException mue) {
            System.err.println(mue.getMessage());
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",1,0.99831724
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public int calculate(int x) {
        if (x < 0) throw new IllegalArgumentException(""positive numbers only"");
        if (x <= 1) return x;
        return calculate(x - 1) + calculate(x - 2);
    }",1,0.9980809
"    private void sort() {
        boolean unsortiert = true;
        Datei tmp = null;
        while (unsortiert) {
            unsortiert = false;
            for (int i = 0; i < this.size - 1; i++) {
                if (dateien[i] != null && dateien[i + 1] != null) {
                    if (dateien[i].compareTo(dateien[i + 1]) < 0) {
                        tmp = dateien[i];
                        dateien[i] = dateien[i + 1];
                        dateien[i + 1] = tmp;
                        unsortiert = true;
                    }
                }
            }
        }
    }","    public void sortArray() {
        int a;
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array.length - 1; j++) {
                if (array[j] < array[j + 1]) {
                    a = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = a;
                }
            }
        }
    }",1,0.99847114
"    public static double[][] transpose(double[][] a) {
        int rows = a.length;
        int cols = a[0].length;
        double[][] res = new double[cols][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                res[j][i] = a[i][j];
            }
        }
        return res;
    }","    public float[][] transposeMatrix(float[][] mat) {
        float[][] transmat = createNullMatrix(mat[0].length, mat.length);
        for (int i = 0; i < mat.length; i++) {
            for (int j = 0; j < mat[i].length; j++) {
                transmat[j][i] = mat[i][j];
            }
        }
        return transmat;
    }",1,0.99785566
"	public FTPClient sample3a(String ftpserver, int ftpport, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {
		FTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);
		ftpClient.connect(ftpserver, ftpport);
		ftpClient.login(username, password);
		return ftpClient;
	}","	public FTPClient sample3b(String ftpserver, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {
		FTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);
		ftpClient.connect(ftpserver);
		ftpClient.login(username, password);
		return ftpClient;
	}",1,0.99703276
"    public static void main(String[] args) {
        System.out.println(""Chapter 11: example Transparency3"");
        System.out.println(""-> Creates a PDF file with a transparent image (soft mask)."");
        System.out.println(""-> jars needed: iText.jar"");
        System.out.println(""-> extra resource needed: foxdog.jpg (chapter 5)"");
        System.out.println(""-> file generated: transparency3.pdf"");
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter11/transparency3.pdf""));
            document.open();
            Paragraph text = new Paragraph(""Quick brown fox jumps over the lazy dog."", new Font(Font.HELVETICA, 18));
            for (int i = 0; i < 10; i++) document.add(text);
            Image img = Image.getInstance(""resources/in_action/chapter05/foxdog.jpg"");
            img.setAbsolutePosition(50, 550);
            byte gradient[] = new byte[256];
            for (int k = 0; k < 256; ++k) gradient[k] = (byte) k;
            Image smask = Image.getInstance(256, 1, 1, 8, gradient);
            smask.makeMask();
            img.setImageMask(smask);
            writer.getDirectContent().addImage(img);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public static void main(String[] args) {
        System.out.println(""Chapter 8: example Type1FontFromPFBwithPFM"");
        System.out.println(""-> Creates a PDF file with Type1 font."");
        System.out.println(""-> jars needed: iText.jar"");
        System.out.println(""   extra resources needed: cmr10.pfm and cmr10.pfb"");
        System.out.println(""-> file generated: type1_font_pfb_with_pfm.pdf"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter08/type1_font_pfb_with_pfm.pdf""));
            document.open();
            BaseFont bf = BaseFont.createFont(""resources/in_action/chapter08/cmr10.pfm"", """", BaseFont.EMBEDDED);
            Font font = new Font(bf, 12);
            document.add(new Paragraph(""0123456789\nabcdefghijklmnopqrstuvwxyz\nABCDEFGHIJKLMNOPQRSTUVWXZ"", font));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",1,0.9985863
"            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }","    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }",1,0.9979912
"    public static float[][] TransposeMatrix(float[][] M) {
        int lines = M.length;
        int columns = M[0].length;
        float[][] Mi = new float[columns][lines];
        for (int i = 0; i < lines; i++) {
            for (int j = 0; j < columns; j++) {
                Mi[j][i] = M[i][j];
            }
        }
        return Mi;
    }","    public static String[][] transpose(String[][] object) {
        String[][] transpose = new String[object[0].length][object.length];
        for (int i = 0; i < object.length; i++) {
            for (int x = 0; x < transpose.length; x++) {
                transpose[x][i] = object[i][x];
            }
        }
        return transpose;
    }",1,0.99766415
"    public void browse(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                logger.getLogger().log(Level.WARNING, Application.getInstance(GreenTone.class).getContext().getResourceMap().getString(""ErrorMessage.cannotOpenURL"") + "" "" + uri.getPath(), e);
            }
        }
    }","    private void tfURLMouseClicked(java.awt.event.MouseEvent evt) {
        try {
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                desktop.browse(new URL(tfURL.getText()).toURI());
            }
        } catch (URISyntaxException ex) {
            Exceptions.printStackTrace(ex);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }",1,0.9967828
"    public static int fib(int i) {
        if (i <= 2) return 1;
        return fib(i - 1) + fib(i - 2);
    }","    public static int fibonacci(int broj) {
        if (broj <= 1) return broj; else return fibonacci(broj - 1) + fibonacci(broj - 2);
    }",1,0.9982157
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(MasteryCards.SITE_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + MasteryCards.SITE_URL + ""' to check latest version"");
            }
        }","            @Override
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == EventType.ACTIVATED && Desktop.isDesktopSupported()) {
                    try {
                        logger.info(""Url: "" + e.getDescription());
                        Desktop.getDesktop().browse(e.getURL().toURI());
                    } catch (Exception ex) {
                        logger.error(ex);
                    }
                }
            }",1,0.9974974
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public Matrix transpose() {
        int n = rows();
        int m = columns();
        double[][] newComponents = new double[m][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) newComponents[j][i] = components[i][j];
        }
        return new Matrix(newComponents);
    }",1,0.99835336
"    private final void reOrderFriendsListByOnlineStatus() {
        boolean flag = true;
        while (flag) {
            flag = false;
            for (int i = 0; i < friendsCount - 1; i++) if (friendsListOnlineStatus[i] < friendsListOnlineStatus[i + 1]) {
                int j = friendsListOnlineStatus[i];
                friendsListOnlineStatus[i] = friendsListOnlineStatus[i + 1];
                friendsListOnlineStatus[i + 1] = j;
                long l = friendsListLongs[i];
                friendsListLongs[i] = friendsListLongs[i + 1];
                friendsListLongs[i + 1] = l;
                flag = true;
            }
        }
    }","	public static void BubbleSortDouble1(double[] num) {
		boolean flag = true; // set flag to true to begin first pass
		double temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}",1,0.9901717
"    public RealSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }","    public RoutesMap getInverse() {
        DenseRoutesMap transposed = new DenseRoutesMap(distances.length);
        for (int i = 0; i < distances.length; i++) {
            for (int j = 0; j < distances.length; j++) {
                transposed.distances[i][j] = distances[j][i];
            }
        }
        return transposed;
    }",1,0.9969665
"    private double[][] transpose(double[][] in) {
        double[][] out = new double[in[0].length][in.length];
        for (int r = 0; r < in.length; r++) {
            for (int c = 0; c < in[0].length; c++) {
                out[c][r] = in[r][c];
            }
        }
        return out;
    }","    public static Object[][] dimTransform(Object[][] obj) {
        if ((obj == null) || (obj.length <= 0)) {
            return null;
        }
        Object[][] newArr = new Object[obj[0].length][obj.length];
        for (int i = 0; i < newArr.length; ++i) {
            for (int j = 0; j < obj.length; ++j) {
                newArr[i][j] = obj[j][i];
            }
        }
        return newArr;
    }",1,0.9955716
"    public void put(String path, File fileToPut) throws IOException {
        FTPClient ftp = new FTPClient();
        try {
            int reply;
            ftp.connect(this.endpointURL, this.endpointPort);
            log.debug(""Ftp put reply: "" + ftp.getReplyString());
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp put server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            ftp.enterLocalPassiveMode();
            InputStream input = new FileInputStream(fileToPut);
            if (ftp.storeFile(path, input) != true) {
                ftp.logout();
                input.close();
                throw new IOException(""FTP put exception"");
            }
            input.close();
            ftp.logout();
        } catch (Exception e) {
            log.error(""Ftp client exception: "" + e.getMessage(), e);
            throw new IOException(e.getMessage());
        }
    }","    private void downloadFtp(File file, URL jurl) throws SocketException, IOException {
        System.out.println(""downloadFtp("" + file + "", "" + jurl + "")"");
        FTPClient client = new FTPClient();
        client.addProtocolCommandListener(new ProtocolCommandListener() {

            public void protocolCommandSent(ProtocolCommandEvent event) {
                System.out.println(""downloadFtp: "" + event.getMessage());
            }

            public void protocolReplyReceived(ProtocolCommandEvent event) {
                System.out.println(""downloadFtp: "" + event.getMessage());
            }
        });
        try {
            client.connect(jurl.getHost(), -1 == jurl.getPort() ? FTP.DEFAULT_PORT : jurl.getPort());
            int reply = client.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                client.disconnect();
                throw new IOException(""FTP server refused connection."");
            }
            if (!client.login(""anonymous"", ""anonymous"")) {
                client.logout();
                throw new IOException(""Authentication failure."");
            }
            client.setFileType(FTP.BINARY_FILE_TYPE);
            client.enterLocalPassiveMode();
            FileOutputStream out = new FileOutputStream(file);
            boolean ok = client.retrieveFile(jurl.getPath(), out);
            out.close();
            client.logout();
            if (!ok) {
                throw new IOException(""File transfer failure."");
            }
        } catch (IOException e) {
            throw e;
        } finally {
            if (client.isConnected()) {
                try {
                    client.disconnect();
                } catch (IOException e) {
                }
            }
        }
    }",1,0.9985681
"    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    private static void clean(File dir) {
        File[] files = dir.listFiles();
        if (files != null && files.length > 0) {
            for (File file : files) {
                if (file.isDirectory()) {
                    clean(file);
                }
                file.delete();
            }
        }
    }",1,0.99805135
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public float[][] transposeMatrix(float[][] a) {
        int n = a.length;
        int m = a[0].length;
        float[][] b = new float[m][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                b[j][i] = a[i][j];
            }
        }
        return (b);
    }",1,0.99809843
"    public static void openDonationLink(String uri) throws IOException {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            URI donationURI;
            try {
                donationURI = new URI(uri);
                desktop.browse(donationURI);
            } catch (URISyntaxException e) {
            }
        }
    }","        @Override
        public void action() {
            if ((null != _uri) && Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)) {
                    try {
                        desktop.browse(_uri);
                        return;
                    } catch (IOException e) {
                    }
                }
            }
            JOptionPane.showMessageDialog(MainDialog.this, ""Cannot open page "" + _uri);
        }",1,0.99445784
"    public static Object[] append(Object[] oldArray, Object o) {
        NullArgumentException.check(oldArray);
        NullArgumentException.check(o);
        Object[] newArray = (Object[]) Array.newInstance(oldArray.getClass().getComponentType(), oldArray.length + 1);
        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);
        newArray[oldArray.length] = o;
        return newArray;
    }","    private static Object[] append(Object[] orig, Object item) {
        Object[] newArr = (Object[]) java.lang.reflect.Array.newInstance(orig.getClass().getComponentType(), orig.length + 1);
        System.arraycopy(orig, 0, newArr, 0, orig.length);
        newArr[orig.length] = item;
        return newArr;
    }",1,0.9983929
"    public static boolean[][] transpose(boolean[][] booleanBox) {
        YeriDebug.ASSERT(CollectionsToolkit.isRectangular(booleanBox));
        boolean[][] returnBox = new boolean[booleanBox[0].length][booleanBox.length];
        for (int i = 0; i < booleanBox.length; i++) {
            for (int j = 0; j < booleanBox[i].length; j++) {
                returnBox[j][i] = booleanBox[i][j];
            }
        }
        return returnBox;
    }","    public RMatrix transposed() {
        RMatrix m = new RMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }",1,0.99715126
"    void bubbleSort(int[] a) {
        int i = 0;
        int j = a.length - 1;
        int aux = 0;
        int stop = 0;
        while (stop == 0) {
            stop = 1;
            i = 0;
            while (i < j) {
                if (a[i] > a[i + 1]) {
                    aux = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = aux;
                    stop = 0;
                }
                i = i + 1;
            }
            j = j - 1;
        }
    }","    public static void bubbleSort(int[] a) {
        if (a == null) {
            throw new IllegalArgumentException(""Null-pointed array"");
        }
        int right = a.length - 1;
        int k = 0;
        while (right > 0) {
            k = 0;
            for (int i = 0; i <= right - 1; i++) {
                if (a[i] > a[i + 1]) {
                    k = i;
                    int temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
            right = k;
        }
    }",1,0.9986323
"    public static double[][] Kendall(double[][] X) {
        double[][] output = new double[X.length][X.length];
        try {
            for (int i = 0; i < X.length; i++) {
                output[i][i] = 1.0;
                for (int j = 0; j < i; j++) {
                    output[i][j] = GeneUtils.kendalltau(X[i], X[j]);
                    output[j][i] = output[i][j];
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Statistic.class.getName()).log(Level.SEVERE, null, ex);
        }
        return output;
    }","    public static double[][] triangularToComplete(double[][] omatrix) {
        int n = omatrix.length + 1;
        double[][] M = new double[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (i < j) {
                    M[i][j] = omatrix[i][j - 1 - i];
                    M[j][i] = M[i][j];
                }
            }
        }
        return M;
    }",1,0.99731827
"    public FoundExpressions getFoundExpressions(String regExpr) {
        FoundExpressions expressions = null;
        Pattern p = Pattern.compile(regExpr);
        Matcher m = p.matcher(text);
        while (m.find()) {
            int start = m.start();
            int end = m.end();
            if (expressions == null) {
                expressions = new FoundExpressions();
            }
            Selection selection = new Selection();
            selection.setStart(start);
            selection.setEnd(end);
            expressions.add(selection);
        }
        return expressions;
    }","    public static PointList parsePointString(String text, int boardSize) {
        String regex = ""\\b([Pp][Aa][Ss][Ss]|[A-Ta-t](1\\d|[1-9]))\\b"";
        Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);
        Matcher matcher = pattern.matcher(text);
        PointList list = new PointList(32);
        while (matcher.find()) {
            int start = matcher.start();
            int end = matcher.end();
            GoPoint point;
            try {
                point = parsePoint(text.substring(start, end), boardSize);
            } catch (GtpResponseFormatError e) {
                assert false;
                continue;
            }
            list.add(point);
        }
        return list;
    }",1,0.99417675
"    public static void main(String[] args) {
        System.out.println(""Chapter 1 example 1: Hello World"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0101.pdf""));
            document.open();
            document.add(new Paragraph(""Hello World""));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public static void main(String[] args) {
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapterX/tooltip3.pdf""));
            document.open();
            writer.setPageEvent(new TooltipExample3());
            Paragraph p = new Paragraph(""Hello World "");
            Chunk c = new Chunk(""tooltip"");
            c.setGenericTag(""This is my tooltip."");
            p.add(c);
            document.add(p);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",1,0.9983891
"    void bubbleSort(int[] a) {
        int i = 0;
        int j = a.length - 1;
        int aux = 0;
        int stop = 0;
        while (stop == 0) {
            stop = 1;
            i = 0;
            while (i < j) {
                if (a[i] > a[i + 1]) {
                    aux = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = aux;
                    stop = 0;
                }
                i = i + 1;
            }
            j = j - 1;
        }
    }","	public static void BubbleSortFloat1(float[] num) {
		boolean flag = true; // set flag to true to begin first pass
		float temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}",1,0.9896461
"    public IntSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }","    public static double[][] transpose(double[][] M) {
        double[][] tM = new double[M[0].length][M.length];
        for (int i = 0; i < tM.length; i++) {
            for (int j = 0; j < tM[0].length; j++) {
                tM[i][j] = M[j][i];
            }
        }
        return tM;
    }",1,0.99401826
"    public static int[][] transpose(int[][] M) {
        int[][] tM = new int[M[0].length][M.length];
        for (int i = 0; i < tM.length; i++) {
            for (int j = 0; j < tM[0].length; j++) {
                tM[i][j] = M[j][i];
            }
        }
        return tM;
    }","    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                int t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }",1,0.9964248
"        public void mouseClicked(MouseEvent event) {
            if (!Desktop.isDesktopSupported() || !Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                return;
            }
            try {
                Desktop.getDesktop().browse(new URI(AboutInformation.getInstance().getUrl()));
            } catch (Exception e) {
            }
        }","    private void siteLabelMouseClicked(java.awt.event.MouseEvent evt) {
        if (!Desktop.isDesktopSupported()) {
            return;
        }
        try {
            NULogger.getLogger().log(Level.INFO, ""{0}Opening Neembuu Site.."", getClass().getName());
            Desktop.getDesktop().browse(new URI(""http://neembuuuploader.sourceforge.net/""));
        } catch (Exception ex) {
        }
    }",1,0.99828327
"    private void bubbleSort(int[] mas) {
        boolean t = true;
        int temp = 0;
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    temp = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = temp;
                    t = true;
                }
            }
        }
    }","    public int[] getRandMas(int n) {
        boolean t = true;
        int interim = 0;
        int[] mas = new int[n];
        Random rand = new Random();
        for (int i = 0; i < n; i++) {
            mas[i] = rand.nextInt(10) + 1;
        }
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    interim = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = interim;
                    t = true;
                }
            }
        }
        return mas;
    }",1,0.99745613
"    public static double[][] transpose(double[][] A) {
        if (logger.isDebugEnabled()) {
            debug(""Matrix A:"", A);
        }
        int _dimension = A.length;
        double[][] B = new double[_dimension][_dimension];
        for (int i = 0; i < _dimension; i++) {
            for (int k = 0; k < _dimension; k++) {
                B[k][i] = A[i][k];
            }
        }
        if (logger.isDebugEnabled()) {
            debug(""B = transpose(A):"", B);
        }
        return B;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99362534
"    public static void shuffle(Object[] array, Random rng) {
        for (int i = array.length - 1; i >= 0; i--) {
            int index = rng.nextInt(i + 1);
            Object a = array[index];
            array[index] = array[i];
            array[i] = a;
        }
    }","    public DoubleThresholdGenerator randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            double tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }",1,0.9973266
"    public ISpieler[] sortiereSpielerRamsch(ISpieler[] spieler) {
        for (int i = 0; i < spieler.length; i++) {
            for (int j = 0; j < spieler.length - 1; j++) {
                if (werteAugen(spieler[j].getStiche()) > werteAugen(spieler[j + 1].getStiche())) {
                    ISpieler a = spieler[j];
                    spieler[j] = spieler[j + 1];
                    spieler[j + 1] = a;
                }
            }
        }
        return spieler;
    }","    public void sort(int[] mas) {
        int temp;
        boolean t = true;
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    temp = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = temp;
                    t = true;
                }
            }
        }
    }",1,0.99779767
"    public static double[][] transpose(double[][] a) {
        int rows = a.length;
        int cols = a[0].length;
        double[][] res = new double[cols][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                res[j][i] = a[i][j];
            }
        }
        return res;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9980303
"    private void computeMImatrix() {
        int numInAtt = NUM_ATTRIBUTES - 1;
        m_MImatrix = new double[numInAtt][numInAtt];
        for (int i = 0; i < numInAtt; i++) {
            for (int j = i; j < numInAtt; j++) {
                m_MImatrix[i][j] = getAttAttMI(i, j);
                m_MImatrix[j][i] = m_MImatrix[i][j];
            }
        }
    }","    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }",1,0.9946306
"    public FloatMatrix transpose() {
        FloatMatrix X = new FloatMatrix(n, m);
        float[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static Object[][] dimTransform(Object[][] obj) {
        if ((obj == null) || (obj.length <= 0)) {
            return null;
        }
        Object[][] newArr = new Object[obj[0].length][obj.length];
        for (int i = 0; i < newArr.length; ++i) {
            for (int j = 0; j < obj.length; ++j) {
                newArr[i][j] = obj[j][i];
            }
        }
        return newArr;
    }",1,0.99760425
"    public void testNonGreedyMatch() {
        String page = ""Stuff you say, it is<a href=\""coolsite.htm\"">Yea</a>I find it interesting"";
        Pattern p = Pattern.compile(""<a.*?href=.*?>.*?</a>"");
        Matcher m = p.matcher(page);
        while (m.find()) {
            System.out.println("" ***** : "" + m.group());
            System.out.println("" ***** + at "" + m.start());
            System.out.println("" ***** - to "" + m.end());
        }
    }","    public static void main(String[] args) {
        Pattern pattern = Pattern.compile(""\\w+"");
        Matcher matcher = pattern.matcher(EXAMPLE_TEST);
        while (matcher.find()) {
            System.out.print(""Start index: "" + matcher.start());
            System.out.print("" End index: "" + matcher.end() + "" "");
            System.out.println(matcher.group());
        }
        Pattern replace = Pattern.compile(""\\s+"");
        Matcher matcher2 = replace.matcher(EXAMPLE_TEST);
        System.out.println(matcher2.replaceAll(""\t""));
    }",1,0.996993
"    public void screenShot() {
        try {
            File f = new File(""screenshot"");
            f.mkdir();
            Rectangle rectangle = frame.getBounds();
            Robot robot = new Robot();
            BufferedImage image = robot.createScreenCapture(rectangle);
            File file = getPossiblePNG();
            ImageIO.write(image, ""png"", file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public void saveImage(String path) {
        try {
            Rectangle rectangle = new Rectangle(this.getBounds());
            Robot robot = new Robot();
            BufferedImage image = robot.createScreenCapture(rectangle);
            File file = new File(path);
            ImageIO.write(image, ""jpg"", file);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }",1,0.99780345
"    public void bubbleSort(int[] arr) {
        boolean swapped = true;
        int j = 0;
        int tmp;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < arr.length - j; i++) {
                if (arr[i] > arr[i + 1]) {
                    tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    swapped = true;
                }
            }
        }
    }","    public int[] do_it(final int[] x) {
        int temp = 0;
        int j = x.length;
        while (j > 0) {
            for (int i = 0; i < j - 1; i++) {
                if (x[i] > x[i + 1]) {
                    temp = x[i];
                    x[i] = x[i + 1];
                    x[i + 1] = temp;
                }
                ;
            }
            ;
            j--;
        }
        ;
        return x;
    }",1,0.9983848
"    private float[][] transpose(float[][] m) {
        float[][] toReturn = new float[m[0].length][m.length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++) {
                toReturn[j][i] = m[i][j];
            }
        }
        return toReturn;
    }","    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }",1,0.998072
"    @SuppressWarnings(""unchecked"")
    public static <T> T[] add(T[] array, T value) {
        T[] tmp = (T[]) java.lang.reflect.Array.newInstance(((Class<? extends T>) array.getClass()).getComponentType(), array.length + 1);
        System.arraycopy(array, 0, tmp, 0, array.length);
        tmp[array.length] = value;
        return tmp;
    }","    public static Object[] add(final Object[] array, final Object obj) {
        final Object[] newArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = obj;
        return newArray;
    }",1,0.99829715
"    public static MathComplexMatrix Transpone(MathComplexMatrix matrix) {
        int m = matrix.getM();
        int n = matrix.getN();
        Complex[][] mData = matrix.getAllItems();
        Complex[][] newData = new Complex[n][m];
        for (int ni = 0; ni < n; ni++) {
            for (int mi = 0; mi < m; mi++) {
                newData[ni][mi] = mData[mi][ni];
            }
        }
        return new MathComplexMatrix(newData);
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99597955
"    static void BuildSqSymmBasisMatrix(double[][] lSVsqss, int lnv, double[][] lelectrodesub, int lnChan) {
        for (int j = 0; j < lnv; j++) {
            for (int k = 0; k <= j; k++) {
                lSVsqss[j][k] = Dot(lelectrodesub[j], lelectrodesub[k], lnChan);
                if (k != j) lSVsqss[k][j] = lSVsqss[j][k];
            }
        }
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9961388
"    void permute(int[] a, int n) {
        for (int i = 0; i < n; i++) {
            int j = random.nextInt(i + 1);
            int tmp = a[i];
            a[i] = a[j];
            a[j] = tmp;
        }
    }","	public static void shuffle1(int[] a) {
		//Standard Fisher-Yates/Knuth Shuffle
		int length = a.length;

		Random random = new Random();
		random.nextInt();

		for(int i = 0; i < length; i++) {
			//Chose index to swap with from i <= j < length
			int j = i + random.nextInt(length-i);

			//Swap
			int tmp = a[i];
			a[i] = a[j];
			a[j] = tmp;
		}
	}",1,0.98293626
"    static void BuildSqSymmBasisMatrix(double[][] lSVsqss, int lnv, double[][] lelectrodesub, int lnChan) {
        for (int j = 0; j < lnv; j++) {
            for (int k = 0; k <= j; k++) {
                lSVsqss[j][k] = Dot(lelectrodesub[j], lelectrodesub[k], lnChan);
                if (k != j) lSVsqss[k][j] = lSVsqss[j][k];
            }
        }
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9961388
"    public Matrix transpose() {
        Matrix result = new Matrix(height, width);
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                result.elements[i][j] = elements[j][i];
            }
        }
        return result;
    }","    public RealSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }",1,0.99735874
"    public static double[][] transpose(double[][] matrix) {
        double[][] result = new double[matrix.length][matrix[0].length];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                result[i][j] = matrix[j][i];
            }
        }
        return result;
    }","    public static String[][] dimTransform(String[][] obj) {
        if ((obj == null) || (obj.length <= 0)) {
            return null;
        }
        String[][] newArr = new String[obj[0].length][obj.length];
        for (int i = 0; i < newArr.length; ++i) {
            for (int j = 0; j < obj.length; ++j) {
                newArr[i][j] = obj[j][i];
            }
        }
        return newArr;
    }",1,0.99492157
"    public Matrix transpose() throws JasymcaException {
        Algebraic b[][] = new Algebraic[a[0].length][a.length];
        for (int i = 0; i < a.length; i++) for (int k = 0; k < a[0].length; k++) b[k][i] = a[i][k];
        return new Matrix(b);
    }","    public static double[][] invert(double[][] matrix) {
        double[][] result = new double[matrix[0].length][matrix.length];
        for (int row = 0; row < matrix.length; row++) for (int col = 0; col < matrix[row].length; col++) result[col][row] = result[row][col];
        return result;
    }",1,0.99711466
"            @Override
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == EventType.ACTIVATED && Desktop.isDesktopSupported()) {
                    try {
                        logger.info(""Url: "" + e.getDescription());
                        Desktop.getDesktop().browse(e.getURL().toURI());
                    } catch (Exception ex) {
                        logger.error(ex);
                    }
                }
            }","                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (Desktop.isDesktopSupported()) {
                            Desktop desktop = Desktop.getDesktop();
                            try {
                                desktop.browse(uri);
                            } catch (Exception ex) {
                            }
                        }
                    }",1,0.99754214
"    private double[][] transpose(double[][] in) {
        double[][] out = new double[in[0].length][in.length];
        for (int r = 0; r < in.length; r++) {
            for (int c = 0; c < in[0].length; c++) {
                out[c][r] = in[r][c];
            }
        }
        return out;
    }","    @Override
    public BasicCohoMatrix<V> transpose() {
        V[][] d = createArray(data[0].length, data.length);
        int[][] p = new int[pos[0].length][pos.length];
        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data[0].length; j++) {
                d[j][i] = data[i][j];
                p[j][i] = pos[i][j];
            }
        }
        BasicCohoMatrix<V> result = new BasicCohoMatrix(type.zero(), d, p, ncols, nrows, !isDual);
        return result;
    }",1,0.9888827
"    public static Object[] prepend(Object[] oldArray, Object o) {
        NullArgumentException.check(oldArray);
        NullArgumentException.check(o);
        Object[] newArray = (Object[]) Array.newInstance(oldArray.getClass().getComponentType(), oldArray.length + 1);
        System.arraycopy(oldArray, 0, newArray, 1, oldArray.length);
        newArray[0] = o;
        return newArray;
    }","    public static Object[] add(Object[] array, Object value) {
        Object[] tmp = (Object[]) java.lang.reflect.Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, tmp, 0, array.length);
        tmp[array.length] = value;
        return tmp;
    }",1,0.9984008
"    public static int[][] transpose(int[][] M) {
        int[][] tM = new int[M[0].length][M.length];
        for (int i = 0; i < tM.length; i++) {
            for (int j = 0; j < tM[0].length; j++) {
                tM[i][j] = M[j][i];
            }
        }
        return tM;
    }","    protected static float[][] trans(float[][] a) {
        int am = a.length;
        int an = a[0].length;
        float[][] t = new float[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                t[j][i] = a[i][j];
            }
        }
        return t;
    }",1,0.9977274
"            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }","    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }",1,0.9979912
"    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
        }
    }","        @Override
        public void mouseClicked(final MouseEvent e) {
            if (Desktop.isDesktopSupported()) {
                final Desktop desktop = Desktop.getDesktop();
                try {
                    desktop.browse(new URI(uri));
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                } catch (URISyntaxException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }",1,0.9964287
"    public static boolean helpToBrowser(JFrame ss) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                int create = JOptionPane.showConfirmDialog(ss, Jibs.getString(""SortScreen.10"") + ""\n"" + Jibs.getString(""SortScreen.52""), Jibs.getString(""SortScreen.51""), JOptionPane.YES_NO_OPTION);
                if (create == JOptionPane.YES_OPTION) {
                    desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(""http://www.jibs.us/""));
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
                return true;
            }
            return false;
        }
        return false;
    }","            public void mouseClicked(MouseEvent e) {
                long delay = System.currentTimeMillis() - lastClicked;
                if (e.getButton() == MouseEvent.BUTTON1 && delay > 1000) {
                    e.consume();
                    lastClicked = System.currentTimeMillis();
                    if (Desktop.isDesktopSupported()) {
                        Desktop desktop = Desktop.getDesktop();
                        if (desktop.isSupported(Desktop.Action.BROWSE)) {
                            try {
                                desktop.browse(new URI(""http://everquest2.com/Valor/"" + URLEncoder.encode(label.getText(), ""UTF-8"") + ""/""));
                            } catch (Exception ex) {
                                System.err.println(ex.getMessage());
                            }
                        }
                    }
                }
            }",1,0.99673104
"    public Matrix transpose() {
        Matrix result = new Matrix(columns(), rows());
        for (int i = 0; i < rows(); i++) {
            for (int k = 0; k < columns(); k++) {
                result.elements[k][i] = elements[i][k];
            }
        }
        return result;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99739814
"    public static void bubbleSort(String[] a) {
        Collator myCollator = Collator.getInstance();
        boolean switched = true;
        for (int pass = 0; pass < a.length - 1 && switched; pass++) {
            switched = false;
            for (int i = 0; i < a.length - pass - 1; i++) {
                if (myCollator.compare(a[i], a[i + 1]) > 0) {
                    switched = true;
                    String temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
        }
    }","    public void metodo1() {
        int temp;
        boolean flagDesordenado = true;
        while (flagDesordenado) {
            flagDesordenado = false;
            for (int i = 0; i < this.tamanoTabla - 1; i++) {
                if (tabla[i] > tabla[i + 1]) {
                    flagDesordenado = true;
                    temp = tabla[i];
                    tabla[i] = tabla[i + 1];
                    tabla[i + 1] = temp;
                }
            }
        }
    }",1,0.9983093
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(JCards.SITE_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + JCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + JCards.SITE_URL + ""' to check latest version"");
            }
        }","    public static void openDonationLink(String uri) throws IOException {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            URI donationURI;
            try {
                donationURI = new URI(uri);
                desktop.browse(donationURI);
            } catch (URISyntaxException e) {
            }
        }
    }",1,0.9966723
"    public static int binarySearch(int vl, int[] vls, int from, int to) {
        int low = from;
        int high = to - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (vls[mid] < vl) {
                low = mid + 1;
            } else if (vls[mid] > vl) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        return -1;
    }","    static String getMessageByWinerrCode(int errcode) {
        int min = 0;
        int max = WINERR_CODES.length;
        while (max >= min) {
            int mid = (min + max) / 2;
            if (errcode > WINERR_CODES[mid]) {
                min = mid + 1;
            } else if (errcode < WINERR_CODES[mid]) {
                max = mid - 1;
            } else {
                return WINERR_MESSAGES[mid];
            }
        }
        return errcode + """";
    }",1,0.9952334
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","    public void transpose() {
        double[][] new_data = new double[size_y][size_x];
        for (int i = 0; i < size_x; i++) {
            for (int j = 0; j < size_y; j++) {
                new_data[j][i] = data[i][j];
            }
        }
        int dummy = size_x;
        size_x = size_y;
        size_y = dummy;
        data = new_data;
    }",1,0.9956545
"    public void sortArray() {
        int a;
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array.length - 1; j++) {
                if (array[j] < array[j + 1]) {
                    a = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = a;
                }
            }
        }
    }","    private int[] Tri(int[] pertinence, int taille) {
        boolean change = true;
        int tmp;
        while (change) {
            change = false;
            for (int i = 0; i < taille - 2; i++) {
                if (pertinence[i] < pertinence[i + 1]) {
                    tmp = pertinence[i];
                    pertinence[i] = pertinence[i + 1];
                    pertinence[i + 1] = tmp;
                    change = true;
                }
            }
        }
        return pertinence;
    }",1,0.99819905
"    public RMatrix transposed() {
        RMatrix m = new RMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }","    public static double[][] transpose(final double[][] m) {
        final double[][] mt = new double[m[0].length][m.length];
        for (int i = 0; i < mt.length; i++) {
            for (int j = 0; j < mt[i].length; j++) {
                mt[i][j] = m[j][i];
            }
        }
        return mt;
    }",1,0.99713635
"    public static Object[] append(Object[] oldArray, Object o) {
        NullArgumentException.check(oldArray);
        NullArgumentException.check(o);
        Object[] newArray = (Object[]) Array.newInstance(oldArray.getClass().getComponentType(), oldArray.length + 1);
        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);
        newArray[oldArray.length] = o;
        return newArray;
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] appendToArray(T[] array, T el) {
        T[] newArray = (T[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = el;
        return newArray;
    }",1,0.9979287
"    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(uri);
            } catch (IOException e) {
                ourLog.error(""Failed to create hyperlink"", e);
            }
        } else {
            ourLog.error(""Failed to create hyperlink, no desktop available"");
        }
    }","    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
        }
    }",1,0.99830425
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static Matrix transpose(final Matrix input) {
        final double[][] transposeMatrix = new double[input.getCols()][input.getRows()];
        final double[][] d = input.getData();
        for (int r = 0; r < input.getRows(); r++) {
            for (int c = 0; c < input.getCols(); c++) {
                transposeMatrix[c][r] = d[r][c];
            }
        }
        return new Matrix(transposeMatrix);
    }",1,0.9981514
"    public static double[][] calcTranspose(double[][] mat) {
        double[][] transpose = new double[mat[0].length][mat.length];
        for (int a = 0; a < transpose.length; a++) {
            for (int b = 0; b < transpose[0].length; b++) {
                transpose[a][b] = mat[b][a];
            }
        }
        return transpose;
    }","    static double[][] getCorrelationMatrix(Gene[] genes, boolean[] pos) {
        double[][] c = new double[genes.length][genes.length];
        for (int i = 0; i < c.length - 1; i++) {
            for (int j = i + 1; j < c.length; j++) {
                c[i][j] = Pearson.calcCorrelation(genes[i].value, genes[j].value, pos);
                c[j][i] = c[i][j];
            }
        }
        return c;
    }",1,0.99567074
"    private void openURI() {
        if (uri != null) if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }
    }","    protected void showDownloadFolder() {
        if (Desktop.isDesktopSupported()) {
            try {
                if (JPTrayIcon.isWindows()) Runtime.getRuntime().exec(""rundll32 SHELL32.DLL,ShellExec_RunDLL \"""" + fileDownloads.getAbsolutePath() + ""\""""); else Desktop.getDesktop().browse(getFileURI(fileDownloads.getAbsolutePath()));
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else JOptionPane.showMessageDialog(this, Messages.getString(""FileWindow.DirectoryOpenNotSupported"").replace(""$PATH$"", fileDownloads.getAbsolutePath()));
    }",1,0.9963353
"    public void shuffle() {
        currentDeckPosition = 0;
        int n = 52;
        while (--n > 0) {
            int k = rand.nextInt(n + 1);
            int temp = deck[n];
            deck[n] = deck[k];
            deck[k] = temp;
        }
    }","    public static <T> void shuffle(T[] a) {
        Random random = new Random();
        for (int i = a.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            T swap = a[i];
            a[i] = a[j];
            a[j] = swap;
        }
    }",1,0.9962708
"    public void mouseClicked(MouseEvent e) {
        try {
            java.awt.Desktop d = Desktop.getDesktop();
            if (Desktop.isDesktopSupported()) {
                d.browse(new URI(UIDefaults.PRODUCT_URL));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }","    private static void browseHelp() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(new URI(TargetedProjectionPursuit.HELP_URL));
            } catch (Exception e) {
            }
        } else {
        }
    }",1,0.9972062
"    public Object[] toArray(Object a[]) {
        if (a.length < size) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size) a[size] = null;
        return a;
    }","    public synchronized Object[] toArray(Object a[]) {
        if (a.length < size) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        if (elementData != null) System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size) a[size] = null;
        return a;
    }",1,0.99898386
"    public static double[][] transpose(double[][] a) {
        int rows = a.length;
        int cols = a[0].length;
        double[][] res = new double[cols][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                res[j][i] = a[i][j];
            }
        }
        return res;
    }","    public static double[][] transpose(double[][] A) {
        if (logger.isDebugEnabled()) {
            debug(""Matrix A:"", A);
        }
        int _dimension = A.length;
        double[][] B = new double[_dimension][_dimension];
        for (int i = 0; i < _dimension; i++) {
            for (int k = 0; k < _dimension; k++) {
                B[k][i] = A[i][k];
            }
        }
        if (logger.isDebugEnabled()) {
            debug(""B = transpose(A):"", B);
        }
        return B;
    }",1,0.99309933
"    public static double[][] transpose(double[][] doubleBox) {
        YeriDebug.ASSERT(CollectionsToolkit.isRectangular(doubleBox));
        double[][] returnBox = new double[doubleBox[0].length][doubleBox.length];
        for (int i = 0; i < doubleBox.length; i++) {
            for (int j = 0; j < doubleBox[i].length; j++) {
                returnBox[j][i] = doubleBox[i][j];
            }
        }
        return returnBox;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9971252
"    private void update() {
        double[][] data = new double[4][points.length];
        for (int i = 0; i < points.length; i++) {
            for (int j = 0; j < 3; j++) {
                data[j][i] = points[i][j];
            }
            data[3][i] = 1;
        }
        this.matrix = new Matrix(data);
        this.dirty = false;
    }","    public static String[][] transpose(String[][] object) {
        String[][] transpose = new String[object[0].length][object.length];
        for (int i = 0; i < object.length; i++) {
            for (int x = 0; x < transpose.length; x++) {
                transpose[x][i] = object[i][x];
            }
        }
        return transpose;
    }",1,0.9964113
"    @Override
    public void launchUpdate() {
        if (getUpdateUrl() != null && Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(getUpdateUrl().toURI());
            } catch (IOException e) {
                GroofyLogger.getInstance().logException(e);
            } catch (URISyntaxException e) {
                GroofyLogger.getInstance().logException(e);
            }
        }
    }","    @Override
    public void hyperlinkUpdate(HyperlinkEvent e) {
        if (EventType.ACTIVATED.equals(e.getEventType())) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().browse(e.getURL().toURI());
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (URISyntaxException e1) {
                    e1.printStackTrace();
                }
            }
        }
    }",1,0.99711025
"    public static double[][] transpose(double[][] A) {
        if (logger.isDebugEnabled()) {
            debug(""Matrix A:"", A);
        }
        int _dimension = A.length;
        double[][] B = new double[_dimension][_dimension];
        for (int i = 0; i < _dimension; i++) {
            for (int k = 0; k < _dimension; k++) {
                B[k][i] = A[i][k];
            }
        }
        if (logger.isDebugEnabled()) {
            debug(""B = transpose(A):"", B);
        }
        return B;
    }","    public static void inPlaceTranspose(double[][] in) {
        assert in != null;
        int h = in.length;
        int w = in[0].length;
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                if (x > y) {
                    double f = in[y][x];
                    in[y][x] = in[x][y];
                    in[x][y] = f;
                }
            }
        }
    }",1,0.9956689
"    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9977419
"    static int fibo(int n) {
        if (n < 2) {
            return 1;
        } else {
            return fibo(n - 1) + fibo(n - 2);
        }
    }","    public int fibonacci(int num) {
        if (num == 0) {
            return 0;
        } else if (num == 1) {
            return 1;
        } else {
            processor.getAlgData().setRecursiveCalls(processor.getAlgData().getRecursiveCalls() + 2);
            return fibonacci(num - 1) + fibonacci(num - 2);
        }
    }",1,0.9953204
"    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    public static void del(File file) {
        if (file.isDirectory()) {
            for (File child : file.listFiles()) {
                del(child);
            }
        }
        file.delete();
    }",1,0.9989245
"    public static final void shuffle(int[] list) {
        for (int i = list.length - 1; i >= 0; i--) {
            int j = rand.nextInt(i + 1);
            if (i == j) {
                continue;
            }
            int tmp = list[i];
            list[i] = list[j];
            list[j] = tmp;
        }
    }","	public static void shuffle2(int[] a) {
		//Alternate Fisher-Yates/Knuth Shuffle
		Random random = new Random();
		random.nextInt();

		for(int i = a.length-1; i >= 1; i--) {
			//Choose index to swap from 0 <= j <= i
			int j = random.nextInt(i+1);

			//Swap
			int tmp = a[i];
			a[i] = a[j];
			a[j] = tmp;
		}
	}",1,0.98762286
"    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    public static void deleteDirectory(File dir) {
        File[] files = dir.listFiles();
        for (File f : files) {
            if (f.isDirectory()) {
                deleteDirectory(f);
            } else f.delete();
        }
        dir.delete();
    }",1,0.99894005
"    public static double[][] transposed(double[][] matrix) {
        int row = matrix[0].length;
        int line = matrix.length;
        double[][] ans = new double[row][line];
        for (int i = 0; i < line; i++) {
            for (int j = 0; j < row; j++) {
                ans[j][i] = matrix[i][j];
            }
        }
        return ans;
    }","    public static void synchronizeConnectionTable(int[][] contab) {
        int N = contab.length;
        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                contab[j][i] = contab[i][j];
            }
        }
    }",1,0.9968279
"            public void mouseClicked(MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(""http://trac.jsystemtest.org/wiki/DetailedOSProjectsList""));
                    } catch (Exception e) {
                        log.log(Level.WARNING, ""Failed openning browser to JSystem website: "" + e.getMessage());
                    }
                }
            }","            @Override
            public void mouseClicked(MouseEvent arg0) {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    if (desktop.isSupported(Desktop.Action.BROWSE)) {
                        try {
                            desktop.browse(new URI(""http://sourceforge.net/projects/jcohorte/""));
                        } catch (IOException e) {
                            e.printStackTrace();
                        } catch (URISyntaxException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }",1,0.996889
"    public void openSite(final URI uri) {
        if (Desktop.isDesktopSupported()) {
            final Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(uri);
                } catch (final IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }","    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }",1,0.99695975
"    public void sort(int[] mas) {
        int temp;
        boolean t = true;
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    temp = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = temp;
                    t = true;
                }
            }
        }
    }","	public static <T extends Comparable<T>> void BubbleSortComparable2(T[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j].compareTo(num[j + 1]) > 0)
				{
					T temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}",1,0.9898341
"    public Matrix transpose() {
        int n = rows();
        int m = columns();
        double[][] newComponents = new double[m][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) newComponents[j][i] = components[i][j];
        }
        return new Matrix(newComponents);
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99835324
"    private static Object[] append(Object[] orig, Object item) {
        Object[] newArr = (Object[]) java.lang.reflect.Array.newInstance(orig.getClass().getComponentType(), orig.length + 1);
        System.arraycopy(orig, 0, newArr, 0, orig.length);
        newArr[orig.length] = item;
        return newArr;
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] addToArray(T[] array, T el) {
        T[] newArray = (T[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = el;
        return newArray;
    }",1,0.9986716
"    private static int[][] transpose(int[][] matrix) {
        int[][] transposed = new int[matrix.length][matrix[0].length];
        for (int k = 0; k < matrix.length; k++) {
            for (int j = 0; j < matrix.length; j++) {
                transposed[j][k] = matrix[k][j];
            }
        }
        return transposed;
    }","    public InvariantsMatrix transpose() throws Exception {
        int[][] tmpData = new int[width()][height()];
        for (int i = 0; i < width(); i++) {
            for (int j = 0; j < height(); j++) {
                tmpData[i][j] = data[j][i];
            }
        }
        return new InvariantsMatrix(tmpData);
    }",1,0.9976355
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static final Object[][] transpose(Object[][] a) {
        int am = a.length;
        int an = a[0].length;
        Object[][] result = new Object[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                result[j][i] = a[i][j];
            }
        }
        return result;
    }",1,0.9977986
"    private static void browseHelp() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(new URI(TargetedProjectionPursuit.HELP_URL));
            } catch (Exception e) {
            }
        } else {
        }
    }","    public static void openInBrowser(String string) {
        if (java.awt.Desktop.isDesktopSupported()) {
            try {
                java.awt.Desktop.getDesktop().browse(new URI(string));
            } catch (IOException ex) {
            } catch (URISyntaxException ex) {
            }
        }
    }",1,0.99778205
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static SRPGAnimation makeObject(String fileName, int row, int col, int tileWidth, int tileHeight) {
        String key = fileName.trim().toLowerCase();
        SRPGAnimation animation = (SRPGAnimation) animations.get(key);
        if (animation == null) {
            LImage[][] images = GraphicsUtils.getSplit2Images(fileName, tileWidth, tileHeight, true);
            LImage[][] result = new LImage[row][col];
            for (int y = 0; y < col; y++) {
                for (int x = 0; x < row; x++) {
                    result[x][y] = images[y][x];
                }
            }
            images = null;
            animations.put(key, animation = makeObject(result[0], result[1], result[2], result[3]));
        }
        return animation;
    }",1,0.992003
"    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, ""Failed to launch the link, "" + ""your computer is likely misconfigured."", ""Cannot Launch Link"", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, ""Java is not able to launch links on your computer."", ""Cannot Launch Link"", JOptionPane.WARNING_MESSAGE);
        }
    }","        @Override
        public void action() {
            if ((null != _uri) && Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)) {
                    try {
                        desktop.browse(_uri);
                        return;
                    } catch (IOException e) {
                    }
                }
            }
            JOptionPane.showMessageDialog(MainDialog.this, ""Cannot open page "" + _uri);
        }",1,0.99652153
"    private static long[][] transposeMatrix(long[][] A) {
        long[][] result = cloneMatrix(A);
        for (int i = 0; i < A.length; i++) {
            for (int j = 0; j < A[i].length; j++) {
                result[i][j] = A[j][i];
            }
        }
        return result;
    }","    public static void symmetrizeComponents(double[][] components) {
        for (int i = 0; i < components.length; i++) {
            for (int j = i + 1; j < components.length; j++) {
                components[i][j] += components[j][i];
                components[i][j] *= 0.5;
                components[j][i] = components[i][j];
            }
        }
    }",1,0.9970566
"    @DeclarePerfMonTimer(""SortingTest.bubbleSort"")
    private void bubbleSort(int values[]) {
        int len = values.length - 1;
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < len - i; j++) {
                if (values[j] > values[j + 1]) {
                    int tmp = values[j];
                    values[j] = values[j + 1];
                    values[j + 1] = tmp;
                }
            }
        }
    }","    protected void sort(double[] a) throws Exception {
        for (int i = a.length - 1; i >= 0; i--) {
            boolean swapped = false;
            for (int j = 0; j < i; j++) {
                if (a[j] > a[j + 1]) {
                    double d = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = d;
                    swapped = true;
                }
            }
            if (!swapped) return;
        }
    }",1,0.9981099
"    public static double[][] transpose(double[][] a) {
        double[][] c = new double[3][3];
        for (int i = 0; i < 3; i++) {
            for (int k = 0; k < 3; k++) {
                c[i][k] = a[k][i];
            }
        }
        return c;
    }","    public static int[][] transpose(int[][] array) {
        int[][] result = new int[array[0].length][array.length];
        for (int i = 0; i < array[0].length; i++) {
            for (int j = 0; j < array.length; j++) {
                result[i][j] = array[j][i];
            }
        }
        return result;
    }",1,0.9989062
"    public void calculateDistances() {
        distances = new double[dimension][dimension];
        for (int i = 0; i < dimension; i++) {
            for (int j = i + 1; j < dimension; j++) {
                distances[i][j] = calculatePairwiseDistance(i, j);
                distances[j][i] = distances[i][j];
            }
            distances[i][i] = 0.0;
        }
        distancesKnown = true;
    }","    public void rescale() {
        double[][] sim = new double[numSeqs][numSeqs];
        for (int i = 0; i < numSeqs; i++) {
            for (int j = i; j < numSeqs; j++) {
                if (this.getDistance(i, j) > 0) {
                    sim[i][j] = (this.getDistance(i, j) - kMin) * 2 / (kMax - kMin);
                }
                sim[j][i] = sim[i][j];
            }
        }
        setDistances(sim);
        System.out.println(""K rescaled"");
    }",1,0.99717295
"    String[][] transpose(String[][] data) {
        int r = data.length;
        int c = data[0].length;
        String matrix[][] = new String[c][r];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                matrix[j][i] = data[i][j];
            }
        }
        return matrix;
    }","    private static double[][] createCostMatrix(SimplePoint2d[] cities) {
        final int noCity = cities.length;
        double[][] dMat = new double[noCity][noCity];
        for (int i = 0; i < noCity; i++) {
            dMat[i][i] = 0.0;
            for (int j = i + 1; j < noCity; j++) {
                dMat[i][j] = SimplePoint2d.distance(cities[i], cities[j]);
                dMat[j][i] = dMat[i][j];
            }
        }
        return dMat;
    }",1,0.9959014
"    private boolean deleteLocalDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteLocalDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }","    private static void deleteDir(final File dir) {
        File[] outDirContents = dir.listFiles();
        for (int i = 0; i < outDirContents.length; i++) {
            if (isLink(outDirContents[i])) {
                continue;
            }
            if (outDirContents[i].isDirectory()) {
                deleteDir(outDirContents[i]);
            }
            if (!outDirContents[i].delete() && outDirContents[i].exists()) {
                log.error(""Could not delete "" + outDirContents[i].getAbsolutePath());
            }
        }
        if (!dir.delete()) {
            log.error(""Could not delete "" + dir.getAbsolutePath());
        }
    }",1,0.9981568
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static double[][] transpose(double[][] in) {
        assert in != null;
        int h = in.length;
        int w = in[0].length;
        double[][] out = new double[w][h];
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                out[x][y] = in[y][x];
            }
        }
        return out;
    }",1,0.9973008
"            public void actionPerformed(ActionEvent evt) {
                Object[] buttons = { ""Visit our Website"", ""Ok"" };
                if (JOptionPane.showOptionDialog(JPCApplication.this, ABOUT_US, ""About JPC"", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, buttons, buttons[1]) == 0) {
                    if (Desktop.isDesktopSupported()) {
                        try {
                            Desktop.getDesktop().browse(JPC_URI);
                        } catch (IOException e) {
                            LOGGING.log(Level.INFO, ""Couldn't find or launch the default browser."", e);
                        } catch (UnsupportedOperationException e) {
                            LOGGING.log(Level.INFO, ""Browse action not supported."", e);
                        } catch (SecurityException e) {
                            LOGGING.log(Level.INFO, ""Browse action not permitted."", e);
                        }
                    }
                }
            }","    @Override
    public void widgetSelected(SelectionEvent e) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(e.text));
            } catch (IOException e1) {
                GroofyLogger.getInstance().logException(e1);
            } catch (URISyntaxException e1) {
                GroofyLogger.getInstance().logException(e1);
            }
        }
    }",1,0.99541193
"            public void actionPerformed(ActionEvent telleAction) {
                int leRetour = sonSelectionneurDeFichier.showOpenDialog(saCase.sonEditeurDonjon);
                if (leRetour == JFileChooser.APPROVE_OPTION) {
                    sonFichier = sonSelectionneurDeFichier.getSelectedFile();
                    sonChampCarte.setText(sonFichier.getName());
                }
            }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                generellPathField.setText(dirChooser.getSelectedFile().toString());
            }
        }",1,0.998047
"    static void sort(int[] a) {
        int i = 0;
        while (i < a.length - 1) {
            int j = 0;
            while (j < (a.length - i) - 1) {
                if (a[j] > a[j + 1]) {
                    int aux = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = aux;
                }
                j = j + 1;
            }
            i = i + 1;
        }
    }","    int[] slowSort() {
        int[] values = getValues();
        int n = values.length;
        for (int pass = 1; pass < n; pass++) {
            for (int i = 0; i < n - pass; i++) {
                if (values[i] > values[i + 1]) {
                    int temp = values[i];
                    values[i] = values[i + 1];
                    values[i + 1] = temp;
                }
            }
        }
        return values;
    }",1,0.99830174
"    private void goToWebsite(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }","    @Override
    public void hyperlinkUpdate(HyperlinkEvent e) {
        URL url = e.getURL();
        if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED && Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(url.toURI());
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }",1,0.9968837
"    public static void symmetrizeComponents(double[][] components) {
        for (int i = 0; i < components.length; i++) {
            for (int j = i + 1; j < components.length; j++) {
                components[i][j] += components[j][i];
                components[i][j] *= 0.5;
                components[j][i] = components[i][j];
            }
        }
    }","    private double[][] transpose(double[][] in) {
        double[][] out = new double[in[0].length][in.length];
        for (int r = 0; r < in.length; r++) {
            for (int c = 0; c < in[0].length; c++) {
                out[c][r] = in[r][c];
            }
        }
        return out;
    }",1,0.99726915
"    public static double[][] transpose(double[][] values) {
        double[][] swapValues = new double[values[0].length][values.length];
        for (int x = 0; x < values.length; x++) {
            for (int y = 0; y < values[x].length; y++) {
                swapValues[y][x] = values[x][y];
            }
        }
        return swapValues;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9970698
"    public static double[][] transpose(double[][] matrix) {
        double[][] result = new double[matrix.length][matrix[0].length];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                result[i][j] = matrix[j][i];
            }
        }
        return result;
    }","    void logCorrectMatrix(double p) {
        for (int i = 0; i < numdata; i++) {
            for (int j = 0; j < i; j++) {
                depMatrix[i][j] = 1 / Math.pow(depMatrix[i][j], p);
                depMatrix[j][i] = depMatrix[i][j];
            }
        }
    }",1,0.9961746
"    public RealSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }","    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                int t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }",1,0.997944
"                        public void run() {
                            if (Desktop.isDesktopSupported()) {
                                Desktop desktop = Desktop.getDesktop();
                                if (desktop.isSupported(Desktop.Action.BROWSE)) {
                                    try {
                                        desktop.browse(URI.create(""http://drop.to/goblin""));
                                    } catch (Exception exc) {
                                        System.err.println(""Nije omoguceno krstarenje Internetom"");
                                    }
                                }
                            }
                        }","    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, UIMessages.getInstance().getMessage(""online.documentation.browser.error""));
            }
        } else {
            JOptionPane.showMessageDialog(this, UIMessages.getInstance().getMessage(""online.documentation.browser.error""));
        }
    }",1,0.99172556
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public Matrix getTransposed() {
        if (Transposed != null) return Transposed;
        Matrix result = new Matrix(Cols, Rows);
        for (int i = 0; i < Rows; ++i) {
            for (int j = 0; j < Cols; ++j) {
                result.Values[j][i] = Values[i][j];
            }
        }
        Transposed = result;
        result.Transposed = this;
        return result;
    }",1,0.9957621
"    private static int[][] transpose(int[][] matrix) {
        int[][] transposed = new int[matrix.length][matrix[0].length];
        for (int k = 0; k < matrix.length; k++) {
            for (int j = 0; j < matrix.length; j++) {
                transposed[j][k] = matrix[k][j];
            }
        }
        return transposed;
    }","    public static double[][] transpose(double[][] M) {
        int lines = M.length;
        int columns = M[0].length;
        double[][] Mtrans = new double[columns][lines];
        for (int i = 0; i < lines; i++) {
            for (int j = 0; j < columns; j++) {
                Mtrans[j][i] = M[i][j];
            }
        }
        return Mtrans;
    }",1,0.9986987
"    public static SRPGAnimation makeObject(String fileName, int row, int col, int tileWidth, int tileHeight) {
        String key = fileName.trim().toLowerCase();
        SRPGAnimation animation = (SRPGAnimation) animations.get(key);
        if (animation == null) {
            Image[][] images = GraphicsUtils.getSplit2Images(fileName, tileWidth, tileHeight);
            Image[][] result = new Image[row][col];
            for (int y = 0; y < col; y++) {
                for (int x = 0; x < row; x++) {
                    result[x][y] = images[y][x];
                }
            }
            images = null;
            animations.put(key, animation = makeObject(result[0], result[1], result[2], result[3]));
        }
        return animation;
    }","    public static double[][] transp(double[][] m1) {
        int m = m1.length;
        int n = m1[0].length;
        double[][] ret = new double[n][m];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ret[j][i] = m1[i][j];
            }
        }
        return ret;
    }",1,0.9920256
"    public void guiViewRecommendation(ApplicationType app, RecommendationType rec) {
        try {
            File outputHtml = this.applyViewRecommendationXsl(app, rec);
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                URI uri = outputHtml.toURI();
                logger.debug(""Displaying via browser: "" + uri.toASCIIString());
                desktop.browse(uri);
            } else {
                logger.debug(""Displaying via dialog"");
                String title = ""View Rule: "" + super.getUserFriendlyId(app, rec);
                ViewHtmlDialog recDialog = new ViewHtmlDialog(MetaManager.getMainWindow(), true, title, outputHtml);
                recDialog.setVisible(true);
            }
        } catch (Exception ex) {
            logger.warn("""", ex);
        }
    }","            public void actionPerformed(ActionEvent e) {
                String websiteUrl = ""http://amun.phpsx.org"";
                try {
                    URI websiteUri = new URI(websiteUrl);
                    if (Desktop.isDesktopSupported()) {
                        Desktop desktop = Desktop.getDesktop();
                        if (desktop.isSupported(Desktop.Action.BROWSE)) {
                            desktop.browse(websiteUri);
                        } else {
                            JOptionPane.showMessageDialog(null, websiteUrl);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, websiteUrl);
                    }
                } catch (Exception ex) {
                    Zubat.handleException(ex);
                    JOptionPane.showMessageDialog(null, websiteUrl);
                }
            }",1,0.99711907
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static double[][] calcTranspose(double[][] mat) {
        double[][] transpose = new double[mat[0].length][mat.length];
        for (int a = 0; a < transpose.length; a++) {
            for (int b = 0; b < transpose[0].length; b++) {
                transpose[a][b] = mat[b][a];
            }
        }
        return transpose;
    }",1,0.9967792
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static double[][] calcTranspose(double[][] mat) {
        double[][] transpose = new double[mat[0].length][mat.length];
        for (int a = 0; a < transpose.length; a++) {
            for (int b = 0; b < transpose[0].length; b++) {
                transpose[a][b] = mat[b][a];
            }
        }
        return transpose;
    }",1,0.9967792
"    public final void randomize(int[] index, Random random) {
        for (int j = index.length - 1; j > 0; j--) {
            int k = random.nextInt(j + 1);
            int temp = index[j];
            index[j] = index[k];
            index[k] = temp;
        }
    }","    public static final void shuffle(int[] list) {
        for (int i = list.length - 1; i >= 0; i--) {
            int j = rand.nextInt(i + 1);
            if (i == j) {
                continue;
            }
            int tmp = list[i];
            list[i] = list[j];
            list[j] = tmp;
        }
    }",1,0.99773014
"    public static double[][] transpose(double[][] M) {
        double[][] O = new double[M[0].length][M.length];
        for (int i = 0; i < M.length; i++) {
            for (int j = 0; j < M[0].length; j++) {
                O[j][i] = M[i][j];
            }
        }
        return O;
    }","    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                int t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }",1,0.99711233
"    private float[][] transpose(float[][] m) {
        float[][] toReturn = new float[m[0].length][m.length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++) {
                toReturn[j][i] = m[i][j];
            }
        }
        return toReturn;
    }","    public static Image[][] getFlipHorizintalImage2D(Image[][] pixels) {
        int w = pixels.length;
        int h = pixels[0].length;
        Image pixel[][] = new Image[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                pixel[i][j] = pixels[j][i];
            }
        }
        return pixel;
    }",1,0.99766606
"    public static double[][] invertMatrix(double[][] matrix) {
        int firstDimentionOfResultMatrix = matrix[0].length;
        int secondDimentionOfResultMatrix = matrix.length;
        double[][] resultMatrix = new double[firstDimentionOfResultMatrix][secondDimentionOfResultMatrix];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                resultMatrix[j][i] = matrix[i][j];
            }
        }
        return resultMatrix;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99730384
"    @Override
    public void actionPerformed(ActionEvent e) {
        if (java.awt.Desktop.isDesktopSupported()) {
            try {
                java.awt.Desktop.getDesktop().browse((java.net.URI) this.getTarget());
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }","            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (Desktop.isDesktopSupported() && e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    try {
                        Desktop desktop = Desktop.getDesktop();
                        desktop.browse(e.getURL().toURI());
                    } catch (IOException ex) {
                        Logger.getLogger(KeySizeChooser.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (URISyntaxException ex) {
                        Logger.getLogger(KeySizeChooser.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }",1,0.99513316
"    void bubbleSort(int[] a) {
        int i = 0;
        int j = a.length - 1;
        int aux = 0;
        int stop = 0;
        while (stop == 0) {
            stop = 1;
            i = 0;
            while (i < j) {
                if (a[i] > a[i + 1]) {
                    aux = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = aux;
                    stop = 0;
                }
                i = i + 1;
            }
            j = j - 1;
        }
    }","    public void bubbleSort(int[] arr) {
        boolean swapped = true;
        int j = 0;
        int tmp;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < arr.length - j; i++) {
                if (arr[i] > arr[i + 1]) {
                    tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    swapped = true;
                }
            }
        }
    }",1,0.99833465
"    private double[][] transpose(double[][] in) {
        double[][] out = new double[in[0].length][in.length];
        for (int r = 0; r < in.length; r++) {
            for (int c = 0; c < in[0].length; c++) {
                out[c][r] = in[r][c];
            }
        }
        return out;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9969942
"    public InvariantsMatrix transpose() throws Exception {
        int[][] tmpData = new int[width()][height()];
        for (int i = 0; i < width(); i++) {
            for (int j = 0; j < height(); j++) {
                tmpData[i][j] = data[j][i];
            }
        }
        return new InvariantsMatrix(tmpData);
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9986499
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","	public static int[][] transpose(int[][] m) {
		int[][] retval = new int[m[0].length][m.length];
		for(int i = 0; i < m.length; i++) {
			for(int j = 0; j < m[0].length; j++) {
				retval[j][i] = m[i][j];
			}
		}
		return retval;
	}",1,0.9908886
"    public Matrix transpose() {
        final double array[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new DoubleMatrix(array);
    }","    public Matrix transpose() {
        int n = rows();
        int m = columns();
        double[][] newComponents = new double[m][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) newComponents[j][i] = components[i][j];
        }
        return new Matrix(newComponents);
    }",1,0.9985986
"    private static boolean deleteFile(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                deleteFile(child);
            }
        }
        return resource.delete();
    }","    private void delete(File file) {
        if (file.isDirectory()) {
            for (File f : file.listFiles()) {
                delete(f);
            }
        }
        file.delete();
    }",1,0.9985163
"    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }","    @Override
    public Matrix transpose(Factory factory) {
        if (factory == null) throw new NullPointerException();
        double result[][] = new double[columns][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                result[j][i] = self[i][j];
            }
        }
        return factory.createMatrix(result);
    }",1,0.9972322
"    public Matrix getTransposed() {
        if (Transposed != null) return Transposed;
        Matrix result = new Matrix(Cols, Rows);
        for (int i = 0; i < Rows; ++i) {
            for (int j = 0; j < Cols; ++j) {
                result.Values[j][i] = Values[i][j];
            }
        }
        Transposed = result;
        result.Transposed = this;
        return result;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99576217
"    protected static float[][] trans(float[][] a) {
        int am = a.length;
        int an = a[0].length;
        float[][] t = new float[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                t[j][i] = a[i][j];
            }
        }
        return t;
    }","    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }",1,0.99692184
"    public static double[][] Transpose(double[][] a) {
        if (logger.isLoggable(Level.FINEST)) {
            logger.finest(""Performing Transpose..."");
        }
        int tms = a.length;
        double m[][] = new double[tms][tms];
        for (int i = 0; i < tms; i++) {
            for (int j = 0; j < tms; j++) {
                m[i][j] = a[j][i];
            }
        }
        return m;
    }","    public static int[][] reversalXandY(final int[][] array) {
        int col = array[0].length;
        int row = array.length;
        int[][] result = new int[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }",1,0.99681073
"    public void metodo1() {
        int temp;
        boolean flagDesordenado = true;
        while (flagDesordenado) {
            flagDesordenado = false;
            for (int i = 0; i < this.tamanoTabla - 1; i++) {
                if (tabla[i] > tabla[i + 1]) {
                    flagDesordenado = true;
                    temp = tabla[i];
                    tabla[i] = tabla[i + 1];
                    tabla[i + 1] = temp;
                }
            }
        }
    }","    public void method31() {
        boolean flag = true;
        while (flag) {
            flag = false;
            for (int i = 0; i < anInt772 - 1; i++) if (anIntArray774[i] < anIntArray774[i + 1]) {
                int j = anIntArray774[i];
                anIntArray774[i] = anIntArray774[i + 1];
                anIntArray774[i + 1] = j;
                long l = aLongArray773[i];
                aLongArray773[i] = aLongArray773[i + 1];
                aLongArray773[i + 1] = l;
                flag = true;
            }
        }
    }",1,0.99879247
"    public static double[][] transpose(double[][] doubleBox) {
        YeriDebug.ASSERT(CollectionsToolkit.isRectangular(doubleBox));
        double[][] returnBox = new double[doubleBox[0].length][doubleBox.length];
        for (int i = 0; i < doubleBox.length; i++) {
            for (int j = 0; j < doubleBox[i].length; j++) {
                returnBox[j][i] = doubleBox[i][j];
            }
        }
        return returnBox;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99712515
"    public static int[] bubbleSortOtimizado(int... a) {
        boolean swapped;
        int n = a.length - 2;
        do {
            swapped = false;
            for (int i = 0; i <= n; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
            n = n - 1;
        } while (swapped);
        return a;
    }","    private void bubbleSort(int values[]) {
        int len = values.length - 1;
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < len - i; j++) {
                if (values[j] > values[j + 1]) {
                    int tmp = values[j];
                    values[j] = values[j + 1];
                    values[j + 1] = tmp;
                }
            }
        }
    }",1,0.99767894
"                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (Desktop.isDesktopSupported()) {
                            Desktop desktop = Desktop.getDesktop();
                            try {
                                desktop.browse(uri);
                            } catch (Exception ex) {
                            }
                        }
                    }","        @Override
        public void mouseClicked(final MouseEvent e) {
            if (Desktop.isDesktopSupported()) {
                final Desktop desktop = Desktop.getDesktop();
                try {
                    desktop.browse(new URI(uri));
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                } catch (URISyntaxException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }",1,0.99759257
"    public void bubbleSort(int[] arr) {
        boolean swapped = true;
        int j = 0;
        int tmp;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < arr.length - j; i++) {
                if (arr[i] > arr[i + 1]) {
                    tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    swapped = true;
                }
            }
        }
    }","    public void sortPlayersTurn() {
        Token tempT = new Token();
        Player tempP = new Player(""test name"", tempT);
        int tempN = 0;
        boolean exchangeMade = true;
        for (int i = 0; i < playerNum - 1 && exchangeMade; i++) {
            exchangeMade = false;
            for (int j = 0; j < playerNum - 1 - i; j++) {
                if (diceSum[j] < diceSum[j + 1]) {
                    tempP = players[j];
                    tempN = diceSum[j];
                    players[j] = players[j + 1];
                    diceSum[j] = diceSum[j + 1];
                    players[j + 1] = tempP;
                    diceSum[j + 1] = tempN;
                    exchangeMade = true;
                }
            }
        }
    }",1,0.99510664
"    private void bubbleSort(int values[]) {
        int len = values.length - 1;
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < len - i; j++) {
                if (values[j] > values[j + 1]) {
                    int tmp = values[j];
                    values[j] = values[j + 1];
                    values[j + 1] = tmp;
                }
            }
        }
    }","    public int NthLowestSkill(int n) {
        int[] skillIds = new int[] { 0, 1, 2, 3 };
        for (int j = 0; j < 3; j++) {
            for (int i = 0; i < 3 - j; i++) {
                if (Skills()[skillIds[i]] > Skills()[skillIds[i + 1]]) {
                    int temp = skillIds[i];
                    skillIds[i] = skillIds[i + 1];
                    skillIds[i + 1] = temp;
                }
            }
        }
        return skillIds[n - 1];
    }",1,0.9973366
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(JCards.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + JCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + JCards.GPL_URL + ""' to view GPL"");
            }
        }","                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (Desktop.isDesktopSupported()) {
                            Desktop desktop = Desktop.getDesktop();
                            try {
                                desktop.browse(uri);
                            } catch (Exception ex) {
                            }
                        }
                    }",1,0.9955296
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public RealSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",1,0.99640787
"    public static void main(String[] args) {
        System.out.println(""Chapter 9: example Ligatures1"");
        System.out.println(""-> Creates a PDF file with a ligaturize method."");
        System.out.println(""-> jars needed: iText.jar"");
        System.out.println(""-> resources needed: arial.ttf"");
        System.out.println(""-> file generated: ligatures1.pdf"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter09/ligatures1.pdf""));
            document.open();
            BaseFont bf;
            Font font;
            bf = BaseFont.createFont(""c:/windows/fonts/arial.ttf"", BaseFont.CP1252, BaseFont.EMBEDDED);
            font = new Font(bf, 12);
            document.add(new Paragraph(""Movie title: Love at First Hiccough (Denmark)"", font));
            document.add(new Paragraph(""directed by Tomas Villum Jensen"", font));
            document.add(new Paragraph(""Kærlighed ved første hik"", font));
            document.add(new Paragraph(ligaturize(""Kaerlighed ved f/orste hik""), font));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public static void main(String[] args) {
        System.out.println(""Chapter 9: example SymbolSubstitution"");
        System.out.println(""-> Creates a PDF file that uses a special Phrase constructor."");
        System.out.println(""-> jars needed: iText.jar"");
        System.out.println(""-> file generated: symbol_substitution.pdf"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter09/symbol_substitution.pdf""));
            document.open();
            String text = ""What is the "" + (char) 945 + ""-coefficient of the "" + (char) 946 + ""-factor in the "" + (char) 947 + ""-equation?"";
            document.add(Phrase.getInstance(text));
            document.add(Chunk.NEWLINE);
            for (int i = 913; i < 970; i++) {
                document.add(Phrase.getInstance(String.valueOf(i) + "": "" + (char) i + "" ""));
            }
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",1,0.99757755
"    public RMatrix transposed() {
        RMatrix m = new RMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }","    public void toSimilarity() {
        double[][] sim = new double[numSeqs][numSeqs];
        for (int i = 0; i < numSeqs; i++) {
            for (int j = i; j < numSeqs; j++) {
                sim[i][j] = 1 - this.getDistance(i, j);
                sim[j][i] = sim[i][j];
            }
        }
        setDistances(sim);
    }",1,0.99542326
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static double[][] transpose(double[][] in) {
        assert in != null;
        int h = in.length;
        int w = in[0].length;
        double[][] out = new double[w][h];
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                out[x][y] = in[y][x];
            }
        }
        return out;
    }",1,0.9973008
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","    public float[][] transposeMatrix(float[][] a) {
        int n = a.length;
        int m = a[0].length;
        float[][] b = new float[m][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                b[j][i] = a[i][j];
            }
        }
        return (b);
    }",1,0.99749035
"	public static void copyFile3(File srcFile, File destFile) throws IOException {
		InputStream in = new FileInputStream(srcFile);
		OutputStream out = new FileOutputStream(destFile);

		byte[] buf = new byte[1024];
		int len;
		while((len = in.read(buf)) > 0) {
			out.write(buf, 0, len);
		}
		in.close();
		out.close();
	}","	public static void copyFile6(File srcFile, File destFile) throws FileNotFoundException {
		Scanner s = new Scanner(srcFile);
		PrintWriter pw = new PrintWriter(destFile);
		while(s.hasNextLine()) {
			pw.println(s.nextLine());
		}
		pw.close();
		s.close();
	}",1,0.9983662
"    public RMatrix transposed() {
        RMatrix m = new RMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }","    public static double[][] transposeMatrix(double[][] vector) {
        double[][] tm = new double[vector[0].length][vector.length];
        for (int i = 0; i < tm.length; i++) {
            for (int j = 0; j < tm[i].length; j++) {
                tm[i][j] = vector[j][i];
            }
        }
        return tm;
    }",1,0.997756
"                @Override
                public void mouseClicked(MouseEvent e) {
                    if (!e.isPopupTrigger() && SwingUtilities.isLeftMouseButton(e)) {
                        if (Desktop.isDesktopSupported()) {
                            try {
                                StyledDocument doc = (StyledDocument) getJtpChannelText().getDocument();
                                String url = (String) doc.getCharacterElement(getJtpChannelText().viewToModel(e.getPoint())).getAttributes().getAttribute(TextStyle.IDENTIFIER_URL);
                                if (url != null) {
                                    Desktop.getDesktop().browse(new java.net.URI(StringHelper.addProcotol(url, ""http://"")));
                                }
                            } catch (Exception ex) {
                            }
                        }
                    }
                }","            @Override
            public void mouseClicked(MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    try {
                        Desktop.getDesktop().browse(new URI(resourceMap.getString(""Application.homepage"")));
                    } catch (URISyntaxException urise) {
                        logger.log(Level.WARNING, ""Incorrect URI"", urise);
                    } catch (IOException ioe) {
                        logger.log(Level.WARNING, ""General IO Error"", ioe);
                    }
                }
            }",1,0.9950482
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(MasteryCards.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
            }
        }","    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }",1,0.9957649
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","    public static double[][] transpose(double[][] object) {
        double[][] transpose = new double[object[0].length][object.length];
        for (int i = 0; i < object.length; i++) {
            for (int x = 0; x < transpose.length; x++) {
                transpose[x][i] = object[i][x];
            }
        }
        return transpose;
    }",1,0.99787366
"    public static int createEmptyCart() {
        int SHOPPING_ID = 0;
        Connection con = null;
        try {
            con = getConnection();
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
        }
        try {
            PreparedStatement insert_cart = null;
            SHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber(""shopping_cart""));
            insert_cart = con.prepareStatement(""INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )"");
            insert_cart.setInt(1, SHOPPING_ID);
            insert_cart.executeUpdate();
            con.commit();
            insert_cart.close();
            returnConnection(con);
        } catch (java.lang.Exception ex) {
            try {
                con.rollback();
                ex.printStackTrace();
            } catch (Exception se) {
                System.err.println(""Transaction rollback failed."");
            }
        }
        return SHOPPING_ID;
    }","    public static void refreshSession(int C_ID) {
        Connection con = null;
        try {
            con = getConnection();
            PreparedStatement updateLogin = con.prepareStatement(""UPDATE customer SET c_login = NOW(), c_expiration = DATE_ADD(NOW(), INTERVAL 2 HOUR) WHERE c_id = ?"");
            updateLogin.setInt(1, C_ID);
            updateLogin.executeUpdate();
            con.commit();
            updateLogin.close();
            returnConnection(con);
        } catch (java.lang.Exception ex) {
            try {
                con.rollback();
                ex.printStackTrace();
            } catch (Exception se) {
                System.err.println(""Transaction rollback failed."");
            }
        }
    }",1,0.996969
"    public static Image[][] reversalXandY(final Image[][] array) {
        int col = array[0].length;
        int row = array.length;
        Image[][] result = new Image[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","    public static double[][] transposeMatrix(double[][] vector) {
        double[][] tm = new double[vector[0].length][vector.length];
        for (int i = 0; i < tm.length; i++) {
            for (int j = 0; j < tm[i].length; j++) {
                tm[i][j] = vector[j][i];
            }
        }
        return tm;
    }",1,0.99575764
"    public static void main(String[] args) {
        Document document = new Document(PageSize.A4);
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""ThePdf.pdf""));
            document.open();
            document.addTitle(""A list of persons"");
            document.addAuthor(""Toni Kostov"");
            document.addSubject(""Generating PDF from mock up data"");
            document.addKeywords(""iText, pdf, generatior, generation"");
            document.addCreator(""Java code using iText"");
            MockUpData data = new MockUpData();
            List<Person> persons = data.generatePersonList();
            int counter = 0;
            for (int i = 0; i < persons.size(); i++) {
                Person person = persons.get(i);
                PdfPTable table = new PdfPTable(2);
                int columnWidths[] = { 10, 20 };
                table.setWidths(columnWidths);
                table.setWidthPercentage(100);
                table.setHorizontalAlignment(Element.ALIGN_LEFT);
                PdfPCell headerCell = new PdfPCell();
                headerCell.setColspan(2);
                headerCell.setGrayFill(0.9f);
                headerCell.setMinimumHeight(10f);
                table.addCell(headerCell);
                table.addCell(""Name: "");
                table.addCell(person.getFirstName() + "" "" + person.getLastName());
                table.addCell(""Address: "");
                table.addCell(person.getAddress().getStreetNumber() + "", "" + person.getAddress().getStreetName());
                table.addCell("""");
                table.addCell(String.valueOf(person.getAddress().getPostalCode()));
                table.addCell("""");
                table.addCell(person.getAddress().getCity());
                table.addCell("""");
                table.addCell(person.getAddress().getCountry());
                table.setSplitRows(false);
                document.add(new Paragraph("" ""));
                document.add(new DottedLineSeparator());
                document.add(new Paragraph("" ""));
                document.add(table);
                counter++;
                if (counter > 4) {
                    counter = 0;
                    document.newPage();
                }
            }
            document.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (DocumentException e) {
            e.printStackTrace();
        }
    }","    public static void main(String[] args) {
        Document document = new Document(PageSize.A4.rotate());
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapterX/gis.pdf""));
            document.open();
            Image large = Image.getInstance(""resources/in_action/chapterX/foobar.png"");
            Image small = Image.getInstance(""resources/in_action/chapterX/foobar_thumb.png"");
            float[] widths = { large.getWidth(), small.getWidth() * 2 };
            PdfPTable table = new PdfPTable(widths);
            PdfPCell cell = new PdfPCell(large, true);
            cell.setBorderWidth(3);
            cell.setBorderColor(new GrayColor(0.7f));
            cell.setUseBorderPadding(true);
            table.addCell(cell);
            PdfPTable innertable = new PdfPTable(1);
            cell = new PdfPCell(small, true);
            cell.setBorder(PdfPCell.BOTTOM);
            cell.setBorderWidth(3);
            cell.setBorderColor(new GrayColor(0.7f));
            cell.setUseBorderPadding(true);
            innertable.addCell(cell);
            PdfPTable legendtable = new PdfPTable(1);
            legendtable.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            legendtable.addCell(""Legend"");
            legendtable.addCell(""test1"");
            legendtable.addCell(""test2"");
            legendtable.addCell(""test3"");
            legendtable.addCell(""test4"");
            legendtable.addCell(""test5"");
            legendtable.addCell(""test6"");
            legendtable.addCell(""test7"");
            cell = new PdfPCell(legendtable);
            cell.setBorder(PdfPCell.BOTTOM);
            cell.setBorderWidth(3);
            cell.setBorderColor(new GrayColor(0.7f));
            cell.setUseBorderPadding(true);
            innertable.addCell(cell);
            cell = new PdfPCell();
            cell.setBorder(PdfPCell.NO_BORDER);
            cell.setBackgroundColor(new GrayColor(0.7f));
            innertable.addCell(cell);
            cell = new PdfPCell(innertable);
            cell.setBorderWidth(3);
            cell.setBorderColor(new GrayColor(0.7f));
            cell.setUseBorderPadding(true);
            cell.setCellEvent(new GisExample());
            table.addCell(cell);
            document.add(table);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        document.close();
    }",1,0.9986267
"    public static double[][] invert(double[][] matrix) {
        double[][] result = new double[matrix[0].length][matrix.length];
        for (int row = 0; row < matrix.length; row++) for (int col = 0; col < matrix[row].length; col++) result[col][row] = result[row][col];
        return result;
    }","    public static final float[][] transpose4x4Matrix(float[][] m) {
        float[][] matrix = new float[4][4];
        for (int i = 0; i < 4; ++i) for (int j = 0; j < 4; ++j) matrix[i][j] = m[j][i];
        return matrix;
    }",1,0.9974771
"    public QMatrix transposed() {
        QMatrix m = new QMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }","    public void transpose() {
        double[][] new_data = new double[size_y][size_x];
        for (int i = 0; i < size_x; i++) {
            for (int j = 0; j < size_y; j++) {
                new_data[j][i] = data[i][j];
            }
        }
        int dummy = size_x;
        size_x = size_y;
        size_y = dummy;
        data = new_data;
    }",1,0.9953003
"    @SuppressWarnings(""unchecked"")
    public static <T> T[] appendArray(T[] array, T value) {
        Class<?> type = array.getClass().getComponentType();
        T[] newArray = (T[]) Array.newInstance(type, array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[newArray.length - 1] = value;
        return newArray;
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] append(T[] oldArray, T toAppend1, T[] toAppend2) {
        Class<?> component = oldArray.getClass().getComponentType();
        T[] array = (T[]) Array.newInstance(component, oldArray.length + 1 + toAppend2.length);
        System.arraycopy(oldArray, 0, array, 0, oldArray.length);
        array[oldArray.length] = toAppend1;
        System.arraycopy(toAppend2, 0, array, oldArray.length + 1, toAppend2.length);
        return array;
    }",1,0.9969506
"    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
        }
    }","    public void browseTo(String url) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(new URI(url));
            } catch (IOException e) {
                e.printStackTrace();
            } catch (URISyntaxException e) {
                e.printStackTrace();
            }
        }
    }",1,0.99875593
"                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (Desktop.isDesktopSupported()) {
                            Desktop desktop = Desktop.getDesktop();
                            try {
                                desktop.browse(new URI(""http://acts202.sourceforge.net""));
                                d.dispose();
                            } catch (IOException e1) {
                            } catch (URISyntaxException e2) {
                            }
                        } else {
                        }
                    }","    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }",1,0.99568695
"                    public void actionPerformed(ActionEvent e) {
                        if (Desktop.isDesktopSupported()) {
                            try {
                                Desktop.getDesktop().browse(monitor.getMainPageURI());
                            } catch (IOException err) {
                            }
                        }
                    }","    private void open(File target) throws IOException {
        if (Desktop.isDesktopSupported()) {
            Desktop.getDesktop().browse(target.toURI());
        }
    }",1,0.9875572
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static final double fibonacciNumber(int n) {
        if (n < 0) return Double.NaN;
        if (n == 0) return 0;
        if (n == 1) return 1;
        return fibonacciNumber(n - 1) + fibonacciNumber(n - 2);
    }",1,0.9969405
"    public static void main(String[] args) {
        System.out.println(""Chapter 1 example 6: Meta Information"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0106.pdf""));
            HtmlWriter.getInstance(document, System.out);
            document.addTitle(""Hello World example"");
            document.addSubject(""This example explains step 3 in Chapter 1"");
            document.addKeywords(""Metadata, iText, step 3, tutorial"");
            document.addAuthor(""Bruno Lowagie"");
            document.addHeader(""Expires"", ""0"");
            document.open();
            document.add(new Paragraph(""Hello World""));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public static void main(String[] args) {
        System.out.println(""Chapter 6 example 1: Adding a Gif, Jpeg and Png-file using urls"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0601.pdf""));
            HtmlWriter.getInstance(document, new FileOutputStream(""Chap0601.html""));
            document.open();
            Image gif = Image.getInstance(new URL(""http://www.lowagie.com/iText/tutorial/vonnegut.gif""));
            Image jpeg = Image.getInstance(new URL(""http://www.lowagie.com/iText/tutorial/myKids.jpg""));
            Image png = Image.getInstance(new URL(""http://www.lowagie.com/iText/tutorial/hitchcock.png""));
            document.add(gif);
            document.add(jpeg);
            document.add(png);
        } catch (MalformedURLException mue) {
            System.err.println(mue.getMessage());
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",1,0.99837136
"    private void downloadlblMouseClicked(java.awt.event.MouseEvent evt) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(Way2SMSCore.downloadlink));
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        }
    }","    private void authorMouseClicked(java.awt.event.MouseEvent evt) {
        click = true;
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(""http://www.blogjava.net/hadeslee""));
            } catch (URISyntaxException ex) {
            } catch (IOException ex) {
            }
        }
    }",1,0.9979351
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","    public RealSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }",1,0.9974204
"    public static double[][] transpose(double[][] doubleBox) {
        YeriDebug.ASSERT(CollectionsToolkit.isRectangular(doubleBox));
        double[][] returnBox = new double[doubleBox[0].length][doubleBox.length];
        for (int i = 0; i < doubleBox.length; i++) {
            for (int j = 0; j < doubleBox[i].length; j++) {
                returnBox[j][i] = doubleBox[i][j];
            }
        }
        return returnBox;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99712515
"    public static LImage[][] reversalXandY(final LImage[][] array) {
        int col = array[0].length;
        int row = array.length;
        LImage[][] result = new LImage[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","	public static int[][] transpose(int[][] m) {
		int[][] retval = new int[m[0].length][m.length];
		for(int i = 0; i < m.length; i++) {
			for(int j = 0; j < m[0].length; j++) {
				retval[j][i] = m[i][j];
			}
		}
		return retval;
	}",1,0.9900025
"    public MathRealMatrix transpose() {
        int m = this.M;
        int n = this.N;
        double[][] mData = this.Data;
        double[][] newData = new double[n][m];
        for (int ni = 0; ni < n; ni++) {
            for (int mi = 0; mi < m; mi++) {
                newData[ni][mi] = mData[mi][ni];
            }
        }
        return new MathRealMatrix(newData);
    }","    private Object[][] transform(Object[][] src) {
        int col = src.length;
        int row = src[0].length;
        Object[][] dest = new Object[row][col];
        for (int i = 0; i < col; i++) {
            for (int j = 0; j < row; j++) {
                dest[j][i] = src[i][j];
            }
        }
        return dest;
    }",1,0.99635226
"    int[] slowSort() {
        int[] values = getValues();
        int n = values.length;
        for (int pass = 1; pass < n; pass++) {
            for (int i = 0; i < n - pass; i++) {
                if (values[i] > values[i + 1]) {
                    int temp = values[i];
                    values[i] = values[i + 1];
                    values[i + 1] = temp;
                }
            }
        }
        return values;
    }","    @Override
    public void sortArray(int[] array) {
        boolean sorted = false;
        while (sorted == false) {
            sorted = true;
            for (int i = 0; i <= array.length - 2; i++) {
                if (array[i] > array[i + 1]) {
                    int temp = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = temp;
                    sorted = false;
                }
            }
        }
    }",1,0.99859434
"    public void testSentEquals() {
        String botRecord = ""hello"";
        String msg = ""This is fun, hello how are you"";
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile("".*?hel"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(msg);
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }","    public void testMultiple() {
        Pattern pattern;
        Matcher matcher;
        boolean _found = false;
        String _regex = ""hell."";
        String _in = ""hello mom"";
        pattern = Pattern.compile(_regex);
        matcher = pattern.matcher(_in);
        while (matcher.find()) {
            System.out.println("" : Text \"""" + matcher.group() + ""\"" start :  "" + matcher.start() + "" end : "" + matcher.end() + ""."");
            _found = true;
        }
        if (!_found) {
            System.out.println(""No match found."");
        }
        assertTrue(_found);
    }",1,0.9987751
"    public static String getAlbumName(String author, String track) {
        String url = ""http://musicbrainz.org/ws/1/track/?type=xml&title="" + track.replace(' ', '+') + ""&artist="" + author.replace(' ', '+');
        String ret = HTTP.get(url);
        System.out.println(url);
        String regexp = ""<title>[^<]*</title>"";
        Pattern p = Pattern.compile(regexp);
        Matcher m = p.matcher(ret);
        while (m.find()) {
            String s = ret.substring(m.start() + 7, m.end() - 8);
            if (!s.toUpperCase().equals(track.toUpperCase())) return s;
        }
        return """";
    }","    private String filterReferences(String text) {
        String pattern = ""\\`([^\\`]+)\\`"";
        Pattern p = Pattern.compile(pattern);
        Matcher m = p.matcher(text);
        StringBuffer myStringBuffer = new StringBuffer();
        while (m.find()) {
            String ref = text.substring(m.start() + 1, m.end() - 1);
            m.appendReplacement(myStringBuffer, oxdoc.project.linkToSymbol(ref));
        }
        return m.appendTail(myStringBuffer).toString();
    }",1,0.9972802
"    public static Double[][] transposeMatrix(Double[][] m) {
        int r = m.length;
        int c = m[0].length;
        Double[][] t = new Double[c][r];
        for (int i = 0; i < r; ++i) {
            for (int j = 0; j < c; ++j) {
                t[j][i] = m[i][j];
            }
        }
        return t;
    }","    public static Object[][] dimTransform(Object[][] obj) {
        if ((obj == null) || (obj.length <= 0)) {
            return null;
        }
        Object[][] newArr = new Object[obj[0].length][obj.length];
        for (int i = 0; i < newArr.length; ++i) {
            for (int j = 0; j < obj.length; ++j) {
                newArr[i][j] = obj[j][i];
            }
        }
        return newArr;
    }",1,0.9973293
"    public RMatrix transposed() {
        RMatrix m = new RMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }","    public static double[][] transpose(final double[][] m) {
        final double[][] mt = new double[m[0].length][m.length];
        for (int i = 0; i < mt.length; i++) {
            for (int j = 0; j < mt[i].length; j++) {
                mt[i][j] = m[j][i];
            }
        }
        return mt;
    }",1,0.9971363
"    public static void main(String[] args) {
        System.out.println(""Chapter 6 example 6: Absolute Positioning of an Image"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0606.pdf""));
            document.open();
            Image png = Image.getInstance(""hitchcock.png"");
            png.setAbsolutePosition(171, 250);
            document.add(png);
            png.setAbsolutePosition(342, 500);
            document.add(png);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public static void main(String[] args) {
        System.out.println(""Chapter 8: example Type1FontFromPFBwithPFM"");
        System.out.println(""-> Creates a PDF file with Type1 font."");
        System.out.println(""-> jars needed: iText.jar"");
        System.out.println(""   extra resources needed: cmr10.pfm and cmr10.pfb"");
        System.out.println(""-> file generated: type1_font_pfb_with_pfm.pdf"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter08/type1_font_pfb_with_pfm.pdf""));
            document.open();
            BaseFont bf = BaseFont.createFont(""resources/in_action/chapter08/cmr10.pfm"", """", BaseFont.EMBEDDED);
            Font font = new Font(bf, 12);
            document.add(new Paragraph(""0123456789\nabcdefghijklmnopqrstuvwxyz\nABCDEFGHIJKLMNOPQRSTUVWXZ"", font));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",1,0.99602085
"    public final void randomize(int[] index, Random random) {
        for (int j = index.length - 1; j > 0; j--) {
            int k = random.nextInt(j + 1);
            int temp = index[j];
            index[j] = index[k];
            index[k] = temp;
        }
    }","    public static synchronized <T> void shuffle(T[] anArray) {
        int n = anArray.length;
        for (int i = n - 1; i >= 1; i--) {
            int j = randomSource.nextInt(i + 1);
            T temp = anArray[j];
            anArray[j] = anArray[i];
            anArray[i] = temp;
        }
    }",1,0.9971993
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static double[][] transpose(double[][] M) {
        double[][] tM = new double[M[0].length][M.length];
        for (int i = 0; i < tM.length; i++) {
            for (int j = 0; j < tM[0].length; j++) {
                tM[i][j] = M[j][i];
            }
        }
        return tM;
    }",1,0.996632
"    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
        }
    }","    private void homepageHyperlinkActionPerformed(java.awt.event.ActionEvent evt) {
        String link = homepageHyperlink.getText();
        if (Desktop.isDesktopSupported()) {
            Desktop dt = Desktop.getDesktop();
            if (dt.isSupported(Desktop.Action.BROWSE)) {
                try {
                    dt.browse(new URI(link));
                } catch (Exception ex) {
                    Logger.getLogger(GeoItMapperAboutBox.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }",1,0.9953201
"    private static void browseHelp() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(new URI(TargetedProjectionPursuit.HELP_URL));
            } catch (Exception e) {
            }
        } else {
        }
    }","	public static void openURL(URI uri) throws IOException, URISyntaxException {
		if(Desktop.isDesktopSupported()) {
			Desktop desktop = Desktop.getDesktop();
			desktop.browse(uri);
		} else {
			throw new UnsupportedOperationException(""Desktop is not supported on this platform."");
		}
	}",1,0.9899309
"            public void hyperlinkUpdate(HyperlinkEvent hle) {
                if (HyperlinkEvent.EventType.ACTIVATED.equals(hle.getEventType())) {
                    if (Desktop.isDesktopSupported()) {
                        try {
                            Desktop.getDesktop().browse(hle.getURL().toURI());
                        } catch (Exception ex) {
                            Logger.getLogger(Navigator.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
                        }
                    }
                }
            }","    public static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }",1,0.99226534
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public void transpose() {
        double[][] new_data = new double[size_y][size_x];
        for (int i = 0; i < size_x; i++) {
            for (int j = 0; j < size_y; j++) {
                new_data[j][i] = data[i][j];
            }
        }
        int dummy = size_x;
        size_x = size_y;
        size_y = dummy;
        data = new_data;
    }",1,0.9959278
"    private int[][] balanceMatchDayMatrix(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = i + 1; j < matrix.length; j++) {
                if (matrix[i][j] % 2 != 0) {
                    int tmp = matrix[i][j];
                    matrix[i][j] = matrix[j][i];
                    matrix[j][i] = tmp;
                }
            }
        }
        return matrix;
    }","    public static double[][] getCorrelations(double[][] v) {
        double[][] c = new double[v.length][v.length];
        for (int i = 0; i < v.length - 1; i++) {
            for (int j = i + 1; j < v.length; j++) {
                c[i][j] = Pearson.calcCorrelation(v[i], v[j]);
                c[j][i] = c[i][j];
            }
        }
        return c;
    }",1,0.99743176
"    public static double[][] transposed(double[][] matrix) {
        int row = matrix[0].length;
        int line = matrix.length;
        double[][] ans = new double[row][line];
        for (int i = 0; i < line; i++) {
            for (int j = 0; j < row; j++) {
                ans[j][i] = matrix[i][j];
            }
        }
        return ans;
    }","    public IntSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }",1,0.9953619
"    public ZMatrix transposed() {
        ZMatrix m = new ZMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }","    public Matrix transpose() {
        Matrix matrixT = new Matrix(columnCount, rowCount);
        int i, j;
        for (i = 0; i < rowCount; i++) {
            for (j = 0; j < columnCount; j++) {
                matrixT.matrix[j][i] = matrix[i][j];
            }
        }
        return matrixT;
    }",1,0.99891233
"    public IntSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9963156
"    public static Object[] append(Object[] source, Object obj) {
        Object[] copy = (Object[]) Array.newInstance(source.getClass().getComponentType(), source.length + 1);
        System.arraycopy(source, 0, copy, 0, source.length);
        copy[source.length] = obj;
        return copy;
    }","    public static Object[] append(Object[] lst, Object[] lst1) {
        Object[] l = (Object[]) Array.newInstance(lst.getClass().getComponentType(), lst.length + lst1.length);
        System.arraycopy(lst, 0, l, 0, lst.length);
        System.arraycopy(lst1, 0, l, lst.length, lst1.length);
        return l;
    }",1,0.9983426
"    public Matrix transpose() {
        Matrix result = new Matrix(columns(), rows());
        for (int i = 0; i < rows(); i++) {
            for (int k = 0; k < columns(); k++) {
                result.elements[k][i] = elements[i][k];
            }
        }
        return result;
    }","    public RealSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",1,0.9970304
"    public static int[][] transpose(int[][] M) {
        int[][] tM = new int[M[0].length][M.length];
        for (int i = 0; i < tM.length; i++) {
            for (int j = 0; j < tM[0].length; j++) {
                tM[i][j] = M[j][i];
            }
        }
        return tM;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9973647
"    public void open() {
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = chooser.getSelectedFile();
            String content = readFile(file);
            field.setText(content);
        }
    }","    private boolean chooseDirectory() {
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setAcceptAllFileFilterUsed(false);
        int returnval = fc.showOpenDialog(this);
        if (returnval == JFileChooser.APPROVE_OPTION) {
            directory = fc.getSelectedFile();
            btnOk.setEnabled(true);
            return true;
        }
        return false;
    }",1,0.9973353
"    @SuppressWarnings(""unchecked"")
    public static <T> T[] addToArray(T[] array, T el) {
        T[] newArray = (T[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = el;
        return newArray;
    }","    public static final Object[] insert(Object[] array, Object o, int index) {
        Object[] tArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, tArray, 0, array.length);
        System.arraycopy(tArray, index, tArray, index + 1, array.length - index);
        tArray[index] = o;
        return tArray;
    }",1,0.99757653
"    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                int t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }","    public boolean InitializeDistances() {
        Distances = new double[nrow][nrow];
        for (int i = 0; i < nrow; i++) {
            for (int j = 0; j < i; j++) {
                Distances[i][j] = DPM.Dist(Net[i], Net[j], ncol);
                Distances[j][i] = Distances[i][j];
            }
            Distances[i][i] = DPM.Dist(Net[i], Net[i], ncol);
        }
        return true;
    }",1,0.9937897
"    public static void browseToURI(final String strURI) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(new URI(strURI));
            } catch (IOException exp) {
                log.error(exp.toString());
            } catch (URISyntaxException exp) {
                log.error(exp.toString());
            }
        } else {
            log.fatal(""Java Desktop API is not supported on this platform."");
        }
    }","    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }",1,0.9952852
"    public IntSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }","    public RoutesMap getInverse() {
        DenseRoutesMap transposed = new DenseRoutesMap(distances.length);
        for (int i = 0; i < distances.length; i++) {
            for (int j = 0; j < distances.length; j++) {
                transposed.distances[i][j] = distances[j][i];
            }
        }
        return transposed;
    }",1,0.9968973
"    static Object setLength(Object array, int newLength) {
        Object t = Array.newInstance(array.getClass().getComponentType(), newLength);
        int oldLength = Array.getLength(array);
        System.arraycopy(array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
        return t;
    }","    private static Object extendArray(Object a1) {
        int n = Array.getLength(a1);
        Object a2 = Array.newInstance(a1.getClass().getComponentType(), n + ARRAY_SIZE_INCREMENT);
        System.arraycopy(a1, 0, a2, 0, n);
        return a2;
    }",1,0.9992119
"    private int[] Tri(int[] pertinence, int taille) {
        boolean change = true;
        int tmp;
        while (change) {
            change = false;
            for (int i = 0; i < taille - 2; i++) {
                if (pertinence[i] < pertinence[i + 1]) {
                    tmp = pertinence[i];
                    pertinence[i] = pertinence[i + 1];
                    pertinence[i + 1] = tmp;
                    change = true;
                }
            }
        }
        return pertinence;
    }","    @Override
    public void sortArray(int[] array) {
        boolean sorted = false;
        while (sorted == false) {
            sorted = true;
            for (int i = 0; i <= array.length - 2; i++) {
                if (array[i] > array[i + 1]) {
                    int temp = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = temp;
                    sorted = false;
                }
            }
        }
    }",1,0.9991105
"    private static double[][] createCostMatrix(SimplePoint2d[] cities) {
        final int noCity = cities.length;
        double[][] dMat = new double[noCity][noCity];
        for (int i = 0; i < noCity; i++) {
            dMat[i][i] = 0.0;
            for (int j = i + 1; j < noCity; j++) {
                dMat[i][j] = SimplePoint2d.distance(cities[i], cities[j]);
                dMat[j][i] = dMat[i][j];
            }
        }
        return dMat;
    }","    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                int t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }",1,0.9958638
"    public void metodo1() {
        int temp;
        boolean flagDesordenado = true;
        while (flagDesordenado) {
            flagDesordenado = false;
            for (int i = 0; i < this.tamanoTabla - 1; i++) {
                if (tabla[i] > tabla[i + 1]) {
                    flagDesordenado = true;
                    temp = tabla[i];
                    tabla[i] = tabla[i + 1];
                    tabla[i + 1] = temp;
                }
            }
        }
    }","    public static int[] bubbleSort2(int[] source) {
        if (null != source && source.length > 0) {
            boolean flag = false;
            while (!flag) {
                for (int i = 0; i < source.length - 1; i++) {
                    if (source[i] > source[i + 1]) {
                        int temp = source[i];
                        source[i] = source[i + 1];
                        source[i + 1] = temp;
                        break;
                    } else if (i == source.length - 2) {
                        flag = true;
                    }
                }
            }
        }
        return source;
    }",1,0.99789786
"        public void mouseClicked(MouseEvent event) {
            if (!Desktop.isDesktopSupported() || !Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                return;
            }
            try {
                Desktop.getDesktop().browse(new URI(AboutInformation.getInstance().getUrl()));
            } catch (Exception e) {
            }
        }","                    public void actionPerformed(ActionEvent e) {
                        if (Desktop.isDesktopSupported()) {
                            try {
                                Desktop.getDesktop().browse(monitor.getMainPageURI());
                            } catch (IOException err) {
                            }
                        }
                    }",1,0.99656487
"    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
        }
    }","    private void openURI(String uriString) {
        try {
            URI uri = new URI(uriString);
            if (java.awt.Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)) {
                    desktop.browse(uri);
                }
            }
        } catch (Exception ex) {
        }
    }",1,0.99755657
"    private static int[][] transpose(int[][] matrix) {
        int[][] transposed = new int[matrix.length][matrix[0].length];
        for (int k = 0; k < matrix.length; k++) {
            for (int j = 0; j < matrix.length; j++) {
                transposed[j][k] = matrix[k][j];
            }
        }
        return transposed;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99784166
"    public static double[][] transposed(double[][] matrix) {
        int row = matrix[0].length;
        int line = matrix.length;
        double[][] ans = new double[row][line];
        for (int i = 0; i < line; i++) {
            for (int j = 0; j < row; j++) {
                ans[j][i] = matrix[i][j];
            }
        }
        return ans;
    }","    private double[][] transpose(double[][] in) {
        double[][] out = new double[in[0].length][in.length];
        for (int r = 0; r < in.length; r++) {
            for (int c = 0; c < in[0].length; c++) {
                out[c][r] = in[r][c];
            }
        }
        return out;
    }",1,0.99808216
"    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9977419
"    public static Object[] append(Object[] oldArray, Object o) {
        NullArgumentException.check(oldArray);
        NullArgumentException.check(o);
        Object[] newArray = (Object[]) Array.newInstance(oldArray.getClass().getComponentType(), oldArray.length + 1);
        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);
        newArray[oldArray.length] = o;
        return newArray;
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] appendToArray(T[] array, T el) {
        T[] newArray = (T[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = el;
        return newArray;
    }",1,0.9979288
"    public void put(String path, File fileToPut) throws IOException {
        FTPClient ftp = new FTPClient();
        try {
            int reply;
            ftp.connect(this.endpointURL, this.endpointPort);
            log.debug(""Ftp put reply: "" + ftp.getReplyString());
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp put server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            ftp.enterLocalPassiveMode();
            InputStream input = new FileInputStream(fileToPut);
            if (ftp.storeFile(path, input) != true) {
                ftp.logout();
                input.close();
                throw new IOException(""FTP put exception"");
            }
            input.close();
            ftp.logout();
        } catch (Exception e) {
            log.error(""Ftp client exception: "" + e.getMessage(), e);
            throw new IOException(e.getMessage());
        }
    }","    public int exists(String fileToCheck) throws IOException {
        FTPClient ftp = new FTPClient();
        int found = 0;
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, this.endpointPort);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.enterLocalPassiveMode();
            if (ftp.listNames(fileToCheck) != null) {
                found = 1;
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return found;
    }",1,0.9990135
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public boolean InitializeDistances() {
        Distances = new double[nrow][nrow];
        for (int i = 0; i < nrow; i++) {
            for (int j = 0; j < i; j++) {
                Distances[i][j] = DPM.Dist(Net[i], Net[j], ncol);
                Distances[j][i] = Distances[i][j];
            }
            Distances[i][i] = DPM.Dist(Net[i], Net[i], ncol);
        }
        return true;
    }",1,0.9934645
"    @Override
    public void mouseClicked(MouseEvent e) {
        if (uri != null && Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(uri);
            } catch (IOException ex) {
                Logger.getLogger(PrettyIcon.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
                ex.printStackTrace();
            }
        }
    }","    @Override
    public void actionPerformed(ActionEvent e) {
        if (Desktop.isDesktopSupported()) {
            Desktop d = Desktop.getDesktop();
            try {
                if (d.isSupported(Desktop.Action.BROWSE)) {
                    d.browse(new URI(""http://zdfmediathk.sourceforge.net/""));
                }
            } catch (Exception ex) {
            }
        }
    }",1,0.99849147
"    public static int[][] mergeColumns(int[]... x) {
        int[][] array = new int[x[0].length][x.length];
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                array[i][j] = x[j][i];
            }
        }
        return array;
    }","    public RoutesMap getInverse() {
        DenseRoutesMap transposed = new DenseRoutesMap(distances.length);
        for (int i = 0; i < distances.length; i++) {
            for (int j = 0; j < distances.length; j++) {
                transposed.distances[i][j] = distances[j][i];
            }
        }
        return transposed;
    }",1,0.997908
"    public static String[][] performTranspose(String[][] fileData, String[][] fileDataTransposed) {
        CompareUtils.ensureTrue(fileDataTransposed.length == fileData[0].length, ""ERROR: Dimensions of output file not correctly set!"");
        CompareUtils.ensureTrue(fileDataTransposed[0].length == fileData.length, ""ERROR: Dimensions of output file not correctly set!"");
        for (int row = 0; row < fileData.length; row++) {
            for (int col = 0; col < fileData[row].length; col++) {
                fileDataTransposed[col][row] = fileData[row][col];
            }
        }
        return fileDataTransposed;
    }","    public static double[][] invertMatrix(double[][] matrix) {
        int firstDimentionOfResultMatrix = matrix[0].length;
        int secondDimentionOfResultMatrix = matrix.length;
        double[][] resultMatrix = new double[firstDimentionOfResultMatrix][secondDimentionOfResultMatrix];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                resultMatrix[j][i] = matrix[i][j];
            }
        }
        return resultMatrix;
    }",1,0.9977514
"    private float[][] transpose(float[][] m) {
        float[][] toReturn = new float[m[0].length][m.length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++) {
                toReturn[j][i] = m[i][j];
            }
        }
        return toReturn;
    }","    public static int[][] transpose(int[][] M) {
        int[][] Mt = new int[M[0].length][M.length];
        for (int i = 0; i < M.length; i++) {
            if (M[i].length != M[0].length) {
                throw new IllegalArgumentException(""The array is not a matrix."");
            }
            for (int j = 0; j < M[0].length; j++) {
                Mt[j][i] = M[i][j];
            }
        }
        return (Mt);
    }",1,0.9929289
"    public static double[][] getCorrelations(double[][] v) {
        double[][] c = new double[v.length][v.length];
        for (int i = 0; i < v.length - 1; i++) {
            for (int j = i + 1; j < v.length; j++) {
                c[i][j] = Pearson.calcCorrelation(v[i], v[j]);
                c[j][i] = c[i][j];
            }
        }
        return c;
    }","    public static double[][] Pearson(double[][] X) {
        double[][] output = new double[X.length][X.length];
        try {
            for (int i = 0; i < X.length; i++) {
                output[i][i] = 1.0;
                for (int j = 0; j < i; j++) {
                    output[i][j] = GeneUtils.pearson(X[i], X[j]);
                    output[j][i] = output[i][j];
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Statistic.class.getName()).log(Level.SEVERE, null, ex);
        }
        return output;
    }",1,0.99710256
"    public final Matrix getTranspose() {
        double[][] newData = new double[width_][height_];
        for (int row = 0; row < height_; row++) {
            for (int col = 0; col < width_; col++) {
                newData[col][row] = data_[row][col];
            }
        }
        return new Matrix(newData);
    }","    public IntSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",1,0.99674153
"            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }","    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }",1,0.9979912
"    public void getBrowser() {
        if (Desktop.isDesktopSupported()) {
            Desktop desk = Desktop.getDesktop();
            if (desk.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desk.browse(new URI(""http://code.google.com/p/gpsnutzung/""));
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        }
    }","        @Override
        public void mouseClicked(final MouseEvent e) {
            if (Desktop.isDesktopSupported()) {
                final Desktop desktop = Desktop.getDesktop();
                try {
                    desktop.browse(new URI(uri));
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                } catch (URISyntaxException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }",1,0.99742126
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static double[][] getCorrMatrix(Gene[] gene) {
        double[][] c = new double[gene.length][gene.length];
        for (int i = 0; i < c.length - 1; i++) {
            for (int j = i + 1; j < c.length; j++) {
                c[i][j] = Pearson.calcCorrelation(gene[i].value, gene[j].value);
                c[j][i] = c[i][j];
            }
        }
        return c;
    }",1,0.9973959
"    public void browse(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                logger.getLogger().log(Level.WARNING, Application.getInstance(GreenTone.class).getContext().getResourceMap().getString(""ErrorMessage.cannotOpenURL"") + "" "" + uri.getPath(), e);
            }
        }
    }","    public void openUrl(URL url) throws IOException {
        if (!Desktop.isDesktopSupported()) throw new IOException(""Desktop not supported"");
        Desktop desktop = Desktop.getDesktop();
        try {
            desktop.browse(url.toURI());
        } catch (URISyntaxException e) {
            throw new IOException(""URL to URI conversion failed"", e);
        }
    }",1,0.99770474
"    public static void bubbleSort(String[] a) {
        Collator myCollator = Collator.getInstance();
        boolean switched = true;
        for (int pass = 0; pass < a.length - 1 && switched; pass++) {
            switched = false;
            for (int i = 0; i < a.length - pass - 1; i++) {
                if (myCollator.compare(a[i], a[i + 1]) > 0) {
                    switched = true;
                    String temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
        }
    }","    public void bubbleSort(int[] arr) {
        boolean swapped = true;
        int j = 0;
        int tmp;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < arr.length - j; i++) {
                if (arr[i] > arr[i + 1]) {
                    tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    swapped = true;
                }
            }
        }
    }",1,0.99875057
"    boolean deleteAll(File file) {
        if (file.isDirectory()) {
            for (File f : file.listFiles()) deleteAll(f);
        }
        return file.delete();
    }","    static void clean(File file) {
        if (!file.exists()) return;
        if (file.isDirectory()) {
            for (File f : file.listFiles()) clean(f);
        }
        file.delete();
    }",1,0.99834347
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","    public IntSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",1,0.9973389
"    protected void processJarFile(File file) throws Exception {
        if (verbose) {
            log(""processing "" + file.toURL());
        }
        File tempFile = File.createTempFile(file.getName(), null, new File(file.getAbsoluteFile().getParent()));
        try {
            ZipInputStream zip = new ZipInputStream(new FileInputStream(file));
            try {
                FileOutputStream fout = new FileOutputStream(tempFile, false);
                try {
                    ZipOutputStream out = new ZipOutputStream(fout);
                    ZipEntry entry;
                    while ((entry = zip.getNextEntry()) != null) {
                        byte bytes[] = getBytes(zip);
                        if (!entry.isDirectory()) {
                            DataInputStream din = new DataInputStream(new ByteArrayInputStream(bytes));
                            if (din.readInt() == CLASS_MAGIC) {
                                bytes = process(bytes);
                            } else {
                                if (verbose) {
                                    log(""ignoring "" + entry.toString());
                                }
                            }
                        }
                        ZipEntry outEntry = new ZipEntry(entry.getName());
                        outEntry.setMethod(entry.getMethod());
                        outEntry.setComment(entry.getComment());
                        outEntry.setSize(bytes.length);
                        if (outEntry.getMethod() == ZipEntry.STORED) {
                            CRC32 crc = new CRC32();
                            crc.update(bytes);
                            outEntry.setCrc(crc.getValue());
                            outEntry.setCompressedSize(bytes.length);
                        }
                        out.putNextEntry(outEntry);
                        out.write(bytes);
                        out.closeEntry();
                        zip.closeEntry();
                    }
                    out.close();
                } finally {
                    fout.close();
                }
            } finally {
                zip.close();
            }
            if (file.delete()) {
                File newFile = new File(tempFile.getAbsolutePath());
                if (!newFile.renameTo(file)) {
                    throw new IOException(""can not rename "" + tempFile + "" to "" + file);
                }
            } else {
                throw new IOException(""can not delete "" + file);
            }
        } finally {
            tempFile.delete();
        }
    }","    protected void processJarFile(final File file, final Set classNames) throws Exception {
        File tempFile = File.createTempFile(file.getName(), null, new File(file.getAbsoluteFile().getParent()));
        try {
            FileOutputStream fout = new FileOutputStream(tempFile, false);
            try {
                final ZipOutputStream out = new ZipOutputStream(fout);
                ZipEntryHandler transformer = new ZipEntryHandler() {

                    public void handleEntry(ZipEntry entry, byte[] byteCode) throws Exception {
                        logger.debug(""starting zip entry : "" + entry.toString());
                        if (!entry.isDirectory()) {
                            DataInputStream din = new DataInputStream(new ByteArrayInputStream(byteCode));
                            if (din.readInt() == CLASS_MAGIC) {
                                ClassDescriptor descriptor = getClassDescriptor(byteCode);
                                ClassTransformer transformer = getClassTransformer(descriptor, classNames);
                                if (transformer == null) {
                                    logger.debug(""no transformer for zip entry :  "" + entry.toString());
                                } else {
                                    logger.info(""processing class : "" + descriptor.getName() + "";  entry = "" + file.getAbsolutePath());
                                    byteCode = transformer.transform(getClass().getClassLoader(), descriptor.getName(), null, null, descriptor.getBytes());
                                }
                            } else {
                                logger.debug(""ignoring zip entry : "" + entry.toString());
                            }
                        }
                        ZipEntry outEntry = new ZipEntry(entry.getName());
                        outEntry.setMethod(entry.getMethod());
                        outEntry.setComment(entry.getComment());
                        outEntry.setSize(byteCode.length);
                        if (outEntry.getMethod() == ZipEntry.STORED) {
                            CRC32 crc = new CRC32();
                            crc.update(byteCode);
                            outEntry.setCrc(crc.getValue());
                            outEntry.setCompressedSize(byteCode.length);
                        }
                        out.putNextEntry(outEntry);
                        out.write(byteCode);
                        out.closeEntry();
                    }
                };
                ZipFileProcessor processor = new ZipFileProcessor(transformer);
                processor.process(file);
                out.close();
            } finally {
                fout.close();
            }
            if (file.delete()) {
                File newFile = new File(tempFile.getAbsolutePath());
                if (!newFile.renameTo(file)) {
                    throw new IOException(""can not rename "" + tempFile + "" to "" + file);
                }
            } else {
                throw new IOException(""can not delete "" + file);
            }
        } finally {
            if (!tempFile.delete()) {
                logger.info(""Unable to cleanup temporary jar file : "" + tempFile.getAbsolutePath());
            }
        }
    }",1,0.99748707
"    @Override
    public void playSpotifySong(Track track) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(track.getId()));
            } catch (IOException e) {
                GroofyLogger.getInstance().logException(e);
            } catch (URISyntaxException e) {
                GroofyLogger.getInstance().logException(e);
            }
        }
    }","    private void goToWebsite(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }",1,0.9963891
"    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }","            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }",1,0.9979912
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public boolean InitializeDistances() {
        Distances = new double[nrow][nrow];
        for (int i = 0; i < nrow; i++) {
            for (int j = 0; j < i; j++) {
                Distances[i][j] = DPM.Dist(Net[i], Net[j], ncol);
                Distances[j][i] = Distances[i][j];
            }
            Distances[i][i] = DPM.Dist(Net[i], Net[i], ncol);
        }
        return true;
    }",1,0.9934645
"    public static double[][] transposed(double[][] matrix) {
        int row = matrix[0].length;
        int line = matrix.length;
        double[][] ans = new double[row][line];
        for (int i = 0; i < line; i++) {
            for (int j = 0; j < row; j++) {
                ans[j][i] = matrix[i][j];
            }
        }
        return ans;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9978712
"    @Override
    public void hyperlinkUpdate(HyperlinkEvent event) {
        if (event.getEventType() == HyperlinkEvent.EventType.ENTERED) {
        } else if (event.getEventType() == HyperlinkEvent.EventType.EXITED) {
        } else if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            try {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    desktop.browse(event.getURL().toURI());
                }
            } catch (URISyntaxException ex) {
                Exceptions.printStackTrace(ex);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }","        @Override
        public void mouseClicked(MouseEvent e) {
            String link = fixedLink;
            if (link == null) {
                link = JHyperlinkLabel.this.getText();
            }
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                try {
                    desktop.browse(URI.create(link));
                } catch (IOException ex) {
                    LOG.log(Level.SEVERE, null, ex);
                }
            } else {
            }
        }",1,0.9979018
"                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (Desktop.isDesktopSupported()) {
                            Desktop desktop = Desktop.getDesktop();
                            try {
                                desktop.browse(new URI(""http://acts202.sourceforge.net""));
                                d.dispose();
                            } catch (IOException e1) {
                            } catch (URISyntaxException e2) {
                            }
                        } else {
                        }
                    }","                @Override
                public void mouseClicked(MouseEvent e) {
                    if (!e.isPopupTrigger() && SwingUtilities.isLeftMouseButton(e)) {
                        if (Desktop.isDesktopSupported()) {
                            try {
                                StyledDocument doc = (StyledDocument) getJtpChannelText().getDocument();
                                String url = (String) doc.getCharacterElement(getJtpChannelText().viewToModel(e.getPoint())).getAttributes().getAttribute(TextStyle.IDENTIFIER_URL);
                                if (url != null) {
                                    Desktop.getDesktop().browse(new java.net.URI(StringHelper.addProcotol(url, ""http://"")));
                                }
                            } catch (Exception ex) {
                            }
                        }
                    }
                }",1,0.9951869
" *
 * @version		1.0
 * @author		Alan Willamson (alan@n-ary.com)
 * @since		JDK1.1.4
 */
public class sort extends java.lang.Object {

    private static String Cal[] = { ""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"", ""August"", ""September"", ""October"", ""November"", ""December"" };

    /**
     * <P>
     * Sorts an array of Strings into asending order
     * <P>
     * @param _data         The array that is to be sorted.
     *
     */","    public void bubbleSort(final int[] s) {
        source = s;
        if (source.length < 2) return;
        boolean go = true;
        while (go) {
            go = false;
            for (int i = 0; i < source.length - 1; i++) {
                int temp = source[i];
                if (temp > source[i + 1]) {
                    source[i] = source[i + 1];
                    source[i + 1] = temp;
                    go = true;
                }
            }
        }
    }",1,0.9880778
"    private void computeMImatrix() {
        int numInAtt = NUM_ATTRIBUTES - 1;
        m_MImatrix = new double[numInAtt][numInAtt];
        for (int i = 0; i < numInAtt; i++) {
            for (int j = i; j < numInAtt; j++) {
                m_MImatrix[i][j] = getAttAttMI(i, j);
                m_MImatrix[j][i] = m_MImatrix[i][j];
            }
        }
    }","    public static double[][] transpose(double[][] matrix) {
        double[][] transposed = new double[matrix[0].length][matrix.length];
        int mLength = matrix.length, m0Length = matrix[0].length;
        for (int i = 0; i < mLength; i++) {
            for (int j = 0; j < m0Length; j++) {
                transposed[j][i] = matrix[i][j];
            }
        }
        return transposed;
    }",1,0.9922759
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(JCards.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + JCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + JCards.GPL_URL + ""' to view GPL"");
            }
        }","                public void actionPerformed(ActionEvent e) {
                    checkAndDisplayMessages();
                    if (Desktop.isDesktopSupported()) {
                        try {
                            URI uri = new URI(""https://www.google.com/voice/"");
                            Desktop.getDesktop().browse(uri);
                        } catch (URISyntaxException e1) {
                            e1.printStackTrace();
                        } catch (IOException e1) {
                            e1.printStackTrace();
                        }
                    }
                }",1,0.9968351
"    public static double[][] transpose(double[][] A) {
        if (logger.isDebugEnabled()) {
            debug(""Matrix A:"", A);
        }
        int _dimension = A.length;
        double[][] B = new double[_dimension][_dimension];
        for (int i = 0; i < _dimension; i++) {
            for (int k = 0; k < _dimension; k++) {
                B[k][i] = A[i][k];
            }
        }
        if (logger.isDebugEnabled()) {
            debug(""B = transpose(A):"", B);
        }
        return B;
    }","    private double[][] computeCrossCorrelationsMatrix() {
        if (number_of_inputs == 0) return null; else {
            double[][] m = new double[number_of_inputs][number_of_inputs];
            for (int i = 0; i < m.length; i++) {
                for (int j = 0; j <= i; j++) {
                    if (i == j) m[i][j] = 1; else {
                        m[i][j] = getCorrelation(Integer.toString(2 * i), Integer.toString(2 * j));
                        m[j][i] = m[i][j];
                    }
                }
            }
            return m;
        }
    }",1,0.99500555
"    @SuppressWarnings(""unchecked"")
    public static <T> T[] prependArray(T[] array, T value) {
        Class<?> type = array.getClass().getComponentType();
        T[] newArray = (T[]) Array.newInstance(type, array.length + 1);
        System.arraycopy(array, 0, newArray, 1, array.length);
        newArray[0] = value;
        return newArray;
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] append(T[] array, T element) {
        T[] array2 = (T[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, array2, 0, array.length);
        array2[array.length] = element;
        return array2;
    }",1,0.9990271
"    public static Object[] remove(Object[] source, int index) {
        Object[] copy = (Object[]) Array.newInstance(source.getClass().getComponentType(), source.length - 1);
        System.arraycopy(source, 0, copy, 0, index);
        System.arraycopy(source, index + 1, copy, index, source.length - index - 1);
        return copy;
    }","    public static Object[] remove(Object[] oldArray, int index) {
        NullArgumentException.check(oldArray);
        if ((index < 0) || (index >= oldArray.length)) {
            throw new ArrayIndexOutOfBoundsException(index);
        }
        Object[] newArray = (Object[]) Array.newInstance(oldArray.getClass().getComponentType(), oldArray.length - 1);
        System.arraycopy(oldArray, 0, newArray, 0, index);
        System.arraycopy(oldArray, index + 1, newArray, index, newArray.length - index);
        return newArray;
    }",1,0.9952466
"    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                p(""IOException "");
                e.printStackTrace();
            }
        } else {
            System.out.println(""Desktop.isDesktopSupported() - NOT"");
        }
    }","    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(uri);
            } catch (IOException e) {
                ourLog.error(""Failed to create hyperlink"", e);
            }
        } else {
            ourLog.error(""Failed to create hyperlink, no desktop available"");
        }
    }",1,0.99870783
"    public void sortingByBubble(int[] array) {
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array.length - 1 - i; j++) {
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }","	public static void BubbleSortInt1(int[] num) {
		boolean flag = true; // set flag to true to begin first pass
		int temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}",1,0.9870732
"    public void sort(int[] mas) {
        int temp;
        boolean t = true;
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    temp = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = temp;
                    t = true;
                }
            }
        }
    }","    protected void sort(double[] a) throws Exception {
        for (int i = a.length - 1; i >= 0; i--) {
            boolean swapped = false;
            for (int j = 0; j < i; j++) {
                if (a[j] > a[j + 1]) {
                    double d = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = d;
                    swapped = true;
                }
            }
            if (!swapped) return;
        }
    }",1,0.9989468
"    public static final double[][] transpose(double[][] a) {
        int am = a.length;
        int an = a[0].length;
        double[][] result = new double[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                result[j][i] = a[i][j];
            }
        }
        return result;
    }","    public static double[][] calcTranspose(double[][] mat) {
        double[][] transpose = new double[mat[0].length][mat.length];
        for (int a = 0; a < transpose.length; a++) {
            for (int b = 0; b < transpose[0].length; b++) {
                transpose[a][b] = mat[b][a];
            }
        }
        return transpose;
    }",1,0.99733496
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(Init.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + Init.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + Init.GPL_URL + ""' to view GPL"");
            }
        }","    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, ""Failed to launch the link, "" + ""your computer is likely misconfigured."", ""Cannot Launch Link"", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, ""Java is not able to launch links on your computer."", ""Cannot Launch Link"", JOptionPane.WARNING_MESSAGE);
        }
    }",1,0.9977749
"    public static Double[][] transposeMatrix(Double[][] m) {
        int r = m.length;
        int c = m[0].length;
        Double[][] t = new Double[c][r];
        for (int i = 0; i < r; ++i) {
            for (int j = 0; j < c; ++j) {
                t[j][i] = m[i][j];
            }
        }
        return t;
    }","    public static double[][] invertMatrix(double[][] matrix) {
        int firstDimentionOfResultMatrix = matrix[0].length;
        int secondDimentionOfResultMatrix = matrix.length;
        double[][] resultMatrix = new double[firstDimentionOfResultMatrix][secondDimentionOfResultMatrix];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                resultMatrix[j][i] = matrix[i][j];
            }
        }
        return resultMatrix;
    }",1,0.99815017
"    public CMatrix transposed() {
        CMatrix m = new CMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }","    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }",1,0.9982002
"    public static void bubbleSort(int[] a) {
        for (int i = a.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                if (a[j] > a[j + 1]) {
                    int tmp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = tmp;
                }
            }
        }
    }","    public int[] do_it(final int[] x) {
        int temp = 0;
        int j = x.length;
        while (j > 0) {
            for (int i = 0; i < j - 1; i++) {
                if (x[i] > x[i + 1]) {
                    temp = x[i];
                    x[i] = x[i + 1];
                    x[i + 1] = temp;
                }
                ;
            }
            ;
            j--;
        }
        ;
        return x;
    }",1,0.9959312
"            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    try {
                        if (Desktop.isDesktopSupported()) {
                            Desktop.getDesktop().browse(e.getURL().toURI());
                        } else Tools.openURL(e.getURL().toString());
                    } catch (Exception x) {
                        x.printStackTrace();
                    }
                }
            }","    @Override
    public void hyperlinkUpdate(HyperlinkEvent e) {
        if (EventType.ACTIVATED.equals(e.getEventType())) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().browse(e.getURL().toURI());
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (URISyntaxException e1) {
                    e1.printStackTrace();
                }
            }
        }
    }",1,0.9977938
"    public static Image[][] getFlipHorizintalImage2D(Image[][] pixels) {
        int w = pixels.length;
        int h = pixels[0].length;
        Image pixel[][] = new Image[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                pixel[i][j] = pixels[j][i];
            }
        }
        return pixel;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.99720436
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","    public static LImage[][] reversalXandY(final LImage[][] array) {
        int col = array[0].length;
        int row = array.length;
        LImage[][] result = new LImage[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }",1,0.996735
"            @Override
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    if (Desktop.isDesktopSupported()) {
                        Desktop desktop = Desktop.getDesktop();
                        if (desktop.isSupported(Desktop.Action.BROWSE)) {
                            try {
                                desktop.browse(URI.create(e.getDescription()));
                                textEntry.requestFocusInWindow();
                                viewPane.setCaretPosition(viewPane.getStyledDocument().getLength());
                            } catch (IOException ex) {
                                JOptionPane.showMessageDialog(viewPane, messages.getString(""ChatPane.msg.CouldNotLaunchDefaultBrowserSeeLogForReason""));
                                logger.log(Level.INFO, messages.getString(""ChatPane.msg.CouldNotLaunchBrowser""), ex);
                            }
                        }
                    }
                }
            }","        @Override
        public void mouseClicked(MouseEvent e) {
            String link = fixedLink;
            if (link == null) {
                link = JHyperlinkLabel.this.getText();
            }
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                try {
                    desktop.browse(URI.create(link));
                } catch (IOException ex) {
                    LOG.log(Level.SEVERE, null, ex);
                }
            } else {
                BrowserStarter.displayURL(link);
            }
        }",1,0.9973488
"    public static LImage[][] getFlipHorizintalImage2D(LImage[][] pixels) {
        int w = pixels.length;
        int h = pixels[0].length;
        LImage pixel[][] = new LImage[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                pixel[i][j] = pixels[j][i];
            }
        }
        return pixel;
    }","    private static double[][] createCostMatrix(SimplePoint2d[] cities) {
        final int noCity = cities.length;
        double[][] dMat = new double[noCity][noCity];
        for (int i = 0; i < noCity; i++) {
            dMat[i][i] = 0.0;
            for (int j = i + 1; j < noCity; j++) {
                dMat[i][j] = SimplePoint2d.distance(cities[i], cities[j]);
                dMat[j][i] = dMat[i][j];
            }
        }
        return dMat;
    }",1,0.9969599
"    public final void transpose() {
        if (!isSquare()) {
            throw new RuntimeException(""Cannot transpose no square matrix!"");
        }
        for (int row = 0; row < height_; row++) {
            for (int col = row + 1; col < width_; col++) {
                double temp = data_[row][col];
                data_[row][col] = data_[col][row];
                data_[col][row] = temp;
            }
        }
    }","    public boolean InitializeDistances() {
        Distances = new double[nrow][nrow];
        for (int i = 0; i < nrow; i++) {
            for (int j = 0; j < i; j++) {
                Distances[i][j] = DPM.Dist(Net[i], Net[j], ncol);
                Distances[j][i] = Distances[i][j];
            }
            Distances[i][i] = DPM.Dist(Net[i], Net[i], ncol);
        }
        return true;
    }",1,0.99687904
"    public static boolean copyDirectory(File srcPath, File dstPath) throws IOException {
        if (srcPath.isDirectory()) {
            if (!dstPath.exists()) {
                dstPath.mkdir();
            }
            String files[] = srcPath.list();
            for (String file : files) {
                copyDirectory(new File(srcPath, file), new File(dstPath, file));
            }
        } else {
            if (!srcPath.exists()) {
                logger.error(""File or directory does not exist."");
                return false;
            } else {
                InputStream in = new FileInputStream(srcPath);
                OutputStream out = new FileOutputStream(dstPath);
                byte[] buf = new byte[1024];
                int len;
                while ((len = in.read(buf)) > 0) {
                    out.write(buf, 0, len);
                }
                in.close();
                out.close();
            }
        }
        logger.info(""Directory "" + srcPath + "" copied to "" + dstPath);
        return true;
    }","    public boolean copyDir(File oSource, File oDestination) {
        try {
            if (oSource.exists()) {
                if (oSource.isDirectory()) {
                    if (!oDestination.exists()) {
                        oDestination.mkdir();
                    }
                    String[] children = oSource.list();
                    for (int i = 0; i < children.length; i++) {
                        copyDir(new File(oSource, children[i]), new File(oDestination, children[i]));
                    }
                } else {
                    InputStream in = new FileInputStream(oSource);
                    OutputStream out = new FileOutputStream(oDestination);
                    byte[] buf = new byte[1024];
                    int len;
                    while ((len = in.read(buf)) > 0) {
                        out.write(buf, 0, len);
                    }
                    in.close();
                    out.close();
                }
                return true;
            }
        } catch (IOException ex) {
            throw new FilesystemException(ex.getMessage() + "" "" + oSource.getName(), ex);
        }
        return false;
    }",1,0.9987391
"    public static double[][] transpose(double[][] data) {
        double[][] dataTransposed = new double[0][0];
        if (data != null) {
            int numRows = data.length;
            if (numRows > 0) {
                int numCols = data[0].length;
                dataTransposed = new double[numCols][numRows];
                for (int i = 0; i < numRows; i++) {
                    for (int j = 0; j < numCols; j++) {
                        dataTransposed[j][i] = data[i][j];
                    }
                }
            }
        }
        return dataTransposed;
    }","    public static double[][] transposeMatrix(double[][] matrix) {
        int nRows = matrix.length;
        int nColumns = matrix[0].length;
        for (int i = 1; i < nRows; i++) if (matrix[i].length != nColumns) throw new IllegalArgumentException(""All rows must be the same length"");
        double[][] transpose = new double[nColumns][nRows];
        for (int i = 0; i < nRows; i++) {
            for (int j = 0; j < nColumns; j++) {
                transpose[j][i] = matrix[i][j];
            }
        }
        return transpose;
    }",1,0.997023
"    public static String[][] dimTransform(String[][] obj) {
        if ((obj == null) || (obj.length <= 0)) {
            return null;
        }
        String[][] newArr = new String[obj[0].length][obj.length];
        for (int i = 0; i < newArr.length; ++i) {
            for (int j = 0; j < obj.length; ++j) {
                newArr[i][j] = obj[j][i];
            }
        }
        return newArr;
    }","    public double[][] getMatrixFromTree(double p) {
        double[][] Mat = new double[numdata][numdata];
        for (int i = 0; i < numdata; i++) {
            for (int j = 0; j < i; j++) {
                Mat[i][j] = -p * Math.log(getTreeDist(i, j));
                Mat[j][i] = Mat[i][j];
            }
        }
        return Mat;
    }",1,0.9961881
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","    public static double[][] transpose(double[][] doubleBox) {
        YeriDebug.ASSERT(CollectionsToolkit.isRectangular(doubleBox));
        double[][] returnBox = new double[doubleBox[0].length][doubleBox.length];
        for (int i = 0; i < doubleBox.length; i++) {
            for (int j = 0; j < doubleBox[i].length; j++) {
                returnBox[j][i] = doubleBox[i][j];
            }
        }
        return returnBox;
    }",1,0.99742806
"    public static String[][] performTranspose(String[][] fileData, String[][] fileDataTransposed) {
        CompareUtils.ensureTrue(fileDataTransposed.length == fileData[0].length, ""ERROR: Dimensions of output file not correctly set!"");
        CompareUtils.ensureTrue(fileDataTransposed[0].length == fileData.length, ""ERROR: Dimensions of output file not correctly set!"");
        for (int row = 0; row < fileData.length; row++) {
            for (int col = 0; col < fileData[row].length; col++) {
                fileDataTransposed[col][row] = fileData[row][col];
            }
        }
        return fileDataTransposed;
    }","    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }",1,0.9946644
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(MasteryCards.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
            }
        }","            public void hyperlinkUpdate(HyperlinkEvent hle) {
                if (HyperlinkEvent.EventType.ACTIVATED.equals(hle.getEventType())) {
                    if (Desktop.isDesktopSupported()) {
                        try {
                            Desktop.getDesktop().browse(hle.getURL().toURI());
                        } catch (Exception ex) {
                            Logger.getLogger(Navigator.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
                        }
                    }
                }
            }",1,0.99550426
"    public static int[] bubbleSortOtimizado(int... a) {
        boolean swapped;
        int n = a.length - 2;
        do {
            swapped = false;
            for (int i = 0; i <= n; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
            n = n - 1;
        } while (swapped);
        return a;
    }","    public static int best(int r, int n, int s) {
        if ((n <= 0) || (r < 0) || (r > n) || (s < 0)) return 0;
        int[] rolls = new int[n];
        for (int i = 0; i < n; i++) rolls[i] = d(s);
        boolean found;
        do {
            found = false;
            for (int x = 0; x < n - 1; x++) {
                if (rolls[x] < rolls[x + 1]) {
                    int t = rolls[x];
                    rolls[x] = rolls[x + 1];
                    rolls[x + 1] = t;
                    found = true;
                }
            }
        } while (found);
        int sum = 0;
        for (int i = 0; i < r; i++) sum += rolls[i];
        return sum;
    }",1,0.99649966
"    public static void openUrl(Component parentComponent, String url) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            URI uri = null;
            try {
                uri = new URI(url);
                desktop.browse(uri);
            } catch (IOException ioe) {
                JOptionPane.showMessageDialog(parentComponent, ioe.getMessage(), Messages.getString(""VcMainFrame.msgTitleError""), JOptionPane.ERROR_MESSAGE);
            } catch (URISyntaxException use) {
                JOptionPane.showMessageDialog(parentComponent, use.getMessage(), Messages.getString(""VcMainFrame.msgTitleError""), JOptionPane.ERROR_MESSAGE);
            }
        }
    }","        @Override
        public void action() {
            if ((null != _uri) && Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)) {
                    try {
                        desktop.browse(_uri);
                        return;
                    } catch (IOException e) {
                    }
                }
            }
            JOptionPane.showMessageDialog(MainDialog.this, ""Cannot open page "" + _uri);
        }",1,0.9968667
"    public static void openBrowser(String url) {
        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
            try {
                Desktop.getDesktop().browse(new URI(url));
            } catch (IOException ex) {
            } catch (URISyntaxException ex1) {
            }
        }
    }","    private void desktopBrowse(String uri) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(uri));
            } catch (URISyntaxException urise) {
                logger.log(Level.WARNING, ""Incorrect URI"", urise);
            } catch (IOException ioe) {
                logger.log(Level.WARNING, ""General IO Error"", ioe);
            }
        }
    }",1,0.9979683
"            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    try {
                        if (Desktop.isDesktopSupported()) {
                            Desktop.getDesktop().browse(e.getURL().toURI());
                        } else Tools.openURL(e.getURL().toString());
                    } catch (Exception x) {
                        JOptionPane.showMessageDialog(null, x.getMessage());
                    }
                }
            }","    public void actionPerformed(ActionEvent evt) {
        try {
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                desktop.browse(new URI(""http://alx-library.sourceforge.net/""));
            }
        } catch (Exception e) {
            log.log(Level.WARNING, ""Error"", e);
        }
    }",1,0.99720067
"    public Matrix transpose() {
        int n = rows();
        int m = columns();
        double[][] newComponents = new double[m][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) newComponents[j][i] = components[i][j];
        }
        return new Matrix(newComponents);
    }","    public PNMatrix transpose() {
        PNMatrix X = new PNMatrix(n, m);
        int[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",1,0.9984575
"    public RealSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }","    public Matrix transpose() {
        Matrix matrixT = new Matrix(columnCount, rowCount);
        int i, j;
        for (i = 0; i < rowCount; i++) {
            for (j = 0; j < columnCount; j++) {
                matrixT.matrix[j][i] = matrix[i][j];
            }
        }
        return matrixT;
    }",1,0.99653184
"    public static Object[] remove(Object[] source, int index) {
        Object[] copy = (Object[]) Array.newInstance(source.getClass().getComponentType(), source.length - 1);
        System.arraycopy(source, 0, copy, 0, index);
        System.arraycopy(source, index + 1, copy, index, source.length - index - 1);
        return copy;
    }","    public static Object[] removeFromArray(Object[] array, int i) {
        if (i < 0 || i >= array.length) {
            throw new IndexOutOfBoundsException();
        }
        Object[] newArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length - 1);
        System.arraycopy(array, 0, newArray, 0, i);
        System.arraycopy(array, i + 1, newArray, i, array.length - i - 1);
        return newArray;
    }",1,0.9981328
"    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }","    public double[][] transpose(double[][] d) {
        double[][] result = new double[d[0].length][d.length];
        for (int i = 0; i < d.length; i++) {
            for (int j = 0; j < d[i].length; j++) {
                result[j][i] = d[i][j];
            }
        }
        return result;
    }",1,0.9972948
