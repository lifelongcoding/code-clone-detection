FUNCTION_ONE,FUNCTION_TWO,LABEL,PREDICT
"    public int executeInsert(String sql) {
        int num = 0;
        try {
            conn = DriverManager.getConnection(""jdbc:odbc:ClassDB"", ""limq"", ""123"");
            Statement stmt = conn.createStatement();
            num = stmt.executeUpdate(sql);
        } catch (SQLException ex) {
            System.err.println(""ִ�в����д���:"" + ex.getMessage());
            System.out.print(""ִ�в����д���:"" + ex.getMessage());
        }
        CloseDataBase();
        return num;
    }","    private void bubbleSort(int values[]) {
        int len = values.length - 1;
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < len - i; j++) {
                if (values[j] > values[j + 1]) {
                    int tmp = values[j];
                    values[j] = values[j + 1];
                    values[j + 1] = tmp;
                }
            }
        }
    }",0,0
"    public void open() {
        if (!java.awt.Desktop.isDesktopSupported()) {
            System.err.println(""Desktop is not supported (fatal)"");
            return;
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            System.err.println(""Desktop doesn't support the browse action (fatal)"");
            return;
        }
        try {
            java.net.URI uri = new java.net.URI(this.url);
            desktop.browse(uri);
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public void elimina(Cliente cli) throws errorSQL, errorConexionBD {
        System.out.println(""GestorCliente.elimina()"");
        int id = cli.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM cliente WHERE cod_cliente ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            sql = ""DELETE FROM persona WHERE id ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt.executeUpdate(sql);
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        }
    }","    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }",0,0
"    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    private void loadTreeItemActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == loadTreeItem) {
            int returnVal = fc.showOpenDialog(Demarcations.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                treeFile = fc.getSelectedFile();
                if (!TreeFinder.verifyTreeFile(treeFile)) {
                    log.append(""That is not a valid tree file, please choose "" + ""a valid newick tree file.\n"");
                    return;
                }
            } else {
                log.append(""Dialog cancelled by user. \n"");
                return;
            }
            int option = JOptionPane.showConfirmDialog(null, ""You must now "" + ""choose the fasta file corresponding to the tree you just "" + ""loaded, continue?"");
            if (!(option == JOptionPane.YES_OPTION)) {
                log.append(""Dialog cancelled by user."");
                return;
            }
            returnVal = fc.showOpenDialog(Demarcations.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                inputFile = fc.getSelectedFile();
                if (!BinningFasta.verifyInputFile(inputFile)) {
                    log.append(""That is not a valid fasta file, please choose"" + "" a properly formatted fasta file.\n"");
                    return;
                }
                (new Thread() {

                    public void run() {
                        runTree();
                    }
                }).start();
            } else {
                log.append(""Dialog Cancelled by hser.\n"");
            }
        }
    }",0,0
"    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://prologdev1:5432/wdb"";
        final String dbuser = ""guest2"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT value, dataProviderName, placeName, placeGeometry,"" + ""        referencetime, "" + ""        validFrom, validTo, "" + ""        valueParameterName, valueParameterUnit, "" + ""        levelParameterName, levelUnitName, levelFrom, levelTo, "" + ""        dataVersion, confidenceCode, storetime, valueid, valuetype "" + "" FROM wci.read( array['hirlam 10'], 'POINT( 10.0 59.0 )', "" + ""                ('2000-01-03 01:00:00', '2000-01-03 01:00:00', 'exact'), "" + ""                NULL, "" + ""                array['instant temperature of air'], "" + ""                ( 2, 2, 'distance above ground', 'exact' ), "" + ""                array[-1], "" + ""                NULL::wci.returnOid )"";
        final String colNames[] = { ""value"", ""dataProviderName"", ""placeName"", ""referencetime"", ""validFrom"", ""validTo"", ""valueParameterName"", ""valueParameterUnit"", ""levelParameterName"", ""levelUnitName"", ""levelFrom"", ""levelTo"" };
        ResultSet rs = null;
        try {
            con.setAutoCommit(false);
            statement.execute(wdbInit);
            LargeObjectManager lobj = ((org.postgresql.PGConnection) con).getLargeObjectAPI();
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                long oid = rs.getLong(""value"");
                LargeObject obj = lobj.open(oid, LargeObjectManager.READ);
                byte buf[] = new byte[obj.size()];
                obj.read(buf, 0, obj.size());
                obj.close();
                System.out.print(""  BLOB size: "" + buf.length);
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                con.commit();
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }","    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }",0,0
"    public static double[][] transpose(double[][] doubleBox) {
        YeriDebug.ASSERT(CollectionsToolkit.isRectangular(doubleBox));
        double[][] returnBox = new double[doubleBox[0].length][doubleBox.length];
        for (int i = 0; i < doubleBox.length; i++) {
            for (int j = 0; j < doubleBox[i].length; j++) {
                returnBox[j][i] = doubleBox[i][j];
            }
        }
        return returnBox;
    }","    public TypedObjectChoice randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            int tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static long crc32(String s) {
        java.util.zip.CRC32 crc32 = new java.util.zip.CRC32();
        crc32.update(s.getBytes());
        return crc32.getValue();
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    protected Object growIndexedProperty(String name, Object indexedProperty, int index) {
        if (indexedProperty instanceof List) {
            List list = (List) indexedProperty;
            while (index >= list.size()) {
                list.add(null);
            }
        }
        if ((indexedProperty.getClass().isArray())) {
            int length = Array.getLength(indexedProperty);
            if (index >= length) {
                Class componentType = indexedProperty.getClass().getComponentType();
                Object newArray = Array.newInstance(componentType, (index + 1));
                System.arraycopy(indexedProperty, 0, newArray, 0, length);
                indexedProperty = newArray;
                set(name, indexedProperty);
                int newLength = Array.getLength(indexedProperty);
                for (int i = length; i < newLength; i++) {
                    Array.set(indexedProperty, i, createProperty(name + ""["" + i + ""]"", componentType));
                }
            }
        }
        return indexedProperty;
    }",0,0
"    public static int f(int n) {
        if (n == 1) {
            return 1;
        } else if (n == 2) {
            return 1;
        } else {
            return f(n - 1) + f(n - 2);
        }
    }","    public void actionPerformed(ActionEvent event) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                Logging.LOG.error(""Failed to open web browser"", e);
            }
        }
    }",0,0
"    public static double[][] transpose(final double[][] m) {
        final double[][] mt = new double[m[0].length][m.length];
        for (int i = 0; i < mt.length; i++) {
            for (int j = 0; j < mt[i].length; j++) {
                mt[i][j] = m[j][i];
            }
        }
        return mt;
    }","    static boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }",0,0
"    public static void main(String[] args) {
        System.out.println(""Chapter 13: example VPPageLayout"");
        System.out.println(""-> Creates a PDF file with multiple pages"");
        System.out.println(""   but different layout preferences."");
        System.out.println(""-> jars needed: iText.jar"");
        System.out.println(""-> files generated in /results subdirectory:"");
        System.out.println(""   single_page.pdf"");
        System.out.println(""   one_column.pdf"");
        System.out.println(""   two_column_left.pdf"");
        System.out.println(""   two_column_right.pdf"");
        System.out.println(""   two_page_left.pdf"");
        System.out.println(""   two_page_right.pdf"");
        Document document = new Document();
        try {
            PdfWriter writer1 = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter13/single_page.pdf""));
            writer1.setViewerPreferences(PdfWriter.PageLayoutSinglePage);
            PdfWriter writer2 = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter13/one_column.pdf""));
            writer2.setViewerPreferences(PdfWriter.PageLayoutOneColumn);
            PdfWriter writer3 = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter13/two_column_left.pdf""));
            writer3.setViewerPreferences(PdfWriter.PageLayoutTwoColumnLeft);
            PdfWriter writer4 = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter13/two_column_right.pdf""));
            writer4.setViewerPreferences(PdfWriter.PageLayoutTwoColumnRight);
            PdfWriter writer5 = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter13/two_page_left.pdf""));
            writer5.setPdfVersion(PdfWriter.VERSION_1_5);
            writer5.setViewerPreferences(PdfWriter.PageLayoutTwoPageLeft);
            PdfWriter writer6 = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter13/two_page_right.pdf""));
            writer6.setPdfVersion(PdfWriter.VERSION_1_5);
            writer6.setViewerPreferences(PdfWriter.PageLayoutTwoPageRight);
            document.open();
            Paragraph hello = new Paragraph(""(English:) hello, "" + ""(Esperanto:) he, alo, saluton, (Latin:) heu, ave, "" + ""(French:) allô, (Italian:) ciao, (German:) hallo, he, heda, holla, "" + ""(Portuguese:) alô, olá, hei, psiu, bom día, (Dutch:) hallo, dag, "" + ""(Spanish:) ola, eh, (Catalan:) au, bah, eh, ep, "" + ""(Swedish:) hej, hejsan(Danish:) hallo, dav, davs, goddag, hej, "" + ""(Norwegian:) hei; morn, (Papiamento:) halo; hallo; kí tal, "" + ""(Faeroese:) halló, hoyr, (Turkish:) alo, merhaba, (Albanian:) tungjatjeta"");
            document.add(new Paragraph(""1. To the Universe:""));
            document.add(hello);
            document.add(new Paragraph(""2. to the World:""));
            document.add(hello);
            document.add(new Paragraph(""3. to the Sun:""));
            document.add(hello);
            document.add(new Paragraph(""4. to the Moon:""));
            document.add(hello);
            document.add(new Paragraph(""5. to the Stars:""));
            document.add(hello);
            document.newPage();
            document.add(new Paragraph(""6. To the People:""));
            document.add(hello);
            document.add(new Paragraph(""7. to mothers and fathers:""));
            document.add(hello);
            document.add(new Paragraph(""8. to brothers and sisters:""));
            document.add(hello);
            document.add(new Paragraph(""9. to wives and husbands:""));
            document.add(hello);
            document.add(new Paragraph(""10. to sons and daughters:""));
            document.add(hello);
            document.add(new Paragraph(""11. to complete strangers:""));
            document.add(hello);
            document.newPage();
            document.add(new Paragraph(""12. To the Animals:""));
            document.add(hello);
            document.add(new Paragraph(""13. o cats and dogs:""));
            document.add(hello);
            document.add(new Paragraph(""14. to birds and bees:""));
            document.add(hello);
            document.add(new Paragraph(""15. to farm animals and wild animals:""));
            document.add(hello);
            document.add(new Paragraph(""16. to bugs and beatles:""));
            document.add(hello);
            document.add(new Paragraph(""17. to fish and shellfish:""));
            document.add(hello);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    private static boolean deleteFile(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                deleteFile(child);
            }
        }
        return resource.delete();
    }",0,0
"    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }","    public static int binarySearch(byte[] a, byte key) {
        int low = 0;
        int high = a.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            byte midVal = a[mid];
            if (midVal < key) low = mid + 1; else if (midVal > key) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public float[][] transposeMatrix(float[][] mat) {
        float[][] transmat = createNullMatrix(mat[0].length, mat.length);
        for (int i = 0; i < mat.length; i++) {
            for (int j = 0; j < mat[i].length; j++) {
                transmat[j][i] = mat[i][j];
            }
        }
        return transmat;
    }",0,0
"    public static void main(String[] args) {
        System.out.println(""Chapter 2 example 4: Negative leading"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0204.pdf""));
            document.open();
            document.add(new Phrase(16, ""\n\n\n""));
            document.add(new Phrase(-16, ""Hello, this is a very long phrase to show you the somewhat odd effect of a negative leading. You can write from bottom to top. This is not fully supported. It's something between a feature and a bug.""));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }","    @Override
    public void mouseClicked(MouseEvent e) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(this.url));
            } catch (Exception e1) {
                JOptionPane.showMessageDialog(this, ""Can not open website because "" + e1.getMessage(), ""iGoSyncDocs"", JOptionPane.ERROR_MESSAGE);
            }
        }
    }",0,0
"    public static void main(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""msgsend"";
        String file = null;
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-a"")) {
                file = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: msgsend [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-a attach-file] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            String text = collect(in);
            if (file != null) {
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setText(text);
                MimeBodyPart mbp2 = new MimeBodyPart();
                mbp2.attachFile(file);
                MimeMultipart mp = new MimeMultipart();
                mp.addBodyPart(mbp1);
                mp.addBodyPart(mbp2);
                msg.setContent(mp);
            } else {
                msg.setText(text);
            }
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public void guiViewGroup(ApplicationType app, GroupType group) {
        try {
            File outputHtml = this.applyViewGroupXsl(app, group);
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                URI uri = outputHtml.toURI();
                logger.debug(""Displaying via browser: "" + uri.toASCIIString());
                desktop.browse(uri);
            } else {
                logger.debug(""Displaying via dialog"");
                String title = ""View Group: "" + group.getTitle();
                ViewHtmlDialog recDialog = new ViewHtmlDialog(MetaManager.getMainWindow(), true, title, outputHtml);
                recDialog.setVisible(true);
            }
        } catch (Exception ex) {
            logger.warn(ex);
        }
    }","    public MathRealMatrix transpose() {
        int m = this.M;
        int n = this.N;
        double[][] mData = this.Data;
        double[][] newData = new double[n][m];
        for (int ni = 0; ni < n; ni++) {
            for (int mi = 0; mi < m; mi++) {
                newData[ni][mi] = mData[mi][ni];
            }
        }
        return new MathRealMatrix(newData);
    }",0,0
"    public void open() {
        if (!java.awt.Desktop.isDesktopSupported()) {
            System.err.println(""Desktop is not supported (fatal)"");
            return;
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            System.err.println(""Desktop doesn't support the browse action (fatal)"");
            return;
        }
        try {
            java.net.URI uri = new java.net.URI(this.url);
            desktop.browse(uri);
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }","    public RobotList<Float> sort_incr_Float(RobotList<Float> list, String field) {
        int length = list.size();
        Index_value[] distri = new Index_value[length];
        for (int i = 0; i < length; i++) {
            distri[i] = new Index_value(i, list.get(i));
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (distri[i].value > distri[i + 1].value) {
                    Index_value a = distri[i];
                    distri[i] = distri[i + 1];
                    distri[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Float> sol = new RobotList<Float>(Float.class);
        for (int i = 0; i < length; i++) {
            sol.addLast(new Float(distri[i].value));
        }
        return sol;
    }",0,0
"    private static boolean deleteFile(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                deleteFile(child);
            }
        }
        return resource.delete();
    }","    public static void main(String[] args) {
        System.out.println(""Chapter 6 example 6: Absolute Positioning of an Image"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0606.pdf""));
            document.open();
            Image png = Image.getInstance(""hitchcock.png"");
            png.setAbsolutePosition(171, 250);
            document.add(png);
            png.setAbsolutePosition(342, 500);
            document.add(png);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0,0
"    boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }","    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }",0,0
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0,0
"    public DoubleThresholdGenerator randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            double tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0,0
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    private float[][] Transpose(float[][] a) {
        if (INFO) {
            System.out.println(""Performing Transpose..."");
        }
        float m[][] = new float[a[0].length][a.length];
        for (int i = 0; i < a.length; i++) for (int j = 0; j < a[i].length; j++) m[j][i] = a[i][j];
        return m;
    }","    public static int binarySearch(int[] a, int key) {
        int low = 0;
        int high = a.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            int midVal = a[mid];
            if (midVal < key) low = mid + 1; else if (midVal > key) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }",0,0
"    public Object[] toArray(Object[] a) {
        if (a.length < size) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size) a[size] = null;
        return a;
    }","    public void playSound(String name) {
        try {
            AudioInputStream ais = AudioSystem.getAudioInputStream(getResource(name));
            AudioFormat af = ais.getFormat();
            AudioFormat decodedFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, af.getSampleRate(), 16, af.getChannels(), af.getChannels() * 2, af.getSampleRate(), false);
            AudioInputStream dais = AudioSystem.getAudioInputStream(decodedFormat, ais);
            Clip c = AudioSystem.getClip();
            c.open(dais);
            c.start();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (UnsupportedAudioFileException e) {
            e.printStackTrace();
        } catch (LineUnavailableException e) {
            e.printStackTrace();
        }
    }",0,0
"    String[][] transpose(String[][] data) {
        int r = data.length;
        int c = data[0].length;
        String matrix[][] = new String[c][r];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                matrix[j][i] = data[i][j];
            }
        }
        return matrix;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public static double[][] transposed(double[][] matrix) {
        int row = matrix[0].length;
        int line = matrix.length;
        double[][] ans = new double[row][line];
        for (int i = 0; i < line; i++) {
            for (int j = 0; j < row; j++) {
                ans[j][i] = matrix[i][j];
            }
        }
        return ans;
    }","    public void Sort(int a[]) {
        for (int i = a.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (a[j] > a[j + 1]) {
                    int temp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = temp;
                }
            }
        }
    }",0,0
"    @SuppressWarnings(""unchecked"")
    public static <T> T[] add(T[] array, T obj) {
        if (array == null) {
            throw new IllegalStateException(""array"");
        }
        T[] newArray = (T[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = obj;
        return newArray;
    }","    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"        private Factorisation(int entier) {
            factL = new ArrayList<Integer>();
            int n = entier;
            for (int i = 2; i <= n / i; i++) {
                while (n % i == 0) {
                    factL.add(i);
                    n /= i;
                }
            }
            if (n > 1) {
                factL.add(n);
            }
        }","    void logCorrectMatrix(double p) {
        for (int i = 0; i < numdata; i++) {
            for (int j = 0; j < i; j++) {
                depMatrix[i][j] = 1 / Math.pow(depMatrix[i][j], p);
                depMatrix[j][i] = depMatrix[i][j];
            }
        }
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }","    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
        }
    }",0,0
"    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","	public static void BubbleSortFloat1(float[] num) {
		boolean flag = true; // set flag to true to begin first pass
		float temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}",0,0
"    public IntChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            String tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    public static double[][] transp(double[][] m1) {
        int m = m1.length;
        int n = m1[0].length;
        double[][] ret = new double[n][m];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ret[j][i] = m1[i][j];
            }
        }
        return ret;
    }",0,0
"    public static long F(int n) {
        if (n == 0) return 0;
        if (n == 1) return 1;
        return F(n - 1) + F(n - 2);
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], 'POINT( 10.0 59.0 )', "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returnFloat )"";
        final String colNames[] = { ""value"", ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println(""EXCEPTION: rs.close: "" + ex);
                }
            }
        }
    }",0,0
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    static boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }",0,0
"    private int[] sortRows(int[] rows) {
        for (int i = 0; i < rows.length; i++) {
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] > rows[j + 1]) {
                    int temp = rows[j];
                    rows[j] = rows[j + 1];
                    rows[j + 1] = temp;
                }
            }
        }
        return rows;
    }","    public static int[] permute(int N, Random rand) {
        int[] a = new int[N];
        for (int i = 0; i < N; i++) a[i] = i;
        for (int i = 0; i < N; i++) {
            int r = rand.nextInt(i + 1);
            int swap = a[r];
            a[r] = a[i];
            a[i] = swap;
        }
        return a;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static int[][] mergeColumns(int[]... x) {
        int[][] array = new int[x[0].length][x.length];
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                array[i][j] = x[j][i];
            }
        }
        return array;
    }",0,0
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], 'POINT( 10.0 59.0 )', "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returnFloat )"";
        final String colNames[] = { ""value"", ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println(""EXCEPTION: rs.close: "" + ex);
                }
            }
        }
    }",0,0
"    boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }","    private double[][] transpose(double[][] in) {
        double[][] out = new double[in[0].length][in.length];
        for (int r = 0; r < in.length; r++) {
            for (int c = 0; c < in[0].length; c++) {
                out[c][r] = in[r][c];
            }
        }
        return out;
    }",0,0
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }",0,0
"    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }","    static Object arrayExpand(Object a, int amount) {
        Class cl = a.getClass();
        if (!cl.isArray()) return null;
        int length = Array.getLength(a);
        int newLength = length + amount;
        Class componentType = a.getClass().getComponentType();
        Object newArray = Array.newInstance(componentType, newLength);
        System.arraycopy(a, 0, newArray, 0, length);
        return newArray;
    }",0,0
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }",0,0
"    @SuppressWarnings(""unchecked"")
    public static <T> T[] addToArray(T[] array, T el) {
        T[] newArray = (T[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = el;
        return newArray;
    }","    public static Image[][] reversalXandY(final Image[][] array) {
        int col = array[0].length;
        int row = array.length;
        Image[][] result = new Image[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }",0,0
"    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public void openURI(URI uri) {
        if (!java.awt.Desktop.isDesktopSupported()) {
            JOptionPane.showMessageDialog(this, Messages.getString(""Msg_DesktopIsNotSupported""));
            return;
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            JOptionPane.showMessageDialog(this, Messages.getString(""Msg_BrowseActionNotSupported""));
            return;
        }
        try {
            desktop.browse(uri);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, Messages.getString(""Msg_AnErrorOccuredWhileBrowsing"") + "" "" + e.getMessage());
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static Object resizeArray(Object oldArray, int newSize) {
        int oldSize = java.lang.reflect.Array.getLength(oldArray);
        Class elementType = oldArray.getClass().getComponentType();
        Object newArray = java.lang.reflect.Array.newInstance(elementType, newSize);
        int preserveLength = Math.min(oldSize, newSize);
        if (preserveLength > 0) System.arraycopy(oldArray, 0, newArray, 0, preserveLength);
        return newArray;
    }",0,0
"    private void openBaseURLButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (Desktop.isDesktopSupported()) {
            try {
                URI baseURI = new URI(this.baseURLField.getText());
                Desktop.getDesktop().browse(baseURI);
            } catch (Exception err) {
            }
        }
    }","    public static double[][] transpose(double[][] M) {
        double[][] Mt = new double[M[0].length][M.length];
        for (int i = 0; i < M.length; i++) {
            if (M[i].length != M[0].length) {
                throw new IllegalArgumentException(""The array is not a matrix."");
            }
            for (int j = 0; j < M[0].length; j++) {
                Mt[j][i] = M[i][j];
            }
        }
        return (Mt);
    }",0,0
"    public static Object cut(Object obj, int size) {
        int j;
        if ((j = Array.getLength(obj)) == 1) {
            return Array.newInstance(obj.getClass().getComponentType(), 0);
        }
        int k;
        if ((k = j - size - 1) > 0) {
            System.arraycopy(obj, size + 1, obj, size, k);
        }
        j--;
        Object obj1 = Array.newInstance(obj.getClass().getComponentType(), j);
        System.arraycopy(obj, 0, obj1, 0, j);
        return obj1;
    }","    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    public static void main(String[] args) {
        Console console = System.console();
        if (console == null) {
            System.err.println(""No console."");
            System.exit(1);
        }
        while (true) {
            Pattern pattern = Pattern.compile(console.readLine(""%nEnter your regex: ""));
            Matcher matcher = pattern.matcher(console.readLine(""Enter input string to search: ""));
            boolean found = false;
            while (matcher.find()) {
                console.format(""I found the text \""%s\"" starting at "" + ""index %d and ending at index %d.%n"", matcher.group(), matcher.start(), matcher.end());
                found = true;
            }
            if (!found) {
                console.format(""No match found.%n"");
            }
        }
    }","    public static synchronized void shuffle(int[] anArray) {
        int n = anArray.length;
        for (int i = n - 1; i >= 1; i--) {
            int j = randomSource.nextInt(i + 1);
            int temp = anArray[j];
            anArray[j] = anArray[i];
            anArray[i] = temp;
        }
    }",0,0
"    public ZnMatrix transposed() {
        ZnMatrix m = new ZnMatrix(columns, rows, modulus);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }","    public int fibonacci(int num) {
        if (num == 0) {
            return 0;
        } else if (num == 1) {
            return 1;
        } else {
            processor.getAlgData().setRecursiveCalls(processor.getAlgData().getRecursiveCalls() + 2);
            return fibonacci(num - 1) + fibonacci(num - 2);
        }
    }",0,0
"    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }","    public static long crc32(String s) {
        java.util.zip.CRC32 crc32 = new java.util.zip.CRC32();
        crc32.update(s.getBytes());
        return crc32.getValue();
    }",0,0
"    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","        @Override
        public void actionPerformed(ActionEvent evt) {
            if (Desktop.isDesktopSupported()) {
                try {
                    URI uri = new URI(evt.getActionCommand());
                    Desktop.getDesktop().browse(uri);
                } catch (Exception e) {
                }
            }
        }",0,0
"    public static void main(String args[]) {
        int temp;
        int[] a1 = { 6, 2, -3, 7, -1, 8, 9, 0 };
        for (int j = 0; j < (a1.length * a1.length); j++) {
            for (int i = 0; i < a1.length - 1; i++) {
                if (a1[i] > a1[i + 1]) {
                    temp = a1[i];
                    a1[i] = a1[i + 1];
                    a1[i + 1] = temp;
                }
            }
        }
        for (int i = 0; i < a1.length; i++) {
            System.out.print("" "" + a1[i]);
        }
    }","    public static Object cut(Object obj, int size) {
        int j;
        if ((j = Array.getLength(obj)) == 1) {
            return Array.newInstance(obj.getClass().getComponentType(), 0);
        }
        int k;
        if ((k = j - size - 1) > 0) {
            System.arraycopy(obj, size + 1, obj, size, k);
        }
        j--;
        Object obj1 = Array.newInstance(obj.getClass().getComponentType(), j);
        System.arraycopy(obj, 0, obj1, 0, j);
        return obj1;
    }",0,0
"    public DoubleThresholdGenerator randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            double tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }",0,0
"            public void mouseClicked(MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(""http://www.ignissoft.com""));
                    } catch (Exception e) {
                        log.log(Level.WARNING, ""Failed openning browser to Ignis website: "" + e.getMessage());
                    }
                }
            }","    public void shuffle(Random rand) {
        for (int i = cards.length - 1; i >= 0; i--) {
            int r = rand.nextInt(i + 1);
            Card t = cards[i];
            cards[i] = cards[r];
            cards[r] = t;
        }
        nextCard = 0;
    }",0,0
"    private float[][] transpose(float[][] m) {
        float[][] toReturn = new float[m[0].length][m.length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++) {
                toReturn[j][i] = m[i][j];
            }
        }
        return toReturn;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], 'POINT( 10.0 59.0 )', "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returnFloat )"";
        final String colNames[] = { ""value"", ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println(""EXCEPTION: rs.close: "" + ex);
                }
            }
        }
    }","    public static double[][] transpose(final double[][] m) {
        final double[][] mt = new double[m[0].length][m.length];
        for (int i = 0; i < mt.length; i++) {
            for (int j = 0; j < mt[i].length; j++) {
                mt[i][j] = m[j][i];
            }
        }
        return mt;
    }",0,0
"                    public void actionPerformed(ActionEvent e) {
                        if (Desktop.isDesktopSupported()) {
                            try {
                                Desktop.getDesktop().browse(monitor.getMainPageURI());
                            } catch (IOException err) {
                            }
                        }
                    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public RobotList<Location> sort_decr_Location(RobotList<Location> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i)));
            }
        } else if (field.equals(""x"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).x);
            }
        } else if (field.equals(""y"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).y);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value < enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Location> new_location_list = new RobotList<Location>(Location.class);
        for (int i = 0; i < length; i++) {
            new_location_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_location_list;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public void open() {
        if (!java.awt.Desktop.isDesktopSupported()) {
            System.err.println(""Desktop is not supported (fatal)"");
            return;
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            System.err.println(""Desktop doesn't support the browse action (fatal)"");
            return;
        }
        try {
            java.net.URI uri = new java.net.URI(this.url);
            desktop.browse(uri);
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    public static XMLShowInfo NzbSearch(TVRageShowInfo tvrage, XMLShowInfo xmldata, int latestOrNext) {
        String newzbin_query = """", csvData = """", hellaQueueDir = """", newzbinUsr = """", newzbinPass = """";
        String[] tmp;
        DateFormat tvRageDateFormat = new SimpleDateFormat(""MMM/dd/yyyy"");
        DateFormat tvRageDateFormatFix = new SimpleDateFormat(""yyyy-MM-dd"");
        newzbin_query = ""?q="" + xmldata.showName + ""+"";
        if (latestOrNext == 0) {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.latestSeasonNum + ""x"" + tvrage.latestEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.latestSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.latestAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.latestTitle;
        } else {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.nextSeasonNum + ""x"" + tvrage.nextEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.nextSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.nextAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.nextTitle;
        }
        newzbin_query += ""&searchaction=Search"";
        newzbin_query += ""&fpn=p"";
        newzbin_query += ""&category=8category=11"";
        newzbin_query += ""&area=-1"";
        newzbin_query += ""&u_nfo_posts_only=0"";
        newzbin_query += ""&u_url_posts_only=0"";
        newzbin_query += ""&u_comment_posts_only=0"";
        newzbin_query += ""&u_v3_retention=1209600"";
        newzbin_query += ""&ps_rb_language="" + xmldata.language;
        newzbin_query += ""&sort=ps_edit_date"";
        newzbin_query += ""&order=desc"";
        newzbin_query += ""&areadone=-1"";
        newzbin_query += ""&feed=csv"";
        newzbin_query += ""&ps_rb_video_format="" + xmldata.format;
        newzbin_query = newzbin_query.replaceAll("" "", ""%20"");
        System.out.println(""http://v3.newzbin.com/search/"" + newzbin_query);
        try {
            URL url = new URL(""http://v3.newzbin.com/search/"" + newzbin_query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            csvData = in.readLine();
            if (csvData != null) {
                JavaNZB.searchCount++;
                if (searchCount == 6) {
                    searchCount = 0;
                    System.out.println(""Sleeping for 60 seconds"");
                    try {
                        Thread.sleep(60000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                tmp = csvData.split("","");
                tmp[2] = tmp[2].substring(1, tmp[2].length() - 1);
                tmp[3] = tmp[3].substring(1, tmp[3].length() - 1);
                Pattern p = Pattern.compile(""[\\\\</:>?\\[|\\]\""]"");
                Matcher matcher = p.matcher(tmp[3]);
                tmp[3] = matcher.replaceAll("" "");
                tmp[3] = tmp[3].replaceAll(""&"", ""and"");
                URLConnection urlConn;
                DataOutputStream printout;
                url = new URL(""http://v3.newzbin.com/api/dnzb/"");
                urlConn = url.openConnection();
                urlConn.setDoInput(true);
                urlConn.setDoOutput(true);
                urlConn.setUseCaches(false);
                urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                printout = new DataOutputStream(urlConn.getOutputStream());
                String content = ""username="" + JavaNZB.newzbinUsr + ""&password="" + JavaNZB.newzbinPass + ""&reportid="" + tmp[2];
                printout.writeBytes(content);
                printout.flush();
                printout.close();
                BufferedReader nzbInput = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
                String format = """";
                if (xmldata.format.equals(""17"")) format = "" Xvid"";
                if (xmldata.format.equals(""131072"")) format = "" x264"";
                if (xmldata.format.equals(""2"")) format = "" DVD"";
                if (xmldata.format.equals(""4"")) format = "" SVCD"";
                if (xmldata.format.equals(""8"")) format = "" VCD"";
                if (xmldata.format.equals(""32"")) format = "" HDts"";
                if (xmldata.format.equals(""64"")) format = "" WMV"";
                if (xmldata.format.equals(""128"")) format = "" Other"";
                if (xmldata.format.equals(""256"")) format = "" ratDVD"";
                if (xmldata.format.equals(""512"")) format = "" iPod"";
                if (xmldata.format.equals(""1024"")) format = "" PSP"";
                File f = new File(JavaNZB.hellaQueueDir, tmp[3] + format + "".nzb"");
                BufferedWriter out = new BufferedWriter(new FileWriter(f));
                String str;
                System.out.println(""--Downloading "" + tmp[3] + format + "".nzb"" + "" to queue directory--"");
                while (null != ((str = nzbInput.readLine()))) out.write(str);
                nzbInput.close();
                out.close();
                if (latestOrNext == 0) {
                    xmldata.episode = tvrage.latestEpisodeNum;
                    xmldata.season = tvrage.latestSeasonNum;
                } else {
                    xmldata.episode = tvrage.nextEpisodeNum;
                    xmldata.season = tvrage.nextSeasonNum;
                }
            } else System.out.println(""No new episode posted"");
            System.out.println();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
            System.out.println(""IO Exception from NzbSearch"");
        }
        return xmldata;
    }",0,0
"    @SuppressWarnings(""unchecked"")
    public static <T> T[] append(T[] array0, T[] array1) {
        T[] array2 = (T[]) Array.newInstance(array0.getClass().getComponentType(), array0.length + array1.length);
        System.arraycopy(array0, 0, array2, 0, array0.length);
        System.arraycopy(array1, 0, array2, array0.length, array1.length);
        return array2;
    }","    public static double[][] invert(double[][] matrix) {
        double[][] result = new double[matrix[0].length][matrix.length];
        for (int row = 0; row < matrix.length; row++) for (int col = 0; col < matrix[row].length; col++) result[col][row] = result[row][col];
        return result;
    }",0,0
"    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    private void openURI() {
        if (uri != null) if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }
    }","    public RobotList<Float> sort_incr_Float(RobotList<Float> list, String field) {
        int length = list.size();
        Index_value[] distri = new Index_value[length];
        for (int i = 0; i < length; i++) {
            distri[i] = new Index_value(i, list.get(i));
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (distri[i].value > distri[i + 1].value) {
                    Index_value a = distri[i];
                    distri[i] = distri[i + 1];
                    distri[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Float> sol = new RobotList<Float>(Float.class);
        for (int i = 0; i < length; i++) {
            sol.addLast(new Float(distri[i].value));
        }
        return sol;
    }",0,0
"    public RobotList<Resource> sort_incr_Resource(RobotList<Resource> list, String field) {
        int length = list.size();
        Index_value[] resource_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, distance(cur_loc, list.get(i).location));
            }
        } else if (field.equals(""energy"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).energy);
            }
        } else if (field.equals(""ammostash"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).ammostash);
            }
        } else if (field.equals(""speed"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).speed);
            }
        } else if (field.equals(""health"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).health);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (resource_dist[i].value > resource_dist[i + 1].value) {
                    Index_value a = resource_dist[i];
                    resource_dist[i] = resource_dist[i + 1];
                    resource_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Resource> new_resource_list = new RobotList<Resource>(Resource.class);
        for (int i = 0; i < length; i++) {
            new_resource_list.addLast(list.get(resource_dist[i].index));
        }
        return new_resource_list;
    }","    public Matrix transpose() {
        final double arrayRe[][] = new double[numCols][numRows];
        final double arrayIm[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            arrayRe[0][i] = matrixRe[i][0];
            arrayIm[0][i] = matrixIm[i][0];
            for (j = 1; j < numCols; j++) {
                arrayRe[j][i] = matrixRe[i][j];
                arrayIm[j][i] = matrixIm[i][j];
            }
        }
        return new ComplexMatrix(arrayRe, arrayIm);
    }",0,0
"    public static void main(String[] args) {
        System.out.println(""Chapter 2 example 4: Negative leading"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0204.pdf""));
            document.open();
            document.add(new Phrase(16, ""\n\n\n""));
            document.add(new Phrase(-16, ""Hello, this is a very long phrase to show you the somewhat odd effect of a negative leading. You can write from bottom to top. This is not fully supported. It's something between a feature and a bug.""));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public void hyperlinkUpdate(HyperlinkEvent event) {
        URL url = event.getURL();
        if (event.getEventType() == HyperlinkEvent.EventType.ENTERED && !event.getDescription().equals(""login"") && !event.getDescription().startsWith(""copyUrl:"")) {
            urlsEditorPane.setToolTipText(url.toString());
        } else if (event.getEventType() == HyperlinkEvent.EventType.EXITED) {
            urlsEditorPane.setToolTipText(null);
        } else if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            if (event.getDescription().equals(""login"")) {
                if (loginWindow == null) {
                    loginWindow = new LoginWindow(extension, component, this, keys, reposPath, configManager);
                } else {
                    loginWindow.setVisible(true);
                }
            } else if (event.getDescription().startsWith(""copyUrl:"")) {
                String toCopy = event.getDescription().replaceFirst(""copyUrl:"", """");
                StringSelection data = new StringSelection(toCopy);
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(data, data);
            } else {
                String browser = configManager.getBrowser();
                if (!Desktop.isDesktopSupported()) {
                    try {
                        if (!browser.equals("""")) {
                            Runtime.getRuntime().exec(browser + "" "" + url.toString());
                        } else {
                            Runtime.getRuntime().exec(""firefox "" + url.toString());
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ""Unable to find a web browser, please set up one on settings window"", ""Web browser error"", JOptionPane.WARNING_MESSAGE);
                    }
                }
                try {
                    Desktop desktop = Desktop.getDesktop();
                    URI uri = new URI(url.toString());
                    desktop.browse(uri);
                } catch (Exception e) {
                    return;
                }
            }
        }
    }",0,0
"    static int[] bubble(int[] s) {
        boolean f = true;
        while (f) {
            f = false;
            for (int i = 0; i < s.length - 1; i++) {
                if (s[i] > s[i + 1]) {
                    int t = s[i];
                    s[i] = s[i + 1];
                    s[i + 1] = t;
                    f = true;
                }
            }
        }
        return s;
    }","    public IntSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",0,0
"    public static int f(int n) {
        if (n == 1) {
            return 1;
        } else if (n == 2) {
            return 1;
        } else {
            return f(n - 1) + f(n - 2);
        }
    }","    public static synchronized void shuffle(int[] anArray) {
        int n = anArray.length;
        for (int i = n - 1; i >= 1; i--) {
            int j = randomSource.nextInt(i + 1);
            int temp = anArray[j];
            anArray[j] = anArray[i];
            anArray[i] = temp;
        }
    }",0,0
"    public float[][] getSubints() {
        int[][] subintsInt = this.getSubints(32, 1, 32);
        float[][] subintsfold = new float[subintsInt[0].length][subintsInt.length];
        for (int i = 0; i < subintsInt.length; i++) {
            for (int j = 0; j < subintsInt[0].length; j++) {
                subintsfold[j][i] = subintsInt[i][j];
            }
        }
        return subintsfold;
    }","    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }",0,0
"    public void shuffle(Random rand) {
        for (int i = cards.length - 1; i >= 0; i--) {
            int r = rand.nextInt(i + 1);
            Card t = cards[i];
            cards[i] = cards[r];
            cards[r] = t;
        }
        nextCard = 0;
    }","    public static final double[][] transpose(double[][] a) {
        int am = a.length;
        int an = a[0].length;
        double[][] result = new double[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                result[j][i] = a[i][j];
            }
        }
        return result;
    }",0,0
"    public static Object[] add(Object[] array, Object value) {
        Object[] tmp = (Object[]) java.lang.reflect.Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, tmp, 0, array.length);
        tmp[array.length] = value;
        return tmp;
    }","        @Override
        public void actionPerformed(ActionEvent evt) {
            if (Desktop.isDesktopSupported()) {
                try {
                    URI uri = new URI(evt.getActionCommand());
                    Desktop.getDesktop().browse(uri);
                } catch (Exception e) {
                }
            }
        }",0,0
"    private void OpenSchedule() {
        jtp.addTab(""Schedule"", jpShedule);
        jtp.addTab(""ScheduleSource"", jpsSource);
        JFileChooser chooser = new JFileChooser(DirS);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        ExtensionFileFilter filter = new ExtensionFileFilter(""sch"", ""Schedule graph representation files (*.sch)"");
        chooser.setFileFilter(filter);
        if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;
        DirS = chooser.getSelectedFile().getParent();
        PathS = chooser.getSelectedFile().getPath();
        TabS = chooser.getSelectedFile().getName();
        InitSchedule();
    }","    @Constraint(""post: s.get().size>0"")
    protected static void removeNewlinesForAssertStyleJava(@Constraint(""post: s.get().size<=s@pre.get().size"") final IDocument s) {
        Pattern pattern = Pattern.compile(""assert\\s*assert(Pre|Post)Condition_(\\w*)_for_method_(\\w*)\\s*\\(([^\\)]*)\\)\\s*:"" + ""\\s*\""(.*)\""\\s*;"" + ""\\s*"");
        Matcher matcher = pattern.matcher(s.get());
        try {
            int lengthDifference = 0;
            while (matcher.find()) {
                String replacement = ""assert assert"" + Matcher.quoteReplacement(matcher.group(1)) + ""Condition_"" + Matcher.quoteReplacement(matcher.group(2)) + ""_for_method_"" + Matcher.quoteReplacement(matcher.group(3)) + ""("" + Matcher.quoteReplacement(matcher.group(4)) + "") : \"""" + Matcher.quoteReplacement(matcher.group(5)) + ""\"";"";
                int lengthOfMatchedString = matcher.end() - matcher.start();
                s.replace(lengthDifference + matcher.start(), lengthOfMatchedString, replacement);
                lengthDifference -= lengthOfMatchedString - replacement.length();
            }
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public void Sort(int a[]) {
        for (int i = a.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (a[j] > a[j + 1]) {
                    int temp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = temp;
                }
            }
        }
    }","    public DoubleChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            String tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }",0,0
"    public double[][] getTransposta(double[][] matriz) {
        double[][] nova = new double[matriz.length][matriz.length];
        for (int i = 0; i < matriz.length; i++) {
            for (int j = 0; j < matriz.length; j++) {
                nova[i][j] = matriz[j][i];
            }
        }
        return nova;
    }","    public static void main(String[] args) {
        Console console = System.console();
        if (console == null) {
            System.err.println(""No console."");
            System.exit(1);
        }
        while (true) {
            Pattern pattern = Pattern.compile(console.readLine(""%nEnter your regex: ""));
            Matcher matcher = pattern.matcher(console.readLine(""Enter input string to search: ""));
            boolean found = false;
            while (matcher.find()) {
                console.format(""I found the text \""%s\"" starting at "" + ""index %d and ending at index %d.%n"", matcher.group(), matcher.start(), matcher.end());
                found = true;
            }
            if (!found) {
                console.format(""No match found.%n"");
            }
        }
    }",0,0
"    private float[][] transpose(float[][] m) {
        float[][] toReturn = new float[m[0].length][m.length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++) {
                toReturn[j][i] = m[i][j];
            }
        }
        return toReturn;
    }","    public static void shuffle(int[] array, Random rng) {
        for (int i = array.length - 1; i >= 0; i--) {
            int index = rng.nextInt(i + 1);
            int a = array[index];
            array[index] = array[i];
            array[i] = a;
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static float[][] TransposeMatrix(float[][] M) {
        int lines = M.length;
        int columns = M[0].length;
        float[][] Mi = new float[columns][lines];
        for (int i = 0; i < lines; i++) {
            for (int j = 0; j < columns; j++) {
                Mi[j][i] = M[i][j];
            }
        }
        return Mi;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public int binarySearch(final float key) {
        int low = 0;
        int middle;
        int high = super.size() - 1;
        float middleValue;
        while (low <= high) {
            middle = (low + high) / 2;
            middleValue = this.floatArray[middle];
            if (middleValue < key) {
                low = middle + 1;
            } else if (middleValue > key) {
                high = middle - 1;
            } else {
                return middle;
            }
        }
        return -(low + 1);
    }",0,0
"    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public static XMLShowInfo NzbSearch(TVRageShowInfo tvrage, XMLShowInfo xmldata, int latestOrNext) {
        String newzbin_query = """", csvData = """", hellaQueueDir = """", newzbinUsr = """", newzbinPass = """";
        String[] tmp;
        DateFormat tvRageDateFormat = new SimpleDateFormat(""MMM/dd/yyyy"");
        DateFormat tvRageDateFormatFix = new SimpleDateFormat(""yyyy-MM-dd"");
        newzbin_query = ""?q="" + xmldata.showName + ""+"";
        if (latestOrNext == 0) {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.latestSeasonNum + ""x"" + tvrage.latestEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.latestSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.latestAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.latestTitle;
        } else {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.nextSeasonNum + ""x"" + tvrage.nextEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.nextSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.nextAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.nextTitle;
        }
        newzbin_query += ""&searchaction=Search"";
        newzbin_query += ""&fpn=p"";
        newzbin_query += ""&category=8category=11"";
        newzbin_query += ""&area=-1"";
        newzbin_query += ""&u_nfo_posts_only=0"";
        newzbin_query += ""&u_url_posts_only=0"";
        newzbin_query += ""&u_comment_posts_only=0"";
        newzbin_query += ""&u_v3_retention=1209600"";
        newzbin_query += ""&ps_rb_language="" + xmldata.language;
        newzbin_query += ""&sort=ps_edit_date"";
        newzbin_query += ""&order=desc"";
        newzbin_query += ""&areadone=-1"";
        newzbin_query += ""&feed=csv"";
        newzbin_query += ""&ps_rb_video_format="" + xmldata.format;
        newzbin_query = newzbin_query.replaceAll("" "", ""%20"");
        System.out.println(""http://v3.newzbin.com/search/"" + newzbin_query);
        try {
            URL url = new URL(""http://v3.newzbin.com/search/"" + newzbin_query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            csvData = in.readLine();
            if (csvData != null) {
                JavaNZB.searchCount++;
                if (searchCount == 6) {
                    searchCount = 0;
                    System.out.println(""Sleeping for 60 seconds"");
                    try {
                        Thread.sleep(60000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                tmp = csvData.split("","");
                tmp[2] = tmp[2].substring(1, tmp[2].length() - 1);
                tmp[3] = tmp[3].substring(1, tmp[3].length() - 1);
                Pattern p = Pattern.compile(""[\\\\</:>?\\[|\\]\""]"");
                Matcher matcher = p.matcher(tmp[3]);
                tmp[3] = matcher.replaceAll("" "");
                tmp[3] = tmp[3].replaceAll(""&"", ""and"");
                URLConnection urlConn;
                DataOutputStream printout;
                url = new URL(""http://v3.newzbin.com/api/dnzb/"");
                urlConn = url.openConnection();
                urlConn.setDoInput(true);
                urlConn.setDoOutput(true);
                urlConn.setUseCaches(false);
                urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                printout = new DataOutputStream(urlConn.getOutputStream());
                String content = ""username="" + JavaNZB.newzbinUsr + ""&password="" + JavaNZB.newzbinPass + ""&reportid="" + tmp[2];
                printout.writeBytes(content);
                printout.flush();
                printout.close();
                BufferedReader nzbInput = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
                File f = new File(JavaNZB.hellaQueueDir, tmp[3] + "".nzb"");
                BufferedWriter out = new BufferedWriter(new FileWriter(f));
                String str;
                System.out.println(""--Downloading "" + tmp[3] + "".nzb"" + "" to queue directory--"");
                while (null != ((str = nzbInput.readLine()))) out.write(str);
                nzbInput.close();
                out.close();
                if (latestOrNext == 0) {
                    xmldata.episode = tvrage.latestEpisodeNum;
                    xmldata.season = tvrage.latestSeasonNum;
                } else {
                    xmldata.episode = tvrage.nextEpisodeNum;
                    xmldata.season = tvrage.nextSeasonNum;
                }
            } else System.out.println(""No new episode posted"");
            System.out.println();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
            System.out.println(""IO Exception from NzbSearch"");
        }
        return xmldata;
    }",0,0
"    public static synchronized void shuffle(float[] anArray) {
        int n = anArray.length;
        for (int i = n - 1; i >= 1; i--) {
            int j = randomSource.nextInt(i + 1);
            float temp = anArray[j];
            anArray[j] = anArray[i];
            anArray[i] = temp;
        }
    }","    public static double[][] transpose(double[][] in) {
        assert in != null;
        int h = in.length;
        int w = in[0].length;
        double[][] out = new double[w][h];
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                out[x][y] = in[y][x];
            }
        }
        return out;
    }",0,0
"    public static Object expand(Object obj, int i, boolean flag) {
        int j = Array.getLength(obj);
        Object obj1 = Array.newInstance(obj.getClass().getComponentType(), j + i);
        System.arraycopy(obj, 0, obj1, flag ? 0 : i, j);
        return obj1;
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://prologdev1:5432/wdb"";
        final String dbuser = ""guest2"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT value, dataProviderName, placeName, placeGeometry,"" + ""        referencetime, "" + ""        validFrom, validTo, "" + ""        valueParameterName, valueParameterUnit, "" + ""        levelParameterName, levelUnitName, levelFrom, levelTo, "" + ""        dataVersion, confidenceCode, storetime, valueid, valuetype "" + "" FROM wci.read( array['hirlam 10'], 'POINT( 10.0 59.0 )', "" + ""                ('2000-01-03 01:00:00', '2000-01-03 01:00:00', 'exact'), "" + ""                NULL, "" + ""                array['instant temperature of air'], "" + ""                ( 2, 2, 'distance above ground', 'exact' ), "" + ""                array[-1], "" + ""                NULL::wci.returnOid )"";
        final String colNames[] = { ""value"", ""dataProviderName"", ""placeName"", ""referencetime"", ""validFrom"", ""validTo"", ""valueParameterName"", ""valueParameterUnit"", ""levelParameterName"", ""levelUnitName"", ""levelFrom"", ""levelTo"" };
        ResultSet rs = null;
        try {
            con.setAutoCommit(false);
            statement.execute(wdbInit);
            LargeObjectManager lobj = ((org.postgresql.PGConnection) con).getLargeObjectAPI();
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                long oid = rs.getLong(""value"");
                LargeObject obj = lobj.open(oid, LargeObjectManager.READ);
                byte buf[] = new byte[obj.size()];
                obj.read(buf, 0, obj.size());
                obj.close();
                System.out.print(""  BLOB size: "" + buf.length);
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                con.commit();
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0,0
"    public TaggedDoubleChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            double tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    private static void multiclass_probability(int k, double[][] r, double[] p) {
        int t, j;
        int iter = 0, max_iter = Math.max(100, k);
        double[][] Q = new double[k][k];
        double[] Qp = new double[k];
        double pQp, eps = 0.005 / k;
        for (t = 0; t < k; t++) {
            p[t] = 1.0 / k;
            Q[t][t] = 0;
            for (j = 0; j < t; j++) {
                Q[t][t] += r[j][t] * r[j][t];
                Q[t][j] = Q[j][t];
            }
            for (j = t + 1; j < k; j++) {
                Q[t][t] += r[j][t] * r[j][t];
                Q[t][j] = -r[j][t] * r[t][j];
            }
        }
        for (iter = 0; iter < max_iter; iter++) {
            pQp = 0;
            for (t = 0; t < k; t++) {
                Qp[t] = 0;
                for (j = 0; j < k; j++) Qp[t] += Q[t][j] * p[j];
                pQp += p[t] * Qp[t];
            }
            double max_error = 0;
            for (t = 0; t < k; t++) {
                double error = Math.abs(Qp[t] - pQp);
                if (error > max_error) max_error = error;
            }
            if (max_error < eps) break;
            for (t = 0; t < k; t++) {
                double diff = (-Qp[t] + pQp) / Q[t][t];
                p[t] += diff;
                pQp = (pQp + diff * (diff * Q[t][t] + 2 * Qp[t])) / (1 + diff) / (1 + diff);
                for (j = 0; j < k; j++) {
                    Qp[j] = (Qp[j] + diff * Q[t][j]) / (1 + diff);
                    p[j] /= (1 + diff);
                }
            }
        }
        if (iter >= max_iter) System.err.print(""Exceeds max_iter in multiclass_prob\n"");
    }","    public int executeInsert(String sql) {
        int num = 0;
        try {
            conn = DriverManager.getConnection(""jdbc:odbc:ClassDB"", ""limq"", ""123"");
            Statement stmt = conn.createStatement();
            num = stmt.executeUpdate(sql);
        } catch (SQLException ex) {
            System.err.println(""ִ�в����д���:"" + ex.getMessage());
            System.out.print(""ִ�в����д���:"" + ex.getMessage());
        }
        CloseDataBase();
        return num;
    }",0,0
"    public static long crc32(String s) {
        java.util.zip.CRC32 crc32 = new java.util.zip.CRC32();
        crc32.update(s.getBytes());
        return crc32.getValue();
    }","    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public DoubleThresholdGenerator randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            double tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public Matrix transpose() {
        Matrix output = new Matrix(cols, rows);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                output.contents[j][i] = contents[i][j];
            }
        }
        return output;
    }",0,0
"    public void testSentFront() {
        String botRecord = ""hello"";
        String msg = ""hellohow are you"";
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile("".*?hel"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(msg);
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }","    protected Object growIndexedProperty(String name, Object indexedProperty, int index) {
        if (indexedProperty instanceof List) {
            List list = (List) indexedProperty;
            while (index >= list.size()) {
                Class contentType = getDynaClass().getDynaProperty(name).getContentType();
                Object value = null;
                if (contentType != null) {
                    value = createProperty(name + ""["" + list.size() + ""]"", contentType);
                }
                list.add(value);
            }
        }
        if ((indexedProperty.getClass().isArray())) {
            int length = Array.getLength(indexedProperty);
            if (index >= length) {
                Class componentType = indexedProperty.getClass().getComponentType();
                Object newArray = Array.newInstance(componentType, (index + 1));
                System.arraycopy(indexedProperty, 0, newArray, 0, length);
                indexedProperty = newArray;
                set(name, indexedProperty);
                int newLength = Array.getLength(indexedProperty);
                for (int i = length; i < newLength; i++) {
                    Array.set(indexedProperty, i, createProperty(name + ""["" + i + ""]"", componentType));
                }
            }
        }
        return indexedProperty;
    }",0,0
"    public static void main(String args[]) {
        int temp;
        int[] a1 = { 6, 2, -3, 7, -1, 8, 9, 0 };
        for (int j = 0; j < (a1.length * a1.length); j++) {
            for (int i = 0; i < a1.length - 1; i++) {
                if (a1[i] > a1[i + 1]) {
                    temp = a1[i];
                    a1[i] = a1[i + 1];
                    a1[i + 1] = temp;
                }
            }
        }
        for (int i = 0; i < a1.length; i++) {
            System.out.print("" "" + a1[i]);
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public RobotList<Location> sort_decr_Location(RobotList<Location> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i)));
            }
        } else if (field.equals(""x"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).x);
            }
        } else if (field.equals(""y"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).y);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value < enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Location> new_location_list = new RobotList<Location>(Location.class);
        for (int i = 0; i < length; i++) {
            new_location_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_location_list;
    }","    boolean deleteAll(File file) {
        if (file.isDirectory()) {
            for (File f : file.listFiles()) deleteAll(f);
        }
        return file.delete();
    }",0,0
"    public static XMLShowInfo NzbSearch(TVRageShowInfo tvrage, XMLShowInfo xmldata, int latestOrNext) {
        String newzbin_query = """", csvData = """", hellaQueueDir = """", newzbinUsr = """", newzbinPass = """";
        String[] tmp;
        DateFormat tvRageDateFormat = new SimpleDateFormat(""MMM/dd/yyyy"");
        DateFormat tvRageDateFormatFix = new SimpleDateFormat(""yyyy-MM-dd"");
        newzbin_query = ""?q="" + xmldata.showName + ""+"";
        if (latestOrNext == 0) {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.latestSeasonNum + ""x"" + tvrage.latestEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.latestSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.latestAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.latestTitle;
        } else {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.nextSeasonNum + ""x"" + tvrage.nextEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.nextSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.nextAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.nextTitle;
        }
        newzbin_query += ""&searchaction=Search"";
        newzbin_query += ""&fpn=p"";
        newzbin_query += ""&category=8category=11"";
        newzbin_query += ""&area=-1"";
        newzbin_query += ""&u_nfo_posts_only=0"";
        newzbin_query += ""&u_url_posts_only=0"";
        newzbin_query += ""&u_comment_posts_only=0"";
        newzbin_query += ""&u_v3_retention=1209600"";
        newzbin_query += ""&ps_rb_language="" + xmldata.language;
        newzbin_query += ""&sort=ps_edit_date"";
        newzbin_query += ""&order=desc"";
        newzbin_query += ""&areadone=-1"";
        newzbin_query += ""&feed=csv"";
        newzbin_query += ""&ps_rb_video_format="" + xmldata.format;
        newzbin_query = newzbin_query.replaceAll("" "", ""%20"");
        System.out.println(""http://v3.newzbin.com/search/"" + newzbin_query);
        try {
            URL url = new URL(""http://v3.newzbin.com/search/"" + newzbin_query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            csvData = in.readLine();
            if (csvData != null) {
                JavaNZB.searchCount++;
                if (searchCount == 6) {
                    searchCount = 0;
                    System.out.println(""Sleeping for 60 seconds"");
                    try {
                        Thread.sleep(60000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                tmp = csvData.split("","");
                tmp[2] = tmp[2].substring(1, tmp[2].length() - 1);
                tmp[3] = tmp[3].substring(1, tmp[3].length() - 1);
                Pattern p = Pattern.compile(""[\\\\</:>?\\[|\\]\""]"");
                Matcher matcher = p.matcher(tmp[3]);
                tmp[3] = matcher.replaceAll("" "");
                tmp[3] = tmp[3].replaceAll(""&"", ""and"");
                URLConnection urlConn;
                DataOutputStream printout;
                url = new URL(""http://v3.newzbin.com/api/dnzb/"");
                urlConn = url.openConnection();
                urlConn.setDoInput(true);
                urlConn.setDoOutput(true);
                urlConn.setUseCaches(false);
                urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                printout = new DataOutputStream(urlConn.getOutputStream());
                String content = ""username="" + JavaNZB.newzbinUsr + ""&password="" + JavaNZB.newzbinPass + ""&reportid="" + tmp[2];
                printout.writeBytes(content);
                printout.flush();
                printout.close();
                BufferedReader nzbInput = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
                String format = """";
                if (xmldata.format.equals(""17"")) format = "" Xvid"";
                if (xmldata.format.equals(""131072"")) format = "" x264"";
                if (xmldata.format.equals(""2"")) format = "" DVD"";
                if (xmldata.format.equals(""4"")) format = "" SVCD"";
                if (xmldata.format.equals(""8"")) format = "" VCD"";
                if (xmldata.format.equals(""32"")) format = "" HDts"";
                if (xmldata.format.equals(""64"")) format = "" WMV"";
                if (xmldata.format.equals(""128"")) format = "" Other"";
                if (xmldata.format.equals(""256"")) format = "" ratDVD"";
                if (xmldata.format.equals(""512"")) format = "" iPod"";
                if (xmldata.format.equals(""1024"")) format = "" PSP"";
                File f = new File(JavaNZB.hellaQueueDir, tmp[3] + format + "".nzb"");
                BufferedWriter out = new BufferedWriter(new FileWriter(f));
                String str;
                System.out.println(""--Downloading "" + tmp[3] + format + "".nzb"" + "" to queue directory--"");
                while (null != ((str = nzbInput.readLine()))) out.write(str);
                nzbInput.close();
                out.close();
                if (latestOrNext == 0) {
                    xmldata.episode = tvrage.latestEpisodeNum;
                    xmldata.season = tvrage.latestSeasonNum;
                } else {
                    xmldata.episode = tvrage.nextEpisodeNum;
                    xmldata.season = tvrage.nextSeasonNum;
                }
            } else System.out.println(""No new episode posted"");
            System.out.println();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
            System.out.println(""IO Exception from NzbSearch"");
        }
        return xmldata;
    }","    private void buildInfoZip(ScheduleItem si, OutputStream outStream) throws Exception {
        ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
        ZipOutputStream out = new ZipOutputStream(bytesOut);
        Vector<String> logFiles = si.getLogFileNames();
        for (int x = 0; x < logFiles.size(); x++) {
            File log = new File(logFiles.get(x));
            if (log.exists()) {
                out.putNextEntry(new ZipEntry(log.getName()));
                byte[] data = new byte[1024];
                FileInputStream is = new FileInputStream(log);
                int read = is.read(data);
                while (read > -1) {
                    out.write(data, 0, read);
                    read = is.read(data);
                }
                out.closeEntry();
            }
        }
        out.putNextEntry(new ZipEntry(""ItemLog.txt""));
        out.write(si.getLog().getBytes(""UTF-8""));
        out.closeEntry();
        StringBuffer buff = new StringBuffer();
        buff.append(""Name              : "" + si.getName() + ""\r\n"");
        buff.append(""Start             : "" + si.getStart().toString() + ""\r\n"");
        buff.append(""Stop              : "" + si.getStop().toString() + ""\r\n"");
        buff.append(""Duration          : "" + si.getDuration() + ""\r\n"");
        buff.append(""Channel           : "" + si.getChannel() + ""\r\n"");
        buff.append(""Path Index        : "" + si.getCapturePathIndex() + ""\r\n"");
        buff.append(""Capture Type      : "" + si.getCapType() + ""\r\n"");
        buff.append(""Filename          : "" + si.getFileName() + ""\r\n"");
        buff.append(""File Pattern      : "" + si.getFilePattern() + ""\r\n"");
        buff.append(""Keep For          : "" + si.getKeepFor() + ""\r\n"");
        buff.append(""Post Task         : "" + si.getPostTask() + ""\r\n"");
        buff.append(""Post Task Enabled : "" + si.getPostTaskEnabled() + ""\r\n"");
        buff.append(""State             : "" + si.getState() + ""\r\n"");
        buff.append(""Status            : "" + si.getStatus() + ""\r\n"");
        buff.append(""Type              : "" + si.getType() + ""\r\n"");
        buff.append(""\r\nWarnings:\r\n"");
        Vector<String> warns = si.getWarnings();
        for (int x = 0; x < warns.size(); x++) {
            buff.append(warns.get(x) + ""\r\n"");
        }
        buff.append(""\r\n"");
        buff.append(""Log Files:\r\n"");
        Vector<String> logs = si.getLogFileNames();
        for (int x = 0; x < logs.size(); x++) {
            buff.append(logs.get(x) + ""\r\n"");
        }
        buff.append(""\r\n"");
        GuideItem item = si.getCreatedFrom();
        if (item != null) {
            buff.append(""Created From:\r\n"");
            buff.append(""Name     : "" + item.getName() + ""\r\n"");
            buff.append(""Start    : "" + item.getStart().toString() + ""\r\n"");
            buff.append(""Stop     : "" + item.getStop().toString() + ""\r\n"");
            buff.append(""Duration : "" + item.getDuration() + ""\r\n"");
            buff.append(""\r\n"");
        }
        HashMap<Date, SignalStatistic> signal = si.getSignalStatistics();
        if (signal.size() > 0) {
            buff.append(""Signal Statistics: (Locked, Strength, Quality)\r\n"");
            Date[] keys = signal.keySet().toArray(new Date[0]);
            for (int x = 0; x < signal.size(); x++) {
                SignalStatistic stat = signal.get(keys[x]);
                buff.append(keys[x].toString() + "" - "" + stat.getLocked() + "", "" + stat.getStrength() + "", "" + stat.getQuality() + ""\r\n"");
            }
            buff.append(""\r\n"");
        }
        out.putNextEntry(new ZipEntry(""ItemDetails.txt""));
        out.write(buff.toString().getBytes(""UTF-8""));
        out.closeEntry();
        out.flush();
        out.close();
        StringBuffer header = new StringBuffer();
        header.append(""HTTP/1.1 200 OK\n"");
        header.append(""Content-Type: application/zip\n"");
        header.append(""Content-Length: "" + bytesOut.size() + ""\n"");
        header.append(""Content-Disposition: attachment; filename=\""ScheduleErrorReport.zip\""\n"");
        DateFormat df = new SimpleDateFormat(""EEE, dd MMM yyyy hh:mm:ss 'GMT'"", new Locale(""En"", ""Us"", ""Unix""));
        header.append(""Last-Modified: "" + df.format(new Date()) + ""\n"");
        header.append(""\n"");
        outStream.write(header.toString().getBytes());
        ByteArrayInputStream zipStream = new ByteArrayInputStream(bytesOut.toByteArray());
        byte[] bytes = new byte[4096];
        int read = zipStream.read(bytes);
        while (read > -1) {
            outStream.write(bytes, 0, read);
            outStream.flush();
            read = zipStream.read(bytes);
        }
        return;
    }",0,0
"	public static void shuffle2(int[] a) {
		//Alternate Fisher-Yates/Knuth Shuffle
		Random random = new Random();
		random.nextInt();

		for(int i = a.length-1; i >= 1; i--) {
			//Choose index to swap from 0 <= j <= i
			int j = random.nextInt(i+1);

			//Swap
			int tmp = a[i];
			a[i] = a[j];
			a[j] = tmp;
		}
	}","    private void doAboutDonate() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(KlangConstants.KLANGEDITOR_URL_DONATE));
                } catch (Exception err) {
                    err.printStackTrace();
                }
            }
        }
    }",0,0
"    public void elimina(Cliente cli) throws errorSQL, errorConexionBD {
        System.out.println(""GestorCliente.elimina()"");
        int id = cli.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM cliente WHERE cod_cliente ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            sql = ""DELETE FROM persona WHERE id ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt.executeUpdate(sql);
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        }
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] add(T[] array, T obj) {
        if (array == null) {
            throw new IllegalStateException(""array"");
        }
        T[] newArray = (T[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = obj;
        return newArray;
    }",0,0
"    public CMatrix transpose() {
        CMatrix X = new CMatrix(n, m);
        Complex[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (Desktop.isDesktopSupported()) {
                            Desktop desktop = Desktop.getDesktop();
                            try {
                                desktop.browse(uri);
                            } catch (Exception ex) {
                            }
                        }
                    }",0,0
"    public void testEnd() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""spiritbot\\W"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""spiritbot: how are you doing"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }","    public static Double[][] transposeMatrix(Double[][] m) {
        int r = m.length;
        int c = m[0].length;
        Double[][] t = new Double[c][r];
        for (int i = 0; i < r; ++i) {
            for (int j = 0; j < c; ++j) {
                t[j][i] = m[i][j];
            }
        }
        return t;
    }",0,0
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    @SuppressWarnings(""unchecked"")
    private static Object resizeArray(Object oldArray, int newSize) {
        int oldSize = java.lang.reflect.Array.getLength(oldArray);
        Class elementType = oldArray.getClass().getComponentType();
        Object newArray = java.lang.reflect.Array.newInstance(elementType, newSize);
        int preserveLength = Math.min(oldSize, newSize);
        if (preserveLength > 0) System.arraycopy(oldArray, 0, newArray, 0, preserveLength);
        return newArray;
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 4) {
            System.out.println(""usage: java msgmultisend <to> <from> <smtp> true|false"");
            return;
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Multipart Test"");
            msg.setSentDate(new Date());
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setText(msgText2, ""us-ascii"");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        }
    }","    public static void shuffle(int[] array, Random rng) {
        for (int i = array.length - 1; i >= 0; i--) {
            int index = rng.nextInt(i + 1);
            int a = array[index];
            array[index] = array[i];
            array[i] = a;
        }
    }",0,0
"    public static double[][] mergeColumns(double[]... x) {
        double[][] array = new double[x[0].length][x.length];
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                array[i][j] = x[j][i];
            }
        }
        return array;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public ZnMatrix transposed() {
        ZnMatrix m = new ZnMatrix(columns, rows, modulus);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public void testSentFront() {
        String botRecord = ""hello"";
        String msg = ""hellohow are you"";
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile("".*?hel"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(msg);
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] addToArray(T[] array, T el) {
        T[] newArray = (T[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = el;
        return newArray;
    }",0,0
"    public final void randomize(int[] index, Random random) {
        for (int j = index.length - 1; j > 0; j--) {
            int k = random.nextInt(j + 1);
            int temp = index[j];
            index[j] = index[k];
            index[k] = temp;
        }
    }","    public static double[][] transpose(double[][] a) {
        int rows = a.length;
        int cols = a[0].length;
        double[][] res = new double[cols][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                res[j][i] = a[i][j];
            }
        }
        return res;
    }",0,0
"    private void buildAttributeConstructor(Instances data) throws Exception {
        m_eigenvalues = null;
        m_outputNumAtts = -1;
        m_attributeFilter = null;
        m_nominalToBinFilter = null;
        m_sumOfEigenValues = 0.0;
        m_trainInstances = new Instances(data);
        m_trainHeader = new Instances(m_trainInstances, 0);
        m_replaceMissingFilter = new ReplaceMissingValues();
        m_replaceMissingFilter.setInputFormat(m_trainInstances);
        m_trainInstances = Filter.useFilter(m_trainInstances, m_replaceMissingFilter);
        m_nominalToBinFilter = new NominalToBinary();
        m_nominalToBinFilter.setInputFormat(m_trainInstances);
        m_trainInstances = Filter.useFilter(m_trainInstances, m_nominalToBinFilter);
        Vector deleteCols = new Vector();
        for (int i = 0; i < m_trainInstances.numAttributes(); i++) {
            if (m_trainInstances.numDistinctValues(i) <= 1) {
                deleteCols.addElement(new Integer(i));
            }
        }
        if (m_trainInstances.classIndex() >= 0) {
            m_hasClass = true;
            m_classIndex = m_trainInstances.classIndex();
            deleteCols.addElement(new Integer(m_classIndex));
        }
        if (deleteCols.size() > 0) {
            m_attributeFilter = new Remove();
            int[] todelete = new int[deleteCols.size()];
            for (int i = 0; i < deleteCols.size(); i++) {
                todelete[i] = ((Integer) (deleteCols.elementAt(i))).intValue();
            }
            m_attributeFilter.setAttributeIndicesArray(todelete);
            m_attributeFilter.setInvertSelection(false);
            m_attributeFilter.setInputFormat(m_trainInstances);
            m_trainInstances = Filter.useFilter(m_trainInstances, m_attributeFilter);
        }
        getCapabilities().testWithFail(m_trainInstances);
        m_numInstances = m_trainInstances.numInstances();
        m_numAttribs = m_trainInstances.numAttributes();
        fillCovariance();
        double[] d = new double[m_numAttribs];
        double[][] v = new double[m_numAttribs][m_numAttribs];
        Matrix corr = new Matrix(m_correlation);
        corr.eigenvalueDecomposition(v, d);
        m_eigenvectors = (double[][]) v.clone();
        m_eigenvalues = (double[]) d.clone();
        for (int i = 0; i < m_eigenvalues.length; i++) {
            if (m_eigenvalues[i] < 0) {
                m_eigenvalues[i] = 0.0;
            }
        }
        m_sortedEigens = Utils.sort(m_eigenvalues);
        m_sumOfEigenValues = Utils.sum(m_eigenvalues);
        m_transformedFormat = setOutputFormat();
        if (m_transBackToOriginal) {
            m_originalSpaceFormat = setOutputFormatOriginal();
            int numVectors = (m_transformedFormat.classIndex() < 0) ? m_transformedFormat.numAttributes() : m_transformedFormat.numAttributes() - 1;
            double[][] orderedVectors = new double[m_eigenvectors.length][numVectors + 1];
            for (int i = m_numAttribs - 1; i > (m_numAttribs - numVectors - 1); i--) {
                for (int j = 0; j < m_numAttribs; j++) {
                    orderedVectors[j][m_numAttribs - i] = m_eigenvectors[j][m_sortedEigens[i]];
                }
            }
            int nr = orderedVectors.length;
            int nc = orderedVectors[0].length;
            m_eTranspose = new double[nc][nr];
            for (int i = 0; i < nc; i++) {
                for (int j = 0; j < nr; j++) {
                    m_eTranspose[i][j] = orderedVectors[j][i];
                }
            }
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public void bubbleSort(int[] arr) {
        boolean swapped = true;
        int j = 0;
        int tmp;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < arr.length - j; i++) {
                if (arr[i] > arr[i + 1]) {
                    tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    swapped = true;
                }
            }
        }
    }","    private void loadTreeItemActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == loadTreeItem) {
            int returnVal = fc.showOpenDialog(Demarcations.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                treeFile = fc.getSelectedFile();
                if (!TreeFinder.verifyTreeFile(treeFile)) {
                    log.append(""That is not a valid tree file, please choose "" + ""a valid newick tree file.\n"");
                    return;
                }
            } else {
                log.append(""Dialog cancelled by user. \n"");
                return;
            }
            int option = JOptionPane.showConfirmDialog(null, ""You must now "" + ""choose the fasta file corresponding to the tree you just "" + ""loaded, continue?"");
            if (!(option == JOptionPane.YES_OPTION)) {
                log.append(""Dialog cancelled by user."");
                return;
            }
            returnVal = fc.showOpenDialog(Demarcations.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                inputFile = fc.getSelectedFile();
                if (!BinningFasta.verifyInputFile(inputFile)) {
                    log.append(""That is not a valid fasta file, please choose"" + "" a properly formatted fasta file.\n"");
                    return;
                }
                (new Thread() {

                    public void run() {
                        runTree();
                    }
                }).start();
            } else {
                log.append(""Dialog Cancelled by hser.\n"");
            }
        }
    }",0,0
"    private void openBaseURLButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (Desktop.isDesktopSupported()) {
            try {
                URI baseURI = new URI(this.baseURLField.getText());
                Desktop.getDesktop().browse(baseURI);
            } catch (Exception err) {
            }
        }
    }","    public static long getCheckSum(String chaine) {
        CRC32 crc32 = new CRC32();
        crc32.update(chaine.getBytes());
        return crc32.getValue();
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    static boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }",0,0
"    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    public void elimina(Cliente cli) throws errorSQL, errorConexionBD {
        System.out.println(""GestorCliente.elimina()"");
        int id = cli.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM cliente WHERE cod_cliente ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            sql = ""DELETE FROM persona WHERE id ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt.executeUpdate(sql);
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        }
    }",0,0
"    public int executeInsert(String sql) {
        int num = 0;
        try {
            conn = DriverManager.getConnection(""jdbc:odbc:ClassDB"", ""limq"", ""123"");
            Statement stmt = conn.createStatement();
            num = stmt.executeUpdate(sql);
        } catch (SQLException ex) {
            System.err.println(""ִ�в����д���:"" + ex.getMessage());
            System.out.print(""ִ�в����д���:"" + ex.getMessage());
        }
        CloseDataBase();
        return num;
    }","    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }",0,0
"    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    public RobotList<Resource> sort_incr_Resource(RobotList<Resource> list, String field) {
        int length = list.size();
        Index_value[] resource_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, distance(cur_loc, list.get(i).location));
            }
        } else if (field.equals(""energy"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).energy);
            }
        } else if (field.equals(""ammostash"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).ammostash);
            }
        } else if (field.equals(""speed"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).speed);
            }
        } else if (field.equals(""health"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).health);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (resource_dist[i].value > resource_dist[i + 1].value) {
                    Index_value a = resource_dist[i];
                    resource_dist[i] = resource_dist[i + 1];
                    resource_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Resource> new_resource_list = new RobotList<Resource>(Resource.class);
        for (int i = 0; i < length; i++) {
            new_resource_list.addLast(list.get(resource_dist[i].index));
        }
        return new_resource_list;
    }",0,0
"    public static final Object[][] transpose(Object[][] a) {
        int am = a.length;
        int an = a[0].length;
        Object[][] result = new Object[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                result[j][i] = a[i][j];
            }
        }
        return result;
    }","    int seqFib(int n) {
        if (n <= 1) return n; else return seqFib(n - 1) + seqFib(n - 2);
    }",0,0
"	public FTPClient sample1a(String server, int port, String username, String password) throws SocketException, IOException {
		FTPClient ftpClient = new FTPClient();
		ftpClient.connect(server, port);
		ftpClient.login(username, password);
		return ftpClient;
	}","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public Object[] toArray(Object a[]) {
        if (a.length < size) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size) a[size] = null;
        return a;
    }",0,0
"    protected void doSaveAs() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new javax.swing.filechooser.FileFilter() {

            public boolean accept(File file) {
                String filename = file.getName();
                if (file.isDirectory()) return true;
                return filename.endsWith("".col"");
            }

            public String getDescription() {
                return ""(*.col) ColorScheme files"";
            }
        });
        int result = fileChooser.showSaveDialog(this);
        switch(result) {
            case JFileChooser.CANCEL_OPTION:
                System.out.println(""openFileMenuItemMouseReleased() Cancel"");
                break;
            case JFileChooser.ERROR_OPTION:
                System.out.println(""openFileMenuItemMouseReleased() Error"");
                break;
            case JFileChooser.APPROVE_OPTION:
                String selFile = fileChooser.getSelectedFile().getAbsolutePath();
                if (!selFile.toLowerCase().endsWith("".col"")) {
                    selFile = selFile + "".col"";
                }
                CousheApp.lastAccessedFilename = selFile;
                this.aoColorScheme.saveColorScheme(selFile);
                this.refreshAll();
        }
    }","    public static LImage[][] getFlipHorizintalImage2D(LImage[][] pixels) {
        int w = pixels.length;
        int h = pixels[0].length;
        LImage pixel[][] = new LImage[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                pixel[i][j] = pixels[j][i];
            }
        }
        return pixel;
    }",0,0
"    public static void bubbleSort(int[] a) {
        if (a == null) {
            throw new IllegalArgumentException(""Null-pointed array"");
        }
        int right = a.length - 1;
        int k = 0;
        while (right > 0) {
            k = 0;
            for (int i = 0; i <= right - 1; i++) {
                if (a[i] > a[i + 1]) {
                    k = i;
                    int temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
            right = k;
        }
    }","    public static final long crc32(byte[] data) {
        CRC32 crc32 = new CRC32();
        crc32.update(data);
        return crc32.getValue();
    }",0,0
"	public static File chooseFileSave(JFrame frame) {
		File retval;

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(false);

		//Show dialog and wait for user input
		int status = fc.showSaveDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFile();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}","    public static final void randomShuffle(int[] v, Random r) {
        int n = v.length;
        while (--n > 0) {
            int k = r.nextInt(n + 1);
            int temp = v[n];
            v[n] = v[k];
            v[k] = temp;
        }
    }",0,0
"    public Node eval(Node startAt) throws Exception {
        startAt.isGoodArgsCnt(4);
        Node xnode = startAt.getSubNode(3, Node.VTYPE_STRINGS);
        Node ynode = Node.createEmptyList();
        String regex = startAt.getSubNode(1, Node.VTYPE_STRINGS).getString();
        startAt.requirePCode(2, PCoder.PC_IN);
        try {
            Pattern pattern = Pattern.compile(regex);
            Matcher matcher = pattern.matcher(xnode.getString());
            while (matcher.find()) {
                ynode.addElement(Node.createEmptyList().append(new Node(matcher.start())).append(new Node(matcher.end() - matcher.start())));
            }
        } catch (Exception ex) {
            if (Interpreter.isDebugMode()) {
                ex.printStackTrace();
            }
            throw new InterpreterException(StdErrors.extend(StdErrors.Regex_error, regex));
        }
        return ynode;
    }","    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    public long fib(int n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    public IntSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",0,0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""', 999, 999, 999 )"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], 'POINT( 10.0 59.0 )', "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returnFloat )"";
        final String colNames[] = { ""value"", ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println(""EXCEPTION: rs.close: "" + ex);
                }
            }
        }
    }","    private void openSaveFileActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == openSaveFile) {
            int returnVal = fc.showOpenDialog(ParameterSolutions.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File savedFile = fc.getSelectedFile();
                log.append(""Opening: "" + savedFile.getName() + ""\n"");
                String name = savedFile.getName();
                if (!savedFile.canRead() || !((name.substring(name.length() - 4, name.length()).equals("".cpm""))) || !recoverSavedData(savedFile)) {
                    log.append(""That is not a valid saved file, please choose"" + "" a file previously saved in this program.\n"");
                }
            } else {
                log.append(""Dialog Cancelled by User.\n"");
            }
        }
    }",0,0
"    private void browse(String url) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(url));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, ""Folgender Fehler ist beim �ffnen des Standart-"" + ""Browsers aufgetreten:\n"" + e.getMessage(), ""Fehler"", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, ""Ihre Plattform wird nicht unterst�tzt."", ""Webseite besuchen"", JOptionPane.ERROR_MESSAGE);
        }
    }","    public static Object[] add(Object[] array, Object value) {
        Object[] tmp = (Object[]) java.lang.reflect.Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, tmp, 0, array.length);
        tmp[array.length] = value;
        return tmp;
    }",0,0
"    public static boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }","    private void sort() {
        boolean unsortiert = true;
        Datei tmp = null;
        while (unsortiert) {
            unsortiert = false;
            for (int i = 0; i < this.size - 1; i++) {
                if (dateien[i] != null && dateien[i + 1] != null) {
                    if (dateien[i].compareTo(dateien[i + 1]) < 0) {
                        tmp = dateien[i];
                        dateien[i] = dateien[i + 1];
                        dateien[i + 1] = tmp;
                        unsortiert = true;
                    }
                }
            }
        }
    }",0,0
"    public static void main(String[] args) {
        String string = ""Look at this paragraph with a lot of different products and at least one product called Kautschuk-Plant, where the plant itself can be planted, on the other hand, there are some more words with absolutely no sense."";
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapterX/hyphen_not_hyphenated.pdf""));
            document.open();
            document.add(new Paragraph(string));
            Chunk c = new Chunk(string);
            c.setSplitCharacter(new NonHyphenatingHyphen());
            document.add(new Paragraph(c));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public static void main(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""msgsend"";
        String file = null;
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-a"")) {
                file = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: msgsend [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-a attach-file] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            String text = collect(in);
            if (file != null) {
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setText(text);
                MimeBodyPart mbp2 = new MimeBodyPart();
                mbp2.attachFile(file);
                MimeMultipart mp = new MimeMultipart();
                mp.addBodyPart(mbp1);
                mp.addBodyPart(mbp2);
                msg.setContent(mp);
            } else {
                msg.setText(text);
            }
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"    private float[][] transpose(float[][] m) {
        float[][] toReturn = new float[m[0].length][m.length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++) {
                toReturn[j][i] = m[i][j];
            }
        }
        return toReturn;
    }","            public void actionPerformed(ActionEvent e) {
                String sql = ""insert into jadwalKBM values('"" + FieldNim.getText() + ""','"" + FieldNama.getText() + ""','"" + FieldTtl.getText() + ""')"";
                if (FieldNim.getText().trim().equals("""")) {
                    JOptionPane.showMessageDialog(frame, ""Nama Bulan Wajib diIsi"", ""Simpan Data"", JOptionPane.WARNING_MESSAGE);
                    FieldNim.requestFocus();
                } else {
                    try {
                        Connection connection = DriverManager.getConnection(""jdbc:odbc:db_Sekolah"");
                        Statement statement = connection.createStatement();
                        statement.executeUpdate(sql);
                        statement.close();
                        FieldNim.setText("""");
                        FieldNama.setText("""");
                        FieldTtl.setText("""");
                        JOptionPane.showMessageDialog(frame, ""Simpan berhasil"", ""Simpan Data"", JOptionPane.WARNING_MESSAGE);
                        FieldNim.requestFocus();
                        FieldNim.requestFocus();
                        FieldNim.requestFocus();
                    } catch (Exception exc) {
                        System.err.println(""Error : "" + exc);
                    }
                }
            }",0,0
"    public static synchronized void shuffle(float[] anArray) {
        int n = anArray.length;
        for (int i = n - 1; i >= 1; i--) {
            int j = randomSource.nextInt(i + 1);
            float temp = anArray[j];
            anArray[j] = anArray[i];
            anArray[i] = temp;
        }
    }","    public void elimina(Cliente cli) throws errorSQL, errorConexionBD {
        System.out.println(""GestorCliente.elimina()"");
        int id = cli.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM cliente WHERE cod_cliente ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            sql = ""DELETE FROM persona WHERE id ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt.executeUpdate(sql);
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        }
    }",0,0
"    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    static long seqFib(int n) {
        if (n <= 1) return n; else return seqFib(n - 1) + seqFib(n - 2);
    }","    private void doAboutWeb() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(KlangConstants.KLANGEDITOR_URL_PROJECT));
                } catch (Exception err) {
                    err.printStackTrace();
                }
            }
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static final void shuffle(Object[] list) {
        for (int i = list.length - 1; i >= 0; i--) {
            int j = rand.nextInt(i + 1);
            if (i == j) {
                continue;
            }
            Object tmp = list[i];
            list[i] = list[j];
            list[j] = tmp;
        }
    }",0,0
"    public RMatrix transposed() {
        RMatrix m = new RMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://prologdev1:5432/wdb"";
        final String dbuser = ""guest2"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT value, dataProviderName, placeName, placeGeometry,"" + ""        referencetime, "" + ""        validFrom, validTo, "" + ""        valueParameterName, valueParameterUnit, "" + ""        levelParameterName, levelUnitName, levelFrom, levelTo, "" + ""        dataVersion, confidenceCode, storetime, valueid, valuetype "" + "" FROM wci.read( array['hirlam 10'], 'POINT( 10.0 59.0 )', "" + ""                ('2000-01-03 01:00:00', '2000-01-03 01:00:00', 'exact'), "" + ""                NULL, "" + ""                array['instant temperature of air'], "" + ""                ( 2, 2, 'distance above ground', 'exact' ), "" + ""                array[-1], "" + ""                NULL::wci.returnOid )"";
        final String colNames[] = { ""value"", ""dataProviderName"", ""placeName"", ""referencetime"", ""validFrom"", ""validTo"", ""valueParameterName"", ""valueParameterUnit"", ""levelParameterName"", ""levelUnitName"", ""levelFrom"", ""levelTo"" };
        ResultSet rs = null;
        try {
            con.setAutoCommit(false);
            statement.execute(wdbInit);
            LargeObjectManager lobj = ((org.postgresql.PGConnection) con).getLargeObjectAPI();
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                long oid = rs.getLong(""value"");
                LargeObject obj = lobj.open(oid, LargeObjectManager.READ);
                byte buf[] = new byte[obj.size()];
                obj.read(buf, 0, obj.size());
                obj.close();
                System.out.print(""  BLOB size: "" + buf.length);
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                con.commit();
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0,0
"    public void guiViewGroup(ApplicationType app, GroupType group) {
        try {
            File outputHtml = this.applyViewGroupXsl(app, group);
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                URI uri = outputHtml.toURI();
                logger.debug(""Displaying via browser: "" + uri.toASCIIString());
                desktop.browse(uri);
            } else {
                logger.debug(""Displaying via dialog"");
                String title = ""View Group: "" + group.getTitle();
                ViewHtmlDialog recDialog = new ViewHtmlDialog(MetaManager.getMainWindow(), true, title, outputHtml);
                recDialog.setVisible(true);
            }
        } catch (Exception ex) {
            logger.warn(ex);
        }
    }","    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }",0,0
"        public void actionPerformed(ActionEvent e) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().browse(this.uri);
                } catch (IOException err) {
                }
            }
        }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    private void OpenSchedule() {
        jtp.addTab(""Schedule"", jpShedule);
        jtp.addTab(""ScheduleSource"", jpsSource);
        JFileChooser chooser = new JFileChooser(DirS);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        ExtensionFileFilter filter = new ExtensionFileFilter(""sch"", ""Schedule graph representation files (*.sch)"");
        chooser.setFileFilter(filter);
        if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;
        DirS = chooser.getSelectedFile().getParent();
        PathS = chooser.getSelectedFile().getPath();
        TabS = chooser.getSelectedFile().getName();
        InitSchedule();
    }","    public static <T> T[] union(final T[] array1, final T[] array2) {
        @SuppressWarnings(""unchecked"") final T[] newArray = (T[]) Array.newInstance(array1.getClass().getComponentType(), array1.length + array2.length);
        System.arraycopy(array1, 0, newArray, 0, array1.length);
        System.arraycopy(array2, 0, newArray, array1.length, array2.length);
        return newArray;
    }",0,0
"    public static long fib(int n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    private void OpenSchedule() {
        jtp.addTab(""Schedule"", jpShedule);
        jtp.addTab(""ScheduleSource"", jpsSource);
        JFileChooser chooser = new JFileChooser(DirS);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        ExtensionFileFilter filter = new ExtensionFileFilter(""sch"", ""Schedule graph representation files (*.sch)"");
        chooser.setFileFilter(filter);
        if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;
        DirS = chooser.getSelectedFile().getParent();
        PathS = chooser.getSelectedFile().getPath();
        TabS = chooser.getSelectedFile().getName();
        InitSchedule();
    }",0,0
"        @Override
        public void actionPerformed(ActionEvent evt) {
            if (Desktop.isDesktopSupported()) {
                try {
                    URI uri = new URI(evt.getActionCommand());
                    Desktop.getDesktop().browse(uri);
                } catch (Exception e) {
                }
            }
        }","    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    static long seqFib(int n) {
        if (n <= 1) return n; else return seqFib(n - 1) + seqFib(n - 2);
    }","            public void actionPerformed(ActionEvent e) {
                String sql = ""update jadwalUjian set Semester='"" + FieldNama.getText() + ""',Tahun='"" + FieldTtl.getText() + ""',Waktu='"" + FieldJk.getText() + ""'where MP='"" + FieldNim.getText().trim() + ""'"";
                if (FieldNim.getText().trim().equals("""")) {
                    JOptionPane.showMessageDialog(frame, ""Nama Mata_Pelajaran Wajib di Isi..."", ""Simpan Data"", JOptionPane.WARNING_MESSAGE);
                    FieldNim.requestFocus();
                } else {
                    try {
                        Connection connection = DriverManager.getConnection(""jdbc:odbc:db_Sekolah"");
                        Statement statement = connection.createStatement();
                        statement.executeUpdate(sql);
                        statement.close();
                        connection.close();
                        FieldNim.setText("""");
                        FieldNama.setText("""");
                        FieldTtl.setText("""");
                        FieldJk.setText("""");
                        FieldNim.requestFocus();
                    } catch (Exception exc) {
                        System.err.println(sql);
                        System.err.println(""Error :"" + exc);
                    }
                }
            }",0,0
"    @SuppressWarnings(""unchecked"")
    public static <T> T[] append(T[] xs, T x) {
        int n = xs.length;
        T[] t = (T[]) Array.newInstance(xs.getClass().getComponentType(), n + 1);
        System.arraycopy(xs, 0, t, 0, n);
        t[n] = x;
        return t;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }","    public static void shuffle(double[] a) {
        Random random = new Random();
        for (int i = a.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            double swap = a[i];
            a[i] = a[j];
            a[j] = swap;
        }
    }",0,0
"    public static Object[] add(Object[] array, Object value) {
        Object[] tmp = (Object[]) java.lang.reflect.Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, tmp, 0, array.length);
        tmp[array.length] = value;
        return tmp;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public static <T> T[] union(final T[] array1, final T[] array2) {
        @SuppressWarnings(""unchecked"") final T[] newArray = (T[]) Array.newInstance(array1.getClass().getComponentType(), array1.length + array2.length);
        System.arraycopy(array1, 0, newArray, 0, array1.length);
        System.arraycopy(array2, 0, newArray, array1.length, array2.length);
        return newArray;
    }","    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"    public FloatMatrix transpose() {
        FloatMatrix X = new FloatMatrix(n, m);
        float[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    private void aboutProductSiteLabelMouseClicked(java.awt.event.MouseEvent evt) {
        if (!Desktop.isDesktopSupported()) return;
        try {
            Desktop.getDesktop().browse(new URI(""http://sourceforge.net/projects/jjsplit""));
        } catch (URISyntaxException ex) {
            Logger.getLogger(JJSplit.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JJSplit.class.getName()).log(Level.SEVERE, null, ex);
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","            public void actionPerformed(ActionEvent e) {
                String sql = ""update jadwalUjian set Semester='"" + FieldNama.getText() + ""',Tahun='"" + FieldTtl.getText() + ""',Waktu='"" + FieldJk.getText() + ""'where MP='"" + FieldNim.getText().trim() + ""'"";
                if (FieldNim.getText().trim().equals("""")) {
                    JOptionPane.showMessageDialog(frame, ""Nama Mata_Pelajaran Wajib di Isi..."", ""Simpan Data"", JOptionPane.WARNING_MESSAGE);
                    FieldNim.requestFocus();
                } else {
                    try {
                        Connection connection = DriverManager.getConnection(""jdbc:odbc:db_Sekolah"");
                        Statement statement = connection.createStatement();
                        statement.executeUpdate(sql);
                        statement.close();
                        connection.close();
                        FieldNim.setText("""");
                        FieldNama.setText("""");
                        FieldTtl.setText("""");
                        FieldJk.setText("""");
                        FieldNim.requestFocus();
                    } catch (Exception exc) {
                        System.err.println(sql);
                        System.err.println(""Error :"" + exc);
                    }
                }
            }",0,0
"    public final void randomize(int[] index, Random random) {
        for (int j = index.length - 1; j > 0; j--) {
            int k = random.nextInt(j + 1);
            int temp = index[j];
            index[j] = index[k];
            index[k] = temp;
        }
    }","    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }",0,0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://prologdev1:5432/wdb"";
        final String dbuser = ""guest2"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT value, dataProviderName, placeName, placeGeometry,"" + ""        referencetime, "" + ""        validFrom, validTo, "" + ""        valueParameterName, valueParameterUnit, "" + ""        levelParameterName, levelUnitName, levelFrom, levelTo, "" + ""        dataVersion, confidenceCode, storetime, valueid, valuetype "" + "" FROM wci.read( array['hirlam 10'], 'POINT( 10.0 59.0 )', "" + ""                ('2000-01-03 01:00:00', '2000-01-03 01:00:00', 'exact'), "" + ""                NULL, "" + ""                array['instant temperature of air'], "" + ""                ( 2, 2, 'distance above ground', 'exact' ), "" + ""                array[-1], "" + ""                NULL::wci.returnOid )"";
        final String colNames[] = { ""value"", ""dataProviderName"", ""placeName"", ""referencetime"", ""validFrom"", ""validTo"", ""valueParameterName"", ""valueParameterUnit"", ""levelParameterName"", ""levelUnitName"", ""levelFrom"", ""levelTo"" };
        ResultSet rs = null;
        try {
            con.setAutoCommit(false);
            statement.execute(wdbInit);
            LargeObjectManager lobj = ((org.postgresql.PGConnection) con).getLargeObjectAPI();
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                long oid = rs.getLong(""value"");
                LargeObject obj = lobj.open(oid, LargeObjectManager.READ);
                byte buf[] = new byte[obj.size()];
                obj.read(buf, 0, obj.size());
                obj.close();
                System.out.print(""  BLOB size: "" + buf.length);
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                con.commit();
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }","    public final void randomize(int[] index, Random random) {
        for (int j = index.length - 1; j > 0; j--) {
            int k = random.nextInt(j + 1);
            int temp = index[j];
            index[j] = index[k];
            index[k] = temp;
        }
    }",0,0
"    public static double[][] transp(double[][] m1) {
        int m = m1.length;
        int n = m1[0].length;
        double[][] ret = new double[n][m];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ret[j][i] = m1[i][j];
            }
        }
        return ret;
    }","    public void actionPerformed(ActionEvent event) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                Logging.LOG.error(""Failed to open web browser"", e);
            }
        }
    }",0,0
"    public static final double[][] transpose(final double m1[][]) {
        double[][] m3 = new double[m1[0].length][m1.length];
        for (int ii = 0; ii < m1.length; ii++) for (int jj = 0; jj < m1[ii].length; jj++) m3[jj][ii] = m1[ii][jj];
        return m3;
    }","    public static void main(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""msgsend"";
        String file = null;
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-a"")) {
                file = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: msgsend [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-a attach-file] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            String text = collect(in);
            if (file != null) {
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setText(text);
                MimeBodyPart mbp2 = new MimeBodyPart();
                mbp2.attachFile(file);
                MimeMultipart mp = new MimeMultipart();
                mp.addBodyPart(mbp1);
                mp.addBodyPart(mbp2);
                msg.setContent(mp);
            } else {
                msg.setText(text);
            }
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static void del(File file) {
        if (file.isDirectory()) {
            for (File child : file.listFiles()) {
                del(child);
            }
        }
        file.delete();
    }",0,0
"    public static int fibonacci(int broj) {
        if (broj <= 1) return broj; else return fibonacci(broj - 1) + fibonacci(broj - 2);
    }","    public TaggedDoubleChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            double tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }",0,0
"    public static void mattran_f77(double a[][], double at[][], int n, int p) {
        int i, j;
        for (i = 1; i <= n; i++) {
            for (j = 1; j <= p; j++) {
                at[j][i] = a[i][j];
            }
        }
    }","    public Object[] toArray(Object a[]) {
        if (a.length < size) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size) a[size] = null;
        return a;
    }",0,0
"    public Matrix transpose() {
        Matrix output = new Matrix(cols, rows);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                output.contents[j][i] = contents[i][j];
            }
        }
        return output;
    }","    public ThreadChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            ThreadInfo tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }",0,0
"    @Constraint(""post: s.get().size>0"")
    protected static void removeNewlinesForAssertStyleException(@Constraint(""post: s.get().size<=s@pre.get().size"") final IDocument s) {
        String checkMethodName = ""assert(Pre|Post)Condition_(\\w*)_for_method_(\\w*)"";
        String checkMethodParameters = ""([^\\)]*)"";
        Pattern pattern = Pattern.compile(""if\\s*\\(\\s*!\\s*"" + checkMethodName + ""\\s*\\("" + checkMethodParameters + ""\\)\\s*\\)\\s*\\{"" + ""\\s*throw\\s*new\\s*Illegal(State|Argument)Exception\\(\\s*\""(.*)\""\\s*\\)\\s*;"" + ""\\s*}\\s*"");
        Matcher matcher = pattern.matcher(s.get());
        try {
            int lengthDifference = 0;
            while (matcher.find()) {
                String replacement = ""if(!assert"" + Matcher.quoteReplacement(matcher.group(1)) + ""Condition_"" + Matcher.quoteReplacement(matcher.group(2)) + ""_for_method_"" + Matcher.quoteReplacement(matcher.group(3)) + ""("" + Matcher.quoteReplacement(matcher.group(4)) + "")){throw new Illegal"" + Matcher.quoteReplacement(matcher.group(5)) + ""Exception(\"""" + Matcher.quoteReplacement(matcher.group(6)) + ""\"");}"";
                int lengthOfMatchedString = matcher.end() - matcher.start();
                s.replace(lengthDifference + matcher.start(), lengthOfMatchedString, replacement);
                lengthDifference -= lengthOfMatchedString - replacement.length();
            }
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }","    public static double[][] transpose(double[][] matrix) {
        double[][] result = new double[matrix.length][matrix[0].length];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                result[i][j] = matrix[j][i];
            }
        }
        return result;
    }",0,0
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","            public void actionPerformed(ActionEvent e) {
                if (Desktop.isDesktopSupported()) {
                    try {
                        Desktop.getDesktop().browse(new URI(""http://popcornforum.de/forumdisplay.php?fid=67""));
                    } catch (Exception exc) {
                        JOptionPane.showMessageDialog(null, ""Could not acces http://popcornforum.de/forumdisplay.php?fid=67"", ""Error"", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }",0,0
"	public static void BubbleSortFloat1(float[] num) {
		boolean flag = true; // set flag to true to begin first pass
		float temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}","    public void elimina(Cliente cli) throws errorSQL, errorConexionBD {
        System.out.println(""GestorCliente.elimina()"");
        int id = cli.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM cliente WHERE cod_cliente ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            sql = ""DELETE FROM usuario WHERE cod_usuario ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            sql = ""DELETE FROM persona WHERE id ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        }
    }",0,0
"    public static double[][] transpose(double[][] doubleBox) {
        YeriDebug.ASSERT(CollectionsToolkit.isRectangular(doubleBox));
        double[][] returnBox = new double[doubleBox[0].length][doubleBox.length];
        for (int i = 0; i < doubleBox.length; i++) {
            for (int j = 0; j < doubleBox[i].length; j++) {
                returnBox[j][i] = doubleBox[i][j];
            }
        }
        return returnBox;
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0,0
"    public static void main(String args[]) {
        int temp;
        int[] a1 = { 6, 2, -3, 7, -1, 8, 9, 0 };
        for (int j = 0; j < (a1.length * a1.length); j++) {
            for (int i = 0; i < a1.length - 1; i++) {
                if (a1[i] > a1[i + 1]) {
                    temp = a1[i];
                    a1[i] = a1[i + 1];
                    a1[i + 1] = temp;
                }
            }
        }
        for (int i = 0; i < a1.length; i++) {
            System.out.print("" "" + a1[i]);
        }
    }","    public static void main(String[] args) {
        System.out.println(""Chapter 6 example 4: Alignment of images"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0604.pdf""));
            document.open();
            Image gif = Image.getInstance(""vonnegut.gif"");
            gif.setAlignment(Image.RIGHT);
            Image jpeg = Image.getInstance(""myKids.jpg"");
            jpeg.setAlignment(Image.MIDDLE);
            Image png = Image.getInstance(""hitchcock.png"");
            png.setAlignment(Image.LEFT);
            document.add(gif);
            document.add(jpeg);
            document.add(png);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0,0
"    private void run() {
        setMessage(""Physical Likleihood Computation has Started"");
        setProgress(10);
        Chromosome chr = Chromosome.getInstance(probeMap.getLinkageGroup());
        int probe_count = probeMap.getProbes().size();
        int clone_count = chr.getClones().size();
        int ch_length = chr.getLength();
        byte[][] data = chr.getHybridizationData(probeMap.getProbes());
        double probe_false_pos = chr.getProbFalsePos();
        double probe_false_neg = chr.getProbFalseNeg();
        int clone_length = GWData.getInstance().getCloneLength();
        int[] probeOrder = ArrayUtils.toPrimitive(chr.getProbeOrder(probeMap.getProbes()).toArray(new Integer[0]));
        int[][] joint = new int[probe_count][probe_count];
        for (int probeIndex1 = 0; probeIndex1 < probe_count; probeIndex1++) {
            for (int probeIndex2 = probeIndex1 + 1; probeIndex2 < probe_count; probeIndex2++) {
                for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
                    if ((data[cloneIndex][probeIndex1] == 1) && (data[cloneIndex][probeIndex2] == 1)) {
                        joint[probeIndex1][probeIndex2]++;
                    }
                }
                joint[probeIndex2][probeIndex1] = joint[probeIndex1][probeIndex2];
            }
        }
        double[][] aa = new double[clone_count][probe_count + 1];
        for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
            for (int probeIndex = 0; probeIndex < probe_count + 1; probeIndex++) {
                if (probeIndex == 0) {
                    aa[cloneIndex][probeIndex] = 0.0;
                } else if (data[cloneIndex][probeIndex - 1] == 0) {
                    aa[cloneIndex][probeIndex] = probe_false_neg / (1 - probe_false_pos);
                } else {
                    aa[cloneIndex][probeIndex] = (1 - probe_false_neg) / probe_false_pos;
                }
            }
        }
        int P = 0;
        for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
            for (int probeIndex = 0; probeIndex < probe_count; probeIndex++) {
                if (data[cloneIndex][probeIndex] == 1) {
                    P++;
                }
            }
        }
        double const1 = clone_count * Math.log(ch_length - clone_length) - P * Math.log(probe_false_pos / (1 - probe_false_pos)) - probe_count * clone_count * Math.log(1 - probe_false_pos);
        int gap = ch_length - (probe_count * clone_length);
        setMessage(""Computing initial probe spacings"");
        setProgress(30);
        double[] y = PLHoodHelper.Initial_Ys(probeOrder, probe_count, clone_count, ch_length, clone_length, gap, joint);
        double[] R = PLHoodHelper.getR(ch_length, clone_length, probe_count, clone_count, aa, probeOrder);
        setMessage(""Running Steepest Descent Algorithm"");
        setProgress(70);
        logLikelihood = -PLHoodHelper.Conj(y, probe_count, clone_count, aa, probeOrder, clone_length, const1, R);
        probeSpacing = Arrays.asList(ArrayUtils.toObject(y));
        setMessage(""The Physical Log-likelihood is "" + logLikelihood);
        setProgress(100);
    }","    static long seqFib(int n) {
        if (n <= 1) return n; else return seqFib(n - 1) + seqFib(n - 2);
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static Object[] append(Object[] lst, Object[] lst1) {
        Object[] l = (Object[]) Array.newInstance(lst.getClass().getComponentType(), lst.length + lst1.length);
        System.arraycopy(lst, 0, l, 0, lst.length);
        System.arraycopy(lst1, 0, l, lst.length, lst1.length);
        return l;
    }",0,0
"    private static void multiclass_probability(int k, double[][] r, double[] p) {
        int t, j;
        int iter = 0, max_iter = Math.max(100, k);
        double[][] Q = new double[k][k];
        double[] Qp = new double[k];
        double pQp, eps = 0.005 / k;
        for (t = 0; t < k; t++) {
            p[t] = 1.0 / k;
            Q[t][t] = 0;
            for (j = 0; j < t; j++) {
                Q[t][t] += r[j][t] * r[j][t];
                Q[t][j] = Q[j][t];
            }
            for (j = t + 1; j < k; j++) {
                Q[t][t] += r[j][t] * r[j][t];
                Q[t][j] = -r[j][t] * r[t][j];
            }
        }
        for (iter = 0; iter < max_iter; iter++) {
            pQp = 0;
            for (t = 0; t < k; t++) {
                Qp[t] = 0;
                for (j = 0; j < k; j++) Qp[t] += Q[t][j] * p[j];
                pQp += p[t] * Qp[t];
            }
            double max_error = 0;
            for (t = 0; t < k; t++) {
                double error = Math.abs(Qp[t] - pQp);
                if (error > max_error) max_error = error;
            }
            if (max_error < eps) break;
            for (t = 0; t < k; t++) {
                double diff = (-Qp[t] + pQp) / Q[t][t];
                p[t] += diff;
                pQp = (pQp + diff * (diff * Q[t][t] + 2 * Qp[t])) / (1 + diff) / (1 + diff);
                for (j = 0; j < k; j++) {
                    Qp[j] = (Qp[j] + diff * Q[t][j]) / (1 + diff);
                    p[j] /= (1 + diff);
                }
            }
        }
        if (iter >= max_iter) System.err.print(""Exceeds max_iter in multiclass_prob\n"");
    }","    private byte[] showScanResult(HTTPurl urlData) throws Exception {
        int freq = 0;
        int band = 0;
        try {
            freq = Integer.parseInt(urlData.getParameter(""freq""));
            band = Integer.parseInt(urlData.getParameter(""band""));
        } catch (Exception e) {
            throw new Exception(""Freq or Band not valid: "" + e.toString());
        }
        PageTemplate template = new PageTemplate(store.getProperty(""path.template"") + File.separator + ""channel-scanresult.html"");
        CaptureDeviceList devList = CaptureDeviceList.getInstance();
        if (devList.getActiveDeviceCount() > 0) {
            template.replaceAll(""$scanresult"", ""Can not scan channels while captures are active!"");
            return template.getPageBytes();
        }
        if (devList.getDeviceCount() == 0) {
            template.replaceAll(""$scanresult"", ""No Devices Available!"");
            return template.getPageBytes();
        }
        String name = urlData.getParameter(""name"");
        StringBuffer buff = new StringBuffer(1024);
        buff.append(""<form action='/servlet/"" + urlData.getServletClass() + ""' method='POST' accept-charset=\""UTF-8\"">\n"");
        buff.append(""<input type='hidden' name='action' value='05'>\n"");
        buff.append(""<table class='channelScanResult'>\n"");
        buff.append(""<tr class='scanChannelHeading'>"");
        buff.append(""<td class='scanChannelHeadingDataName'>"" + name + ""</td>"");
        buff.append(""<td class='scanChannelHeadingData'>Program</td>"");
        buff.append(""<td class='scanChannelHeadingData'>Video</td>"");
        buff.append(""<td class='scanChannelHeadingData'>Audio</td>"");
        buff.append(""<td class='scanChannelHeadingData'>Add</td>"");
        buff.append(""</tr>\n"");
        boolean testMode = ""1"".equals(store.getProperty(""tools.testmode""));
        CaptureDevice cap = (CaptureDevice) devList.getDevice(0);
        Runtime runner = Runtime.getRuntime();
        String[] com = null;
        if (testMode == true) {
            String scanCommand = ""win32/scan.exe -test"";
            System.out.println(""Running channel scan command: "" + scanCommand);
            com = new String[2];
            com[0] = ""win32/scan.exe"";
            com[1] = ""-test"";
        } else {
            String scanCommand = ""win32/scan.exe "" + freq + "" "" + band + "" \"""" + cap.getID() + ""\"""";
            System.out.println(""Running channel scan command: "" + scanCommand);
            com = new String[4];
            com[0] = ""win32/scan.exe"";
            com[1] = new Integer(freq).toString();
            com[2] = new Integer(band).toString();
            com[3] = ""\"""" + cap.getID() + ""\"""";
        }
        Process scan = runner.exec(com);
        ScanResult result = new ScanResult(freq, band);
        result.readInput(scan.getInputStream());
        result.parseXML();
        int channelCount = 0;
        if (result.getResult().size() > 0) {
            Vector<Channel> scanResult = result.getResult();
            Channel chData = null;
            for (int x = 0; x < scanResult.size(); x++) {
                chData = (Channel) scanResult.get(x);
                if (chData != null) {
                    buff.append(""<tr class='scanChannelResult'>"");
                    buff.append(""<td>\n<input type='text' name='name"" + channelCount + ""' value='"" + checkName(chData.getName()) + ""'>\n"");
                    buff.append(""<input type='hidden' name='freq"" + channelCount + ""' value='"" + chData.getFrequency() + ""'>\n"");
                    buff.append(""<input type='hidden' name='band"" + channelCount + ""' value='"" + chData.getBandWidth() + ""'>\n"");
                    buff.append(""</td>\n\n"");
                    buff.append(""<td align='center'>"" + chData.getProgramID());
                    buff.append(""<input type='hidden' name='programid"" + channelCount + ""' value='"" + chData.getProgramID() + ""'>\n"");
                    buff.append(""</td>\n"");
                    buff.append(""<td align='center'>"");
                    int count = getStreamTypeCount(chData, Channel.TYPE_VIDEO);
                    if (count == 0) {
                        buff.append(""-1"");
                        buff.append(""<input type='hidden' name='videoid"" + channelCount + ""' value='-1'>\n"");
                    }
                    if (count == 1) {
                        int[] data = getFirstOfType(chData, Channel.TYPE_VIDEO);
                        buff.append(data[0]);
                        buff.append(""<input type='hidden' name='videoid"" + channelCount + ""' value='"" + data[0] + ""'>\n"");
                    } else if (count > 1) {
                        buff.append(""<SELECT NAME='videoid"" + channelCount + ""'>\n"");
                        for (int st = 0; st < chData.getStreams().size(); st++) {
                            int[] streamData = (int[]) chData.getStreams().get(st);
                            if (streamData[1] == Channel.TYPE_VIDEO) {
                                buff.append(""<OPTION value=\"""" + streamData[0] + ""\"">"");
                                buff.append(streamData[0]);
                                buff.append(""</OPTION>\n"");
                            }
                        }
                        buff.append(""</SELECT>"");
                    }
                    buff.append(""</td>\n"");
                    buff.append(""<td align='center'>"");
                    count = getStreamTypeCount(chData, Channel.TYPE_AUDIO_AC3);
                    count += getStreamTypeCount(chData, Channel.TYPE_AUDIO_MPG);
                    if (count == 0) {
                        buff.append(""-1"");
                        buff.append(""<input type='hidden' name='audioid"" + channelCount + ""' value='-1'>\n"");
                    }
                    if (count == 1) {
                        int[] data = getFirstOfType(chData, Channel.TYPE_AUDIO_AC3);
                        if (data == null) data = getFirstOfType(chData, Channel.TYPE_AUDIO_MPG);
                        buff.append(data[0]);
                        if (data[1] == Channel.TYPE_AUDIO_AC3) buff.append("" AC3""); else buff.append("" MPG"");
                        buff.append(""<input type='hidden' name='audioid"" + channelCount + ""' value='"" + data[0] + "":"" + data[1] + ""'>\n"");
                    } else if (count > 1) {
                        buff.append(""<SELECT NAME='audioid"" + channelCount + ""'>\n"");
                        for (int st = 0; st < chData.getStreams().size(); st++) {
                            int[] streamData = (int[]) chData.getStreams().get(st);
                            if (streamData[1] == Channel.TYPE_AUDIO_MPG || streamData[1] == Channel.TYPE_AUDIO_AC3) {
                                buff.append(""<OPTION value=\"""" + streamData[0] + "":"" + streamData[1] + ""\"">"");
                                buff.append(streamData[0]);
                                if (streamData[1] == Channel.TYPE_AUDIO_AC3) buff.append("" AC3""); else buff.append("" MPG"");
                                buff.append(""</OPTION>\n"");
                            }
                        }
                        buff.append(""</SELECT>"");
                    }
                    buff.append(""</td>\n"");
                    buff.append(""<td align='center'><input type='checkbox' name='add"" + channelCount + ""' value='add'></td>\n"");
                    buff.append(""</tr>\n\n"");
                    channelCount++;
                } else {
                    break;
                }
            }
        } else {
            buff.append(""<tr class='scanChannelResult'>"");
            buff.append(""<td>No Programs Found</td>\n"");
            buff.append(""<td align='center'>N/A</td>\n"");
            buff.append(""<td align='center'>N/A</td>\n"");
            buff.append(""<td align='center'>N/A</td>\n"");
            buff.append(""<td align='center'>N/A</td>\n"");
            buff.append(""</tr>\n\n"");
        }
        buff.append(""</table><br>\n"");
        if (channelCount > 0) buff.append(""<input type='submit' value='Add Selected'>\n"");
        buff.append(""</form>\n"");
        template.replaceAll(""$scanresult"", buff.toString());
        return template.getPageBytes();
    }",0,0
"    public long fib(int n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    public static double[][] invert(double[][] matrix) {
        double[][] result = new double[matrix[0].length][matrix.length];
        for (int row = 0; row < matrix.length; row++) for (int col = 0; col < matrix[row].length; col++) result[col][row] = result[row][col];
        return result;
    }",0,0
"	public static File[] chooseFileOpenMultiple(JFrame frame) {
		File retval[];

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(true);

		//Show dialog and wait for user input
		int status = fc.showSaveDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFiles();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}","    private void buildAttributeConstructor(Instances data) throws Exception {
        m_eigenvalues = null;
        m_outputNumAtts = -1;
        m_attributeFilter = null;
        m_nominalToBinFilter = null;
        m_sumOfEigenValues = 0.0;
        if (data.checkForStringAttributes()) {
            throw new UnsupportedAttributeTypeException(""Can't handle string attributes!"");
        }
        m_trainInstances = data;
        m_trainCopy = new Instances(m_trainInstances);
        m_replaceMissingFilter = new ReplaceMissingValues();
        m_replaceMissingFilter.setInputFormat(m_trainInstances);
        m_trainInstances = Filter.useFilter(m_trainInstances, m_replaceMissingFilter);
        if (m_normalize) {
            m_normalizeFilter = new Normalize();
            m_normalizeFilter.setInputFormat(m_trainInstances);
            m_trainInstances = Filter.useFilter(m_trainInstances, m_normalizeFilter);
        }
        m_nominalToBinFilter = new NominalToBinary();
        m_nominalToBinFilter.setInputFormat(m_trainInstances);
        m_trainInstances = Filter.useFilter(m_trainInstances, m_nominalToBinFilter);
        Vector deleteCols = new Vector();
        for (int i = 0; i < m_trainInstances.numAttributes(); i++) {
            if (m_trainInstances.numDistinctValues(i) <= 1) {
                deleteCols.addElement(new Integer(i));
            }
        }
        if (m_trainInstances.classIndex() >= 0) {
            m_hasClass = true;
            m_classIndex = m_trainInstances.classIndex();
            deleteCols.addElement(new Integer(m_classIndex));
        }
        if (deleteCols.size() > 0) {
            m_attributeFilter = new Remove();
            int[] todelete = new int[deleteCols.size()];
            for (int i = 0; i < deleteCols.size(); i++) {
                todelete[i] = ((Integer) (deleteCols.elementAt(i))).intValue();
            }
            m_attributeFilter.setAttributeIndicesArray(todelete);
            m_attributeFilter.setInvertSelection(false);
            m_attributeFilter.setInputFormat(m_trainInstances);
            m_trainInstances = Filter.useFilter(m_trainInstances, m_attributeFilter);
        }
        m_numInstances = m_trainInstances.numInstances();
        m_numAttribs = m_trainInstances.numAttributes();
        fillCorrelation();
        double[] d = new double[m_numAttribs];
        double[][] v = new double[m_numAttribs][m_numAttribs];
        Matrix corr = new Matrix(m_correlation);
        corr.eigenvalueDecomposition(v, d);
        m_eigenvectors = (double[][]) v.clone();
        m_eigenvalues = (double[]) d.clone();
        for (int i = 0; i < m_eigenvalues.length; i++) {
            if (m_eigenvalues[i] < 0) {
                m_eigenvalues[i] = 0.0;
            }
        }
        m_sortedEigens = Utils.sort(m_eigenvalues);
        m_sumOfEigenValues = Utils.sum(m_eigenvalues);
        m_transformedFormat = setOutputFormat();
        if (m_transBackToOriginal) {
            m_originalSpaceFormat = setOutputFormatOriginal();
            int numVectors = (m_transformedFormat.classIndex() < 0) ? m_transformedFormat.numAttributes() : m_transformedFormat.numAttributes() - 1;
            double[][] orderedVectors = new double[m_eigenvectors.length][numVectors + 1];
            for (int i = m_numAttribs - 1; i > (m_numAttribs - numVectors - 1); i--) {
                for (int j = 0; j < m_numAttribs; j++) {
                    orderedVectors[j][m_numAttribs - i] = m_eigenvectors[j][m_sortedEigens[i]];
                }
            }
            int nr = orderedVectors.length;
            int nc = orderedVectors[0].length;
            m_eTranspose = new double[nc][nr];
            for (int i = 0; i < nc; i++) {
                for (int j = 0; j < nr; j++) {
                    m_eTranspose[i][j] = orderedVectors[j][i];
                }
            }
        }
    }",0,0
"    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException exc) {
                feedback.registerBug(""IOException occurred opening a link in the browser."", exc);
            }
        } else {
            feedback.registerBug(""Desktop is not supported, cannot open browser to show link!"");
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public static void main(String[] args) {
        Console console = System.console();
        if (console == null) {
            System.err.println(""No console."");
            System.exit(1);
        }
        while (true) {
            Pattern pattern = Pattern.compile(console.readLine(""%nEnter your regex: ""));
            Matcher matcher = pattern.matcher(console.readLine(""Enter input string to search: ""));
            boolean found = false;
            while (matcher.find()) {
                console.format(""I found the text \""%s\"" starting at "" + ""index %d and ending at index %d.%n"", matcher.group(), matcher.start(), matcher.end());
                found = true;
            }
            if (!found) {
                console.format(""No match found.%n"");
            }
        }
    }","            public void mouseClicked(MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(""http://trac.jsystemtest.org/wiki/DetailedOSProjectsList""));
                    } catch (Exception e) {
                        log.log(Level.WARNING, ""Failed openning browser to JSystem website: "" + e.getMessage());
                    }
                }
            }",0,0
"    private static void browseHelp() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(new URI(TargetedProjectionPursuit.HELP_URL));
            } catch (Exception e) {
            }
        } else {
        }
    }","    private static boolean deleteFile(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                deleteFile(child);
            }
        }
        return resource.delete();
    }",0,0
"    public static void main(String args[]) {
        int[] mas = { 3, 5, 6, 9, 1, -3, -4, -88 };
        int sort = 0;
        for (int j = 0; j < (mas.length); j++) {
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    sort = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = sort;
                }
            }
        }
        for (int i = 0; i < mas.length; i++) {
            System.out.print("" "" + mas[i]);
        }
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] append(T[] oldArray, T toAppend) {
        Class<?> component = oldArray.getClass().getComponentType();
        T[] array = (T[]) Array.newInstance(component, oldArray.length + 1);
        System.arraycopy(oldArray, 0, array, 0, oldArray.length);
        array[oldArray.length] = toAppend;
        return array;
    }",0,0
"    public static void main(String[] args) {
        Console c = System.console();
        if (c == null) {
            System.err.println(""No console!"");
            System.exit(-1);
        }
        while (true) {
            String regex = c.readLine(""%n  find(), Enter your regex:"");
            String input = c.readLine(""  find(), enter input String to serach:"");
            Pattern p = Pattern.compile(regex);
            Matcher m = p.matcher(input);
            boolean bFind = false;
            while (m.find()) {
                bFind = true;
                c.printf(""find the text '%s' starting at %d ending at %d%n"", m.group(), m.start(), m.end());
            }
            if (!bFind) {
                c.printf(""No matcher found.%n"");
            }
        }
    }","    public static File capture(Rectangle rect) throws Exception {
        Robot robot = new Robot();
        BufferedImage img = robot.createScreenCapture(rect);
        File file = File.createTempFile(""jfx_screen_capture_retouched"", "".jpg"");
        ImageIO.write(img, ""jpg"", file);
        return file;
    }",0,0
"    public static void main(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""msgsend"";
        String file = null;
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-a"")) {
                file = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: msgsend [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-a attach-file] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            String text = collect(in);
            if (file != null) {
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setText(text);
                MimeBodyPart mbp2 = new MimeBodyPart();
                mbp2.attachFile(file);
                MimeMultipart mp = new MimeMultipart();
                mp.addBodyPart(mbp1);
                mp.addBodyPart(mbp2);
                msg.setContent(mp);
            } else {
                msg.setText(text);
            }
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public final void randomize(int[] index, Random random) {
        for (int j = index.length - 1; j > 0; j--) {
            int k = random.nextInt(j + 1);
            int temp = index[j];
            index[j] = index[k];
            index[k] = temp;
        }
    }",0,0
"    private void multiclass_probability(final int k, final double[][] r, final double[] p) {
        int t, j;
        int iter = 0, max_iter = Math.max(100, k);
        double[][] Q = new double[k][k];
        double[] Qp = new double[k];
        double pQp, eps = 0.005 / k;
        for (t = 0; t < k; t++) {
            p[t] = 1.0 / k;
            Q[t][t] = 0;
            for (j = 0; j < t; j++) {
                Q[t][t] += r[j][t] * r[j][t];
                Q[t][j] = Q[j][t];
            }
            for (j = t + 1; j < k; j++) {
                Q[t][t] += r[j][t] * r[j][t];
                Q[t][j] = -r[j][t] * r[t][j];
            }
        }
        for (iter = 0; iter < max_iter; iter++) {
            pQp = 0;
            for (t = 0; t < k; t++) {
                Qp[t] = 0;
                for (j = 0; j < k; j++) {
                    Qp[t] += Q[t][j] * p[j];
                }
                pQp += p[t] * Qp[t];
            }
            double max_error = 0;
            for (t = 0; t < k; t++) {
                double error = Math.abs(Qp[t] - pQp);
                if (error > max_error) {
                    max_error = error;
                }
            }
            if (max_error < eps) {
                break;
            }
            for (t = 0; t < k; t++) {
                double diff = (-Qp[t] + pQp) / Q[t][t];
                p[t] += diff;
                pQp = (pQp + diff * (diff * Q[t][t] + 2 * Qp[t])) / (1 + diff) / (1 + diff);
                for (j = 0; j < k; j++) {
                    Qp[j] = (Qp[j] + diff * Q[t][j]) / (1 + diff);
                    p[j] /= (1 + diff);
                }
            }
        }
        if (iter >= max_iter) {
            logger.error(""Exceeds max_iter in multiclass_prob"");
        }
    }","    public static void main(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""msgsend"";
        String file = null;
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-a"")) {
                file = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: msgsend [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-a attach-file] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            String text = collect(in);
            if (file != null) {
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setText(text);
                MimeBodyPart mbp2 = new MimeBodyPart();
                mbp2.attachFile(file);
                MimeMultipart mp = new MimeMultipart();
                mp.addBodyPart(mbp1);
                mp.addBodyPart(mbp2);
                msg.setContent(mp);
            } else {
                msg.setText(text);
            }
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"	public static int[][] transpose(int[][] m) {
		int[][] retval = new int[m[0].length][m.length];
		for(int i = 0; i < m.length; i++) {
			for(int j = 0; j < m[0].length; j++) {
				retval[j][i] = m[i][j];
			}
		}
		return retval;
	}","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"    private static void multiclass_probability(int k, double[][] r, double[] p) {
        int t, j;
        int iter = 0, max_iter = Math.max(100, k);
        double[][] Q = new double[k][k];
        double[] Qp = new double[k];
        double pQp, eps = 0.005 / k;
        for (t = 0; t < k; t++) {
            p[t] = 1.0 / k;
            Q[t][t] = 0;
            for (j = 0; j < t; j++) {
                Q[t][t] += r[j][t] * r[j][t];
                Q[t][j] = Q[j][t];
            }
            for (j = t + 1; j < k; j++) {
                Q[t][t] += r[j][t] * r[j][t];
                Q[t][j] = -r[j][t] * r[t][j];
            }
        }
        for (iter = 0; iter < max_iter; iter++) {
            pQp = 0;
            for (t = 0; t < k; t++) {
                Qp[t] = 0;
                for (j = 0; j < k; j++) Qp[t] += Q[t][j] * p[j];
                pQp += p[t] * Qp[t];
            }
            double max_error = 0;
            for (t = 0; t < k; t++) {
                double error = Math.abs(Qp[t] - pQp);
                if (error > max_error) max_error = error;
            }
            if (max_error < eps) break;
            for (t = 0; t < k; t++) {
                double diff = (-Qp[t] + pQp) / Q[t][t];
                p[t] += diff;
                pQp = (pQp + diff * (diff * Q[t][t] + 2 * Qp[t])) / (1 + diff) / (1 + diff);
                for (j = 0; j < k; j++) {
                    Qp[j] = (Qp[j] + diff * Q[t][j]) / (1 + diff);
                    p[j] /= (1 + diff);
                }
            }
        }
        if (iter >= max_iter) System.err.print(""Exceeds max_iter in multiclass_prob\n"");
    }","    static boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }",0,0
"    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }","    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }","    public static Object cut(Object obj, int size) {
        int j;
        if ((j = Array.getLength(obj)) == 1) {
            return Array.newInstance(obj.getClass().getComponentType(), 0);
        }
        int k;
        if ((k = j - size - 1) > 0) {
            System.arraycopy(obj, size + 1, obj, size, k);
        }
        j--;
        Object obj1 = Array.newInstance(obj.getClass().getComponentType(), j);
        System.arraycopy(obj, 0, obj1, 0, j);
        return obj1;
    }",0,0
"	public static void BubbleSortDouble2(double[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					double temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}","    public static void main(String[] args) {
        if (args.length != 4) {
            System.out.println(""usage: java msgmultisend <to> <from> <smtp> true|false"");
            return;
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Multipart Test"");
            msg.setSentDate(new Date());
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setText(msgText2, ""us-ascii"");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        }
    }",0,0
"    public void shuffle(Random rand) {
        for (int i = cards.length - 1; i >= 0; i--) {
            int r = rand.nextInt(i + 1);
            Card t = cards[i];
            cards[i] = cards[r];
            cards[r] = t;
        }
        nextCard = 0;
    }","    public static Object cut(Object obj, int size) {
        int j;
        if ((j = Array.getLength(obj)) == 1) {
            return Array.newInstance(obj.getClass().getComponentType(), 0);
        }
        int k;
        if ((k = j - size - 1) > 0) {
            System.arraycopy(obj, size + 1, obj, size, k);
        }
        j--;
        Object obj1 = Array.newInstance(obj.getClass().getComponentType(), j);
        System.arraycopy(obj, 0, obj1, 0, j);
        return obj1;
    }",0,0
"	public static void BubbleSortDouble2(double[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					double temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}","    public static Object[] add(Object[] array, Object value) {
        Object[] tmp = (Object[]) java.lang.reflect.Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, tmp, 0, array.length);
        tmp[array.length] = value;
        return tmp;
    }",0,0
"            public void actionPerformed(ActionEvent e) {
                String sql = ""insert into jjgenjang values ('"" + Fieldno.getText() + ""','"" + Fieldalas.getText() + ""','"" + Fieldtinggi.getText() + ""','"" + Fieldluas.getText() + ""')"";
                if (Fieldalas.getText().trim().equals("""")) {
                    JOptionPane.showMessageDialog(frame, ""alas masih kosong!"", ""Simpan data"", JOptionPane.WARNING_MESSAGE);
                } else {
                    try {
                        Connection conn = DriverManager.getConnection(""jdbc:odbc:jjgenjang"");
                        Statement statement = conn.createStatement();
                        statement.executeUpdate(sql);
                        statement.close();
                        Fieldno.setText("""");
                        Fieldalas.setText("""");
                        Fieldtinggi.setText("""");
                        Fieldluas.setText("""");
                        Fieldalas.requestFocus();
                    } catch (Exception exc) {
                        System.err.println(""Error:"" + exc);
                    }
                }
            }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    public <T> T[] toArray(T[] a) {
        if (a.length < elementCount) a = (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), elementCount);
        System.arraycopy(elementData, 0, a, 0, elementCount);
        if (a.length > elementCount) a[elementCount] = null;
        return a;
    }","	public static void BubbleSortByte2(byte[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					byte temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}",0,0
"    public static void main(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""msgsend"";
        String file = null;
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-a"")) {
                file = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: msgsend [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-a attach-file] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            String text = collect(in);
            if (file != null) {
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setText(text);
                MimeBodyPart mbp2 = new MimeBodyPart();
                mbp2.attachFile(file);
                MimeMultipart mp = new MimeMultipart();
                mp.addBodyPart(mbp1);
                mp.addBodyPart(mbp2);
                msg.setContent(mp);
            } else {
                msg.setText(text);
            }
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }",0,0
"    public Matrix transpose() {
        Matrix result = new Matrix(height, width);
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                result.elements[i][j] = elements[j][i];
            }
        }
        return result;
    }","    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }",0,0
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    public synchronized Object[] toArray(Object a[]) {
        if (a.length < elementCount) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), elementCount);
        System.arraycopy(elementData, 0, a, 0, elementCount);
        if (a.length > elementCount) a[elementCount] = null;
        return a;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    public static void copyDirectory(File sourceLocation, File targetLocation) throws IOException {
        if (sourceLocation.isDirectory()) {
            if (!targetLocation.exists()) {
                targetLocation.mkdir();
            }
            String[] children = sourceLocation.list();
            for (int i = 0; i < children.length; i++) {
                copyDirectory(new File(sourceLocation, children[i]), new File(targetLocation, children[i]));
            }
        } else {
            InputStream in = new FileInputStream(sourceLocation);
            OutputStream out = new FileOutputStream(targetLocation);
            byte[] buf = new byte[1024];
            int len;
            while ((len = in.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
            in.close();
            out.close();
        }
    }",0,0
"    public static void main(String[] args) {
        System.out.println(""Chapter 6 example 2: Adding a Gif, Jpeg and Png-file using filenames"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0603.pdf""));
            HtmlWriter writer = HtmlWriter.getInstance(document, new FileOutputStream(""Chap0603.html""));
            writer.setImagepath(""../../images/kerstmis/"");
            document.open();
            Image jpg = Image.getInstance(""raf.jpg"");
            jpg.scalePercent(50);
            document.add(jpg);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public static void main(String[] args) {
        Console console = System.console();
        if (console == null) {
            System.err.println(""No console."");
            System.exit(1);
        }
        while (true) {
            Pattern pattern = Pattern.compile(console.readLine(""%nEnter your regex: ""));
            Matcher matcher = pattern.matcher(console.readLine(""Enter input string to search: ""));
            boolean found = false;
            while (matcher.find()) {
                console.format(""I found the text \""%s\"" starting at "" + ""index %d and ending at index %d.%n"", matcher.group(), matcher.start(), matcher.end());
                found = true;
            }
            if (!found) {
                console.format(""No match found.%n"");
            }
        }
    }",0,0
"    public static Object cut(Object src, int position) {
        int size = Array.getLength(src);
        if (size == 1) {
            return Array.newInstance(src.getClass().getComponentType(), 0);
        }
        int numMoved = size - position - 1;
        if (numMoved > 0) {
            System.arraycopy(src, position + 1, src, position, numMoved);
        }
        size--;
        Object dest = Array.newInstance(src.getClass().getComponentType(), size);
        System.arraycopy(src, 0, dest, 0, size);
        return dest;
    }","    public static void main(String[] args) {
        if (args.length != 4) {
            System.out.println(""usage: java msgmultisend <to> <from> <smtp> true|false"");
            return;
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Multipart Test"");
            msg.setSentDate(new Date());
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setText(msgText2, ""us-ascii"");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        }
    }",0,0
"    public synchronized Object[] toArray(Object a[]) {
        if (a.length < elementCount) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), elementCount);
        System.arraycopy(elementData, 0, a, 0, elementCount);
        if (a.length > elementCount) a[elementCount] = null;
        return a;
    }","                public void actionPerformed(ActionEvent e) {
                    if (Desktop.isDesktopSupported()) {
                        try {
                            Desktop.getDesktop().browse(monitor.getBuildURI(e.getActionCommand()));
                        } catch (IOException err) {
                        }
                    }
                }",0,0
"	public static void BubbleSortInt2(int[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					int temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}","    @SuppressWarnings(""unchecked"")
    public static <T> T[] append(T[] xs, T x) {
        int n = xs.length;
        T[] t = (T[]) Array.newInstance(xs.getClass().getComponentType(), n + 1);
        System.arraycopy(xs, 0, t, 0, n);
        t[n] = x;
        return t;
    }",0,0
"    public static long crc32(String s) {
        java.util.zip.CRC32 crc32 = new java.util.zip.CRC32();
        crc32.update(s.getBytes());
        return crc32.getValue();
    }","    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public QMatrix transposed() {
        QMatrix m = new QMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static double[][] transpose(double[][] matrix) {
        double[][] result = new double[matrix.length][matrix[0].length];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                result[i][j] = matrix[j][i];
            }
        }
        return result;
    }",0,0
"    private void browse(String url) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(url));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, ""Folgender Fehler ist beim �ffnen des Standart-"" + ""Browsers aufgetreten:\n"" + e.getMessage(), ""Fehler"", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, ""Ihre Plattform wird nicht unterst�tzt."", ""Webseite besuchen"", JOptionPane.ERROR_MESSAGE);
        }
    }","    private static boolean deleteFile(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                deleteFile(child);
            }
        }
        return resource.delete();
    }",0,0
"    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public int saveBuildingInstructionstoPDF(boolean mustWrite, String testNum) {
        int totalbricks = 0;
        Paragraph p;
        Chunk chunk;
        int width;
        int i;
        File fileToDelete;
        if (mustWrite) {
            totalNumLegoBricksUsed = new int[LBricks.numLegoBricks];
            try {
                Document document = new Document(PageSize.A0, 50, 50, 50, 50);
                PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(program.directory + ""BuildingInstructions"" + program.startIndex + ""_"" + program.stopIndex + testNum + "".pdf""));
                writer.setPageEvent(new pdfListener());
                document.open();
                PdfContentByte cb = writer.getDirectContent();
                int canvasWidth = (int) PageSize.A0.width() - 200;
                int canvasHeight = (int) PageSize.A0.height() - 200;
                if (program.gridWidth != program.gridHeight) {
                    if (program.gridWidth > program.gridHeight) {
                        width = (int) Math.floor((double) (canvasWidth - 100) / (double) program.gridWidth);
                    } else {
                        width = (int) Math.floor((double) (canvasWidth - 100) / (double) program.gridHeight);
                    }
                } else {
                    width = (int) Math.floor((double) (canvasWidth - 100) / (double) program.gridWidth);
                }
                for (i = program.startIndex; i <= program.stopIndex; i++) {
                    p = new Paragraph();
                    chunk = new Chunk(""Layout Layer "" + i + "" :"", FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, Color.black));
                    chunk.setUnderline(1.5f, -2.5f);
                    p.add(chunk);
                    document.add(p);
                    Graphics2D g = cb.createGraphics(canvasWidth, canvasHeight);
                    g.setColor(Color.LIGHT_GRAY);
                    drawGrid(g, width);
                    if (!program.fileExtension.equals("".sl2"")) {
                        if (i > program.startIndex) {
                            g.setColor(Color.gray);
                            loadLayerBricks(i - 1, false);
                            drawBlocks(g, 100, 150, currentLayerBricks, width);
                            g.setColor(Color.DARK_GRAY);
                            drawBlocksOutline(g, 100, 150, currentLayerBricks, width);
                        }
                    }
                    if (!program.fileExtension.equals("".sl2"")) {
                        g.setColor(Color.LIGHT_GRAY);
                    }
                    loadLayerBricks(i, true);
                    drawBlocks(g, 100, 150, currentLayerBricks, width);
                    g.setColor(Color.BLACK);
                    drawBlocksOutline(g, 100, 150, currentLayerBricks, width);
                    g.setColor(Color.BLACK);
                    g.dispose();
                    cb.saveState();
                    document.newPage();
                }
                p = new Paragraph();
                chunk = new Chunk(""LEGO bricks required to build sculpture:"", FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, Color.black));
                chunk.setUnderline(1.5f, -2.5f);
                p.add(chunk);
                document.add(p);
                float[] widths = { 0.60f, 0.40f };
                PdfPTable table = new PdfPTable(widths);
                table.setTotalWidth(250);
                table.setLockedWidth(true);
                table.setSpacingBefore(25f);
                table.getDefaultCell().setBackgroundColor(new Color(0.59f, 0.6f, 0.97f));
                table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                table.setHorizontalAlignment(Element.ALIGN_LEFT);
                PdfPCell cell = new PdfPCell(new Paragraph(""Type"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(new Color(0.34f, 0.41f, 0.98f));
                table.addCell(cell);
                cell = new PdfPCell(new Paragraph(""Amount required"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(new Color(0.34f, 0.41f, 0.98f));
                table.addCell(cell);
                totalbricks += totalNumLegoBricksUsed[0];
                table.addCell("""" + LBricks.blockNames[0]);
                table.addCell("""" + totalNumLegoBricksUsed[0]);
                for (i = 1; i < 10; i = i + 2) {
                    totalbricks += totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1];
                    table.addCell("""" + LBricks.blockNames[i]);
                    table.addCell("""" + (totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1]));
                }
                for (i = 11; i < 16; i++) {
                    totalbricks += totalNumLegoBricksUsed[i];
                    table.addCell("""" + LBricks.blockNames[i]);
                    table.addCell("""" + totalNumLegoBricksUsed[i]);
                }
                for (i = 16; i < LBricks.numLegoBricks - 1; i = i + 2) {
                    totalbricks += totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1];
                    table.addCell("""" + LBricks.blockNames[i]);
                    table.addCell("""" + (totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1]));
                }
                cell = new PdfPCell(new Paragraph(""Total"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(Color.YELLOW);
                table.addCell(cell);
                cell = new PdfPCell(new Paragraph("""" + totalbricks, FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(Color.YELLOW);
                table.addCell(cell);
                document.add(table);
                document.close();
            } catch (Exception e) {
                System.out.println(""An error occured while trying to save the list of LEGO bricks used."");
                System.out.println(e.getMessage());
                System.exit(0);
            }
        } else {
            for (i = 0; i < LBricks.numLegoBricks; i++) {
                totalbricks += totalNumLegoBricksUsed[i];
            }
        }
        return totalbricks;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static synchronized void shuffle(int[] anArray) {
        int n = anArray.length;
        for (int i = n - 1; i >= 1; i--) {
            int j = randomSource.nextInt(i + 1);
            int temp = anArray[j];
            anArray[j] = anArray[i];
            anArray[i] = temp;
        }
    }",0,0
"    private void loadTreeItemActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == loadTreeItem) {
            int returnVal = fc.showOpenDialog(Demarcations.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                treeFile = fc.getSelectedFile();
                if (!TreeFinder.verifyTreeFile(treeFile)) {
                    log.append(""That is not a valid tree file, please choose a valid newick tree file.\n"");
                    return;
                }
            } else {
                log.append(""Dialog cancelled by user. \n"");
                return;
            }
            String message = ""You must now choose the fasta file corresponding to the tree you just loaded, continue?"";
            int option = JOptionPane.showConfirmDialog(null, message);
            if (option != JOptionPane.YES_OPTION) {
                log.append(""Dialog cancelled by user."");
                return;
            }
            returnVal = fc.showOpenDialog(Demarcations.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                inputFile = fc.getSelectedFile();
                if (!BinningFasta.verifyInputFile(inputFile)) {
                    log.append(""That is not a valid fasta file, please choose a properly formatted fasta file.\n"");
                    return;
                }
                Thread thread = new Thread() {

                    public void run() {
                        runTree();
                    }
                };
                thread.start();
            } else {
                log.append(""Dialog Cancelled by hser.\n"");
            }
        }
    }","    public long fib(int n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }",0,0
"    public static long getCheckSum(String chaine) {
        CRC32 crc32 = new CRC32();
        crc32.update(chaine.getBytes());
        return crc32.getValue();
    }","    public static final Object[][] transpose(Object[][] a) {
        int am = a.length;
        int an = a[0].length;
        Object[][] result = new Object[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                result[j][i] = a[i][j];
            }
        }
        return result;
    }",0,0
"    public static int binarySearch(byte[] a, byte key) {
        int low = 0;
        int high = a.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            byte midVal = a[mid];
            if (midVal < key) low = mid + 1; else if (midVal > key) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    private long fib(long n) {
        if (n == 0) return 0L;
        if (n == 1) return 1L;
        return fib(n - 1) + fib(n - 2);
    }","    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    private void cleanDir(File dir) {
        File[] files = dir.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isDirectory()) {
                cleanDir(files[i]);
            } else {
                files[i].delete();
            }
        }
        dir.delete();
    }","    public static String[][] performTranspose(String[][] fileData, String[][] fileDataTransposed) {
        CompareUtils.ensureTrue(fileDataTransposed.length == fileData[0].length, ""ERROR: Dimensions of output file not correctly set!"");
        CompareUtils.ensureTrue(fileDataTransposed[0].length == fileData.length, ""ERROR: Dimensions of output file not correctly set!"");
        for (int row = 0; row < fileData.length; row++) {
            for (int col = 0; col < fileData[row].length; col++) {
                fileDataTransposed[col][row] = fileData[row][col];
            }
        }
        return fileDataTransposed;
    }",0,0
"    public void getBrowser() {
        if (Desktop.isDesktopSupported()) {
            Desktop desk = Desktop.getDesktop();
            if (desk.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desk.browse(new URI(""http://code.google.com/p/gpsnutzung/""));
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        }
    }","    public static long fib(int n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }",0,0
"	public static void BubbleSortDouble1(double[] num) {
		boolean flag = true; // set flag to true to begin first pass
		double temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}","    public static Object[] addToArray(Object[] array, Object member) {
        Object[] newArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = member;
        return newArray;
    }",0,0
"    public static double[][] transpose(final double[][] m) {
        final double[][] mt = new double[m[0].length][m.length];
        for (int i = 0; i < mt.length; i++) {
            for (int j = 0; j < mt[i].length; j++) {
                mt[i][j] = m[j][i];
            }
        }
        return mt;
    }","    private void openDateFormatHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(""http://java.sun.com/javase/6/docs/api/java/text/SimpleDateFormat.html""));
            } catch (Exception err) {
            }
        }
    }",0,0
"    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException exc) {
                feedback.registerBug(""IOException occurred opening a link in the browser."", exc);
            }
        } else {
            feedback.registerBug(""Desktop is not supported, cannot open browser to show link!"");
        }
    }","    static Object arrayExpand(Object a, int amount) {
        Class cl = a.getClass();
        if (!cl.isArray()) return null;
        int length = Array.getLength(a);
        int newLength = length + amount;
        Class componentType = a.getClass().getComponentType();
        Object newArray = Array.newInstance(componentType, newLength);
        System.arraycopy(a, 0, newArray, 0, length);
        return newArray;
    }",0,0
"    public static void main(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""msgsend"";
        String file = null;
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-a"")) {
                file = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: msgsend [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-a attach-file] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            String text = collect(in);
            if (file != null) {
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setText(text);
                MimeBodyPart mbp2 = new MimeBodyPart();
                mbp2.attachFile(file);
                MimeMultipart mp = new MimeMultipart();
                mp.addBodyPart(mbp1);
                mp.addBodyPart(mbp2);
                msg.setContent(mp);
            } else {
                msg.setText(text);
            }
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }","    public void playSound(String name) {
        try {
            AudioInputStream ais = AudioSystem.getAudioInputStream(getResource(name));
            AudioFormat af = ais.getFormat();
            AudioFormat decodedFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, af.getSampleRate(), 16, af.getChannels(), af.getChannels() * 2, af.getSampleRate(), false);
            AudioInputStream dais = AudioSystem.getAudioInputStream(decodedFormat, ais);
            Clip c = AudioSystem.getClip();
            c.open(dais);
            c.start();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (UnsupportedAudioFileException e) {
            e.printStackTrace();
        } catch (LineUnavailableException e) {
            e.printStackTrace();
        }
    }",0,0
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public void openFileMenuItemMouseReleased(MouseEvent evt) {
        if (!MENU_FILES_OPEN.equals(this.asLastPressed)) return;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new javax.swing.filechooser.FileFilter() {

            public boolean accept(File file) {
                String filename = file.getName();
                if (file.isDirectory()) return true;
                return filename.endsWith("".col"");
            }

            public String getDescription() {
                return ""(*.col) ColorScheme files"";
            }
        });
        int result = fileChooser.showOpenDialog(this);
        switch(result) {
            case JFileChooser.CANCEL_OPTION:
                System.out.println(""openFileMenuItemMouseReleased() Cancel"");
                break;
            case JFileChooser.ERROR_OPTION:
                System.out.println(""openFileMenuItemMouseReleased() Error"");
                break;
            case JFileChooser.APPROVE_OPTION:
                String selFile = fileChooser.getSelectedFile().getAbsolutePath();
                CousheApp.lastAccessedFilename = selFile;
                this.aoColorScheme.loadColorScheme(selFile);
                this.refreshAll();
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    @SuppressWarnings(""unchecked"")
    public static <T> T[] append(T[] xs, T x) {
        int n = xs.length;
        T[] t = (T[]) Array.newInstance(xs.getClass().getComponentType(), n + 1);
        System.arraycopy(xs, 0, t, 0, n);
        t[n] = x;
        return t;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    private void openSaveFileActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == openSaveFile) {
            int returnVal = fc.showOpenDialog(ParameterSolutions.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File savedFile = fc.getSelectedFile();
                log.append(""Opening: "" + savedFile.getName() + ""\n"");
                String name = savedFile.getName();
                if (!savedFile.canRead() || !((name.substring(name.length() - 4, name.length()).equals("".cpm""))) || !recoverSavedData(savedFile)) {
                    log.append(""That is not a valid saved file, please choose"" + "" a file previously saved in this program.\n"");
                }
            } else {
                log.append(""Dialog Cancelled by User.\n"");
            }
        }
    }","    public Matrix transpose() {
        Matrix matrix = new Matrix();
        matrix.m = new double[m[0].length][m.length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++) {
                matrix.m[j][i] = m[i][j];
            }
        }
        return matrix;
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }","    public static float[][] TransposeMatrix(float[][] M) {
        int lines = M.length;
        int columns = M[0].length;
        float[][] Mi = new float[columns][lines];
        for (int i = 0; i < lines; i++) {
            for (int j = 0; j < columns; j++) {
                Mi[j][i] = M[i][j];
            }
        }
        return Mi;
    }",0,0
"    @SuppressWarnings(""unchecked"")
    public <T> T[] toArray(T[] a) {
        if (a.length < size) {
            a = (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        }
        System.arraycopy(array, 0, a, 0, size);
        if (a.length > size) {
            a[size] = null;
        }
        return a;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 4) {
            System.out.println(""usage: java msgmultisend <to> <from> <smtp> true|false"");
            return;
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Multipart Test"");
            msg.setSentDate(new Date());
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setText(msgText2, ""us-ascii"");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        }
    }","    public static int[] permute(int N, Random rand) {
        int[] a = new int[N];
        for (int i = 0; i < N; i++) a[i] = i;
        for (int i = 0; i < N; i++) {
            int r = rand.nextInt(i + 1);
            int swap = a[r];
            a[r] = a[i];
            a[i] = swap;
        }
        return a;
    }",0,0
"    public int binarySearch(final float key) {
        int low = 0;
        int middle;
        int high = super.size() - 1;
        float middleValue;
        while (low <= high) {
            middle = (low + high) / 2;
            middleValue = this.floatArray[middle];
            if (middleValue < key) {
                low = middle + 1;
            } else if (middleValue > key) {
                high = middle - 1;
            } else {
                return middle;
            }
        }
        return -(low + 1);
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public void testSentFront() {
        String botRecord = ""hello"";
        String msg = ""hellohow are you"";
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile("".*?hel"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(msg);
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }","    public static final double[][] transpose(double[][] a) {
        int am = a.length;
        int an = a[0].length;
        double[][] result = new double[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                result[j][i] = a[i][j];
            }
        }
        return result;
    }",0,0
"    public int saveBuildingInstructionstoPDF(boolean mustWrite) {
        int totalbricks = 0;
        Paragraph p;
        Chunk chunk;
        int width;
        int i;
        if (mustWrite) {
            try {
                Document document = new Document(PageSize.A0, 50, 50, 50, 50);
                PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(directoryPath + ""\\"" + ""BuildingInstructions"" + firstLayer + ""_"" + lastLayer + "".pdf""));
                writer.setPageEvent(new pdfListener());
                document.open();
                PdfContentByte cb = writer.getDirectContent();
                int canvasWidth = (int) PageSize.A0.width() - 200;
                int canvasHeight = (int) PageSize.A0.height() - 200;
                if (xSize != ySize) {
                    if (xSize > ySize) {
                        width = (int) Math.floor((double) (canvasWidth - 40) / (double) xSize);
                    } else {
                        width = (int) Math.floor((double) (canvasWidth - 40) / (double) ySize);
                    }
                } else {
                    width = (int) Math.floor((double) (canvasWidth - 40) / (double) xSize);
                }
                for (i = firstLayer; i <= lastLayer; i++) {
                    p = new Paragraph();
                    chunk = new Chunk(""Layout Layer "" + i + "" :"", FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, Color.black));
                    chunk.setUnderline(1.5f, -2.5f);
                    p.add(chunk);
                    document.add(p);
                    Graphics2D g = cb.createGraphics(canvasWidth, canvasHeight);
                    g.setColor(Color.LIGHT_GRAY);
                    drawGrid(g, width);
                    if (!layoutFileExtension.equals(""ll2"")) {
                        if (i > firstLayer) {
                            g.setColor(Color.gray);
                            loadLayerBricks(i - 1, ""CURRENT"");
                            drawBlocks(g, 40, 0, currentLayer, width, false);
                            g.setColor(Color.DARK_GRAY);
                            drawBlocksOutline(g, 40, 0, currentLayer, width);
                        }
                    }
                    if (!layoutFileExtension.equals("".sl2"")) {
                        g.setColor(Color.LIGHT_GRAY);
                    }
                    loadLayerBricks(i, ""CURRENT"");
                    drawBlocks(g, 40, 0, currentLayer, width, true);
                    g.setColor(Color.BLACK);
                    drawBlocksOutline(g, 40, 0, currentLayer, width);
                    g.setColor(Color.BLACK);
                    g.dispose();
                    cb.saveState();
                    document.newPage();
                }
                p = new Paragraph();
                chunk = new Chunk(""LEGO bricks required to build sculpture:"", FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, Color.black));
                chunk.setUnderline(1.5f, -2.5f);
                p.add(chunk);
                document.add(p);
                float[] widths = { 0.60f, 0.40f };
                PdfPTable table = new PdfPTable(widths);
                table.setTotalWidth(250);
                table.setLockedWidth(true);
                table.setSpacingBefore(25f);
                table.getDefaultCell().setBackgroundColor(new Color(0.59f, 0.6f, 0.97f));
                table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                table.setHorizontalAlignment(Element.ALIGN_LEFT);
                PdfPCell cell = new PdfPCell(new Paragraph(""Type"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(new Color(0.34f, 0.41f, 0.98f));
                table.addCell(cell);
                cell = new PdfPCell(new Paragraph(""Amount required"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(new Color(0.34f, 0.41f, 0.98f));
                table.addCell(cell);
                totalbricks += totalNumLegoBricksUsed[0];
                table.addCell("""" + blockNames[0]);
                table.addCell("""" + totalNumLegoBricksUsed[0]);
                for (i = 1; i < 10; i = i + 2) {
                    totalbricks += totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1];
                    table.addCell("""" + blockNames[i]);
                    table.addCell("""" + (totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1]));
                }
                for (i = 11; i < 16; i++) {
                    totalbricks += totalNumLegoBricksUsed[i];
                    table.addCell("""" + blockNames[i]);
                    table.addCell("""" + totalNumLegoBricksUsed[i]);
                }
                for (i = 16; i < numLegoBricks - 1; i = i + 2) {
                    totalbricks += totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1];
                    table.addCell("""" + blockNames[i]);
                    table.addCell("""" + (totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1]));
                }
                cell = new PdfPCell(new Paragraph(""Total"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(Color.YELLOW);
                table.addCell(cell);
                cell = new PdfPCell(new Paragraph("""" + totalbricks, FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(Color.YELLOW);
                table.addCell(cell);
                document.add(table);
                document.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, ""An error occured while trying to save the list of LEGO bricks used."", ""Error occured"", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
        } else {
            for (i = 0; i < numLegoBricks; i++) {
                totalbricks += totalNumLegoBricksUsed[i];
            }
        }
        JOptionPane.showMessageDialog(null, ""Brick sculpture building instructions saved to \n"" + directoryPath + ""\\"" + ""BuildingInstructions"" + firstLayer + ""_"" + lastLayer + "".pdf"", ""LEGO instructions generated"", JOptionPane.INFORMATION_MESSAGE);
        return totalbricks;
    }","    private void sort() {
        boolean unsortiert = true;
        Datei tmp = null;
        while (unsortiert) {
            unsortiert = false;
            for (int i = 0; i < this.size - 1; i++) {
                if (dateien[i] != null && dateien[i + 1] != null) {
                    if (dateien[i].compareTo(dateien[i + 1]) < 0) {
                        tmp = dateien[i];
                        dateien[i] = dateien[i + 1];
                        dateien[i + 1] = tmp;
                        unsortiert = true;
                    }
                }
            }
        }
    }",0,0
"    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }","    public int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public void put(String path, File fileToPut) throws IOException {
        FTPClient ftp = new FTPClient();
        try {
            int reply;
            ftp.connect(this.endpointURL, this.endpointPort);
            log.debug(""Ftp put reply: "" + ftp.getReplyString());
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp put server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            ftp.enterLocalPassiveMode();
            InputStream input = new FileInputStream(fileToPut);
            if (ftp.storeFile(path, input) != true) {
                ftp.logout();
                input.close();
                throw new IOException(""FTP put exception"");
            }
            input.close();
            ftp.logout();
        } catch (Exception e) {
            log.error(""Ftp client exception: "" + e.getMessage(), e);
            throw new IOException(e.getMessage());
        }
    }","    static long seqFib(int n) {
        if (n <= 1) return n; else return seqFib(n - 1) + seqFib(n - 2);
    }",0,0
"    public Matrix transpose() {
        Matrix result = new Matrix(height, width);
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                result.elements[i][j] = elements[j][i];
            }
        }
        return result;
    }","    static boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }",0,0
"    public void bubbleSort(int[] arr) {
        boolean swapped = true;
        int j = 0;
        int tmp;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < arr.length - j; i++) {
                if (arr[i] > arr[i + 1]) {
                    tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    swapped = true;
                }
            }
        }
    }","    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }",0,0
"    public static int fibonacci(int broj) {
        if (broj <= 1) return broj; else return fibonacci(broj - 1) + fibonacci(broj - 2);
    }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }","    public static int[][] mergeColumns(int[]... x) {
        int[][] array = new int[x[0].length][x.length];
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                array[i][j] = x[j][i];
            }
        }
        return array;
    }",0,0
"    public final void randomize(int[] index, Random random) {
        for (int j = index.length - 1; j > 0; j--) {
            int k = random.nextInt(j + 1);
            int temp = index[j];
            index[j] = index[k];
            index[k] = temp;
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public static File capture(Rectangle rect) throws Exception {
        Robot robot = new Robot();
        BufferedImage img = robot.createScreenCapture(rect);
        File file = File.createTempFile(""jfx_screen_capture_retouched"", "".jpg"");
        ImageIO.write(img, ""jpg"", file);
        return file;
    }","    public void sort(int[] mas) {
        int temp;
        boolean t = true;
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    temp = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = temp;
                    t = true;
                }
            }
        }
    }",0,0
"    public static int fibonacci(int broj) {
        if (broj <= 1) return broj; else return fibonacci(broj - 1) + fibonacci(broj - 2);
    }","    public IntSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }",0,0
"        private long fib(long n) {
            if (n == 0) return 0L;
            if (n == 1) return 1L;
            return fib(n - 1) + fib(n - 2);
        }","    public static void main(String[] args) {
        System.out.println(""Chapter 6 example 4: Alignment of images"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0604.pdf""));
            document.open();
            Image gif = Image.getInstance(""vonnegut.gif"");
            gif.setAlignment(Image.RIGHT);
            Image jpeg = Image.getInstance(""myKids.jpg"");
            jpeg.setAlignment(Image.MIDDLE);
            Image png = Image.getInstance(""hitchcock.png"");
            png.setAlignment(Image.LEFT);
            document.add(gif);
            document.add(jpeg);
            document.add(png);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0,0
"    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    public void elimina(Cliente cli) throws errorSQL, errorConexionBD {
        System.out.println(""GestorCliente.elimina()"");
        int id = cli.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM cliente WHERE cod_cliente ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            sql = ""DELETE FROM persona WHERE id ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt.executeUpdate(sql);
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        }
    }",0,0
"    public PNMatrix transpose() {
        PNMatrix X = new PNMatrix(n, m);
        int[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] append(T[] array0, T[] array1) {
        T[] array2 = (T[]) Array.newInstance(array0.getClass().getComponentType(), array0.length + array1.length);
        System.arraycopy(array0, 0, array2, 0, array0.length);
        System.arraycopy(array1, 0, array2, array0.length, array1.length);
        return array2;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static final double[][] transpose(final double m1[][]) {
        double[][] m3 = new double[m1[0].length][m1.length];
        for (int ii = 0; ii < m1.length; ii++) for (int jj = 0; jj < m1[ii].length; jj++) m3[jj][ii] = m1[ii][jj];
        return m3;
    }",0,0
"    public static void main(String[] args) {
        System.out.println(""Chapter 1 example 6: Meta Information"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0106.pdf""));
            HtmlWriter.getInstance(document, System.out);
            document.addTitle(""Hello World example"");
            document.addSubject(""This example explains step 3 in Chapter 1"");
            document.addKeywords(""Metadata, iText, step 3, tutorial"");
            document.addAuthor(""Bruno Lowagie"");
            document.addHeader(""Expires"", ""0"");
            document.open();
            document.add(new Paragraph(""Hello World""));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"	public static void deleteRecursively1(File file) {
		if (file.isDirectory()) {
			for (File f : file.listFiles())
				deleteRecursively1(f);
		}
		file.delete();
	}","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://prologdev1:5432/wdb"";
        final String dbuser = ""guest2"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT value, dataProviderName, placeName, placeGeometry,"" + ""        referencetime, "" + ""        validFrom, validTo, "" + ""        valueParameterName, valueParameterUnit, "" + ""        levelParameterName, levelUnitName, levelFrom, levelTo, "" + ""        dataVersion, confidenceCode, storetime, valueid, valuetype "" + "" FROM wci.read( array['hirlam 10'], 'POINT( 10.0 59.0 )', "" + ""                ('2000-01-03 01:00:00', '2000-01-03 01:00:00', 'exact'), "" + ""                NULL, "" + ""                array['instant pressure of air', "" + ""                      'instant temperature of air', "" + ""                      'instant velocity of air (u-component)', "" + ""                      'instant velocity of air (v-component)'], "" + ""                ( 2, 2, 'distance above ground', 'exact' ), "" + ""                array[-1], "" + ""                NULL::wci.returnFloat )"";
        final String colNames[] = { ""value"", ""dataProviderName"", ""placeName"", ""referencetime"", ""validFrom"", ""validTo"", ""valueParameterName"", ""valueParameterUnit"", ""levelParameterName"", ""levelUnitName"", ""levelFrom"", ""levelTo"", ""dataVersion"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println(""EXCEPTION: rs.close: "" + ex);
                }
            }
        }
    }",0,0
"    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public static File capture(Rectangle rect) throws Exception {
        Robot robot = new Robot();
        BufferedImage img = robot.createScreenCapture(rect);
        File file = File.createTempFile(""jfx_screen_capture_retouched"", "".jpg"");
        ImageIO.write(img, ""jpg"", file);
        return file;
    }","    public static void main(String[] args) {
        if (args.length != 4) {
            System.out.println(""usage: java msgmultisend <to> <from> <smtp> true|false"");
            return;
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Multipart Test"");
            msg.setSentDate(new Date());
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setText(msgText2, ""us-ascii"");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        }
    }",0,0
"    File createJar(File jar, String... entries) throws IOException {
        OutputStream out = new FileOutputStream(jar);
        try {
            JarOutputStream jos = new JarOutputStream(out);
            for (String e : entries) {
                jos.putNextEntry(new JarEntry(getPathForZipEntry(e)));
                jos.write(getBodyForEntry(e).getBytes());
            }
            jos.close();
        } finally {
            out.close();
        }
        return jar;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    public final void randomize(int[] index, Random random) {
        for (int j = index.length - 1; j > 0; j--) {
            int k = random.nextInt(j + 1);
            int temp = index[j];
            index[j] = index[k];
            index[k] = temp;
        }
    }","    public static boolean[][] transpose(boolean[][] booleanBox) {
        YeriDebug.ASSERT(CollectionsToolkit.isRectangular(booleanBox));
        boolean[][] returnBox = new boolean[booleanBox[0].length][booleanBox.length];
        for (int i = 0; i < booleanBox.length; i++) {
            for (int j = 0; j < booleanBox[i].length; j++) {
                returnBox[j][i] = booleanBox[i][j];
            }
        }
        return returnBox;
    }",0,0
"    public static void shuffle(int[] a) {
        Random random = new Random();
        for (int i = a.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            int swap = a[i];
            a[i] = a[j];
            a[j] = swap;
        }
    }","    public int saveBuildingInstructionstoPDF(boolean mustWrite) {
        int totalbricks = 0;
        Paragraph p;
        Chunk chunk;
        int width;
        int i;
        File fileToDelete;
        if (mustWrite) {
            try {
                Document document = new Document(PageSize.A0, 50, 50, 50, 50);
                PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(layersDirectory + ""BuildingInstructions"" + firstLayer + ""_"" + lastLayer + "".pdf""));
                writer.setPageEvent(new pdfListener());
                document.open();
                PdfContentByte cb = writer.getDirectContent();
                int canvasWidth = (int) PageSize.A0.width() - 200;
                int canvasHeight = (int) PageSize.A0.height() - 200;
                if (xSize != ySize) {
                    if (xSize > ySize) {
                        width = (int) Math.floor((double) (canvasWidth - 100) / (double) xSize);
                    } else {
                        width = (int) Math.floor((double) (canvasWidth - 100) / (double) ySize);
                    }
                } else {
                    width = (int) Math.floor((double) (canvasWidth - 100) / (double) xSize);
                }
                for (i = firstLayer; i <= lastLayer; i++) {
                    p = new Paragraph();
                    chunk = new Chunk(""Layout Layer "" + i + "" :"", FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, Color.black));
                    chunk.setUnderline(1.5f, -2.5f);
                    p.add(chunk);
                    document.add(p);
                    Graphics2D g = cb.createGraphics(PageSize.A0.width(), PageSize.A0.height());
                    g.setColor(Color.LIGHT_GRAY);
                    drawGrid(g, width);
                    if (i > firstLayer) {
                        g.setColor(Color.gray);
                        loadLayerBricks(i - 1);
                        drawBlocks(g, 100, 150, currentLayerBricks, width);
                        g.setColor(Color.DARK_GRAY);
                        drawBlocksOutline(g, 100, 150, currentLayerBricks, width);
                    }
                    g.setColor(Color.LIGHT_GRAY);
                    loadLayerBricks(i);
                    drawBlocks(g, 100, 150, currentLayerBricks, width);
                    g.setColor(Color.BLACK);
                    drawBlocksOutline(g, 100, 150, currentLayerBricks, width);
                    g.setColor(Color.BLACK);
                    g.dispose();
                    cb.saveState();
                    document.newPage();
                }
                p = new Paragraph();
                chunk = new Chunk(""Bricks required to build sculpture:"", FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, Color.black));
                chunk.setUnderline(1.5f, -2.5f);
                p.add(chunk);
                document.add(p);
                float[] widths = { 0.60f, 0.40f };
                PdfPTable table = new PdfPTable(widths);
                table.setTotalWidth(250);
                table.setLockedWidth(true);
                table.setSpacingBefore(25f);
                table.getDefaultCell().setBackgroundColor(new Color(0.59f, 0.6f, 0.97f));
                table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                table.setHorizontalAlignment(Element.ALIGN_LEFT);
                PdfPCell cell = new PdfPCell(new Paragraph(""Type"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(new Color(0.34f, 0.41f, 0.98f));
                table.addCell(cell);
                cell = new PdfPCell(new Paragraph(""Amount required"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(new Color(0.34f, 0.41f, 0.98f));
                table.addCell(cell);
                totalbricks += totalNumLegoBricksUsed[0];
                table.addCell("""" + LBricks.blockNames[0]);
                table.addCell("""" + totalNumLegoBricksUsed[0]);
                for (i = 1; i < 10; i = i + 2) {
                    totalbricks += totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1];
                    table.addCell("""" + LBricks.blockNames[i]);
                    table.addCell("""" + (totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1]));
                }
                for (i = 11; i < 16; i++) {
                    totalbricks += totalNumLegoBricksUsed[i];
                    table.addCell("""" + LBricks.blockNames[i]);
                    table.addCell("""" + totalNumLegoBricksUsed[i]);
                }
                for (i = 16; i < LBricks.numLegoBricks - 1; i = i + 2) {
                    totalbricks += totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1];
                    table.addCell("""" + LBricks.blockNames[i]);
                    table.addCell("""" + (totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1]));
                }
                cell = new PdfPCell(new Paragraph(""Total"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(Color.YELLOW);
                table.addCell(cell);
                cell = new PdfPCell(new Paragraph("""" + totalbricks, FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(Color.YELLOW);
                table.addCell(cell);
                document.add(table);
                document.close();
            } catch (Exception e) {
                System.out.println(""An error occured while trying to save the list of LEGO bricks used."");
                System.out.println(e.getMessage());
                System.exit(0);
            }
        } else {
            for (i = 0; i < LBricks.numLegoBricks; i++) {
                totalbricks += totalNumLegoBricksUsed[i];
            }
        }
        return totalbricks;
    }",0,0
"    public static void shuffle(int[] a) {
        Random random = new Random();
        for (int i = a.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            int swap = a[i];
            a[i] = a[j];
            a[j] = swap;
        }
    }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    private void doAboutWeb() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(KlangConstants.KLANGEDITOR_URL_PROJECT));
                } catch (Exception err) {
                    err.printStackTrace();
                }
            }
        }
    }",0,0
"    public void sort(int[] mas) {
        int temp;
        boolean t = true;
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    temp = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = temp;
                    t = true;
                }
            }
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"    public int create(BusinessObject o) throws DAOException {
        int insert = 0;
        int id = 0;
        Contact contact = (Contact) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_CONTACT""));
            pst.setString(1, contact.getName());
            pst.setString(2, contact.getFirstname());
            pst.setString(3, contact.getPhone());
            pst.setString(4, contact.getEmail());
            if (contact.getAccount() == 0) {
                pst.setNull(5, java.sql.Types.INTEGER);
            } else {
                pst.setInt(5, contact.getAccount());
            }
            insert = pst.executeUpdate();
            if (insert <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (insert > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery(""select max(id) from contact"");
            rs.next();
            id = rs.getInt(1);
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return id;
    }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"    private void loadTreeItemActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == loadTreeItem) {
            int returnVal = fc.showOpenDialog(Demarcations.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                treeFile = fc.getSelectedFile();
                if (!TreeFinder.verifyTreeFile(treeFile)) {
                    log.append(""That is not a valid tree file, please choose a valid newick tree file.\n"");
                    return;
                }
            } else {
                log.append(""Dialog cancelled by user. \n"");
                return;
            }
            String message = ""You must now choose the fasta file corresponding to the tree you just loaded, continue?"";
            int option = JOptionPane.showConfirmDialog(null, message);
            if (option != JOptionPane.YES_OPTION) {
                log.append(""Dialog cancelled by user."");
                return;
            }
            returnVal = fc.showOpenDialog(Demarcations.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                inputFile = fc.getSelectedFile();
                if (!BinningFasta.verifyInputFile(inputFile)) {
                    log.append(""That is not a valid fasta file, please choose a properly formatted fasta file.\n"");
                    return;
                }
                Thread thread = new Thread() {

                    public void run() {
                        runTree();
                    }
                };
                thread.start();
            } else {
                log.append(""Dialog Cancelled by hser.\n"");
            }
        }
    }","    public PrimeFactors(int entier) {
        int n = entier;
        for (int i = 2; i <= n / i; i++) {
            while (n % i == 0) {
                add(i);
                n /= i;
            }
        }
        if (n > 1) {
            add(n);
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static int[] permute(int N, Random rand) {
        int[] a = new int[N];
        for (int i = 0; i < N; i++) a[i] = i;
        for (int i = 0; i < N; i++) {
            int r = rand.nextInt(i + 1);
            int swap = a[r];
            a[r] = a[i];
            a[i] = swap;
        }
        return a;
    }",0,0
"    private int[] randomiseCars(int n) {
        int[] cars = new int[n];
        for (int i = 0; i < n; i++) cars[i] = i;
        Random r = new Random();
        for (int i = 0; i < n; i++) {
            int j = i + r.nextInt(n - i);
            int tmp = cars[i];
            cars[i] = cars[j];
            cars[j] = tmp;
        }
        return cars;
    }","    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }",0,0
"    private static boolean deleteFile(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                deleteFile(child);
            }
        }
        return resource.delete();
    }","    public static LImage[][] reversalXandY(final LImage[][] array) {
        int col = array[0].length;
        int row = array.length;
        LImage[][] result = new LImage[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }",0,0
"    private void bubbleSort(int values[]) {
        int len = values.length - 1;
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < len - i; j++) {
                if (values[j] > values[j + 1]) {
                    int tmp = values[j];
                    values[j] = values[j + 1];
                    values[j + 1] = tmp;
                }
            }
        }
    }","    private static Object resizeArray(Object oldArray, int newSize) {
        int oldSize = java.lang.reflect.Array.getLength(oldArray);
        Class<?> elementType = oldArray.getClass().getComponentType();
        Object newArray = java.lang.reflect.Array.newInstance(elementType, newSize);
        int preserveLength = Math.min(oldSize, newSize);
        if (preserveLength > 0) System.arraycopy(oldArray, 0, newArray, 0, preserveLength);
        return newArray;
    }",0,0
"    private byte[] showScanResult(HTTPurl urlData) throws Exception {
        int freq = 0;
        int band = 0;
        try {
            freq = Integer.parseInt(urlData.getParameter(""freq""));
            band = Integer.parseInt(urlData.getParameter(""band""));
        } catch (Exception e) {
            throw new Exception(""Freq or Band not valid: "" + e.toString());
        }
        PageTemplate template = new PageTemplate(store.getProperty(""path.template"") + File.separator + ""channel-scanresult.html"");
        CaptureDeviceList devList = CaptureDeviceList.getInstance();
        if (devList.getActiveDeviceCount() > 0) {
            template.replaceAll(""$scanresult"", ""Can not scan channels while captures are active!"");
            return template.getPageBytes();
        }
        if (devList.getDeviceCount() == 0) {
            template.replaceAll(""$scanresult"", ""No Devices Available!"");
            return template.getPageBytes();
        }
        String name = urlData.getParameter(""name"");
        StringBuffer buff = new StringBuffer(1024);
        buff.append(""<form action='/servlet/"" + urlData.getServletClass() + ""' method='POST' accept-charset=\""UTF-8\"">\n"");
        buff.append(""<input type='hidden' name='action' value='05'>\n"");
        buff.append(""<table class='channelScanResult'>\n"");
        buff.append(""<tr class='scanChannelHeading'>"");
        buff.append(""<td class='scanChannelHeadingDataName'>"" + name + ""</td>"");
        buff.append(""<td class='scanChannelHeadingData'>Program</td>"");
        buff.append(""<td class='scanChannelHeadingData'>Video</td>"");
        buff.append(""<td class='scanChannelHeadingData'>Audio</td>"");
        buff.append(""<td class='scanChannelHeadingData'>Add</td>"");
        buff.append(""</tr>\n"");
        boolean testMode = ""1"".equals(store.getProperty(""tools.testmode""));
        CaptureDevice cap = (CaptureDevice) devList.getDevice(0);
        Runtime runner = Runtime.getRuntime();
        String[] com = null;
        if (testMode == true) {
            String scanCommand = ""win32/scan.exe -test"";
            System.out.println(""Running channel scan command: "" + scanCommand);
            com = new String[2];
            com[0] = ""win32/scan.exe"";
            com[1] = ""-test"";
        } else {
            String scanCommand = ""win32/scan.exe "" + freq + "" "" + band + "" \"""" + cap.getID() + ""\"""";
            System.out.println(""Running channel scan command: "" + scanCommand);
            com = new String[4];
            com[0] = ""win32/scan.exe"";
            com[1] = new Integer(freq).toString();
            com[2] = new Integer(band).toString();
            com[3] = ""\"""" + cap.getID() + ""\"""";
        }
        Process scan = runner.exec(com);
        ScanResult result = new ScanResult(freq, band);
        result.readInput(scan.getInputStream());
        result.parseXML();
        int channelCount = 0;
        if (result.getResult().size() > 0) {
            Vector<Channel> scanResult = result.getResult();
            Channel chData = null;
            for (int x = 0; x < scanResult.size(); x++) {
                chData = (Channel) scanResult.get(x);
                if (chData != null) {
                    buff.append(""<tr class='scanChannelResult'>"");
                    buff.append(""<td>\n<input type='text' name='name"" + channelCount + ""' value='"" + checkName(chData.getName()) + ""'>\n"");
                    buff.append(""<input type='hidden' name='freq"" + channelCount + ""' value='"" + chData.getFrequency() + ""'>\n"");
                    buff.append(""<input type='hidden' name='band"" + channelCount + ""' value='"" + chData.getBandWidth() + ""'>\n"");
                    buff.append(""</td>\n\n"");
                    buff.append(""<td align='center'>"" + chData.getProgramID());
                    buff.append(""<input type='hidden' name='programid"" + channelCount + ""' value='"" + chData.getProgramID() + ""'>\n"");
                    buff.append(""</td>\n"");
                    buff.append(""<td align='center'>"");
                    int count = getStreamTypeCount(chData, Channel.TYPE_VIDEO);
                    if (count == 0) {
                        buff.append(""-1"");
                        buff.append(""<input type='hidden' name='videoid"" + channelCount + ""' value='-1'>\n"");
                    }
                    if (count == 1) {
                        int[] data = getFirstOfType(chData, Channel.TYPE_VIDEO);
                        buff.append(data[0]);
                        buff.append(""<input type='hidden' name='videoid"" + channelCount + ""' value='"" + data[0] + ""'>\n"");
                    } else if (count > 1) {
                        buff.append(""<SELECT NAME='videoid"" + channelCount + ""'>\n"");
                        for (int st = 0; st < chData.getStreams().size(); st++) {
                            int[] streamData = (int[]) chData.getStreams().get(st);
                            if (streamData[1] == Channel.TYPE_VIDEO) {
                                buff.append(""<OPTION value=\"""" + streamData[0] + ""\"">"");
                                buff.append(streamData[0]);
                                buff.append(""</OPTION>\n"");
                            }
                        }
                        buff.append(""</SELECT>"");
                    }
                    buff.append(""</td>\n"");
                    buff.append(""<td align='center'>"");
                    count = getStreamTypeCount(chData, Channel.TYPE_AUDIO_AC3);
                    count += getStreamTypeCount(chData, Channel.TYPE_AUDIO_MPG);
                    if (count == 0) {
                        buff.append(""-1"");
                        buff.append(""<input type='hidden' name='audioid"" + channelCount + ""' value='-1'>\n"");
                    }
                    if (count == 1) {
                        int[] data = getFirstOfType(chData, Channel.TYPE_AUDIO_AC3);
                        if (data == null) data = getFirstOfType(chData, Channel.TYPE_AUDIO_MPG);
                        buff.append(data[0]);
                        if (data[1] == Channel.TYPE_AUDIO_AC3) buff.append("" AC3""); else buff.append("" MPG"");
                        buff.append(""<input type='hidden' name='audioid"" + channelCount + ""' value='"" + data[0] + "":"" + data[1] + ""'>\n"");
                    } else if (count > 1) {
                        buff.append(""<SELECT NAME='audioid"" + channelCount + ""'>\n"");
                        for (int st = 0; st < chData.getStreams().size(); st++) {
                            int[] streamData = (int[]) chData.getStreams().get(st);
                            if (streamData[1] == Channel.TYPE_AUDIO_MPG || streamData[1] == Channel.TYPE_AUDIO_AC3) {
                                buff.append(""<OPTION value=\"""" + streamData[0] + "":"" + streamData[1] + ""\"">"");
                                buff.append(streamData[0]);
                                if (streamData[1] == Channel.TYPE_AUDIO_AC3) buff.append("" AC3""); else buff.append("" MPG"");
                                buff.append(""</OPTION>\n"");
                            }
                        }
                        buff.append(""</SELECT>"");
                    }
                    buff.append(""</td>\n"");
                    buff.append(""<td align='center'><input type='checkbox' name='add"" + channelCount + ""' value='add'></td>\n"");
                    buff.append(""</tr>\n\n"");
                    channelCount++;
                } else {
                    break;
                }
            }
        } else {
            buff.append(""<tr class='scanChannelResult'>"");
            buff.append(""<td>No Programs Found</td>\n"");
            buff.append(""<td align='center'>N/A</td>\n"");
            buff.append(""<td align='center'>N/A</td>\n"");
            buff.append(""<td align='center'>N/A</td>\n"");
            buff.append(""<td align='center'>N/A</td>\n"");
            buff.append(""</tr>\n\n"");
        }
        buff.append(""</table><br>\n"");
        if (channelCount > 0) buff.append(""<input type='submit' value='Add Selected'>\n"");
        buff.append(""</form>\n"");
        template.replaceAll(""$scanresult"", buff.toString());
        return template.getPageBytes();
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    @Constraint(""post: s.get().size>0"")
    protected static void removeNewlinesForAssertStyleException(@Constraint(""post: s.get().size<=s@pre.get().size"") final IDocument s) {
        String checkMethodName = ""assert(Pre|Post)Condition_(\\w*)_for_method_(\\w*)"";
        String checkMethodParameters = ""([^\\)]*)"";
        Pattern pattern = Pattern.compile(""if\\s*\\(\\s*!\\s*"" + checkMethodName + ""\\s*\\("" + checkMethodParameters + ""\\)\\s*\\)\\s*\\{"" + ""\\s*throw\\s*new\\s*Illegal(State|Argument)Exception\\(\\s*\""(.*)\""\\s*\\)\\s*;"" + ""\\s*}\\s*"");
        Matcher matcher = pattern.matcher(s.get());
        try {
            int lengthDifference = 0;
            while (matcher.find()) {
                String replacement = ""if(!assert"" + Matcher.quoteReplacement(matcher.group(1)) + ""Condition_"" + Matcher.quoteReplacement(matcher.group(2)) + ""_for_method_"" + Matcher.quoteReplacement(matcher.group(3)) + ""("" + Matcher.quoteReplacement(matcher.group(4)) + "")){throw new Illegal"" + Matcher.quoteReplacement(matcher.group(5)) + ""Exception(\"""" + Matcher.quoteReplacement(matcher.group(6)) + ""\"");}"";
                int lengthOfMatchedString = matcher.end() - matcher.start();
                s.replace(lengthDifference + matcher.start(), lengthOfMatchedString, replacement);
                lengthDifference -= lengthOfMatchedString - replacement.length();
            }
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }","    public void open() {
        if (!java.awt.Desktop.isDesktopSupported()) {
            System.err.println(""Desktop is not supported (fatal)"");
            return;
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            System.err.println(""Desktop doesn't support the browse action (fatal)"");
            return;
        }
        try {
            java.net.URI uri = new java.net.URI(this.url);
            desktop.browse(uri);
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }",0,0
"	public static void BubbleSortInt2(int[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					int temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}","    int seqFib(int n) {
        if (n <= 1) return n; else return seqFib(n - 1) + seqFib(n - 2);
    }",0,0
"    public double[][] getTransposta(double[][] matriz) {
        double[][] nova = new double[matriz.length][matriz.length];
        for (int i = 0; i < matriz.length; i++) {
            for (int j = 0; j < matriz.length; j++) {
                nova[i][j] = matriz[j][i];
            }
        }
        return nova;
    }","    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","    public static void main(String[] args) {
        if (args.length != 4) {
            System.out.println(""usage: java msgmultisend <to> <from> <smtp> true|false"");
            return;
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Multipart Test"");
            msg.setSentDate(new Date());
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setText(msgText2, ""us-ascii"");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        }
    }",0,0
"    public static String[][] transpose(String[][] object) {
        String[][] transpose = new String[object[0].length][object.length];
        for (int i = 0; i < object.length; i++) {
            for (int x = 0; x < transpose.length; x++) {
                transpose[x][i] = object[i][x];
            }
        }
        return transpose;
    }","    public void testSentFront() {
        String botRecord = ""hello"";
        String msg = ""hellohow are you"";
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile("".*?hel"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(msg);
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }",0,0
"    public void bubblesort(String filenames[]) {
        for (int i = filenames.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                String temp;
                if (filenames[j].compareTo(filenames[j + 1]) > 0) {
                    temp = filenames[j];
                    filenames[j] = filenames[j + 1];
                    filenames[j + 1] = temp;
                }
            }
        }
    }","    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    public static double[][] transpose(double[][] values) {
        double[][] swapValues = new double[values[0].length][values.length];
        for (int x = 0; x < values.length; x++) {
            for (int y = 0; y < values[x].length; y++) {
                swapValues[y][x] = values[x][y];
            }
        }
        return swapValues;
    }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    public Matrix transpose() {
        Matrix result = new Matrix(columns(), rows());
        for (int i = 0; i < rows(); i++) {
            for (int k = 0; k < columns(); k++) {
                result.elements[k][i] = elements[i][k];
            }
        }
        return result;
    }",0,0
"    public CMatrix transpose() {
        CMatrix X = new CMatrix(n, m);
        Complex[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (Desktop.isDesktopSupported()) {
                            Desktop desktop = Desktop.getDesktop();
                            try {
                                desktop.browse(uri);
                            } catch (Exception ex) {
                            }
                        }
                    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] add(T[] array, T obj) {
        if (array == null) {
            throw new IllegalStateException(""array"");
        }
        T[] newArray = (T[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = obj;
        return newArray;
    }",0,0
"    public void hyperlinkUpdate(HyperlinkEvent event) {
        URL url = event.getURL();
        if (event.getEventType() == HyperlinkEvent.EventType.ENTERED && !event.getDescription().startsWith(""copyUrl:"")) {
            updatesEditorPane.setToolTipText(url.toString());
        } else if (event.getEventType() == HyperlinkEvent.EventType.EXITED) {
            updatesEditorPane.setToolTipText(null);
        } else if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            if (event.getDescription().startsWith(""copyUrl:"")) {
                String toCopy = event.getDescription().replaceFirst(""copyUrl:"", """");
                StringSelection data = new StringSelection(toCopy);
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(data, data);
            } else {
                String browser = configManager.getBrowser();
                if (!Desktop.isDesktopSupported()) {
                    try {
                        if (!browser.equals("""")) {
                            Runtime.getRuntime().exec(browser + "" "" + url.toString());
                        } else {
                            Runtime.getRuntime().exec(""firefox "" + url.toString());
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ""Unable to find a web browser, please set up one on settings window"", ""Web browser error"", JOptionPane.WARNING_MESSAGE);
                    }
                }
                try {
                    Desktop desktop = Desktop.getDesktop();
                    URI uri = new URI(url.toString());
                    desktop.browse(uri);
                } catch (Exception e) {
                    return;
                }
            }
        }
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], 'POINT( 10.0 59.0 )', "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returnFloat )"";
        final String colNames[] = { ""value"", ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println(""EXCEPTION: rs.close: "" + ex);
                }
            }
        }
    }",0,0
"    public void hyperlinkUpdate(HyperlinkEvent event) {
        URL url = event.getURL();
        if (event.getEventType() == HyperlinkEvent.EventType.ENTERED && !event.getDescription().equals(""login"") && !event.getDescription().startsWith(""copyUrl:"")) {
            urlsEditorPane.setToolTipText(url.toString());
        } else if (event.getEventType() == HyperlinkEvent.EventType.EXITED) {
            urlsEditorPane.setToolTipText(null);
        } else if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            if (event.getDescription().equals(""login"")) {
                if (loginWindow == null) {
                    loginWindow = new LoginWindow(extension, component, this, keys, reposPath, configManager);
                } else {
                    loginWindow.setVisible(true);
                }
            } else if (event.getDescription().startsWith(""copyUrl:"")) {
                String toCopy = event.getDescription().replaceFirst(""copyUrl:"", """");
                StringSelection data = new StringSelection(toCopy);
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(data, data);
            } else {
                String browser = configManager.getBrowser();
                if (!Desktop.isDesktopSupported()) {
                    try {
                        if (!browser.equals("""")) {
                            Runtime.getRuntime().exec(browser + "" "" + url.toString());
                        } else {
                            Runtime.getRuntime().exec(""firefox "" + url.toString());
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ""Unable to find a web browser, please set up one on settings window"", ""Web browser error"", JOptionPane.WARNING_MESSAGE);
                    }
                }
                try {
                    Desktop desktop = Desktop.getDesktop();
                    URI uri = new URI(url.toString());
                    desktop.browse(uri);
                } catch (Exception e) {
                    return;
                }
            }
        }
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] append(T[] oldArray, T toAppend) {
        Class<?> component = oldArray.getClass().getComponentType();
        T[] array = (T[]) Array.newInstance(component, oldArray.length + 1);
        System.arraycopy(oldArray, 0, array, 0, oldArray.length);
        array[oldArray.length] = toAppend;
        return array;
    }",0,0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], 'POINT( 10.0 59.0 )', "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returnFloat )"";
        final String colNames[] = { ""value"", ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println(""EXCEPTION: rs.close: "" + ex);
                }
            }
        }
    }","    public static void main(String[] args) {
        String string = ""Look at this paragraph with a lot of different products and at least one product called Kautschuk-Plant, where the plant itself can be planted, on the other hand, there are some more words with absolutely no sense."";
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapterX/hyphen_not_hyphenated.pdf""));
            document.open();
            document.add(new Paragraph(string));
            Chunk c = new Chunk(string);
            c.setSplitCharacter(new NonHyphenatingHyphen());
            document.add(new Paragraph(c));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0,0
"    private int[] Tri(int[] pertinence, int taille) {
        boolean change = true;
        int tmp;
        while (change) {
            change = false;
            for (int i = 0; i < taille - 2; i++) {
                if (pertinence[i] < pertinence[i + 1]) {
                    tmp = pertinence[i];
                    pertinence[i] = pertinence[i + 1];
                    pertinence[i + 1] = tmp;
                    change = true;
                }
            }
        }
        return pertinence;
    }","    public static double[][] transp(double[][] m1) {
        int m = m1.length;
        int n = m1[0].length;
        double[][] ret = new double[n][m];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ret[j][i] = m1[i][j];
            }
        }
        return ret;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","            public void actionPerformed(ActionEvent e) {
                String sql = ""insert into jadwalKBM values('"" + FieldNim.getText() + ""','"" + FieldNama.getText() + ""','"" + FieldTtl.getText() + ""')"";
                if (FieldNim.getText().trim().equals("""")) {
                    JOptionPane.showMessageDialog(frame, ""Nama Bulan Wajib diIsi"", ""Simpan Data"", JOptionPane.WARNING_MESSAGE);
                    FieldNim.requestFocus();
                } else {
                    try {
                        Connection connection = DriverManager.getConnection(""jdbc:odbc:db_Sekolah"");
                        Statement statement = connection.createStatement();
                        statement.executeUpdate(sql);
                        statement.close();
                        FieldNim.setText("""");
                        FieldNama.setText("""");
                        FieldTtl.setText("""");
                        JOptionPane.showMessageDialog(frame, ""Simpan berhasil"", ""Simpan Data"", JOptionPane.WARNING_MESSAGE);
                        FieldNim.requestFocus();
                        FieldNim.requestFocus();
                        FieldNim.requestFocus();
                    } catch (Exception exc) {
                        System.err.println(""Error : "" + exc);
                    }
                }
            }",0,0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""', 999, 999, 999 )"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }","    private void OpenGraph() {
        JFileChooser chooser = new JFileChooser(DirG);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        ExtensionFileFilter filter = new ExtensionFileFilter(""grf"", ""GRAPH representation files (*.grf)"");
        chooser.setFileFilter(filter);
        if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;
        DirG = chooser.getSelectedFile().getParent();
        PathG = chooser.getSelectedFile().getPath();
        TabG = chooser.getSelectedFile().getName();
        InitGraph();
    }",0,0
"    @SuppressWarnings(""unchecked"")
    public <T> T[] toArray(T[] a) {
        if (a.length < size) {
            a = (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        }
        System.arraycopy(array, 0, a, 0, size);
        if (a.length > size) {
            a[size] = null;
        }
        return a;
    }","    public static void main(String[] args) {
        if (args.length != 4) {
            System.out.println(""usage: java msgmultisend <to> <from> <smtp> true|false"");
            return;
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Multipart Test"");
            msg.setSentDate(new Date());
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setText(msgText2, ""us-ascii"");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        }
    }",0,0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://prologdev1:5432/wdb"";
        final String dbuser = ""guest2"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT value, dataProviderName, placeName, placeGeometry,"" + ""        referencetime, "" + ""        validFrom, validTo, "" + ""        valueParameterName, valueParameterUnit, "" + ""        levelParameterName, levelUnitName, levelFrom, levelTo, "" + ""        dataVersion, confidenceCode, storetime, valueid, valuetype "" + "" FROM wci.read( array['hirlam 10'], 'POINT( 10.0 59.0 )', "" + ""                ('2000-01-03 01:00:00', '2000-01-03 01:00:00', 'exact'), "" + ""                NULL, "" + ""                array['instant temperature of air'], "" + ""                ( 2, 2, 'distance above ground', 'exact' ), "" + ""                array[-1], "" + ""                NULL::wci.returnOid )"";
        final String colNames[] = { ""value"", ""dataProviderName"", ""placeName"", ""referencetime"", ""validFrom"", ""validTo"", ""valueParameterName"", ""valueParameterUnit"", ""levelParameterName"", ""levelUnitName"", ""levelFrom"", ""levelTo"" };
        ResultSet rs = null;
        try {
            con.setAutoCommit(false);
            statement.execute(wdbInit);
            LargeObjectManager lobj = ((org.postgresql.PGConnection) con).getLargeObjectAPI();
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                long oid = rs.getLong(""value"");
                LargeObject obj = lobj.open(oid, LargeObjectManager.READ);
                byte buf[] = new byte[obj.size()];
                obj.read(buf, 0, obj.size());
                obj.close();
                System.out.print(""  BLOB size: "" + buf.length);
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                con.commit();
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static Object cut(Object obj, int size) {
        int j;
        if ((j = Array.getLength(obj)) == 1) {
            return Array.newInstance(obj.getClass().getComponentType(), 0);
        }
        int k;
        if ((k = j - size - 1) > 0) {
            System.arraycopy(obj, size + 1, obj, size, k);
        }
        j--;
        Object obj1 = Array.newInstance(obj.getClass().getComponentType(), j);
        System.arraycopy(obj, 0, obj1, 0, j);
        return obj1;
    }",0,0
"    public static void main(String[] args) {
        System.out.println(""Chapter 1 example 6: Meta Information"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0106.pdf""));
            HtmlWriter.getInstance(document, System.out);
            document.addTitle(""Hello World example"");
            document.addSubject(""This example explains step 3 in Chapter 1"");
            document.addKeywords(""Metadata, iText, step 3, tutorial"");
            document.addAuthor(""Bruno Lowagie"");
            document.addHeader(""Expires"", ""0"");
            document.open();
            document.add(new Paragraph(""Hello World""));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    protected static float[][] trans(float[][] a) {
        int am = a.length;
        int an = a[0].length;
        float[][] t = new float[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                t[j][i] = a[i][j];
            }
        }
        return t;
    }",0,0
"    public static LImage[][] reversalXandY(final LImage[][] array) {
        int col = array[0].length;
        int row = array.length;
        LImage[][] result = new LImage[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","    public static void main(String[] args) {
        if (args.length != 4) {
            System.out.println(""usage: java msgmultisend <to> <from> <smtp> true|false"");
            return;
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Multipart Test"");
            msg.setSentDate(new Date());
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setText(msgText2, ""us-ascii"");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        }
    }",0,0
"    public void help() {
        if (Desktop.isDesktopSupported()) {
            URI uri = URI.create(props.getProperty(""help.url""));
            try {
                Desktop.getDesktop().browse(uri);
            } catch (IOException ex) {
                logger.error(ex, ex);
            }
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    private float[][] Transpose(float[][] a) {
        if (INFO) {
            System.out.println(""Performing Transpose..."");
        }
        float m[][] = new float[a[0].length][a.length];
        for (int i = 0; i < a.length; i++) for (int j = 0; j < a[i].length; j++) m[j][i] = a[i][j];
        return m;
    }","    public static Object[] add(Object[] array, Object value) {
        Object[] tmp = (Object[]) java.lang.reflect.Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, tmp, 0, array.length);
        tmp[array.length] = value;
        return tmp;
    }",0,0
"    public static Object[] append(Object[] lst, Object[] lst1) {
        Object[] l = (Object[]) Array.newInstance(lst.getClass().getComponentType(), lst.length + lst1.length);
        System.arraycopy(lst, 0, l, 0, lst.length);
        System.arraycopy(lst1, 0, l, lst.length, lst1.length);
        return l;
    }","    public double[][] transpose(double[][] d) {
        double[][] result = new double[d[0].length][d.length];
        for (int i = 0; i < d.length; i++) {
            for (int j = 0; j < d[i].length; j++) {
                result[j][i] = d[i][j];
            }
        }
        return result;
    }",0,0
"    private double[][] getTransponColumns(double[][] data) {
        double[][] columns = new double[data[0].length][data.length];
        for (int i = 0; i < columns.length; i++) {
            for (int j = 0; j < columns[0].length; j++) {
                columns[i][j] = data[j][i];
            }
        }
        return columns;
    }","    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static Object[] append(Object[] lst, Object[] lst1) {
        Object[] l = (Object[]) Array.newInstance(lst.getClass().getComponentType(), lst.length + lst1.length);
        System.arraycopy(lst, 0, l, 0, lst.length);
        System.arraycopy(lst1, 0, l, lst.length, lst1.length);
        return l;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public ZnMatrix transposed() {
        ZnMatrix m = new ZnMatrix(columns, rows, modulus);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }",0,0
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    public Object[] toArray(Object a[]) {
        if (a.length < elements.length) {
            a = (Object[]) Array.newInstance(a.getClass().getComponentType(), elements.length);
        }
        System.arraycopy(elements, 0, a, 0, elements.length);
        if (a.length > elements.length) {
            a[elements.length] = null;
        }
        return a;
    }",0,0
"    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public static Object cut(Object src, int position) {
        int size = Array.getLength(src);
        if (size == 1) {
            return Array.newInstance(src.getClass().getComponentType(), 0);
        }
        int numMoved = size - position - 1;
        if (numMoved > 0) {
            System.arraycopy(src, position + 1, src, position, numMoved);
        }
        size--;
        Object dest = Array.newInstance(src.getClass().getComponentType(), size);
        System.arraycopy(src, 0, dest, 0, size);
        return dest;
    }","    boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static void shuffleArray(int[] a) {
        int n = a.length;
        Random random = new Random();
        random.nextInt();
        for (int i = 0; i < n; i++) {
            int change = i + random.nextInt(n - i);
            swap(a, i, change);
        }
    }",0,0
"    public static File capture(Rectangle rect) throws Exception {
        Robot robot = new Robot();
        BufferedImage img = robot.createScreenCapture(rect);
        File file = File.createTempFile(""jfx_screen_capture_retouched"", "".jpg"");
        ImageIO.write(img, ""jpg"", file);
        return file;
    }","    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 4) {
            System.out.println(""usage: java msgmultisend <to> <from> <smtp> true|false"");
            return;
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Multipart Test"");
            msg.setSentDate(new Date());
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setText(msgText2, ""us-ascii"");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        }
    }","    public void hyperlinkUpdate(HyperlinkEvent event) {
        URL url = event.getURL();
        if (event.getEventType() == HyperlinkEvent.EventType.ENTERED && !event.getDescription().equals(""login"") && !event.getDescription().startsWith(""copyUrl:"")) {
            urlsEditorPane.setToolTipText(url.toString());
        } else if (event.getEventType() == HyperlinkEvent.EventType.EXITED) {
            urlsEditorPane.setToolTipText(null);
        } else if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            if (event.getDescription().equals(""login"")) {
                if (loginWindow == null) {
                    loginWindow = new LoginWindow(extension, component, this, keys, reposPath, configManager);
                } else {
                    loginWindow.setVisible(true);
                }
            } else if (event.getDescription().startsWith(""copyUrl:"")) {
                String toCopy = event.getDescription().replaceFirst(""copyUrl:"", """");
                StringSelection data = new StringSelection(toCopy);
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(data, data);
            } else {
                String browser = configManager.getBrowser();
                if (!Desktop.isDesktopSupported()) {
                    try {
                        if (!browser.equals("""")) {
                            Runtime.getRuntime().exec(browser + "" "" + url.toString());
                        } else {
                            Runtime.getRuntime().exec(""firefox "" + url.toString());
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ""Unable to find a web browser, please set up one on settings window"", ""Web browser error"", JOptionPane.WARNING_MESSAGE);
                    }
                }
                try {
                    Desktop desktop = Desktop.getDesktop();
                    URI uri = new URI(url.toString());
                    desktop.browse(uri);
                } catch (Exception e) {
                    return;
                }
            }
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    public static float[][] TransposeMatrix(float[][] M) {
        int lines = M.length;
        int columns = M[0].length;
        float[][] Mi = new float[columns][lines];
        for (int i = 0; i < lines; i++) {
            for (int j = 0; j < columns; j++) {
                Mi[j][i] = M[i][j];
            }
        }
        return Mi;
    }",0,0
"    boolean deleteAll(File file) {
        if (file.isDirectory()) {
            for (File f : file.listFiles()) deleteAll(f);
        }
        return file.delete();
    }","    public static long F(int n) {
        if (n == 0) return 0;
        if (n == 1) return 1;
        return F(n - 1) + F(n - 2);
    }",0,0
"    private void openURI() {
        if (uri != null) if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public int fibonacci(int num) {
        if (num == 0) {
            return 0;
        } else if (num == 1) {
            return 1;
        } else {
            processor.getAlgData().setRecursiveCalls(processor.getAlgData().getRecursiveCalls() + 2);
            return fibonacci(num - 1) + fibonacci(num - 2);
        }
    }","    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    public int create(BusinessObject o) throws DAOException {
        int insert = 0;
        int id = 0;
        Contact contact = (Contact) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_CONTACT""));
            pst.setString(1, contact.getName());
            pst.setString(2, contact.getFirstname());
            pst.setString(3, contact.getPhone());
            pst.setString(4, contact.getEmail());
            if (contact.getAccount() == 0) {
                pst.setNull(5, java.sql.Types.INTEGER);
            } else {
                pst.setInt(5, contact.getAccount());
            }
            insert = pst.executeUpdate();
            if (insert <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (insert > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery(""select max(id) from contact"");
            rs.next();
            id = rs.getInt(1);
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return id;
    }","    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    public synchronized Object[] toArray(Object a[]) {
        if (a.length < elementCount) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), elementCount);
        System.arraycopy(elementData, 0, a, 0, elementCount);
        if (a.length > elementCount) a[elementCount] = null;
        return a;
    }","    public int saveBuildingInstructionstoPDF(boolean mustWrite) {
        int totalbricks = 0;
        Paragraph p;
        Chunk chunk;
        int width;
        int i;
        if (mustWrite) {
            try {
                Document document = new Document(PageSize.A0, 50, 50, 50, 50);
                PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(directoryPath + ""\\"" + ""BuildingInstructions"" + firstLayer + ""_"" + lastLayer + "".pdf""));
                writer.setPageEvent(new pdfListener());
                document.open();
                PdfContentByte cb = writer.getDirectContent();
                int canvasWidth = (int) PageSize.A0.width() - 200;
                int canvasHeight = (int) PageSize.A0.height() - 200;
                if (xSize != ySize) {
                    if (xSize > ySize) {
                        width = (int) Math.floor((double) (canvasWidth - 40) / (double) xSize);
                    } else {
                        width = (int) Math.floor((double) (canvasWidth - 40) / (double) ySize);
                    }
                } else {
                    width = (int) Math.floor((double) (canvasWidth - 40) / (double) xSize);
                }
                for (i = firstLayer; i <= lastLayer; i++) {
                    p = new Paragraph();
                    chunk = new Chunk(""Layout Layer "" + i + "" :"", FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, Color.black));
                    chunk.setUnderline(1.5f, -2.5f);
                    p.add(chunk);
                    document.add(p);
                    Graphics2D g = cb.createGraphics(canvasWidth, canvasHeight);
                    g.setColor(Color.LIGHT_GRAY);
                    drawGrid(g, width);
                    if (!layoutFileExtension.equals(""ll2"")) {
                        if (i > firstLayer) {
                            g.setColor(Color.gray);
                            loadLayerBricks(i - 1, ""CURRENT"");
                            drawBlocks(g, 40, 0, currentLayer, width, false);
                            g.setColor(Color.DARK_GRAY);
                            drawBlocksOutline(g, 40, 0, currentLayer, width);
                        }
                    }
                    if (!layoutFileExtension.equals("".sl2"")) {
                        g.setColor(Color.LIGHT_GRAY);
                    }
                    loadLayerBricks(i, ""CURRENT"");
                    drawBlocks(g, 40, 0, currentLayer, width, true);
                    g.setColor(Color.BLACK);
                    drawBlocksOutline(g, 40, 0, currentLayer, width);
                    g.setColor(Color.BLACK);
                    g.dispose();
                    cb.saveState();
                    document.newPage();
                }
                p = new Paragraph();
                chunk = new Chunk(""LEGO bricks required to build sculpture:"", FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, Color.black));
                chunk.setUnderline(1.5f, -2.5f);
                p.add(chunk);
                document.add(p);
                float[] widths = { 0.60f, 0.40f };
                PdfPTable table = new PdfPTable(widths);
                table.setTotalWidth(250);
                table.setLockedWidth(true);
                table.setSpacingBefore(25f);
                table.getDefaultCell().setBackgroundColor(new Color(0.59f, 0.6f, 0.97f));
                table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                table.setHorizontalAlignment(Element.ALIGN_LEFT);
                PdfPCell cell = new PdfPCell(new Paragraph(""Type"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(new Color(0.34f, 0.41f, 0.98f));
                table.addCell(cell);
                cell = new PdfPCell(new Paragraph(""Amount required"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(new Color(0.34f, 0.41f, 0.98f));
                table.addCell(cell);
                totalbricks += totalNumLegoBricksUsed[0];
                table.addCell("""" + blockNames[0]);
                table.addCell("""" + totalNumLegoBricksUsed[0]);
                for (i = 1; i < 10; i = i + 2) {
                    totalbricks += totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1];
                    table.addCell("""" + blockNames[i]);
                    table.addCell("""" + (totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1]));
                }
                for (i = 11; i < 16; i++) {
                    totalbricks += totalNumLegoBricksUsed[i];
                    table.addCell("""" + blockNames[i]);
                    table.addCell("""" + totalNumLegoBricksUsed[i]);
                }
                for (i = 16; i < numLegoBricks - 1; i = i + 2) {
                    totalbricks += totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1];
                    table.addCell("""" + blockNames[i]);
                    table.addCell("""" + (totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1]));
                }
                cell = new PdfPCell(new Paragraph(""Total"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(Color.YELLOW);
                table.addCell(cell);
                cell = new PdfPCell(new Paragraph("""" + totalbricks, FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(Color.YELLOW);
                table.addCell(cell);
                document.add(table);
                document.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, ""An error occured while trying to save the list of LEGO bricks used."", ""Error occured"", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
        } else {
            for (i = 0; i < numLegoBricks; i++) {
                totalbricks += totalNumLegoBricksUsed[i];
            }
        }
        JOptionPane.showMessageDialog(null, ""Brick sculpture building instructions saved to \n"" + directoryPath + ""\\"" + ""BuildingInstructions"" + firstLayer + ""_"" + lastLayer + "".pdf"", ""LEGO instructions generated"", JOptionPane.INFORMATION_MESSAGE);
        return totalbricks;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static String[][] performTranspose(String[][] fileData, String[][] fileDataTransposed) {
        CompareUtils.ensureTrue(fileDataTransposed.length == fileData[0].length, ""ERROR: Dimensions of output file not correctly set!"");
        CompareUtils.ensureTrue(fileDataTransposed[0].length == fileData.length, ""ERROR: Dimensions of output file not correctly set!"");
        for (int row = 0; row < fileData.length; row++) {
            for (int col = 0; col < fileData[row].length; col++) {
                fileDataTransposed[col][row] = fileData[row][col];
            }
        }
        return fileDataTransposed;
    }",0,0
"    private void browse(String url) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(url));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, ""Folgender Fehler ist beim �ffnen des Standart-"" + ""Browsers aufgetreten:\n"" + e.getMessage(), ""Fehler"", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, ""Ihre Plattform wird nicht unterst�tzt."", ""Webseite besuchen"", JOptionPane.ERROR_MESSAGE);
        }
    }","    public final void randomize(int[] index, Random random) {
        for (int j = index.length - 1; j > 0; j--) {
            int k = random.nextInt(j + 1);
            int temp = index[j];
            index[j] = index[k];
            index[k] = temp;
        }
    }",0,0
"    @Constraint(""post: s.get().size>0"")
    protected static void removeNewlinesForAssertStyleJava(@Constraint(""post: s.get().size<=s@pre.get().size"") final IDocument s) {
        Pattern pattern = Pattern.compile(""assert\\s*assert(Pre|Post)Condition_(\\w*)_for_method_(\\w*)\\s*\\(([^\\)]*)\\)\\s*:"" + ""\\s*\""(.*)\""\\s*;"" + ""\\s*"");
        Matcher matcher = pattern.matcher(s.get());
        try {
            int lengthDifference = 0;
            while (matcher.find()) {
                String replacement = ""assert assert"" + Matcher.quoteReplacement(matcher.group(1)) + ""Condition_"" + Matcher.quoteReplacement(matcher.group(2)) + ""_for_method_"" + Matcher.quoteReplacement(matcher.group(3)) + ""("" + Matcher.quoteReplacement(matcher.group(4)) + "") : \"""" + Matcher.quoteReplacement(matcher.group(5)) + ""\"";"";
                int lengthOfMatchedString = matcher.end() - matcher.start();
                s.replace(lengthDifference + matcher.start(), lengthOfMatchedString, replacement);
                lengthDifference -= lengthOfMatchedString - replacement.length();
            }
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://prologdev1:5432/wdb"";
        final String dbuser = ""guest2"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT value, dataProviderName, placeName, placeGeometry,"" + ""        referencetime, "" + ""        validFrom, validTo, "" + ""        valueParameterName, valueParameterUnit, "" + ""        levelParameterName, levelUnitName, levelFrom, levelTo, "" + ""        dataVersion, confidenceCode, storetime, valueid, valuetype "" + "" FROM wci.read( array['hirlam 10'], 'POINT( 10.0 59.0 )', "" + ""                ('2000-01-03 01:00:00', '2000-01-03 01:00:00', 'exact'), "" + ""                NULL, "" + ""                array['instant temperature of air'], "" + ""                ( 2, 2, 'distance above ground', 'exact' ), "" + ""                array[-1], "" + ""                NULL::wci.returnOid )"";
        final String colNames[] = { ""value"", ""dataProviderName"", ""placeName"", ""referencetime"", ""validFrom"", ""validTo"", ""valueParameterName"", ""valueParameterUnit"", ""levelParameterName"", ""levelUnitName"", ""levelFrom"", ""levelTo"" };
        ResultSet rs = null;
        try {
            con.setAutoCommit(false);
            statement.execute(wdbInit);
            LargeObjectManager lobj = ((org.postgresql.PGConnection) con).getLargeObjectAPI();
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                long oid = rs.getLong(""value"");
                LargeObject obj = lobj.open(oid, LargeObjectManager.READ);
                byte buf[] = new byte[obj.size()];
                obj.read(buf, 0, obj.size());
                obj.close();
                System.out.print(""  BLOB size: "" + buf.length);
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                con.commit();
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0,0
"    public static Object[] add(Object[] array, Object value) {
        Object[] tmp = (Object[]) java.lang.reflect.Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, tmp, 0, array.length);
        tmp[array.length] = value;
        return tmp;
    }","    private int[] Tri(int[] pertinence, int taille) {
        boolean change = true;
        int tmp;
        while (change) {
            change = false;
            for (int i = 0; i < taille - 2; i++) {
                if (pertinence[i] < pertinence[i + 1]) {
                    tmp = pertinence[i];
                    pertinence[i] = pertinence[i + 1];
                    pertinence[i + 1] = tmp;
                    change = true;
                }
            }
        }
        return pertinence;
    }",0,0
"    public static final long crc32(byte[] data) {
        CRC32 crc32 = new CRC32();
        crc32.update(data);
        return crc32.getValue();
    }","    public void testEnd() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""spiritbot\\W"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""spiritbot: how are you doing"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }",0,0
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    public RoutesMap getInverse() {
        DenseRoutesMap transposed = new DenseRoutesMap(distances.length);
        for (int i = 0; i < distances.length; i++) {
            for (int j = 0; j < distances.length; j++) {
                transposed.distances[i][j] = distances[j][i];
            }
        }
        return transposed;
    }",0,0
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static synchronized void shuffle(int[] anArray) {
        int n = anArray.length;
        for (int i = n - 1; i >= 1; i--) {
            int j = randomSource.nextInt(i + 1);
            int temp = anArray[j];
            anArray[j] = anArray[i];
            anArray[i] = temp;
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    private static Object resizeArray(Object oldArray, int newSize) {
        int oldSize = java.lang.reflect.Array.getLength(oldArray);
        Class elementType = oldArray.getClass().getComponentType();
        Object newArray = java.lang.reflect.Array.newInstance(elementType, newSize);
        int preserveLength = Math.min(oldSize, newSize);
        if (preserveLength > 0) System.arraycopy(oldArray, 0, newArray, 0, preserveLength);
        return newArray;
    }",0,0
"    public void guiViewRecommendation(ApplicationType app, RecommendationType rec) {
        try {
            File outputHtml = this.applyViewRecommendationXsl(app, rec);
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                URI uri = outputHtml.toURI();
                logger.debug(""Displaying via browser: "" + uri.toASCIIString());
                desktop.browse(uri);
            } else {
                logger.debug(""Displaying via dialog"");
                String title = ""View Rule: "" + super.getUserFriendlyId(app, rec);
                ViewHtmlDialog recDialog = new ViewHtmlDialog(MetaManager.getMainWindow(), true, title, outputHtml);
                recDialog.setVisible(true);
            }
        } catch (Exception ex) {
            logger.warn("""", ex);
        }
    }","    public void elimina(Cliente cli) throws errorSQL, errorConexionBD {
        System.out.println(""GestorCliente.elimina()"");
        int id = cli.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM cliente WHERE cod_cliente ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            sql = ""DELETE FROM persona WHERE id ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt.executeUpdate(sql);
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        }
    }",0,0
"    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
        }
    }","    public static void main(String[] args) {
        System.out.println(""Chapter 1 example 3: PageSize"");
        Document document = new Document(PageSize.A4.rotate());
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0103.pdf""));
            document.open();
            for (int i = 0; i < 20; i++) {
                document.add(new Phrase(""Hello World, Hello Sun, Hello Moon, Hello Stars, Hello Sea, Hello Land, Hello People. ""));
            }
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0,0
"    public static synchronized void shuffle(float[] anArray) {
        int n = anArray.length;
        for (int i = n - 1; i >= 1; i--) {
            int j = randomSource.nextInt(i + 1);
            float temp = anArray[j];
            anArray[j] = anArray[i];
            anArray[i] = temp;
        }
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://prologdev1:5432/wdb"";
        final String dbuser = ""guest2"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT value, dataProviderName, placeName, placeGeometry,"" + ""        referencetime, "" + ""        validFrom, validTo, "" + ""        valueParameterName, valueParameterUnit, "" + ""        levelParameterName, levelUnitName, levelFrom, levelTo, "" + ""        dataVersion, confidenceCode, storetime, valueid, valuetype "" + "" FROM wci.read( array['hirlam 10'], 'POINT( 10.0 59.0 )', "" + ""                ('2000-01-03 01:00:00', '2000-01-03 01:00:00', 'exact'), "" + ""                NULL, "" + ""                array['instant temperature of air'], "" + ""                ( 2, 2, 'distance above ground', 'exact' ), "" + ""                array[-1], "" + ""                NULL::wci.returnOid )"";
        final String colNames[] = { ""value"", ""dataProviderName"", ""placeName"", ""referencetime"", ""validFrom"", ""validTo"", ""valueParameterName"", ""valueParameterUnit"", ""levelParameterName"", ""levelUnitName"", ""levelFrom"", ""levelTo"" };
        ResultSet rs = null;
        try {
            con.setAutoCommit(false);
            statement.execute(wdbInit);
            LargeObjectManager lobj = ((org.postgresql.PGConnection) con).getLargeObjectAPI();
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                long oid = rs.getLong(""value"");
                LargeObject obj = lobj.open(oid, LargeObjectManager.READ);
                byte buf[] = new byte[obj.size()];
                obj.read(buf, 0, obj.size());
                obj.close();
                System.out.print(""  BLOB size: "" + buf.length);
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                con.commit();
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0,0
"    private void OpenGraph() {
        JFileChooser chooser = new JFileChooser(DirG);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        ExtensionFileFilter filter = new ExtensionFileFilter(""grf"", ""GRAPH representation files (*.grf)"");
        chooser.setFileFilter(filter);
        if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;
        DirG = chooser.getSelectedFile().getParent();
        PathG = chooser.getSelectedFile().getPath();
        TabG = chooser.getSelectedFile().getName();
        InitGraph();
    }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"	public static void BubbleSortDouble1(double[] num) {
		boolean flag = true; // set flag to true to begin first pass
		double temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}","    public Matrix transpose() {
        Matrix output = new Matrix(cols, rows);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                output.contents[j][i] = contents[i][j];
            }
        }
        return output;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static void browse(String urlStr) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(urlStr));
            } catch (Exception e) {
            }
        } else {
            JOptionPane.showMessageDialog(MainWindow.mw, ""Cannot open the URL. Kindly open this url\n"" + ""from your browser:\n"" + urlStr);
        }
    }",0,0
"    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }","    void logCorrectMatrix(double p) {
        for (int i = 0; i < numdata; i++) {
            for (int j = 0; j < i; j++) {
                depMatrix[i][j] = 1 / Math.pow(depMatrix[i][j], p);
                depMatrix[j][i] = depMatrix[i][j];
            }
        }
    }",0,0
"    public Object[] toArray(Object[] a) {
        if (a.length < size) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size) a[size] = null;
        return a;
    }","    String[][] transpose(String[][] data) {
        int r = data.length;
        int c = data[0].length;
        String matrix[][] = new String[c][r];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                matrix[j][i] = data[i][j];
            }
        }
        return matrix;
    }",0,0
"    public static void main(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""msgsend"";
        String file = null;
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-a"")) {
                file = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: msgsend [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-a attach-file] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            String text = collect(in);
            if (file != null) {
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setText(text);
                MimeBodyPart mbp2 = new MimeBodyPart();
                mbp2.attachFile(file);
                MimeMultipart mp = new MimeMultipart();
                mp.addBodyPart(mbp1);
                mp.addBodyPart(mbp2);
                msg.setContent(mp);
            } else {
                msg.setText(text);
            }
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","            public void mouseClicked(MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(""http://www.ignissoft.com""));
                    } catch (Exception e) {
                        log.log(Level.WARNING, ""Failed openning browser to Ignis website: "" + e.getMessage());
                    }
                }
            }",0,0
"    public static int fibonacci(int broj) {
        if (broj <= 1) return broj; else return fibonacci(broj - 1) + fibonacci(broj - 2);
    }","    public static void main(String args[]) {
        int temp;
        int[] a1 = { 6, 2, -3, 7, -1, 8, 9, 0 };
        for (int j = 0; j < (a1.length * a1.length); j++) {
            for (int i = 0; i < a1.length - 1; i++) {
                if (a1[i] > a1[i + 1]) {
                    temp = a1[i];
                    a1[i] = a1[i + 1];
                    a1[i + 1] = temp;
                }
            }
        }
        for (int i = 0; i < a1.length; i++) {
            System.out.print("" "" + a1[i]);
        }
    }",0,0
"    private void goToWebsite(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        int[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    public static Object setLength(Object array, int newLength) {
        if (array == null) {
            return null;
        }
        int oldLength = Array.getLength(array);
        if (newLength == oldLength) return array;
        Object t = Array.newInstance(array.getClass().getComponentType(), newLength);
        System.arraycopy(array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
        return t;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public static void bubbleSort(int[] a) {
        if (a == null) {
            throw new IllegalArgumentException(""Null-pointed array"");
        }
        int right = a.length - 1;
        int k = 0;
        while (right > 0) {
            k = 0;
            for (int i = 0; i <= right - 1; i++) {
                if (a[i] > a[i + 1]) {
                    k = i;
                    int temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
            right = k;
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public void testSentFront() {
        String botRecord = ""hello"";
        String msg = ""hellohow are you"";
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile("".*?hel"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(msg);
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }","    public static void bubbleSort(int[] a) {
        if (a == null) {
            throw new IllegalArgumentException(""Null-pointed array"");
        }
        int right = a.length - 1;
        int k = 0;
        while (right > 0) {
            k = 0;
            for (int i = 0; i <= right - 1; i++) {
                if (a[i] > a[i + 1]) {
                    k = i;
                    int temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
            right = k;
        }
    }",0,0
"    public void openURI(URI uri) {
        if (!java.awt.Desktop.isDesktopSupported()) {
            JOptionPane.showMessageDialog(this, Messages.getString(""Msg_DesktopIsNotSupported""));
            return;
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            JOptionPane.showMessageDialog(this, Messages.getString(""Msg_BrowseActionNotSupported""));
            return;
        }
        try {
            desktop.browse(uri);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, Messages.getString(""Msg_AnErrorOccuredWhileBrowsing"") + "" "" + e.getMessage());
        }
    }","    public RobotList<Enemy> sort_incr_Enemy(RobotList<Enemy> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i).location));
            }
        } else if (field.equals(""health"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).health);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value > enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Enemy> new_enemy_list = new RobotList<Enemy>(Enemy.class);
        for (int i = 0; i < length; i++) {
            new_enemy_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_enemy_list;
    }",0,0
"    @SuppressWarnings(""unchecked"")
    private static Object resizeArray(Object oldArray, int newSize) {
        int oldSize = java.lang.reflect.Array.getLength(oldArray);
        Class elementType = oldArray.getClass().getComponentType();
        Object newArray = java.lang.reflect.Array.newInstance(elementType, newSize);
        int preserveLength = Math.min(oldSize, newSize);
        if (preserveLength > 0) System.arraycopy(oldArray, 0, newArray, 0, preserveLength);
        return newArray;
    }","    public ThreadChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            ThreadInfo tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }",0,0
"    public void openURI(String url) {
        if (!java.awt.Desktop.isDesktopSupported()) {
            System.err.println(""Desktop is not supported (fatal)"");
            System.exit(1);
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            System.err.println(""Desktop doesn't support the browse action (fatal)"");
            System.exit(1);
        }
        try {
            java.net.URI uri = new java.net.URI(url);
            desktop.browse(uri);
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"	public FTPClient sample1a(String server, int port, String username, String password) throws SocketException, IOException {
		FTPClient ftpClient = new FTPClient();
		ftpClient.connect(server, port);
		ftpClient.login(username, password);
		return ftpClient;
	}","    public void bubbleSort(int[] arr) {
        boolean swapped = true;
        int j = 0;
        int tmp;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < arr.length - j; i++) {
                if (arr[i] > arr[i + 1]) {
                    tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    swapped = true;
                }
            }
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static LImage[][] getFlipHorizintalImage2D(LImage[][] pixels) {
        int w = pixels.length;
        int h = pixels[0].length;
        LImage pixel[][] = new LImage[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                pixel[i][j] = pixels[j][i];
            }
        }
        return pixel;
    }",0,0
"    public static void main(String[] args) {
        System.out.println(""Chapter 10 example 1: Simple Graphic"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap1001.pdf""));
            document.open();
            Graphic grx = new Graphic();
            grx.rectangle(100, 700, 100, 100);
            grx.moveTo(100, 700);
            grx.lineTo(200, 800);
            grx.stroke();
            document.add(grx);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public static void main(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""msgsend"";
        String file = null;
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-a"")) {
                file = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: msgsend [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-a attach-file] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            String text = collect(in);
            if (file != null) {
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setText(text);
                MimeBodyPart mbp2 = new MimeBodyPart();
                mbp2.attachFile(file);
                MimeMultipart mp = new MimeMultipart();
                mp.addBodyPart(mbp1);
                mp.addBodyPart(mbp2);
                msg.setContent(mp);
            } else {
                msg.setText(text);
            }
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"                    public void actionPerformed(ActionEvent e) {
                        if (Desktop.isDesktopSupported()) {
                            try {
                                Desktop.getDesktop().browse(monitor.getMainPageURI());
                            } catch (IOException err) {
                            }
                        }
                    }","    public static void main(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""msgsend"";
        String file = null;
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-a"")) {
                file = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: msgsend [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-a attach-file] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            String text = collect(in);
            if (file != null) {
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setText(text);
                MimeBodyPart mbp2 = new MimeBodyPart();
                mbp2.attachFile(file);
                MimeMultipart mp = new MimeMultipart();
                mp.addBodyPart(mbp1);
                mp.addBodyPart(mbp2);
                msg.setContent(mp);
            } else {
                msg.setText(text);
            }
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"    public RealSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }","    private static boolean deleteFile(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                deleteFile(child);
            }
        }
        return resource.delete();
    }",0,0
"    public static Object[] added(Object[] xs, Object y) {
        Object[] xsx = (Object[]) java.lang.reflect.Array.newInstance(xs.getClass().getComponentType(), xs.length + 1);
        System.arraycopy(xs, 0, xsx, 0, xs.length);
        xsx[xs.length] = y;
        return xsx;
    }","    public static double[][] transpose(double[][] matrix) {
        double[][] transposed = new double[matrix[0].length][matrix.length];
        int mLength = matrix.length, m0Length = matrix[0].length;
        for (int i = 0; i < mLength; i++) {
            for (int j = 0; j < m0Length; j++) {
                transposed[j][i] = matrix[i][j];
            }
        }
        return transposed;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static void shuffle(Object[] array, Random rng) {
        for (int i = array.length - 1; i >= 0; i--) {
            int index = rng.nextInt(i + 1);
            Object a = array[index];
            array[index] = array[i];
            array[i] = a;
        }
    }",0,0
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    public static void copyDirectory(File sourceLocation, File targetLocation) throws IOException {
        if (sourceLocation.isDirectory()) {
            if (!targetLocation.exists()) {
                targetLocation.mkdir();
            }
            String[] children = sourceLocation.list();
            for (int i = 0; i < children.length; i++) {
                copyDirectory(new File(sourceLocation, children[i]), new File(targetLocation, children[i]));
            }
        } else {
            InputStream in = new FileInputStream(sourceLocation);
            OutputStream out = new FileOutputStream(targetLocation);
            byte[] buf = new byte[1024];
            int len;
            while ((len = in.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
            in.close();
            out.close();
        }
    }",0,0
"    private void bubbleSort(int[] mas) {
        boolean t = true;
        int temp = 0;
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    temp = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = temp;
                    t = true;
                }
            }
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""', 999, 999, 999 )"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }","    private void buildInfoZip(ScheduleItem si, OutputStream outStream) throws Exception {
        ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
        ZipOutputStream out = new ZipOutputStream(bytesOut);
        Vector<String> logFiles = si.getLogFileNames();
        for (int x = 0; x < logFiles.size(); x++) {
            File log = new File(logFiles.get(x));
            if (log.exists()) {
                out.putNextEntry(new ZipEntry(log.getName()));
                byte[] data = new byte[1024];
                FileInputStream is = new FileInputStream(log);
                int read = is.read(data);
                while (read > -1) {
                    out.write(data, 0, read);
                    read = is.read(data);
                }
                out.closeEntry();
            }
        }
        out.putNextEntry(new ZipEntry(""ItemLog.txt""));
        out.write(si.getLog().getBytes(""UTF-8""));
        out.closeEntry();
        StringBuffer buff = new StringBuffer();
        buff.append(""Name              : "" + si.getName() + ""\r\n"");
        buff.append(""Start             : "" + si.getStart().toString() + ""\r\n"");
        buff.append(""Stop              : "" + si.getStop().toString() + ""\r\n"");
        buff.append(""Duration          : "" + si.getDuration() + ""\r\n"");
        buff.append(""Channel           : "" + si.getChannel() + ""\r\n"");
        buff.append(""Path Index        : "" + si.getCapturePathIndex() + ""\r\n"");
        buff.append(""Capture Type      : "" + si.getCapType() + ""\r\n"");
        buff.append(""Filename          : "" + si.getFileName() + ""\r\n"");
        buff.append(""File Pattern      : "" + si.getFilePattern() + ""\r\n"");
        buff.append(""Keep For          : "" + si.getKeepFor() + ""\r\n"");
        buff.append(""Post Task         : "" + si.getPostTask() + ""\r\n"");
        buff.append(""Post Task Enabled : "" + si.getPostTaskEnabled() + ""\r\n"");
        buff.append(""State             : "" + si.getState() + ""\r\n"");
        buff.append(""Status            : "" + si.getStatus() + ""\r\n"");
        buff.append(""Type              : "" + si.getType() + ""\r\n"");
        buff.append(""\r\nWarnings:\r\n"");
        Vector<String> warns = si.getWarnings();
        for (int x = 0; x < warns.size(); x++) {
            buff.append(warns.get(x) + ""\r\n"");
        }
        buff.append(""\r\n"");
        buff.append(""Log Files:\r\n"");
        Vector<String> logs = si.getLogFileNames();
        for (int x = 0; x < logs.size(); x++) {
            buff.append(logs.get(x) + ""\r\n"");
        }
        buff.append(""\r\n"");
        GuideItem item = si.getCreatedFrom();
        if (item != null) {
            buff.append(""Created From:\r\n"");
            buff.append(""Name     : "" + item.getName() + ""\r\n"");
            buff.append(""Start    : "" + item.getStart().toString() + ""\r\n"");
            buff.append(""Stop     : "" + item.getStop().toString() + ""\r\n"");
            buff.append(""Duration : "" + item.getDuration() + ""\r\n"");
            buff.append(""\r\n"");
        }
        HashMap<Date, SignalStatistic> signal = si.getSignalStatistics();
        if (signal.size() > 0) {
            buff.append(""Signal Statistics: (Locked, Strength, Quality)\r\n"");
            Date[] keys = signal.keySet().toArray(new Date[0]);
            for (int x = 0; x < signal.size(); x++) {
                SignalStatistic stat = signal.get(keys[x]);
                buff.append(keys[x].toString() + "" - "" + stat.getLocked() + "", "" + stat.getStrength() + "", "" + stat.getQuality() + ""\r\n"");
            }
            buff.append(""\r\n"");
        }
        out.putNextEntry(new ZipEntry(""ItemDetails.txt""));
        out.write(buff.toString().getBytes(""UTF-8""));
        out.closeEntry();
        out.flush();
        out.close();
        StringBuffer header = new StringBuffer();
        header.append(""HTTP/1.1 200 OK\n"");
        header.append(""Content-Type: application/zip\n"");
        header.append(""Content-Length: "" + bytesOut.size() + ""\n"");
        header.append(""Content-Disposition: attachment; filename=\""ScheduleErrorReport.zip\""\n"");
        DateFormat df = new SimpleDateFormat(""EEE, dd MMM yyyy hh:mm:ss 'GMT'"", new Locale(""En"", ""Us"", ""Unix""));
        header.append(""Last-Modified: "" + df.format(new Date()) + ""\n"");
        header.append(""\n"");
        outStream.write(header.toString().getBytes());
        ByteArrayInputStream zipStream = new ByteArrayInputStream(bytesOut.toByteArray());
        byte[] bytes = new byte[4096];
        int read = zipStream.read(bytes);
        while (read > -1) {
            outStream.write(bytes, 0, read);
            outStream.flush();
            read = zipStream.read(bytes);
        }
        return;
    }",0,0
"    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }","    @SuppressWarnings(""unchecked"")
    private static <T> T[] appendToArray(T[] listeners, T newElement) {
        int length = listeners.length;
        T[] ret = (T[]) java.lang.reflect.Array.newInstance(listeners.getClass().getComponentType(), length + 1);
        System.arraycopy(listeners, 0, ret, 0, length);
        ret[length] = newElement;
        return ret;
    }",0,0
"    @SuppressWarnings(""unchecked"")
    public <T> T[] toArray(T[] a) {
        if (a.length < size) {
            a = (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        }
        System.arraycopy(array, 0, a, 0, size);
        if (a.length > size) {
            a[size] = null;
        }
        return a;
    }","    public static double[][] transpose(double[][] matrix) {
        double[][] result = new double[matrix.length][matrix[0].length];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                result[i][j] = matrix[j][i];
            }
        }
        return result;
    }",0,0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int i = dirChooser.showOpenDialog(getMe());
            if (i == JFileChooser.APPROVE_OPTION) {
                importPathField.setText(dirChooser.getSelectedFile().toString());
            }
            load();
            selectAll();
        }","            public void actionPerformed(ActionEvent e) {
                String sql = ""update jadwalUjian set Semester='"" + FieldNama.getText() + ""',Tahun='"" + FieldTtl.getText() + ""',Waktu='"" + FieldJk.getText() + ""'where MP='"" + FieldNim.getText().trim() + ""'"";
                if (FieldNim.getText().trim().equals("""")) {
                    JOptionPane.showMessageDialog(frame, ""Nama Mata_Pelajaran Wajib di Isi..."", ""Simpan Data"", JOptionPane.WARNING_MESSAGE);
                    FieldNim.requestFocus();
                } else {
                    try {
                        Connection connection = DriverManager.getConnection(""jdbc:odbc:db_Sekolah"");
                        Statement statement = connection.createStatement();
                        statement.executeUpdate(sql);
                        statement.close();
                        connection.close();
                        FieldNim.setText("""");
                        FieldNama.setText("""");
                        FieldTtl.setText("""");
                        FieldJk.setText("""");
                        FieldNim.requestFocus();
                    } catch (Exception exc) {
                        System.err.println(sql);
                        System.err.println(""Error :"" + exc);
                    }
                }
            }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                ripperPathField.setText(dirChooser.getSelectedFile().toString());
            }
        }","        @Override
        public void actionPerformed(ActionEvent evt) {
            if (Desktop.isDesktopSupported()) {
                try {
                    URI uri = new URI(evt.getActionCommand());
                    Desktop.getDesktop().browse(uri);
                } catch (Exception e) {
                }
            }
        }",0,0
"    public static void main(String[] args) {
        System.out.println(""Chapter 2 example 4: Negative leading"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0204.pdf""));
            document.open();
            document.add(new Phrase(16, ""\n\n\n""));
            document.add(new Phrase(-16, ""Hello, this is a very long phrase to show you the somewhat odd effect of a negative leading. You can write from bottom to top. This is not fully supported. It's something between a feature and a bug.""));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int i = dirChooser.showOpenDialog(getMe());
            if (i == JFileChooser.APPROVE_OPTION) {
                importPathField.setText(dirChooser.getSelectedFile().toString());
            }
            load();
            selectAll();
        }",0,0
"    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""', 999, 999, 999 )"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"	public static void BubbleSortDouble2(double[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					double temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}","    protected static float[][] trans(float[][] a) {
        int am = a.length;
        int an = a[0].length;
        float[][] t = new float[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                t[j][i] = a[i][j];
            }
        }
        return t;
    }",0,0
"    private void loadTreeItemActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == loadTreeItem) {
            int returnVal = fc.showOpenDialog(Demarcations.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                treeFile = fc.getSelectedFile();
                if (!TreeFinder.verifyTreeFile(treeFile)) {
                    log.append(""That is not a valid tree file, please choose a valid newick tree file.\n"");
                    return;
                }
            } else {
                log.append(""Dialog cancelled by user. \n"");
                return;
            }
            String message = ""You must now choose the fasta file corresponding to the tree you just loaded, continue?"";
            int option = JOptionPane.showConfirmDialog(null, message);
            if (option != JOptionPane.YES_OPTION) {
                log.append(""Dialog cancelled by user."");
                return;
            }
            returnVal = fc.showOpenDialog(Demarcations.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                inputFile = fc.getSelectedFile();
                if (!BinningFasta.verifyInputFile(inputFile)) {
                    log.append(""That is not a valid fasta file, please choose a properly formatted fasta file.\n"");
                    return;
                }
                Thread thread = new Thread() {

                    public void run() {
                        runTree();
                    }
                };
                thread.start();
            } else {
                log.append(""Dialog Cancelled by hser.\n"");
            }
        }
    }","    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    public static <T> T[] union(final T[] array1, final T[] array2) {
        @SuppressWarnings(""unchecked"") final T[] newArray = (T[]) Array.newInstance(array1.getClass().getComponentType(), array1.length + array2.length);
        System.arraycopy(array1, 0, newArray, 0, array1.length);
        System.arraycopy(array2, 0, newArray, array1.length, array2.length);
        return newArray;
    }","    boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }",0,0
"	public static void BubbleSortShort2(short[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					short temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}","    public void testEnd() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""spiritbot\\W"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""spiritbot: how are you doing"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static double[][] transposed(double[][] matrix) {
        int row = matrix[0].length;
        int line = matrix.length;
        double[][] ans = new double[row][line];
        for (int i = 0; i < line; i++) {
            for (int j = 0; j < row; j++) {
                ans[j][i] = matrix[i][j];
            }
        }
        return ans;
    }",0,0
"    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }","    public static double[][] invert(double[][] matrix) {
        double[][] result = new double[matrix[0].length][matrix.length];
        for (int row = 0; row < matrix.length; row++) for (int col = 0; col < matrix[row].length; col++) result[col][row] = result[row][col];
        return result;
    }",0,0
"    public static LImage[][] reversalXandY(final LImage[][] array) {
        int col = array[0].length;
        int row = array.length;
        LImage[][] result = new LImage[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","    @SuppressWarnings(""unchecked"")
    public <T> T[] toArray(T[] a) {
        if (a.length < size) a = (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size) a[size] = null;
        return a;
    }",0,0
"    public static Object[] append(Object[] source, Object obj) {
        Object[] copy = (Object[]) Array.newInstance(source.getClass().getComponentType(), source.length + 1);
        System.arraycopy(source, 0, copy, 0, source.length);
        copy[source.length] = obj;
        return copy;
    }","	public FTPClient sample1a(String server, int port, String username, String password) throws SocketException, IOException {
		FTPClient ftpClient = new FTPClient();
		ftpClient.connect(server, port);
		ftpClient.login(username, password);
		return ftpClient;
	}",0,0
"    public static void del(File file) {
        if (file.isDirectory()) {
            for (File child : file.listFiles()) {
                del(child);
            }
        }
        file.delete();
    }","    public static void browse(String urlStr) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(urlStr));
            } catch (Exception e) {
            }
        } else {
            JOptionPane.showMessageDialog(MainWindow.mw, ""Cannot open the URL. Kindly open this url\n"" + ""from your browser:\n"" + urlStr);
        }
    }",0,0
"    private void run() {
        setMessage(""Physical Likleihood Computation has Started"");
        setProgress(10);
        Chromosome chr = Chromosome.getInstance(probeMap.getLinkageGroup());
        int probe_count = probeMap.getProbes().size();
        int clone_count = chr.getClones().size();
        int ch_length = chr.getLength();
        byte[][] data = chr.getHybridizationData(probeMap.getProbes());
        double probe_false_pos = chr.getProbFalsePos();
        double probe_false_neg = chr.getProbFalseNeg();
        int clone_length = GWData.getInstance().getCloneLength();
        int[] probeOrder = ArrayUtils.toPrimitive(chr.getProbeOrder(probeMap.getProbes()).toArray(new Integer[0]));
        int[][] joint = new int[probe_count][probe_count];
        for (int probeIndex1 = 0; probeIndex1 < probe_count; probeIndex1++) {
            for (int probeIndex2 = probeIndex1 + 1; probeIndex2 < probe_count; probeIndex2++) {
                for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
                    if ((data[cloneIndex][probeIndex1] == 1) && (data[cloneIndex][probeIndex2] == 1)) {
                        joint[probeIndex1][probeIndex2]++;
                    }
                }
                joint[probeIndex2][probeIndex1] = joint[probeIndex1][probeIndex2];
            }
        }
        double[][] aa = new double[clone_count][probe_count + 1];
        for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
            for (int probeIndex = 0; probeIndex < probe_count + 1; probeIndex++) {
                if (probeIndex == 0) {
                    aa[cloneIndex][probeIndex] = 0.0;
                } else if (data[cloneIndex][probeIndex - 1] == 0) {
                    aa[cloneIndex][probeIndex] = probe_false_neg / (1 - probe_false_pos);
                } else {
                    aa[cloneIndex][probeIndex] = (1 - probe_false_neg) / probe_false_pos;
                }
            }
        }
        int P = 0;
        for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
            for (int probeIndex = 0; probeIndex < probe_count; probeIndex++) {
                if (data[cloneIndex][probeIndex] == 1) {
                    P++;
                }
            }
        }
        double const1 = clone_count * Math.log(ch_length - clone_length) - P * Math.log(probe_false_pos / (1 - probe_false_pos)) - probe_count * clone_count * Math.log(1 - probe_false_pos);
        int gap = ch_length - (probe_count * clone_length);
        setMessage(""Computing initial probe spacings"");
        setProgress(30);
        double[] y = PLHoodHelper.Initial_Ys(probeOrder, probe_count, clone_count, ch_length, clone_length, gap, joint);
        double[] R = PLHoodHelper.getR(ch_length, clone_length, probe_count, clone_count, aa, probeOrder);
        setMessage(""Running Steepest Descent Algorithm"");
        setProgress(70);
        logLikelihood = -PLHoodHelper.Conj(y, probe_count, clone_count, aa, probeOrder, clone_length, const1, R);
        probeSpacing = Arrays.asList(ArrayUtils.toObject(y));
        setMessage(""The Physical Log-likelihood is "" + logLikelihood);
        setProgress(100);
    }","    @SuppressWarnings(""unchecked"")
    public <T> T[] toArray(T[] a) {
        if (a.length < size) {
            a = (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        }
        System.arraycopy(array, 0, a, 0, size);
        if (a.length > size) {
            a[size] = null;
        }
        return a;
    }",0,0
"    private static boolean deleteFile(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                deleteFile(child);
            }
        }
        return resource.delete();
    }","    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }",0,0
"    public void testEnd() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""spiritbot\\W"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""spiritbot: how are you doing"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }","    @Override
    public void mouseClicked(MouseEvent e) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(this.url));
            } catch (Exception e1) {
                JOptionPane.showMessageDialog(this, ""Can not open website because "" + e1.getMessage(), ""iGoSyncDocs"", JOptionPane.ERROR_MESSAGE);
            }
        }
    }",0,0
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    private static Object resizeArray(final Object oldArray, final int newSize) {
        int oldSize = java.lang.reflect.Array.getLength(oldArray);
        Class elementType = oldArray.getClass().getComponentType();
        Object newArray = java.lang.reflect.Array.newInstance(elementType, newSize);
        int preserveLength = Math.min(oldSize, newSize);
        if (preserveLength > 0) System.arraycopy(oldArray, 0, newArray, 0, preserveLength);
        return newArray;
    }",0,0
"    public void playSound() {
        try {
            URL url = this.getClass().getClassLoader().getResource(""bomb.wav"");
            AudioInputStream audioIn = AudioSystem.getAudioInputStream(url);
            Clip clip = AudioSystem.getClip();
            clip.open(audioIn);
            clip.start();
        } catch (UnsupportedAudioFileException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (LineUnavailableException e) {
            e.printStackTrace();
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    private Object[][] transform(Object[][] src) {
        int col = src.length;
        int row = src[0].length;
        Object[][] dest = new Object[row][col];
        for (int i = 0; i < col; i++) {
            for (int j = 0; j < row; j++) {
                dest[j][i] = src[i][j];
            }
        }
        return dest;
    }","	public static File chooseFileOpen(JFrame frame) {
		File retval;

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(false);

		//Show dialog and wait for user input
		int status = fc.showOpenDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFile();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}",0,0
"    public void elimina(Cliente cli) throws errorSQL, errorConexionBD {
        System.out.println(""GestorCliente.elimina()"");
        int id = cli.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM cliente WHERE cod_cliente ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            sql = ""DELETE FROM usuario WHERE cod_usuario ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            sql = ""DELETE FROM persona WHERE id ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        }
    }","    static boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }",0,0
"    public float[][] transposeMatrix(float[][] mat) {
        float[][] transmat = createNullMatrix(mat[0].length, mat.length);
        for (int i = 0; i < mat.length; i++) {
            for (int j = 0; j < mat[i].length; j++) {
                transmat[j][i] = mat[i][j];
            }
        }
        return transmat;
    }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"    boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }","    public static double[][] transpose(double[][] mat) {
        double[][] a = new double[mat[0].length][mat.length];
        for (int i = 0; i < mat[0].length; i++) {
            for (int j = 0; j < mat.length; j++) {
                a[i][j] = mat[j][i];
            }
        }
        return a;
    }",0,0
"    public Object[] toArray(Object[] a) {
        int size = size();
        if (a.length < size) {
            a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        }
        System.arraycopy(toArray(), 0, a, 0, size);
        if (a.length > size) {
            a[size] = null;
        }
        return a;
    }","    public static double[][] transpose(final double[][] m) {
        final double[][] mt = new double[m[0].length][m.length];
        for (int i = 0; i < mt.length; i++) {
            for (int j = 0; j < mt[i].length; j++) {
                mt[i][j] = m[j][i];
            }
        }
        return mt;
    }",0,0
"    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }","    public static double[][] transpose(double[][] matrix) {
        double[][] transposed = new double[matrix[0].length][matrix.length];
        int mLength = matrix.length, m0Length = matrix[0].length;
        for (int i = 0; i < mLength; i++) {
            for (int j = 0; j < m0Length; j++) {
                transposed[j][i] = matrix[i][j];
            }
        }
        return transposed;
    }",0,0
"    public ComplexMatrix hermitianAdjoint() {
        final double arrayRe[][] = new double[numCols][numRows];
        final double arrayIm[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            arrayRe[0][i] = matrixRe[i][0];
            arrayIm[0][i] = -matrixIm[i][0];
            for (j = 1; j < numCols; j++) {
                arrayRe[j][i] = matrixRe[i][j];
                arrayIm[j][i] = -matrixIm[i][j];
            }
        }
        return new ComplexMatrix(arrayRe, arrayIm);
    }","    public static Object cut(Object obj, int size) {
        int j;
        if ((j = Array.getLength(obj)) == 1) {
            return Array.newInstance(obj.getClass().getComponentType(), 0);
        }
        int k;
        if ((k = j - size - 1) > 0) {
            System.arraycopy(obj, size + 1, obj, size, k);
        }
        j--;
        Object obj1 = Array.newInstance(obj.getClass().getComponentType(), j);
        System.arraycopy(obj, 0, obj1, 0, j);
        return obj1;
    }",0,0
"    public RobotList<Location> sort_decr_Location(RobotList<Location> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i)));
            }
        } else if (field.equals(""x"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).x);
            }
        } else if (field.equals(""y"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).y);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value < enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Location> new_location_list = new RobotList<Location>(Location.class);
        for (int i = 0; i < length; i++) {
            new_location_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_location_list;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 4) {
            System.out.println(""usage: java msgmultisend <to> <from> <smtp> true|false"");
            return;
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Multipart Test"");
            msg.setSentDate(new Date());
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setText(msgText2, ""us-ascii"");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        }
    }","    public void transpose() {
        for (int i = 0; i < ndims; i++) {
            for (int j = i + 1; j < ndims; j++) {
                g[j][i] = g[i][j];
            }
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    static long seqFib(int n) {
        if (n <= 1) return n; else return seqFib(n - 1) + seqFib(n - 2);
    }","    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }","    private void openSaveFileActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == openSaveFile) {
            int returnVal = fc.showOpenDialog(ParameterSolutions.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File savedFile = fc.getSelectedFile();
                log.append(""Opening: "" + savedFile.getName() + ""\n"");
                String name = savedFile.getName();
                if (!savedFile.canRead() || !((name.substring(name.length() - 4, name.length()).equals("".cpm""))) || !recoverSavedData(savedFile)) {
                    log.append(""That is not a valid saved file, please choose"" + "" a file previously saved in this program.\n"");
                }
            } else {
                log.append(""Dialog Cancelled by User.\n"");
            }
        }
    }",0,0
"    public Object arrayGrow(Object a) {
        Class cl = a.getClass();
        if (!cl.isArray()) return null;
        Class componentType = a.getClass().getComponentType();
        int length = Array.getLength(a);
        int newLength = length + 1;
        Object newArray = Array.newInstance(componentType, newLength);
        System.arraycopy(a, 0, newArray, 0, length);
        return newArray;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    public static final double[][] transpose(double[][] a) {
        int am = a.length;
        int an = a[0].length;
        double[][] result = new double[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                result[j][i] = a[i][j];
            }
        }
        return result;
    }","    static long seqFib(int n) {
        if (n <= 1) return n; else return seqFib(n - 1) + seqFib(n - 2);
    }",0,0
"    private static String sort(final String item) {
        final char[] chars = item.toCharArray();
        for (int i = 1; i < chars.length; i++) {
            for (int j = 0; j < chars.length - 1; j++) {
                if (chars[j] > chars[j + 1]) {
                    final char temp = chars[j];
                    chars[j] = chars[j + 1];
                    chars[j + 1] = temp;
                }
            }
        }
        return String.valueOf(chars);
    }","    public static void main(String[] args) {
        System.out.println(""Chapter 6 example 2: Adding a Gif, Jpeg and Png-file using filenames"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0603.pdf""));
            HtmlWriter writer = HtmlWriter.getInstance(document, new FileOutputStream(""Chap0603.html""));
            writer.setImagepath(""../../images/kerstmis/"");
            document.open();
            Image jpg = Image.getInstance(""raf.jpg"");
            jpg.scalePercent(50);
            document.add(jpg);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0,0
"    public static final int binarySearch(Object[] a, Object key, Comparator cp, int length) {
        int x1 = 0;
        int x2 = length;
        int i = x2 / 2, c;
        while (x1 < x2) {
            c = cp.compare(a[i], key);
            if (c == 0) {
                return i;
            } else if (c < 0) {
                x1 = i + 1;
            } else {
                x2 = i;
            }
            i = x1 + (x2 - x1) / 2;
        }
        return -1 * (i + 1);
    }","    static int fibo(int n) {
        if (n < 2) {
            return 1;
        } else {
            return fibo(n - 1) + fibo(n - 2);
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static double[][] calcTranspose(double[][] mat) {
        double[][] transpose = new double[mat[0].length][mat.length];
        for (int a = 0; a < transpose.length; a++) {
            for (int b = 0; b < transpose[0].length; b++) {
                transpose[a][b] = mat[b][a];
            }
        }
        return transpose;
    }",0,0
"    private void goToWebsite(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }","    public RobotList<Location> sort_decr_Location(RobotList<Location> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i)));
            }
        } else if (field.equals(""x"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).x);
            }
        } else if (field.equals(""y"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).y);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value < enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Location> new_location_list = new RobotList<Location>(Location.class);
        for (int i = 0; i < length; i++) {
            new_location_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_location_list;
    }",0,0
"    protected Object growIndexedProperty(String name, Object indexedProperty, int index) {
        if (indexedProperty instanceof List) {
            List list = (List) indexedProperty;
            while (index >= list.size()) {
                list.add(null);
            }
        }
        if ((indexedProperty.getClass().isArray())) {
            int length = Array.getLength(indexedProperty);
            if (index >= length) {
                Class componentType = indexedProperty.getClass().getComponentType();
                Object newArray = Array.newInstance(componentType, (index + 1));
                System.arraycopy(indexedProperty, 0, newArray, 0, length);
                indexedProperty = newArray;
                set(name, indexedProperty);
                int newLength = Array.getLength(indexedProperty);
                for (int i = length; i < newLength; i++) {
                    Array.set(indexedProperty, i, createProperty(name + ""["" + i + ""]"", componentType));
                }
            }
        }
        return indexedProperty;
    }","    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }",0,0
"    public static int[][] reversalXandY(final int[][] array) {
        int col = array[0].length;
        int row = array.length;
        int[][] result = new int[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"    private void openSaveFileActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == openSaveFile) {
            int returnVal = fc.showOpenDialog(ParameterSolutions.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File savedFile = fc.getSelectedFile();
                log.append(""Opening: "" + savedFile.getName() + ""\n"");
                String name = savedFile.getName();
                if (!savedFile.canRead() || !((name.substring(name.length() - 4, name.length()).equals("".cpm""))) || !recoverSavedData(savedFile)) {
                    log.append(""That is not a valid saved file, please choose"" + "" a file previously saved in this program.\n"");
                }
            } else {
                log.append(""Dialog Cancelled by User.\n"");
            }
        }
    }","    public static LImage[][] reversalXandY(final LImage[][] array) {
        int col = array[0].length;
        int row = array.length;
        LImage[][] result = new LImage[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }",0,0
"    boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    protected static int[] sort(int[] arr) {
        for (int i = arr.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        return arr;
    }","    private double[][] transpose(double[][] in) {
        double[][] out = new double[in[0].length][in.length];
        for (int r = 0; r < in.length; r++) {
            for (int c = 0; c < in[0].length; c++) {
                out[c][r] = in[r][c];
            }
        }
        return out;
    }",0,0
"    public static final double[][] transpose(double[][] a) {
        int am = a.length;
        int an = a[0].length;
        double[][] result = new double[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                result[j][i] = a[i][j];
            }
        }
        return result;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public static double[][] transpose(double[][] doubleBox) {
        YeriDebug.ASSERT(CollectionsToolkit.isRectangular(doubleBox));
        double[][] returnBox = new double[doubleBox[0].length][doubleBox.length];
        for (int i = 0; i < doubleBox.length; i++) {
            for (int j = 0; j < doubleBox[i].length; j++) {
                returnBox[j][i] = doubleBox[i][j];
            }
        }
        return returnBox;
    }","	public static File chooseFileSave(JFrame frame) {
		File retval;

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(false);

		//Show dialog and wait for user input
		int status = fc.showSaveDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFile();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}",0,0
"    public void hyperlinkUpdate(HyperlinkEvent event) {
        URL url = event.getURL();
        if (event.getEventType() == HyperlinkEvent.EventType.ENTERED && !event.getDescription().equals(""login"") && !event.getDescription().startsWith(""copyUrl:"")) {
            urlsEditorPane.setToolTipText(url.toString());
        } else if (event.getEventType() == HyperlinkEvent.EventType.EXITED) {
            urlsEditorPane.setToolTipText(null);
        } else if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            if (event.getDescription().equals(""login"")) {
                if (loginWindow == null) {
                    loginWindow = new LoginWindow(extension, component, this, keys, reposPath, configManager);
                } else {
                    loginWindow.setVisible(true);
                }
            } else if (event.getDescription().startsWith(""copyUrl:"")) {
                String toCopy = event.getDescription().replaceFirst(""copyUrl:"", """");
                StringSelection data = new StringSelection(toCopy);
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(data, data);
            } else {
                String browser = configManager.getBrowser();
                if (!Desktop.isDesktopSupported()) {
                    try {
                        if (!browser.equals("""")) {
                            Runtime.getRuntime().exec(browser + "" "" + url.toString());
                        } else {
                            Runtime.getRuntime().exec(""firefox "" + url.toString());
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ""Unable to find a web browser, please set up one on settings window"", ""Web browser error"", JOptionPane.WARNING_MESSAGE);
                    }
                }
                try {
                    Desktop desktop = Desktop.getDesktop();
                    URI uri = new URI(url.toString());
                    desktop.browse(uri);
                } catch (Exception e) {
                    return;
                }
            }
        }
    }","    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }",0,0
"    public static void main(String[] args) {
        System.out.println(""Chapter 6 example 6: Absolute Positioning of an Image"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0606.pdf""));
            document.open();
            Image png = Image.getInstance(""hitchcock.png"");
            png.setAbsolutePosition(171, 250);
            document.add(png);
            png.setAbsolutePosition(342, 500);
            document.add(png);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public PNMatrix transpose() {
        PNMatrix X = new PNMatrix(n, m);
        int[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    private void OpenGraph() {
        JFileChooser chooser = new JFileChooser(DirG);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        ExtensionFileFilter filter = new ExtensionFileFilter(""grf"", ""GRAPH representation files (*.grf)"");
        chooser.setFileFilter(filter);
        if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;
        DirG = chooser.getSelectedFile().getParent();
        PathG = chooser.getSelectedFile().getPath();
        TabG = chooser.getSelectedFile().getName();
        InitGraph();
    }","    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    public static Object cut(Object src, int position) {
        int size = Array.getLength(src);
        if (size == 1) {
            return Array.newInstance(src.getClass().getComponentType(), 0);
        }
        int numMoved = size - position - 1;
        if (numMoved > 0) {
            System.arraycopy(src, position + 1, src, position, numMoved);
        }
        size--;
        Object dest = Array.newInstance(src.getClass().getComponentType(), size);
        System.arraycopy(src, 0, dest, 0, size);
        return dest;
    }","    public static int[][] reversalXandY(final int[][] array) {
        int col = array[0].length;
        int row = array.length;
        int[][] result = new int[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }",0,0
"    public DoubleThresholdGenerator randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            double tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    public Node eval(Node startAt) throws Exception {
        startAt.isGoodArgsCnt(4);
        Node xnode = startAt.getSubNode(3, Node.VTYPE_STRINGS);
        Node ynode = Node.createEmptyList();
        String regex = startAt.getSubNode(1, Node.VTYPE_STRINGS).getString();
        startAt.requirePCode(2, PCoder.PC_IN);
        try {
            Pattern pattern = Pattern.compile(regex);
            Matcher matcher = pattern.matcher(xnode.getString());
            while (matcher.find()) {
                ynode.addElement(Node.createEmptyList().append(new Node(matcher.start())).append(new Node(matcher.end() - matcher.start())));
            }
        } catch (Exception ex) {
            if (Interpreter.isDebugMode()) {
                ex.printStackTrace();
            }
            throw new InterpreterException(StdErrors.extend(StdErrors.Regex_error, regex));
        }
        return ynode;
    }",0,0
"    private static boolean deleteFile(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                deleteFile(child);
            }
        }
        return resource.delete();
    }","    public static double[][] transpose(double[][] mat) {
        double[][] a = new double[mat[0].length][mat.length];
        for (int i = 0; i < mat[0].length; i++) {
            for (int j = 0; j < mat.length; j++) {
                a[i][j] = mat[j][i];
            }
        }
        return a;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    protected static int[] sort(int[] arr) {
        for (int i = arr.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        return arr;
    }",0,0
"    int seqFib(int n) {
        if (n <= 1) return n; else return seqFib(n - 1) + seqFib(n - 2);
    }","    static void useFind() {
        Console c = System.console();
        if (c == null) {
            System.err.println(""No console"");
            System.exit(1);
        }
        while (true) {
            Pattern p = Pattern.compile(c.readLine(""%n find(), Enter your regex:""));
            Matcher m = p.matcher(c.readLine(""Enter input string to search:""));
            boolean found = false;
            while (m.find()) {
                c.printf(""Found the text \""%s\"" starting at %d and ending at %d.%n"", m.group(), m.start(), m.end());
                found = true;
            }
            if (!found) {
                c.format(""No matcher found.%n"");
            }
        }
    }",0,0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                generellPathField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    private static boolean deleteFile(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                deleteFile(child);
            }
        }
        return resource.delete();
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static double[][] calcTranspose(double[][] mat) {
        double[][] transpose = new double[mat[0].length][mat.length];
        for (int a = 0; a < transpose.length; a++) {
            for (int b = 0; b < transpose[0].length; b++) {
                transpose[a][b] = mat[b][a];
            }
        }
        return transpose;
    }",0,0
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public static void bubbleSort(Auto[] xs) {
        boolean unsorted = true;
        while (unsorted) {
            unsorted = false;
            for (int i = 0; i < xs.length - 1; i++) {
                if (!(xs[i].getPreis() >= xs[i + 1].getPreis())) {
                    Auto dummy = xs[i];
                    xs[i] = xs[i + 1];
                    xs[i + 1] = dummy;
                    unsorted = true;
                }
            }
        }
    }",0,0
"    public static void main(String[] args) {
        System.out.println(""Chapter 1 example 3: PageSize"");
        Document document = new Document(PageSize.A4.rotate());
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0103.pdf""));
            document.open();
            for (int i = 0; i < 20; i++) {
                document.add(new Phrase(""Hello World, Hello Sun, Hello Moon, Hello Stars, Hello Sea, Hello Land, Hello People. ""));
            }
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public void elimina(Cliente cli) throws errorSQL, errorConexionBD {
        System.out.println(""GestorCliente.elimina()"");
        int id = cli.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM cliente WHERE cod_cliente ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            sql = ""DELETE FROM persona WHERE id ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt.executeUpdate(sql);
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        }
    }",0,0
"    public static XMLShowInfo NzbSearch(TVRageShowInfo tvrage, XMLShowInfo xmldata, int latestOrNext) {
        String newzbin_query = """", csvData = """", hellaQueueDir = """", newzbinUsr = """", newzbinPass = """";
        String[] tmp;
        DateFormat tvRageDateFormat = new SimpleDateFormat(""MMM/dd/yyyy"");
        DateFormat tvRageDateFormatFix = new SimpleDateFormat(""yyyy-MM-dd"");
        newzbin_query = ""?q="" + xmldata.showName + ""+"";
        if (latestOrNext == 0) {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.latestSeasonNum + ""x"" + tvrage.latestEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.latestSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.latestAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.latestTitle;
        } else {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.nextSeasonNum + ""x"" + tvrage.nextEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.nextSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.nextAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.nextTitle;
        }
        newzbin_query += ""&searchaction=Search"";
        newzbin_query += ""&fpn=p"";
        newzbin_query += ""&category=8category=11"";
        newzbin_query += ""&area=-1"";
        newzbin_query += ""&u_nfo_posts_only=0"";
        newzbin_query += ""&u_url_posts_only=0"";
        newzbin_query += ""&u_comment_posts_only=0"";
        newzbin_query += ""&u_v3_retention=1209600"";
        newzbin_query += ""&ps_rb_language="" + xmldata.language;
        newzbin_query += ""&sort=ps_edit_date"";
        newzbin_query += ""&order=desc"";
        newzbin_query += ""&areadone=-1"";
        newzbin_query += ""&feed=csv"";
        newzbin_query += ""&ps_rb_video_format="" + xmldata.format;
        newzbin_query = newzbin_query.replaceAll("" "", ""%20"");
        System.out.println(""http://v3.newzbin.com/search/"" + newzbin_query);
        try {
            URL url = new URL(""http://v3.newzbin.com/search/"" + newzbin_query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            csvData = in.readLine();
            if (csvData != null) {
                JavaNZB.searchCount++;
                if (searchCount == 6) {
                    searchCount = 0;
                    System.out.println(""Sleeping for 60 seconds"");
                    try {
                        Thread.sleep(60000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                tmp = csvData.split("","");
                tmp[2] = tmp[2].substring(1, tmp[2].length() - 1);
                tmp[3] = tmp[3].substring(1, tmp[3].length() - 1);
                Pattern p = Pattern.compile(""[\\\\</:>?\\[|\\]\""]"");
                Matcher matcher = p.matcher(tmp[3]);
                tmp[3] = matcher.replaceAll("" "");
                tmp[3] = tmp[3].replaceAll(""&"", ""and"");
                URLConnection urlConn;
                DataOutputStream printout;
                url = new URL(""http://v3.newzbin.com/api/dnzb/"");
                urlConn = url.openConnection();
                urlConn.setDoInput(true);
                urlConn.setDoOutput(true);
                urlConn.setUseCaches(false);
                urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                printout = new DataOutputStream(urlConn.getOutputStream());
                String content = ""username="" + JavaNZB.newzbinUsr + ""&password="" + JavaNZB.newzbinPass + ""&reportid="" + tmp[2];
                printout.writeBytes(content);
                printout.flush();
                printout.close();
                BufferedReader nzbInput = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
                String format = """";
                if (xmldata.format.equals(""17"")) format = "" Xvid"";
                if (xmldata.format.equals(""131072"")) format = "" x264"";
                if (xmldata.format.equals(""2"")) format = "" DVD"";
                if (xmldata.format.equals(""4"")) format = "" SVCD"";
                if (xmldata.format.equals(""8"")) format = "" VCD"";
                if (xmldata.format.equals(""32"")) format = "" HDts"";
                if (xmldata.format.equals(""64"")) format = "" WMV"";
                if (xmldata.format.equals(""128"")) format = "" Other"";
                if (xmldata.format.equals(""256"")) format = "" ratDVD"";
                if (xmldata.format.equals(""512"")) format = "" iPod"";
                if (xmldata.format.equals(""1024"")) format = "" PSP"";
                File f = new File(JavaNZB.hellaQueueDir, tmp[3] + format + "".nzb"");
                BufferedWriter out = new BufferedWriter(new FileWriter(f));
                String str;
                System.out.println(""--Downloading "" + tmp[3] + format + "".nzb"" + "" to queue directory--"");
                while (null != ((str = nzbInput.readLine()))) out.write(str);
                nzbInput.close();
                out.close();
                if (latestOrNext == 0) {
                    xmldata.episode = tvrage.latestEpisodeNum;
                    xmldata.season = tvrage.latestSeasonNum;
                } else {
                    xmldata.episode = tvrage.nextEpisodeNum;
                    xmldata.season = tvrage.nextSeasonNum;
                }
            } else System.out.println(""No new episode posted"");
            System.out.println();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
            System.out.println(""IO Exception from NzbSearch"");
        }
        return xmldata;
    }","    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public int fibonacci(int num) {
        if (num == 0) {
            return 0;
        } else if (num == 1) {
            return 1;
        } else {
            processor.getAlgData().setRecursiveCalls(processor.getAlgData().getRecursiveCalls() + 2);
            return fibonacci(num - 1) + fibonacci(num - 2);
        }
    }",0,0
"    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    String[][] transpose(String[][] data) {
        int r = data.length;
        int c = data[0].length;
        String matrix[][] = new String[c][r];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                matrix[j][i] = data[i][j];
            }
        }
        return matrix;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    public RobotList<Location> sort_decr_Location(RobotList<Location> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i)));
            }
        } else if (field.equals(""x"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).x);
            }
        } else if (field.equals(""y"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).y);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value < enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Location> new_location_list = new RobotList<Location>(Location.class);
        for (int i = 0; i < length; i++) {
            new_location_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_location_list;
    }","    public static final Object[][] transpose(Object[][] a) {
        int am = a.length;
        int an = a[0].length;
        Object[][] result = new Object[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                result[j][i] = a[i][j];
            }
        }
        return result;
    }",0,0
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public RobotList<Enemy> sort_incr_Enemy(RobotList<Enemy> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i).location));
            }
        } else if (field.equals(""health"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).health);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value > enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Enemy> new_enemy_list = new RobotList<Enemy>(Enemy.class);
        for (int i = 0; i < length; i++) {
            new_enemy_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_enemy_list;
    }",0,0
"    private void projlblMouseClicked(java.awt.event.MouseEvent evt) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(""http://sourceforge.net/projects/w2sc/""));
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        }
    }","    public static int[][] reversalXandY(final int[][] array) {
        int col = array[0].length;
        int row = array.length;
        int[][] result = new int[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }",0,0
"    private static void browseHelp() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(new URI(TargetedProjectionPursuit.HELP_URL));
            } catch (Exception e) {
            }
        } else {
        }
    }","    public static void main(String[] args) {
        System.out.println(""Chapter 13: example VPPageLayout"");
        System.out.println(""-> Creates a PDF file with multiple pages"");
        System.out.println(""   but different layout preferences."");
        System.out.println(""-> jars needed: iText.jar"");
        System.out.println(""-> files generated in /results subdirectory:"");
        System.out.println(""   single_page.pdf"");
        System.out.println(""   one_column.pdf"");
        System.out.println(""   two_column_left.pdf"");
        System.out.println(""   two_column_right.pdf"");
        System.out.println(""   two_page_left.pdf"");
        System.out.println(""   two_page_right.pdf"");
        Document document = new Document();
        try {
            PdfWriter writer1 = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter13/single_page.pdf""));
            writer1.setViewerPreferences(PdfWriter.PageLayoutSinglePage);
            PdfWriter writer2 = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter13/one_column.pdf""));
            writer2.setViewerPreferences(PdfWriter.PageLayoutOneColumn);
            PdfWriter writer3 = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter13/two_column_left.pdf""));
            writer3.setViewerPreferences(PdfWriter.PageLayoutTwoColumnLeft);
            PdfWriter writer4 = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter13/two_column_right.pdf""));
            writer4.setViewerPreferences(PdfWriter.PageLayoutTwoColumnRight);
            PdfWriter writer5 = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter13/two_page_left.pdf""));
            writer5.setPdfVersion(PdfWriter.VERSION_1_5);
            writer5.setViewerPreferences(PdfWriter.PageLayoutTwoPageLeft);
            PdfWriter writer6 = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapter13/two_page_right.pdf""));
            writer6.setPdfVersion(PdfWriter.VERSION_1_5);
            writer6.setViewerPreferences(PdfWriter.PageLayoutTwoPageRight);
            document.open();
            Paragraph hello = new Paragraph(""(English:) hello, "" + ""(Esperanto:) he, alo, saluton, (Latin:) heu, ave, "" + ""(French:) allô, (Italian:) ciao, (German:) hallo, he, heda, holla, "" + ""(Portuguese:) alô, olá, hei, psiu, bom día, (Dutch:) hallo, dag, "" + ""(Spanish:) ola, eh, (Catalan:) au, bah, eh, ep, "" + ""(Swedish:) hej, hejsan(Danish:) hallo, dav, davs, goddag, hej, "" + ""(Norwegian:) hei; morn, (Papiamento:) halo; hallo; kí tal, "" + ""(Faeroese:) halló, hoyr, (Turkish:) alo, merhaba, (Albanian:) tungjatjeta"");
            document.add(new Paragraph(""1. To the Universe:""));
            document.add(hello);
            document.add(new Paragraph(""2. to the World:""));
            document.add(hello);
            document.add(new Paragraph(""3. to the Sun:""));
            document.add(hello);
            document.add(new Paragraph(""4. to the Moon:""));
            document.add(hello);
            document.add(new Paragraph(""5. to the Stars:""));
            document.add(hello);
            document.newPage();
            document.add(new Paragraph(""6. To the People:""));
            document.add(hello);
            document.add(new Paragraph(""7. to mothers and fathers:""));
            document.add(hello);
            document.add(new Paragraph(""8. to brothers and sisters:""));
            document.add(hello);
            document.add(new Paragraph(""9. to wives and husbands:""));
            document.add(hello);
            document.add(new Paragraph(""10. to sons and daughters:""));
            document.add(hello);
            document.add(new Paragraph(""11. to complete strangers:""));
            document.add(hello);
            document.newPage();
            document.add(new Paragraph(""12. To the Animals:""));
            document.add(hello);
            document.add(new Paragraph(""13. o cats and dogs:""));
            document.add(hello);
            document.add(new Paragraph(""14. to birds and bees:""));
            document.add(hello);
            document.add(new Paragraph(""15. to farm animals and wild animals:""));
            document.add(hello);
            document.add(new Paragraph(""16. to bugs and beatles:""));
            document.add(hello);
            document.add(new Paragraph(""17. to fish and shellfish:""));
            document.add(hello);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0,0
"    private byte[] showScanResult(HTTPurl urlData) throws Exception {
        int freq = 0;
        int band = 0;
        try {
            freq = Integer.parseInt(urlData.getParameter(""freq""));
            band = Integer.parseInt(urlData.getParameter(""band""));
        } catch (Exception e) {
            throw new Exception(""Freq or Band not valid: "" + e.toString());
        }
        PageTemplate template = new PageTemplate(store.getProperty(""path.template"") + File.separator + ""channel-scanresult.html"");
        CaptureDeviceList devList = CaptureDeviceList.getInstance();
        if (devList.getActiveDeviceCount() > 0) {
            template.replaceAll(""$scanresult"", ""Can not scan channels while captures are active!"");
            return template.getPageBytes();
        }
        if (devList.getDeviceCount() == 0) {
            template.replaceAll(""$scanresult"", ""No Devices Available!"");
            return template.getPageBytes();
        }
        String name = urlData.getParameter(""name"");
        StringBuffer buff = new StringBuffer(1024);
        buff.append(""<form action='/servlet/"" + urlData.getServletClass() + ""' method='POST' accept-charset=\""UTF-8\"">\n"");
        buff.append(""<input type='hidden' name='action' value='05'>\n"");
        buff.append(""<table class='channelScanResult'>\n"");
        buff.append(""<tr class='scanChannelHeading'>"");
        buff.append(""<td class='scanChannelHeadingDataName'>"" + name + ""</td>"");
        buff.append(""<td class='scanChannelHeadingData'>Program</td>"");
        buff.append(""<td class='scanChannelHeadingData'>Video</td>"");
        buff.append(""<td class='scanChannelHeadingData'>Audio</td>"");
        buff.append(""<td class='scanChannelHeadingData'>Add</td>"");
        buff.append(""</tr>\n"");
        boolean testMode = ""1"".equals(store.getProperty(""tools.testmode""));
        CaptureDevice cap = (CaptureDevice) devList.getDevice(0);
        Runtime runner = Runtime.getRuntime();
        String[] com = null;
        if (testMode == true) {
            String scanCommand = ""win32/scan.exe -test"";
            System.out.println(""Running channel scan command: "" + scanCommand);
            com = new String[2];
            com[0] = ""win32/scan.exe"";
            com[1] = ""-test"";
        } else {
            String scanCommand = ""win32/scan.exe "" + freq + "" "" + band + "" \"""" + cap.getID() + ""\"""";
            System.out.println(""Running channel scan command: "" + scanCommand);
            com = new String[4];
            com[0] = ""win32/scan.exe"";
            com[1] = new Integer(freq).toString();
            com[2] = new Integer(band).toString();
            com[3] = ""\"""" + cap.getID() + ""\"""";
        }
        Process scan = runner.exec(com);
        ScanResult result = new ScanResult(freq, band);
        result.readInput(scan.getInputStream());
        result.parseXML();
        int channelCount = 0;
        if (result.getResult().size() > 0) {
            Vector<Channel> scanResult = result.getResult();
            Channel chData = null;
            for (int x = 0; x < scanResult.size(); x++) {
                chData = (Channel) scanResult.get(x);
                if (chData != null) {
                    buff.append(""<tr class='scanChannelResult'>"");
                    buff.append(""<td>\n<input type='text' name='name"" + channelCount + ""' value='"" + checkName(chData.getName()) + ""'>\n"");
                    buff.append(""<input type='hidden' name='freq"" + channelCount + ""' value='"" + chData.getFrequency() + ""'>\n"");
                    buff.append(""<input type='hidden' name='band"" + channelCount + ""' value='"" + chData.getBandWidth() + ""'>\n"");
                    buff.append(""</td>\n\n"");
                    buff.append(""<td align='center'>"" + chData.getProgramID());
                    buff.append(""<input type='hidden' name='programid"" + channelCount + ""' value='"" + chData.getProgramID() + ""'>\n"");
                    buff.append(""</td>\n"");
                    buff.append(""<td align='center'>"");
                    int count = getStreamTypeCount(chData, Channel.TYPE_VIDEO);
                    if (count == 0) {
                        buff.append(""-1"");
                        buff.append(""<input type='hidden' name='videoid"" + channelCount + ""' value='-1'>\n"");
                    }
                    if (count == 1) {
                        int[] data = getFirstOfType(chData, Channel.TYPE_VIDEO);
                        buff.append(data[0]);
                        buff.append(""<input type='hidden' name='videoid"" + channelCount + ""' value='"" + data[0] + ""'>\n"");
                    } else if (count > 1) {
                        buff.append(""<SELECT NAME='videoid"" + channelCount + ""'>\n"");
                        for (int st = 0; st < chData.getStreams().size(); st++) {
                            int[] streamData = (int[]) chData.getStreams().get(st);
                            if (streamData[1] == Channel.TYPE_VIDEO) {
                                buff.append(""<OPTION value=\"""" + streamData[0] + ""\"">"");
                                buff.append(streamData[0]);
                                buff.append(""</OPTION>\n"");
                            }
                        }
                        buff.append(""</SELECT>"");
                    }
                    buff.append(""</td>\n"");
                    buff.append(""<td align='center'>"");
                    count = getStreamTypeCount(chData, Channel.TYPE_AUDIO_AC3);
                    count += getStreamTypeCount(chData, Channel.TYPE_AUDIO_MPG);
                    if (count == 0) {
                        buff.append(""-1"");
                        buff.append(""<input type='hidden' name='audioid"" + channelCount + ""' value='-1'>\n"");
                    }
                    if (count == 1) {
                        int[] data = getFirstOfType(chData, Channel.TYPE_AUDIO_AC3);
                        if (data == null) data = getFirstOfType(chData, Channel.TYPE_AUDIO_MPG);
                        buff.append(data[0]);
                        if (data[1] == Channel.TYPE_AUDIO_AC3) buff.append("" AC3""); else buff.append("" MPG"");
                        buff.append(""<input type='hidden' name='audioid"" + channelCount + ""' value='"" + data[0] + "":"" + data[1] + ""'>\n"");
                    } else if (count > 1) {
                        buff.append(""<SELECT NAME='audioid"" + channelCount + ""'>\n"");
                        for (int st = 0; st < chData.getStreams().size(); st++) {
                            int[] streamData = (int[]) chData.getStreams().get(st);
                            if (streamData[1] == Channel.TYPE_AUDIO_MPG || streamData[1] == Channel.TYPE_AUDIO_AC3) {
                                buff.append(""<OPTION value=\"""" + streamData[0] + "":"" + streamData[1] + ""\"">"");
                                buff.append(streamData[0]);
                                if (streamData[1] == Channel.TYPE_AUDIO_AC3) buff.append("" AC3""); else buff.append("" MPG"");
                                buff.append(""</OPTION>\n"");
                            }
                        }
                        buff.append(""</SELECT>"");
                    }
                    buff.append(""</td>\n"");
                    buff.append(""<td align='center'><input type='checkbox' name='add"" + channelCount + ""' value='add'></td>\n"");
                    buff.append(""</tr>\n\n"");
                    channelCount++;
                } else {
                    break;
                }
            }
        } else {
            buff.append(""<tr class='scanChannelResult'>"");
            buff.append(""<td>No Programs Found</td>\n"");
            buff.append(""<td align='center'>N/A</td>\n"");
            buff.append(""<td align='center'>N/A</td>\n"");
            buff.append(""<td align='center'>N/A</td>\n"");
            buff.append(""<td align='center'>N/A</td>\n"");
            buff.append(""</tr>\n\n"");
        }
        buff.append(""</table><br>\n"");
        if (channelCount > 0) buff.append(""<input type='submit' value='Add Selected'>\n"");
        buff.append(""</form>\n"");
        template.replaceAll(""$scanresult"", buff.toString());
        return template.getPageBytes();
    }","    static Object arrayExpand(Object a, int amount) {
        Class cl = a.getClass();
        if (!cl.isArray()) return null;
        int length = Array.getLength(a);
        int newLength = length + amount;
        Class componentType = a.getClass().getComponentType();
        Object newArray = Array.newInstance(componentType, newLength);
        System.arraycopy(a, 0, newArray, 0, length);
        return newArray;
    }",0,0
"    private void cleanDir(File dir) {
        File[] files = dir.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isDirectory()) {
                cleanDir(files[i]);
            } else {
                files[i].delete();
            }
        }
        dir.delete();
    }","    public static void openURL(String url) {
        if (!java.awt.Desktop.isDesktopSupported()) {
            return;
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            return;
        }
        try {
            java.net.URI uri = new java.net.URI(url);
            desktop.browse(uri);
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","            public void actionPerformed(ActionEvent e) {
                if (Desktop.isDesktopSupported()) {
                    try {
                        Desktop.getDesktop().browse(new URI(""http://popcornforum.de/forumdisplay.php?fid=67""));
                    } catch (Exception exc) {
                        JOptionPane.showMessageDialog(null, ""Could not acces http://popcornforum.de/forumdisplay.php?fid=67"", ""Error"", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }",0,0
"    boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }","    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }",0,0
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static void main(String[] args) {
        System.out.println(""Chapter 10 example 1: Simple Graphic"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap1001.pdf""));
            document.open();
            Graphic grx = new Graphic();
            grx.rectangle(100, 700, 100, 100);
            grx.moveTo(100, 700);
            grx.lineTo(200, 800);
            grx.stroke();
            document.add(grx);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0,0
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    public int saveBuildingInstructionstoPDF(boolean mustWrite, String testNum) {
        int totalbricks = 0;
        Paragraph p;
        Chunk chunk;
        int width;
        int i;
        File fileToDelete;
        if (mustWrite) {
            totalNumLegoBricksUsed = new int[LBricks.numLegoBricks];
            try {
                Document document = new Document(PageSize.A0, 50, 50, 50, 50);
                PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(program.directory + ""BuildingInstructions"" + program.startIndex + ""_"" + program.stopIndex + testNum + "".pdf""));
                writer.setPageEvent(new pdfListener());
                document.open();
                PdfContentByte cb = writer.getDirectContent();
                int canvasWidth = (int) PageSize.A0.width() - 200;
                int canvasHeight = (int) PageSize.A0.height() - 200;
                if (program.gridWidth != program.gridHeight) {
                    if (program.gridWidth > program.gridHeight) {
                        width = (int) Math.floor((double) (canvasWidth - 100) / (double) program.gridWidth);
                    } else {
                        width = (int) Math.floor((double) (canvasWidth - 100) / (double) program.gridHeight);
                    }
                } else {
                    width = (int) Math.floor((double) (canvasWidth - 100) / (double) program.gridWidth);
                }
                for (i = program.startIndex; i <= program.stopIndex; i++) {
                    p = new Paragraph();
                    chunk = new Chunk(""Layout Layer "" + i + "" :"", FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, Color.black));
                    chunk.setUnderline(1.5f, -2.5f);
                    p.add(chunk);
                    document.add(p);
                    Graphics2D g = cb.createGraphics(canvasWidth, canvasHeight);
                    g.setColor(Color.LIGHT_GRAY);
                    drawGrid(g, width);
                    if (!program.fileExtension.equals("".sl2"")) {
                        if (i > program.startIndex) {
                            g.setColor(Color.gray);
                            loadLayerBricks(i - 1, false);
                            drawBlocks(g, 100, 150, currentLayerBricks, width);
                            g.setColor(Color.DARK_GRAY);
                            drawBlocksOutline(g, 100, 150, currentLayerBricks, width);
                        }
                    }
                    if (!program.fileExtension.equals("".sl2"")) {
                        g.setColor(Color.LIGHT_GRAY);
                    }
                    loadLayerBricks(i, true);
                    drawBlocks(g, 100, 150, currentLayerBricks, width);
                    g.setColor(Color.BLACK);
                    drawBlocksOutline(g, 100, 150, currentLayerBricks, width);
                    g.setColor(Color.BLACK);
                    g.dispose();
                    cb.saveState();
                    document.newPage();
                }
                p = new Paragraph();
                chunk = new Chunk(""LEGO bricks required to build sculpture:"", FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, Color.black));
                chunk.setUnderline(1.5f, -2.5f);
                p.add(chunk);
                document.add(p);
                float[] widths = { 0.60f, 0.40f };
                PdfPTable table = new PdfPTable(widths);
                table.setTotalWidth(250);
                table.setLockedWidth(true);
                table.setSpacingBefore(25f);
                table.getDefaultCell().setBackgroundColor(new Color(0.59f, 0.6f, 0.97f));
                table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                table.setHorizontalAlignment(Element.ALIGN_LEFT);
                PdfPCell cell = new PdfPCell(new Paragraph(""Type"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(new Color(0.34f, 0.41f, 0.98f));
                table.addCell(cell);
                cell = new PdfPCell(new Paragraph(""Amount required"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(new Color(0.34f, 0.41f, 0.98f));
                table.addCell(cell);
                totalbricks += totalNumLegoBricksUsed[0];
                table.addCell("""" + LBricks.blockNames[0]);
                table.addCell("""" + totalNumLegoBricksUsed[0]);
                for (i = 1; i < 10; i = i + 2) {
                    totalbricks += totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1];
                    table.addCell("""" + LBricks.blockNames[i]);
                    table.addCell("""" + (totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1]));
                }
                for (i = 11; i < 16; i++) {
                    totalbricks += totalNumLegoBricksUsed[i];
                    table.addCell("""" + LBricks.blockNames[i]);
                    table.addCell("""" + totalNumLegoBricksUsed[i]);
                }
                for (i = 16; i < LBricks.numLegoBricks - 1; i = i + 2) {
                    totalbricks += totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1];
                    table.addCell("""" + LBricks.blockNames[i]);
                    table.addCell("""" + (totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1]));
                }
                cell = new PdfPCell(new Paragraph(""Total"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(Color.YELLOW);
                table.addCell(cell);
                cell = new PdfPCell(new Paragraph("""" + totalbricks, FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(Color.YELLOW);
                table.addCell(cell);
                document.add(table);
                document.close();
            } catch (Exception e) {
                System.out.println(""An error occured while trying to save the list of LEGO bricks used."");
                System.out.println(e.getMessage());
                System.exit(0);
            }
        } else {
            for (i = 0; i < LBricks.numLegoBricks; i++) {
                totalbricks += totalNumLegoBricksUsed[i];
            }
        }
        return totalbricks;
    }",0,0
"    public static void main(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""msgsend"";
        String file = null;
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-a"")) {
                file = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: msgsend [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-a attach-file] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            String text = collect(in);
            if (file != null) {
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setText(text);
                MimeBodyPart mbp2 = new MimeBodyPart();
                mbp2.attachFile(file);
                MimeMultipart mp = new MimeMultipart();
                mp.addBodyPart(mbp1);
                mp.addBodyPart(mbp2);
                msg.setContent(mp);
            } else {
                msg.setText(text);
            }
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public static void del(File file) {
        if (file.isDirectory()) {
            for (File child : file.listFiles()) {
                del(child);
            }
        }
        file.delete();
    }",0,0
"    public static void browse(String urlStr) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(urlStr));
            } catch (Exception e) {
            }
        } else {
            JOptionPane.showMessageDialog(MainWindow.mw, ""Cannot open the URL. Kindly open this url\n"" + ""from your browser:\n"" + urlStr);
        }
    }","    public static final long crc32(byte[] data) {
        CRC32 crc32 = new CRC32();
        crc32.update(data);
        return crc32.getValue();
    }",0,0
"    public static double[][] calcTranspose(double[][] mat) {
        double[][] transpose = new double[mat[0].length][mat.length];
        for (int a = 0; a < transpose.length; a++) {
            for (int b = 0; b < transpose[0].length; b++) {
                transpose[a][b] = mat[b][a];
            }
        }
        return transpose;
    }","    public IntChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            String tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }",0,0
"    public static void main(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""msgsend"";
        String file = null;
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-a"")) {
                file = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: msgsend [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-a attach-file] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            String text = collect(in);
            if (file != null) {
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setText(text);
                MimeBodyPart mbp2 = new MimeBodyPart();
                mbp2.attachFile(file);
                MimeMultipart mp = new MimeMultipart();
                mp.addBodyPart(mbp1);
                mp.addBodyPart(mbp2);
                msg.setContent(mp);
            } else {
                msg.setText(text);
            }
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public static XMLShowInfo NzbSearch(TVRageShowInfo tvrage, XMLShowInfo xmldata, int latestOrNext) {
        String newzbin_query = """", csvData = """", hellaQueueDir = """", newzbinUsr = """", newzbinPass = """";
        String[] tmp;
        DateFormat tvRageDateFormat = new SimpleDateFormat(""MMM/dd/yyyy"");
        DateFormat tvRageDateFormatFix = new SimpleDateFormat(""yyyy-MM-dd"");
        newzbin_query = ""?q="" + xmldata.showName + ""+"";
        if (latestOrNext == 0) {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.latestSeasonNum + ""x"" + tvrage.latestEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.latestSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.latestAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.latestTitle;
        } else {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.nextSeasonNum + ""x"" + tvrage.nextEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.nextSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.nextAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.nextTitle;
        }
        newzbin_query += ""&searchaction=Search"";
        newzbin_query += ""&fpn=p"";
        newzbin_query += ""&category=8category=11"";
        newzbin_query += ""&area=-1"";
        newzbin_query += ""&u_nfo_posts_only=0"";
        newzbin_query += ""&u_url_posts_only=0"";
        newzbin_query += ""&u_comment_posts_only=0"";
        newzbin_query += ""&u_v3_retention=1209600"";
        newzbin_query += ""&ps_rb_language="" + xmldata.language;
        newzbin_query += ""&sort=ps_edit_date"";
        newzbin_query += ""&order=desc"";
        newzbin_query += ""&areadone=-1"";
        newzbin_query += ""&feed=csv"";
        newzbin_query += ""&ps_rb_video_format="" + xmldata.format;
        newzbin_query = newzbin_query.replaceAll("" "", ""%20"");
        System.out.println(""http://v3.newzbin.com/search/"" + newzbin_query);
        try {
            URL url = new URL(""http://v3.newzbin.com/search/"" + newzbin_query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            csvData = in.readLine();
            if (csvData != null) {
                JavaNZB.searchCount++;
                if (searchCount == 6) {
                    searchCount = 0;
                    System.out.println(""Sleeping for 60 seconds"");
                    try {
                        Thread.sleep(60000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                tmp = csvData.split("","");
                tmp[2] = tmp[2].substring(1, tmp[2].length() - 1);
                tmp[3] = tmp[3].substring(1, tmp[3].length() - 1);
                Pattern p = Pattern.compile(""[\\\\</:>?\\[|\\]\""]"");
                Matcher matcher = p.matcher(tmp[3]);
                tmp[3] = matcher.replaceAll("" "");
                tmp[3] = tmp[3].replaceAll(""&"", ""and"");
                URLConnection urlConn;
                DataOutputStream printout;
                url = new URL(""http://v3.newzbin.com/api/dnzb/"");
                urlConn = url.openConnection();
                urlConn.setDoInput(true);
                urlConn.setDoOutput(true);
                urlConn.setUseCaches(false);
                urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                printout = new DataOutputStream(urlConn.getOutputStream());
                String content = ""username="" + JavaNZB.newzbinUsr + ""&password="" + JavaNZB.newzbinPass + ""&reportid="" + tmp[2];
                printout.writeBytes(content);
                printout.flush();
                printout.close();
                BufferedReader nzbInput = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
                File f = new File(JavaNZB.hellaQueueDir, tmp[3] + "".nzb"");
                BufferedWriter out = new BufferedWriter(new FileWriter(f));
                String str;
                System.out.println(""--Downloading "" + tmp[3] + "".nzb"" + "" to queue directory--"");
                while (null != ((str = nzbInput.readLine()))) out.write(str);
                nzbInput.close();
                out.close();
                if (latestOrNext == 0) {
                    xmldata.episode = tvrage.latestEpisodeNum;
                    xmldata.season = tvrage.latestSeasonNum;
                } else {
                    xmldata.episode = tvrage.nextEpisodeNum;
                    xmldata.season = tvrage.nextSeasonNum;
                }
            } else System.out.println(""No new episode posted"");
            System.out.println();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
            System.out.println(""IO Exception from NzbSearch"");
        }
        return xmldata;
    }",0,0
"    public ResultSet executeQuery(String sql) {
        rs = null;
        try {
            conn = DriverManager.getConnection(""jdbc:odbc:ClassDB"", ""limq"", ""123"");
            Statement stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);
        } catch (SQLException ex) {
            System.err.println(""ִ�в�ѯ�д���:"" + ex.getMessage());
            System.out.print(""ִ�в�ѯ�д���:"" + ex.getMessage());
        }
        return rs;
    }","    static boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }",0,0
"    boolean deleteAll(File file) {
        if (file.isDirectory()) {
            for (File f : file.listFiles()) deleteAll(f);
        }
        return file.delete();
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public IntSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }","    public static int fibonacci(int broj) {
        if (broj <= 1) return broj; else return fibonacci(broj - 1) + fibonacci(broj - 2);
    }",0,0
"    boolean deleteAll(File file) {
        if (file.isDirectory()) {
            for (File f : file.listFiles()) deleteAll(f);
        }
        return file.delete();
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    private Integer slowFib(int i) {
        if (i <= 0) return 0;
        if (i == 1) return 1;
        return slowFib(i - 1) + slowFib(i - 2);
    }","    public static double[][] mergeColumns(double[]... x) {
        double[][] array = new double[x[0].length][x.length];
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                array[i][j] = x[j][i];
            }
        }
        return array;
    }",0,0
"    public float[][] getSubints() {
        int[][] subintsInt = this.getSubints(32, 1, 32);
        float[][] subintsfold = new float[subintsInt[0].length][subintsInt.length];
        for (int i = 0; i < subintsInt.length; i++) {
            for (int j = 0; j < subintsInt[0].length; j++) {
                subintsfold[j][i] = subintsInt[i][j];
            }
        }
        return subintsfold;
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] add(T[] array, T value) {
        T[] tmp = (T[]) java.lang.reflect.Array.newInstance(((Class<? extends T>) array.getClass()).getComponentType(), array.length + 1);
        System.arraycopy(array, 0, tmp, 0, array.length);
        tmp[array.length] = value;
        return tmp;
    }",0,0
"    public static Object[] append(Object[] source, Object obj) {
        Object[] copy = (Object[]) Array.newInstance(source.getClass().getComponentType(), source.length + 1);
        System.arraycopy(source, 0, copy, 0, source.length);
        copy[source.length] = obj;
        return copy;
    }","    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }",0,0
"    public static float[][] TransposeMatrix(float[][] M) {
        int lines = M.length;
        int columns = M[0].length;
        float[][] Mi = new float[columns][lines];
        for (int i = 0; i < lines; i++) {
            for (int j = 0; j < columns; j++) {
                Mi[j][i] = M[i][j];
            }
        }
        return Mi;
    }","    public void getBrowser() {
        if (Desktop.isDesktopSupported()) {
            Desktop desk = Desktop.getDesktop();
            if (desk.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desk.browse(new URI(""http://code.google.com/p/gpsnutzung/""));
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        }
    }",0,0
"    public static void main(String[] args) {
        System.out.println(""Chapter 6 example 2: Adding a Gif, Jpeg and Png-file using filenames"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0603.pdf""));
            HtmlWriter writer = HtmlWriter.getInstance(document, new FileOutputStream(""Chap0603.html""));
            writer.setImagepath(""../../images/kerstmis/"");
            document.open();
            Image jpg = Image.getInstance(""raf.jpg"");
            jpg.scalePercent(50);
            document.add(jpg);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public RobotList<Resource> sort_incr_Resource(RobotList<Resource> list, String field) {
        int length = list.size();
        Index_value[] resource_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, distance(cur_loc, list.get(i).location));
            }
        } else if (field.equals(""energy"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).energy);
            }
        } else if (field.equals(""ammostash"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).ammostash);
            }
        } else if (field.equals(""speed"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).speed);
            }
        } else if (field.equals(""health"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).health);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (resource_dist[i].value > resource_dist[i + 1].value) {
                    Index_value a = resource_dist[i];
                    resource_dist[i] = resource_dist[i + 1];
                    resource_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Resource> new_resource_list = new RobotList<Resource>(Resource.class);
        for (int i = 0; i < length; i++) {
            new_resource_list.addLast(list.get(resource_dist[i].index));
        }
        return new_resource_list;
    }",0,0
"    public static void shuffle(double[] a) {
        Random random = new Random();
        for (int i = a.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            double swap = a[i];
            a[i] = a[j];
            a[j] = swap;
        }
    }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, ""Failed to launch the link, "" + ""your computer is likely misconfigured."", ""Cannot Launch Link"", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, ""Java is not able to launch links on your computer."", ""Cannot Launch Link"", JOptionPane.WARNING_MESSAGE);
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    String[][] transpose(String[][] data) {
        int r = data.length;
        int c = data[0].length;
        String matrix[][] = new String[c][r];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                matrix[j][i] = data[i][j];
            }
        }
        return matrix;
    }",0,0
"    public void testSentFront() {
        String botRecord = ""hello"";
        String msg = ""hellohow are you"";
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile("".*?hel"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(msg);
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }","    public static double[][] transpose(double[][] matrix) {
        double[][] transposed = new double[matrix[0].length][matrix.length];
        int mLength = matrix.length, m0Length = matrix[0].length;
        for (int i = 0; i < mLength; i++) {
            for (int j = 0; j < m0Length; j++) {
                transposed[j][i] = matrix[i][j];
            }
        }
        return transposed;
    }",0,0
"    public static void sortSeries(double[] series) {
        if (series == null) {
            throw new IllegalArgumentException(""Incorrect series. It's null-pointed"");
        }
        int k = 0;
        int right = series.length - 1;
        while (right > 0) {
            k = 0;
            for (int i = 0; i <= right - 1; i++) {
                if (series[i] > series[i + 1]) {
                    k = i;
                    double tmp = series[i];
                    series[i] = series[i + 1];
                    series[i + 1] = tmp;
                }
            }
            right = k;
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }",0,0
"    @Constraint(""post: s.get().size>0"")
    protected static void removeNewlinesForAssertStyleJava(@Constraint(""post: s.get().size<=s@pre.get().size"") final IDocument s) {
        Pattern pattern = Pattern.compile(""assert\\s*assert(Pre|Post)Condition_(\\w*)_for_method_(\\w*)\\s*\\(([^\\)]*)\\)\\s*:"" + ""\\s*\""(.*)\""\\s*;"" + ""\\s*"");
        Matcher matcher = pattern.matcher(s.get());
        try {
            int lengthDifference = 0;
            while (matcher.find()) {
                String replacement = ""assert assert"" + Matcher.quoteReplacement(matcher.group(1)) + ""Condition_"" + Matcher.quoteReplacement(matcher.group(2)) + ""_for_method_"" + Matcher.quoteReplacement(matcher.group(3)) + ""("" + Matcher.quoteReplacement(matcher.group(4)) + "") : \"""" + Matcher.quoteReplacement(matcher.group(5)) + ""\"";"";
                int lengthOfMatchedString = matcher.end() - matcher.start();
                s.replace(lengthDifference + matcher.start(), lengthOfMatchedString, replacement);
                lengthDifference -= lengthOfMatchedString - replacement.length();
            }
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 4) {
            System.out.println(""usage: java msgmultisend <to> <from> <smtp> true|false"");
            return;
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Multipart Test"");
            msg.setSentDate(new Date());
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setText(msgText2, ""us-ascii"");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        }
    }","	public static void deleteRecursively1(File file) {
		if (file.isDirectory()) {
			for (File f : file.listFiles())
				deleteRecursively1(f);
		}
		file.delete();
	}",0,0
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    private byte[] showScanResult(HTTPurl urlData) throws Exception {
        int freq = 0;
        int band = 0;
        try {
            freq = Integer.parseInt(urlData.getParameter(""freq""));
            band = Integer.parseInt(urlData.getParameter(""band""));
        } catch (Exception e) {
            throw new Exception(""Freq or Band not valid: "" + e.toString());
        }
        PageTemplate template = new PageTemplate(store.getProperty(""path.template"") + File.separator + ""channel-scanresult.html"");
        CaptureDeviceList devList = CaptureDeviceList.getInstance();
        if (devList.getActiveDeviceCount() > 0) {
            template.replaceAll(""$scanresult"", ""Can not scan channels while captures are active!"");
            return template.getPageBytes();
        }
        if (devList.getDeviceCount() == 0) {
            template.replaceAll(""$scanresult"", ""No Devices Available!"");
            return template.getPageBytes();
        }
        String name = urlData.getParameter(""name"");
        StringBuffer buff = new StringBuffer(1024);
        buff.append(""<form action='/servlet/"" + urlData.getServletClass() + ""' method='POST' accept-charset=\""UTF-8\"">\n"");
        buff.append(""<input type='hidden' name='action' value='05'>\n"");
        buff.append(""<table class='channelScanResult'>\n"");
        buff.append(""<tr class='scanChannelHeading'>"");
        buff.append(""<td class='scanChannelHeadingDataName'>"" + name + ""</td>"");
        buff.append(""<td class='scanChannelHeadingData'>Program</td>"");
        buff.append(""<td class='scanChannelHeadingData'>Video</td>"");
        buff.append(""<td class='scanChannelHeadingData'>Audio</td>"");
        buff.append(""<td class='scanChannelHeadingData'>Add</td>"");
        buff.append(""</tr>\n"");
        boolean testMode = ""1"".equals(store.getProperty(""tools.testmode""));
        CaptureDevice cap = (CaptureDevice) devList.getDevice(0);
        Runtime runner = Runtime.getRuntime();
        String[] com = null;
        if (testMode == true) {
            String scanCommand = ""win32/scan.exe -test"";
            System.out.println(""Running channel scan command: "" + scanCommand);
            com = new String[2];
            com[0] = ""win32/scan.exe"";
            com[1] = ""-test"";
        } else {
            String scanCommand = ""win32/scan.exe "" + freq + "" "" + band + "" \"""" + cap.getID() + ""\"""";
            System.out.println(""Running channel scan command: "" + scanCommand);
            com = new String[4];
            com[0] = ""win32/scan.exe"";
            com[1] = new Integer(freq).toString();
            com[2] = new Integer(band).toString();
            com[3] = ""\"""" + cap.getID() + ""\"""";
        }
        Process scan = runner.exec(com);
        ScanResult result = new ScanResult(freq, band);
        result.readInput(scan.getInputStream());
        result.parseXML();
        int channelCount = 0;
        if (result.getResult().size() > 0) {
            Vector<Channel> scanResult = result.getResult();
            Channel chData = null;
            for (int x = 0; x < scanResult.size(); x++) {
                chData = (Channel) scanResult.get(x);
                if (chData != null) {
                    buff.append(""<tr class='scanChannelResult'>"");
                    buff.append(""<td>\n<input type='text' name='name"" + channelCount + ""' value='"" + checkName(chData.getName()) + ""'>\n"");
                    buff.append(""<input type='hidden' name='freq"" + channelCount + ""' value='"" + chData.getFrequency() + ""'>\n"");
                    buff.append(""<input type='hidden' name='band"" + channelCount + ""' value='"" + chData.getBandWidth() + ""'>\n"");
                    buff.append(""</td>\n\n"");
                    buff.append(""<td align='center'>"" + chData.getProgramID());
                    buff.append(""<input type='hidden' name='programid"" + channelCount + ""' value='"" + chData.getProgramID() + ""'>\n"");
                    buff.append(""</td>\n"");
                    buff.append(""<td align='center'>"");
                    int count = getStreamTypeCount(chData, Channel.TYPE_VIDEO);
                    if (count == 0) {
                        buff.append(""-1"");
                        buff.append(""<input type='hidden' name='videoid"" + channelCount + ""' value='-1'>\n"");
                    }
                    if (count == 1) {
                        int[] data = getFirstOfType(chData, Channel.TYPE_VIDEO);
                        buff.append(data[0]);
                        buff.append(""<input type='hidden' name='videoid"" + channelCount + ""' value='"" + data[0] + ""'>\n"");
                    } else if (count > 1) {
                        buff.append(""<SELECT NAME='videoid"" + channelCount + ""'>\n"");
                        for (int st = 0; st < chData.getStreams().size(); st++) {
                            int[] streamData = (int[]) chData.getStreams().get(st);
                            if (streamData[1] == Channel.TYPE_VIDEO) {
                                buff.append(""<OPTION value=\"""" + streamData[0] + ""\"">"");
                                buff.append(streamData[0]);
                                buff.append(""</OPTION>\n"");
                            }
                        }
                        buff.append(""</SELECT>"");
                    }
                    buff.append(""</td>\n"");
                    buff.append(""<td align='center'>"");
                    count = getStreamTypeCount(chData, Channel.TYPE_AUDIO_AC3);
                    count += getStreamTypeCount(chData, Channel.TYPE_AUDIO_MPG);
                    if (count == 0) {
                        buff.append(""-1"");
                        buff.append(""<input type='hidden' name='audioid"" + channelCount + ""' value='-1'>\n"");
                    }
                    if (count == 1) {
                        int[] data = getFirstOfType(chData, Channel.TYPE_AUDIO_AC3);
                        if (data == null) data = getFirstOfType(chData, Channel.TYPE_AUDIO_MPG);
                        buff.append(data[0]);
                        if (data[1] == Channel.TYPE_AUDIO_AC3) buff.append("" AC3""); else buff.append("" MPG"");
                        buff.append(""<input type='hidden' name='audioid"" + channelCount + ""' value='"" + data[0] + "":"" + data[1] + ""'>\n"");
                    } else if (count > 1) {
                        buff.append(""<SELECT NAME='audioid"" + channelCount + ""'>\n"");
                        for (int st = 0; st < chData.getStreams().size(); st++) {
                            int[] streamData = (int[]) chData.getStreams().get(st);
                            if (streamData[1] == Channel.TYPE_AUDIO_MPG || streamData[1] == Channel.TYPE_AUDIO_AC3) {
                                buff.append(""<OPTION value=\"""" + streamData[0] + "":"" + streamData[1] + ""\"">"");
                                buff.append(streamData[0]);
                                if (streamData[1] == Channel.TYPE_AUDIO_AC3) buff.append("" AC3""); else buff.append("" MPG"");
                                buff.append(""</OPTION>\n"");
                            }
                        }
                        buff.append(""</SELECT>"");
                    }
                    buff.append(""</td>\n"");
                    buff.append(""<td align='center'><input type='checkbox' name='add"" + channelCount + ""' value='add'></td>\n"");
                    buff.append(""</tr>\n\n"");
                    channelCount++;
                } else {
                    break;
                }
            }
        } else {
            buff.append(""<tr class='scanChannelResult'>"");
            buff.append(""<td>No Programs Found</td>\n"");
            buff.append(""<td align='center'>N/A</td>\n"");
            buff.append(""<td align='center'>N/A</td>\n"");
            buff.append(""<td align='center'>N/A</td>\n"");
            buff.append(""<td align='center'>N/A</td>\n"");
            buff.append(""</tr>\n\n"");
        }
        buff.append(""</table><br>\n"");
        if (channelCount > 0) buff.append(""<input type='submit' value='Add Selected'>\n"");
        buff.append(""</form>\n"");
        template.replaceAll(""$scanresult"", buff.toString());
        return template.getPageBytes();
    }","    public RobotList<Resource> sort_incr_Resource(RobotList<Resource> list, String field) {
        int length = list.size();
        Index_value[] resource_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, distance(cur_loc, list.get(i).location));
            }
        } else if (field.equals(""energy"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).energy);
            }
        } else if (field.equals(""ammostash"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).ammostash);
            }
        } else if (field.equals(""speed"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).speed);
            }
        } else if (field.equals(""health"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).health);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (resource_dist[i].value > resource_dist[i + 1].value) {
                    Index_value a = resource_dist[i];
                    resource_dist[i] = resource_dist[i + 1];
                    resource_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Resource> new_resource_list = new RobotList<Resource>(Resource.class);
        for (int i = 0; i < length; i++) {
            new_resource_list.addLast(list.get(resource_dist[i].index));
        }
        return new_resource_list;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public void bubbleSort(int[] arr) {
        boolean swapped = true;
        int j = 0;
        int tmp;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < arr.length - j; i++) {
                if (arr[i] > arr[i + 1]) {
                    tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    swapped = true;
                }
            }
        }
    }",0,0
"    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }","    public static void main(String[] args) {
        Console c = System.console();
        if (c == null) {
            System.err.println(""No console!"");
            System.exit(-1);
        }
        while (true) {
            String regex = c.readLine(""%n  find(), Enter your regex:"");
            String input = c.readLine(""  find(), enter input String to serach:"");
            Pattern p = Pattern.compile(regex);
            Matcher m = p.matcher(input);
            boolean bFind = false;
            while (m.find()) {
                bFind = true;
                c.printf(""find the text '%s' starting at %d ending at %d%n"", m.group(), m.start(), m.end());
            }
            if (!bFind) {
                c.printf(""No matcher found.%n"");
            }
        }
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 4) {
            System.out.println(""usage: java msgmultisend <to> <from> <smtp> true|false"");
            return;
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Multipart Test"");
            msg.setSentDate(new Date());
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setText(msgText2, ""us-ascii"");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }",0,0
"    private void run() {
        setMessage(""Physical Likleihood Computation has Started"");
        setProgress(10);
        Chromosome chr = Chromosome.getInstance(probeMap.getLinkageGroup());
        int probe_count = probeMap.getProbes().size();
        int clone_count = chr.getClones().size();
        int ch_length = chr.getLength();
        byte[][] data = chr.getHybridizationData(probeMap.getProbes());
        double probe_false_pos = chr.getProbFalsePos();
        double probe_false_neg = chr.getProbFalseNeg();
        int clone_length = GWData.getInstance().getCloneLength();
        int[] probeOrder = ArrayUtils.toPrimitive(chr.getProbeOrder(probeMap.getProbes()).toArray(new Integer[0]));
        int[][] joint = new int[probe_count][probe_count];
        for (int probeIndex1 = 0; probeIndex1 < probe_count; probeIndex1++) {
            for (int probeIndex2 = probeIndex1 + 1; probeIndex2 < probe_count; probeIndex2++) {
                for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
                    if ((data[cloneIndex][probeIndex1] == 1) && (data[cloneIndex][probeIndex2] == 1)) {
                        joint[probeIndex1][probeIndex2]++;
                    }
                }
                joint[probeIndex2][probeIndex1] = joint[probeIndex1][probeIndex2];
            }
        }
        double[][] aa = new double[clone_count][probe_count + 1];
        for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
            for (int probeIndex = 0; probeIndex < probe_count + 1; probeIndex++) {
                if (probeIndex == 0) {
                    aa[cloneIndex][probeIndex] = 0.0;
                } else if (data[cloneIndex][probeIndex - 1] == 0) {
                    aa[cloneIndex][probeIndex] = probe_false_neg / (1 - probe_false_pos);
                } else {
                    aa[cloneIndex][probeIndex] = (1 - probe_false_neg) / probe_false_pos;
                }
            }
        }
        int P = 0;
        for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
            for (int probeIndex = 0; probeIndex < probe_count; probeIndex++) {
                if (data[cloneIndex][probeIndex] == 1) {
                    P++;
                }
            }
        }
        double const1 = clone_count * Math.log(ch_length - clone_length) - P * Math.log(probe_false_pos / (1 - probe_false_pos)) - probe_count * clone_count * Math.log(1 - probe_false_pos);
        int gap = ch_length - (probe_count * clone_length);
        setMessage(""Computing initial probe spacings"");
        setProgress(30);
        double[] y = PLHoodHelper.Initial_Ys(probeOrder, probe_count, clone_count, ch_length, clone_length, gap, joint);
        double[] R = PLHoodHelper.getR(ch_length, clone_length, probe_count, clone_count, aa, probeOrder);
        setMessage(""Running Steepest Descent Algorithm"");
        setProgress(70);
        logLikelihood = -PLHoodHelper.Conj(y, probe_count, clone_count, aa, probeOrder, clone_length, const1, R);
        probeSpacing = Arrays.asList(ArrayUtils.toObject(y));
        setMessage(""The Physical Log-likelihood is "" + logLikelihood);
        setProgress(100);
    }","    public static Object[] append(Object[] lst, Object[] lst1) {
        Object[] l = (Object[]) Array.newInstance(lst.getClass().getComponentType(), lst.length + lst1.length);
        System.arraycopy(lst, 0, l, 0, lst.length);
        System.arraycopy(lst1, 0, l, lst.length, lst1.length);
        return l;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","            public void actionPerformed(ActionEvent e) {
                JFileChooser choix = new JFileChooser();
                choix.addChoosableFileFilter(parent.new FilterSound());
                choix.setCurrentDirectory(new java.io.File(parent.NomCarte + ""/Sound""));
                int retour = choix.showOpenDialog(null);
                if (retour == JFileChooser.APPROVE_OPTION) {
                    if (!new File(parent.NomCarte + ""/Sound/"" + choix.getSelectedFile().getName()).exists()) parent.copyfile(choix.getSelectedFile().getAbsolutePath(), parent.NomCarte + ""/Sound/"" + choix.getSelectedFile().getName());
                    JTextField Edit = null;
                    if (e.getSource().equals(Bt_ChooseSonAttaque)) Edit = Ed_SonAttaque; else if (e.getSource().equals(Bt_ChooseSonBlesse)) Edit = Ed_SonBlesse; else if (e.getSource().equals(Bt_ChooseSonMagie)) Edit = Ed_SonMagie;
                    if (Edit != null) Edit.setText(""Sound\\"" + choix.getSelectedFile().getName());
                    SaveMonstre();
                }
            }",0,0
"	public static void BubbleSortInt2(int[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					int temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://prologdev1:5432/wdb"";
        final String dbuser = ""guest2"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT value, dataProviderName, placeName, placeGeometry,"" + ""        referencetime, "" + ""        validFrom, validTo, "" + ""        valueParameterName, valueParameterUnit, "" + ""        levelParameterName, levelUnitName, levelFrom, levelTo, "" + ""        dataVersion, confidenceCode, storetime, valueid, valuetype "" + "" FROM wci.read( array['hirlam 10'], 'POINT( 10.0 59.0 )', "" + ""                ('2000-01-03 01:00:00', '2000-01-03 01:00:00', 'exact'), "" + ""                NULL, "" + ""                array['instant temperature of air'], "" + ""                ( 2, 2, 'distance above ground', 'exact' ), "" + ""                array[-1], "" + ""                NULL::wci.returnOid )"";
        final String colNames[] = { ""value"", ""dataProviderName"", ""placeName"", ""referencetime"", ""validFrom"", ""validTo"", ""valueParameterName"", ""valueParameterUnit"", ""levelParameterName"", ""levelUnitName"", ""levelFrom"", ""levelTo"" };
        ResultSet rs = null;
        try {
            con.setAutoCommit(false);
            statement.execute(wdbInit);
            LargeObjectManager lobj = ((org.postgresql.PGConnection) con).getLargeObjectAPI();
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                long oid = rs.getLong(""value"");
                LargeObject obj = lobj.open(oid, LargeObjectManager.READ);
                byte buf[] = new byte[obj.size()];
                obj.read(buf, 0, obj.size());
                obj.close();
                System.out.print(""  BLOB size: "" + buf.length);
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                con.commit();
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }","	public FTPClient sample2c(String server, int port, String username, String password) throws SocketException, IOException {
		FTPSClient ftpClient = new FTPSClient();
		ftpClient.setDefaultPort(port);
		ftpClient.connect(server);
		ftpClient.login(username, password);
		return ftpClient;
	}",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }",0,0
"    public IntChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            String tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    private static String sort(final String item) {
        final char[] chars = item.toCharArray();
        for (int i = 1; i < chars.length; i++) {
            for (int j = 0; j < chars.length - 1; j++) {
                if (chars[j] > chars[j + 1]) {
                    final char temp = chars[j];
                    chars[j] = chars[j + 1];
                    chars[j + 1] = temp;
                }
            }
        }
        return String.valueOf(chars);
    }",0,0
"    private static int[][] transpose(int[][] matrix) {
        int[][] transposed = new int[matrix.length][matrix[0].length];
        for (int k = 0; k < matrix.length; k++) {
            for (int j = 0; j < matrix.length; j++) {
                transposed[j][k] = matrix[k][j];
            }
        }
        return transposed;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    private long fib(long n) {
        if (n == 0) return 0L;
        if (n == 1) return 1L;
        return fib(n - 1) + fib(n - 2);
    }","	public static File[] chooseFileOpenMultiple(JFrame frame) {
		File retval[];

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(true);

		//Show dialog and wait for user input
		int status = fc.showSaveDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFiles();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}",0,0
"	public static void BubbleSortInt1(int[] num) {
		boolean flag = true; // set flag to true to begin first pass
		int temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}","    public int binarySearch(final float key) {
        int low = 0;
        int middle;
        int high = super.size() - 1;
        float middleValue;
        while (low <= high) {
            middle = (low + high) / 2;
            middleValue = this.floatArray[middle];
            if (middleValue < key) {
                low = middle + 1;
            } else if (middleValue > key) {
                high = middle - 1;
            } else {
                return middle;
            }
        }
        return -(low + 1);
    }",0,0
"    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://prologdev1:5432/wdb"";
        final String dbuser = ""guest2"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT value, dataProviderName, placeName, placeGeometry,"" + ""        referencetime, "" + ""        validFrom, validTo, "" + ""        valueParameterName, valueParameterUnit, "" + ""        levelParameterName, levelUnitName, levelFrom, levelTo, "" + ""        dataVersion, confidenceCode, storetime, valueid, valuetype "" + "" FROM wci.read( array['hirlam 10'], 'POINT( 10.0 59.0 )', "" + ""                ('2000-01-03 01:00:00', '2000-01-03 01:00:00', 'exact'), "" + ""                NULL, "" + ""                array['instant temperature of air'], "" + ""                ( 2, 2, 'distance above ground', 'exact' ), "" + ""                array[-1], "" + ""                NULL::wci.returnOid )"";
        final String colNames[] = { ""value"", ""dataProviderName"", ""placeName"", ""referencetime"", ""validFrom"", ""validTo"", ""valueParameterName"", ""valueParameterUnit"", ""levelParameterName"", ""levelUnitName"", ""levelFrom"", ""levelTo"" };
        ResultSet rs = null;
        try {
            con.setAutoCommit(false);
            statement.execute(wdbInit);
            LargeObjectManager lobj = ((org.postgresql.PGConnection) con).getLargeObjectAPI();
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                long oid = rs.getLong(""value"");
                LargeObject obj = lobj.open(oid, LargeObjectManager.READ);
                byte buf[] = new byte[obj.size()];
                obj.read(buf, 0, obj.size());
                obj.close();
                System.out.print(""  BLOB size: "" + buf.length);
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                con.commit();
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0,0
"    public static double[][] transposed(double[][] matrix) {
        int row = matrix[0].length;
        int line = matrix.length;
        double[][] ans = new double[row][line];
        for (int i = 0; i < line; i++) {
            for (int j = 0; j < row; j++) {
                ans[j][i] = matrix[i][j];
            }
        }
        return ans;
    }","    public void playSound() {
        try {
            URL url = this.getClass().getClassLoader().getResource(""bomb.wav"");
            AudioInputStream audioIn = AudioSystem.getAudioInputStream(url);
            Clip clip = AudioSystem.getClip();
            clip.open(audioIn);
            clip.start();
        } catch (UnsupportedAudioFileException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (LineUnavailableException e) {
            e.printStackTrace();
        }
    }",0,0
"    public static double[][] calcTranspose(double[][] mat) {
        double[][] transpose = new double[mat[0].length][mat.length];
        for (int a = 0; a < transpose.length; a++) {
            for (int b = 0; b < transpose[0].length; b++) {
                transpose[a][b] = mat[b][a];
            }
        }
        return transpose;
    }","    public void bubbleSort(int[] arr) {
        boolean swapped = true;
        int j = 0;
        int tmp;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < arr.length - j; i++) {
                if (arr[i] > arr[i + 1]) {
                    tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    swapped = true;
                }
            }
        }
    }",0,0
"    private Integer slowFib(int i) {
        if (i <= 0) return 0;
        if (i == 1) return 1;
        return slowFib(i - 1) + slowFib(i - 2);
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://prologdev1:5432/wdb"";
        final String dbuser = ""guest2"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT value, dataProviderName, placeName, placeGeometry,"" + ""        referencetime, "" + ""        validFrom, validTo, "" + ""        valueParameterName, valueParameterUnit, "" + ""        levelParameterName, levelUnitName, levelFrom, levelTo, "" + ""        dataVersion, confidenceCode, storetime, valueid, valuetype "" + "" FROM wci.read( array['hirlam 10'], 'POINT( 10.0 59.0 )', "" + ""                ('2000-01-03 01:00:00', '2000-01-03 01:00:00', 'exact'), "" + ""                NULL, "" + ""                array['instant temperature of air'], "" + ""                ( 2, 2, 'distance above ground', 'exact' ), "" + ""                array[-1], "" + ""                NULL::wci.returnOid )"";
        final String colNames[] = { ""value"", ""dataProviderName"", ""placeName"", ""referencetime"", ""validFrom"", ""validTo"", ""valueParameterName"", ""valueParameterUnit"", ""levelParameterName"", ""levelUnitName"", ""levelFrom"", ""levelTo"" };
        ResultSet rs = null;
        try {
            con.setAutoCommit(false);
            statement.execute(wdbInit);
            LargeObjectManager lobj = ((org.postgresql.PGConnection) con).getLargeObjectAPI();
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                long oid = rs.getLong(""value"");
                LargeObject obj = lobj.open(oid, LargeObjectManager.READ);
                byte buf[] = new byte[obj.size()];
                obj.read(buf, 0, obj.size());
                obj.close();
                System.out.print(""  BLOB size: "" + buf.length);
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                con.commit();
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0,0
"    public void open() {
        if (!java.awt.Desktop.isDesktopSupported()) {
            System.err.println(""Desktop is not supported (fatal)"");
            return;
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            System.err.println(""Desktop doesn't support the browse action (fatal)"");
            return;
        }
        try {
            java.net.URI uri = new java.net.URI(this.url);
            desktop.browse(uri);
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }","    public static void mattran_j(double a[][], double at[][], int n, int p) {
        int i, j;
        for (i = 0; i < n; i++) {
            for (j = 0; j < p; j++) {
                at[j][i] = a[i][j];
            }
        }
    }",0,0
"    private void sort() {
        boolean unsortiert = true;
        Datei tmp = null;
        while (unsortiert) {
            unsortiert = false;
            for (int i = 0; i < this.size - 1; i++) {
                if (dateien[i] != null && dateien[i + 1] != null) {
                    if (dateien[i].compareTo(dateien[i + 1]) < 0) {
                        tmp = dateien[i];
                        dateien[i] = dateien[i + 1];
                        dateien[i + 1] = tmp;
                        unsortiert = true;
                    }
                }
            }
        }
    }","    public void transpose() {
        for (int i = 0; i < ndims; i++) {
            for (int j = i + 1; j < ndims; j++) {
                g[j][i] = g[i][j];
            }
        }
    }",0,0
"    private void openURI() {
        if (uri != null) if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }
    }","    public static boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }",0,0
"    public final void randomize(int[] index, Random random) {
        for (int j = index.length - 1; j > 0; j--) {
            int k = random.nextInt(j + 1);
            int temp = index[j];
            index[j] = index[k];
            index[k] = temp;
        }
    }","    public void actionPerformed(ActionEvent event) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                Logging.LOG.error(""Failed to open web browser"", e);
            }
        }
    }",0,0
"    private long getCRC(byte[] bytes) {
        CRC32 crc32 = new CRC32();
        crc32.update(bytes);
        return crc32.getValue();
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    public static double[][] transposed(double[][] matrix) {
        int row = matrix[0].length;
        int line = matrix.length;
        double[][] ans = new double[row][line];
        for (int i = 0; i < line; i++) {
            for (int j = 0; j < row; j++) {
                ans[j][i] = matrix[i][j];
            }
        }
        return ans;
    }","    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"    protected Object growIndexedProperty(String name, Object indexedProperty, int index) {
        if (indexedProperty instanceof List) {
            List list = (List) indexedProperty;
            while (index >= list.size()) {
                list.add(null);
            }
        }
        if ((indexedProperty.getClass().isArray())) {
            int length = Array.getLength(indexedProperty);
            if (index >= length) {
                Class componentType = indexedProperty.getClass().getComponentType();
                Object newArray = Array.newInstance(componentType, (index + 1));
                System.arraycopy(indexedProperty, 0, newArray, 0, length);
                indexedProperty = newArray;
                set(name, indexedProperty);
                int newLength = Array.getLength(indexedProperty);
                for (int i = length; i < newLength; i++) {
                    Array.set(indexedProperty, i, createProperty(name + ""["" + i + ""]"", componentType));
                }
            }
        }
        return indexedProperty;
    }","    public void openURI(URI uri) {
        if (!java.awt.Desktop.isDesktopSupported()) {
            JOptionPane.showMessageDialog(this, Messages.getString(""Msg_DesktopIsNotSupported""));
            return;
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            JOptionPane.showMessageDialog(this, Messages.getString(""Msg_BrowseActionNotSupported""));
            return;
        }
        try {
            desktop.browse(uri);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, Messages.getString(""Msg_AnErrorOccuredWhileBrowsing"") + "" "" + e.getMessage());
        }
    }",0,0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }","    public int saveBuildingInstructionstoPDF(boolean mustWrite) {
        int totalbricks = 0;
        Paragraph p;
        Chunk chunk;
        int width;
        int i;
        if (mustWrite) {
            try {
                Document document = new Document(PageSize.A0, 50, 50, 50, 50);
                PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(directoryPath + ""\\"" + ""BuildingInstructions"" + firstLayer + ""_"" + lastLayer + "".pdf""));
                writer.setPageEvent(new pdfListener());
                document.open();
                PdfContentByte cb = writer.getDirectContent();
                int canvasWidth = (int) PageSize.A0.width() - 200;
                int canvasHeight = (int) PageSize.A0.height() - 200;
                if (xSize != ySize) {
                    if (xSize > ySize) {
                        width = (int) Math.floor((double) (canvasWidth - 40) / (double) xSize);
                    } else {
                        width = (int) Math.floor((double) (canvasWidth - 40) / (double) ySize);
                    }
                } else {
                    width = (int) Math.floor((double) (canvasWidth - 40) / (double) xSize);
                }
                for (i = firstLayer; i <= lastLayer; i++) {
                    p = new Paragraph();
                    chunk = new Chunk(""Layout Layer "" + i + "" :"", FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, Color.black));
                    chunk.setUnderline(1.5f, -2.5f);
                    p.add(chunk);
                    document.add(p);
                    Graphics2D g = cb.createGraphics(canvasWidth, canvasHeight);
                    g.setColor(Color.LIGHT_GRAY);
                    drawGrid(g, width);
                    if (!layoutFileExtension.equals(""ll2"")) {
                        if (i > firstLayer) {
                            g.setColor(Color.gray);
                            loadLayerBricks(i - 1, ""CURRENT"");
                            drawBlocks(g, 40, 0, currentLayer, width, false);
                            g.setColor(Color.DARK_GRAY);
                            drawBlocksOutline(g, 40, 0, currentLayer, width);
                        }
                    }
                    if (!layoutFileExtension.equals("".sl2"")) {
                        g.setColor(Color.LIGHT_GRAY);
                    }
                    loadLayerBricks(i, ""CURRENT"");
                    drawBlocks(g, 40, 0, currentLayer, width, true);
                    g.setColor(Color.BLACK);
                    drawBlocksOutline(g, 40, 0, currentLayer, width);
                    g.setColor(Color.BLACK);
                    g.dispose();
                    cb.saveState();
                    document.newPage();
                }
                p = new Paragraph();
                chunk = new Chunk(""LEGO bricks required to build sculpture:"", FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, Color.black));
                chunk.setUnderline(1.5f, -2.5f);
                p.add(chunk);
                document.add(p);
                float[] widths = { 0.60f, 0.40f };
                PdfPTable table = new PdfPTable(widths);
                table.setTotalWidth(250);
                table.setLockedWidth(true);
                table.setSpacingBefore(25f);
                table.getDefaultCell().setBackgroundColor(new Color(0.59f, 0.6f, 0.97f));
                table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                table.setHorizontalAlignment(Element.ALIGN_LEFT);
                PdfPCell cell = new PdfPCell(new Paragraph(""Type"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(new Color(0.34f, 0.41f, 0.98f));
                table.addCell(cell);
                cell = new PdfPCell(new Paragraph(""Amount required"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(new Color(0.34f, 0.41f, 0.98f));
                table.addCell(cell);
                totalbricks += totalNumLegoBricksUsed[0];
                table.addCell("""" + blockNames[0]);
                table.addCell("""" + totalNumLegoBricksUsed[0]);
                for (i = 1; i < 10; i = i + 2) {
                    totalbricks += totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1];
                    table.addCell("""" + blockNames[i]);
                    table.addCell("""" + (totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1]));
                }
                for (i = 11; i < 16; i++) {
                    totalbricks += totalNumLegoBricksUsed[i];
                    table.addCell("""" + blockNames[i]);
                    table.addCell("""" + totalNumLegoBricksUsed[i]);
                }
                for (i = 16; i < numLegoBricks - 1; i = i + 2) {
                    totalbricks += totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1];
                    table.addCell("""" + blockNames[i]);
                    table.addCell("""" + (totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1]));
                }
                cell = new PdfPCell(new Paragraph(""Total"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(Color.YELLOW);
                table.addCell(cell);
                cell = new PdfPCell(new Paragraph("""" + totalbricks, FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(Color.YELLOW);
                table.addCell(cell);
                document.add(table);
                document.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, ""An error occured while trying to save the list of LEGO bricks used."", ""Error occured"", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
        } else {
            for (i = 0; i < numLegoBricks; i++) {
                totalbricks += totalNumLegoBricksUsed[i];
            }
        }
        JOptionPane.showMessageDialog(null, ""Brick sculpture building instructions saved to \n"" + directoryPath + ""\\"" + ""BuildingInstructions"" + firstLayer + ""_"" + lastLayer + "".pdf"", ""LEGO instructions generated"", JOptionPane.INFORMATION_MESSAGE);
        return totalbricks;
    }",0,0
"    public Object[] toArray(Object a[]) {
        if (a.length < size) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size) a[size] = null;
        return a;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    private static Object resizeArray(Object oldArray, int newSize) {
        int oldSize = java.lang.reflect.Array.getLength(oldArray);
        Class elementType = oldArray.getClass().getComponentType();
        Object newArray = java.lang.reflect.Array.newInstance(elementType, newSize);
        int preserveLength = Math.min(oldSize, newSize);
        if (preserveLength > 0) System.arraycopy(oldArray, 0, newArray, 0, preserveLength);
        return newArray;
    }",0,0
"    public IntSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }","    public void actionPerformed(ActionEvent event) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                Logging.LOG.error(""Failed to open web browser"", e);
            }
        }
    }",0,0
"    public Matrix Transpose() {
        float[][] a = this.matrix;
        if (INFO) {
            System.out.println(""Performing Transpose..."");
        }
        float m[][] = new float[a[0].length][a.length];
        for (int i = 0; i < a.length; i++) for (int j = 0; j < a[i].length; j++) m[j][i] = a[i][j];
        return new Matrix(m);
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://prologdev1:5432/wdb"";
        final String dbuser = ""guest2"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT value, dataProviderName, placeName, placeGeometry,"" + ""        referencetime, "" + ""        validFrom, validTo, "" + ""        valueParameterName, valueParameterUnit, "" + ""        levelParameterName, levelUnitName, levelFrom, levelTo, "" + ""        dataVersion, confidenceCode, storetime, valueid, valuetype "" + "" FROM wci.read( array['hirlam 10'], 'POINT( 10.0 59.0 )', "" + ""                ('2000-01-03 01:00:00', '2000-01-03 01:00:00', 'exact'), "" + ""                NULL, "" + ""                array['instant temperature of air'], "" + ""                ( 2, 2, 'distance above ground', 'exact' ), "" + ""                array[-1], "" + ""                NULL::wci.returnOid )"";
        final String colNames[] = { ""value"", ""dataProviderName"", ""placeName"", ""referencetime"", ""validFrom"", ""validTo"", ""valueParameterName"", ""valueParameterUnit"", ""levelParameterName"", ""levelUnitName"", ""levelFrom"", ""levelTo"" };
        ResultSet rs = null;
        try {
            con.setAutoCommit(false);
            statement.execute(wdbInit);
            LargeObjectManager lobj = ((org.postgresql.PGConnection) con).getLargeObjectAPI();
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                long oid = rs.getLong(""value"");
                LargeObject obj = lobj.open(oid, LargeObjectManager.READ);
                byte buf[] = new byte[obj.size()];
                obj.read(buf, 0, obj.size());
                obj.close();
                System.out.print(""  BLOB size: "" + buf.length);
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                con.commit();
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public MathRealMatrix transpose() {
        int m = this.M;
        int n = this.N;
        double[][] mData = this.Data;
        double[][] newData = new double[n][m];
        for (int ni = 0; ni < n; ni++) {
            for (int mi = 0; mi < m; mi++) {
                newData[ni][mi] = mData[mi][ni];
            }
        }
        return new MathRealMatrix(newData);
    }",0,0
"    private void doAboutDonate() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(KlangConstants.KLANGEDITOR_URL_DONATE));
                } catch (Exception err) {
                    err.printStackTrace();
                }
            }
        }
    }","    public static long F(int n) {
        if (n == 0) return 0;
        if (n == 1) return 1;
        return F(n - 1) + F(n - 2);
    }",0,0
"    public IntSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }","    public static void main(String[] args) {
        System.out.println(""Chapter 2 example 4: Negative leading"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0204.pdf""));
            document.open();
            document.add(new Phrase(16, ""\n\n\n""));
            document.add(new Phrase(-16, ""Hello, this is a very long phrase to show you the somewhat odd effect of a negative leading. You can write from bottom to top. This is not fully supported. It's something between a feature and a bug.""));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0,0
"            public void mouseClicked(MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(""http://www.ignissoft.com""));
                    } catch (Exception e) {
                        log.log(Level.WARNING, ""Failed openning browser to Ignis website: "" + e.getMessage());
                    }
                }
            }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    private float[][] Transpose(float[][] a) {
        if (INFO) {
            System.out.println(""Performing Transpose..."");
        }
        float m[][] = new float[a[0].length][a.length];
        for (int i = 0; i < a.length; i++) for (int j = 0; j < a[i].length; j++) m[j][i] = a[i][j];
        return m;
    }",0,0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://prologdev1:5432/wdb"";
        final String dbuser = ""guest2"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT value, dataProviderName, placeName, placeGeometry,"" + ""        referencetime, "" + ""        validFrom, validTo, "" + ""        valueParameterName, valueParameterUnit, "" + ""        levelParameterName, levelUnitName, levelFrom, levelTo, "" + ""        dataVersion, confidenceCode, storetime, valueid, valuetype "" + "" FROM wci.read( array['hirlam 10'], 'POINT( 10.0 59.0 )', "" + ""                ('2000-01-03 01:00:00', '2000-01-03 01:00:00', 'exact'), "" + ""                NULL, "" + ""                array['instant temperature of air'], "" + ""                ( 2, 2, 'distance above ground', 'exact' ), "" + ""                array[-1], "" + ""                NULL::wci.returnOid )"";
        final String colNames[] = { ""value"", ""dataProviderName"", ""placeName"", ""referencetime"", ""validFrom"", ""validTo"", ""valueParameterName"", ""valueParameterUnit"", ""levelParameterName"", ""levelUnitName"", ""levelFrom"", ""levelTo"" };
        ResultSet rs = null;
        try {
            con.setAutoCommit(false);
            statement.execute(wdbInit);
            LargeObjectManager lobj = ((org.postgresql.PGConnection) con).getLargeObjectAPI();
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                long oid = rs.getLong(""value"");
                LargeObject obj = lobj.open(oid, LargeObjectManager.READ);
                byte buf[] = new byte[obj.size()];
                obj.read(buf, 0, obj.size());
                obj.close();
                System.out.print(""  BLOB size: "" + buf.length);
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                con.commit();
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }","    public Object[] toArray(Object[] a) {
        if (a.length < size) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size) a[size] = null;
        return a;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    public static final double[][] transpose(final double m1[][]) {
        double[][] m3 = new double[m1[0].length][m1.length];
        for (int ii = 0; ii < m1.length; ii++) for (int jj = 0; jj < m1[ii].length; jj++) m3[jj][ii] = m1[ii][jj];
        return m3;
    }","    public static XMLShowInfo NzbSearch(TVRageShowInfo tvrage, XMLShowInfo xmldata, int latestOrNext) {
        String newzbin_query = """", csvData = """", hellaQueueDir = """", newzbinUsr = """", newzbinPass = """";
        String[] tmp;
        DateFormat tvRageDateFormat = new SimpleDateFormat(""MMM/dd/yyyy"");
        DateFormat tvRageDateFormatFix = new SimpleDateFormat(""yyyy-MM-dd"");
        newzbin_query = ""?q="" + xmldata.showName + ""+"";
        if (latestOrNext == 0) {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.latestSeasonNum + ""x"" + tvrage.latestEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.latestSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.latestAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.latestTitle;
        } else {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.nextSeasonNum + ""x"" + tvrage.nextEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.nextSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.nextAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.nextTitle;
        }
        newzbin_query += ""&searchaction=Search"";
        newzbin_query += ""&fpn=p"";
        newzbin_query += ""&category=8category=11"";
        newzbin_query += ""&area=-1"";
        newzbin_query += ""&u_nfo_posts_only=0"";
        newzbin_query += ""&u_url_posts_only=0"";
        newzbin_query += ""&u_comment_posts_only=0"";
        newzbin_query += ""&u_v3_retention=1209600"";
        newzbin_query += ""&ps_rb_language="" + xmldata.language;
        newzbin_query += ""&sort=ps_edit_date"";
        newzbin_query += ""&order=desc"";
        newzbin_query += ""&areadone=-1"";
        newzbin_query += ""&feed=csv"";
        newzbin_query += ""&ps_rb_video_format="" + xmldata.format;
        newzbin_query = newzbin_query.replaceAll("" "", ""%20"");
        System.out.println(""http://v3.newzbin.com/search/"" + newzbin_query);
        try {
            URL url = new URL(""http://v3.newzbin.com/search/"" + newzbin_query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            csvData = in.readLine();
            if (csvData != null) {
                JavaNZB.searchCount++;
                if (searchCount == 6) {
                    searchCount = 0;
                    System.out.println(""Sleeping for 60 seconds"");
                    try {
                        Thread.sleep(60000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                tmp = csvData.split("","");
                tmp[2] = tmp[2].substring(1, tmp[2].length() - 1);
                tmp[3] = tmp[3].substring(1, tmp[3].length() - 1);
                Pattern p = Pattern.compile(""[\\\\</:>?\\[|\\]\""]"");
                Matcher matcher = p.matcher(tmp[3]);
                tmp[3] = matcher.replaceAll("" "");
                tmp[3] = tmp[3].replaceAll(""&"", ""and"");
                URLConnection urlConn;
                DataOutputStream printout;
                url = new URL(""http://v3.newzbin.com/api/dnzb/"");
                urlConn = url.openConnection();
                urlConn.setDoInput(true);
                urlConn.setDoOutput(true);
                urlConn.setUseCaches(false);
                urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                printout = new DataOutputStream(urlConn.getOutputStream());
                String content = ""username="" + JavaNZB.newzbinUsr + ""&password="" + JavaNZB.newzbinPass + ""&reportid="" + tmp[2];
                printout.writeBytes(content);
                printout.flush();
                printout.close();
                BufferedReader nzbInput = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
                String format = """";
                if (xmldata.format.equals(""17"")) format = "" Xvid"";
                if (xmldata.format.equals(""131072"")) format = "" x264"";
                if (xmldata.format.equals(""2"")) format = "" DVD"";
                if (xmldata.format.equals(""4"")) format = "" SVCD"";
                if (xmldata.format.equals(""8"")) format = "" VCD"";
                if (xmldata.format.equals(""32"")) format = "" HDts"";
                if (xmldata.format.equals(""64"")) format = "" WMV"";
                if (xmldata.format.equals(""128"")) format = "" Other"";
                if (xmldata.format.equals(""256"")) format = "" ratDVD"";
                if (xmldata.format.equals(""512"")) format = "" iPod"";
                if (xmldata.format.equals(""1024"")) format = "" PSP"";
                File f = new File(JavaNZB.hellaQueueDir, tmp[3] + format + "".nzb"");
                BufferedWriter out = new BufferedWriter(new FileWriter(f));
                String str;
                System.out.println(""--Downloading "" + tmp[3] + format + "".nzb"" + "" to queue directory--"");
                while (null != ((str = nzbInput.readLine()))) out.write(str);
                nzbInput.close();
                out.close();
                if (latestOrNext == 0) {
                    xmldata.episode = tvrage.latestEpisodeNum;
                    xmldata.season = tvrage.latestSeasonNum;
                } else {
                    xmldata.episode = tvrage.nextEpisodeNum;
                    xmldata.season = tvrage.nextSeasonNum;
                }
            } else System.out.println(""No new episode posted"");
            System.out.println();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
            System.out.println(""IO Exception from NzbSearch"");
        }
        return xmldata;
    }",0,0
"            public void actionPerformed(ActionEvent e) {
                String sql = ""insert into jjgenjang values ('"" + Fieldno.getText() + ""','"" + Fieldalas.getText() + ""','"" + Fieldtinggi.getText() + ""','"" + Fieldluas.getText() + ""')"";
                if (Fieldalas.getText().trim().equals("""")) {
                    JOptionPane.showMessageDialog(frame, ""alas masih kosong!"", ""Simpan data"", JOptionPane.WARNING_MESSAGE);
                } else {
                    try {
                        Connection conn = DriverManager.getConnection(""jdbc:odbc:jjgenjang"");
                        Statement statement = conn.createStatement();
                        statement.executeUpdate(sql);
                        statement.close();
                        Fieldno.setText("""");
                        Fieldalas.setText("""");
                        Fieldtinggi.setText("""");
                        Fieldluas.setText("""");
                        Fieldalas.requestFocus();
                    } catch (Exception exc) {
                        System.err.println(""Error:"" + exc);
                    }
                }
            }","    public void bubblesort(String filenames[]) {
        for (int i = filenames.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                String temp;
                if (filenames[j].compareTo(filenames[j + 1]) > 0) {
                    temp = filenames[j];
                    filenames[j] = filenames[j + 1];
                    filenames[j + 1] = temp;
                }
            }
        }
    }",0,0
"    public static Object[] addToArray(Object[] array, Object member) {
        Object[] newArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = member;
        return newArray;
    }","    public int fibonacci(int num) {
        if (num == 0) {
            return 0;
        } else if (num == 1) {
            return 1;
        } else {
            processor.getAlgData().setRecursiveCalls(processor.getAlgData().getRecursiveCalls() + 2);
            return fibonacci(num - 1) + fibonacci(num - 2);
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static Double[][] transposeMatrix(Double[][] m) {
        int r = m.length;
        int c = m[0].length;
        Double[][] t = new Double[c][r];
        for (int i = 0; i < r; ++i) {
            for (int j = 0; j < c; ++j) {
                t[j][i] = m[i][j];
            }
        }
        return t;
    }",0,0
"    public static void main(String[] args) {
        System.out.println(""Chapter 1 example 3: PageSize"");
        Document document = new Document(PageSize.A4.rotate());
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0103.pdf""));
            document.open();
            for (int i = 0; i < 20; i++) {
                document.add(new Phrase(""Hello World, Hello Sun, Hello Moon, Hello Stars, Hello Sea, Hello Land, Hello People. ""));
            }
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    private long fib(long n) {
        if (n == 0) return 0L;
        if (n == 1) return 1L;
        return fib(n - 1) + fib(n - 2);
    }",0,0
"    public void bubbleSort(int[] arr) {
        boolean swapped = true;
        int j = 0;
        int tmp;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < arr.length - j; i++) {
                if (arr[i] > arr[i + 1]) {
                    tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    swapped = true;
                }
            }
        }
    }","    private void clickLabelMouseClicked(java.awt.event.MouseEvent evt) {
        if (!Desktop.isDesktopSupported()) return;
        try {
            NULogger.getLogger().log(Level.INFO, ""{0}: Link clicked.. Opening the homepage.."", getClass().getName());
            Desktop.getDesktop().browse(new URI(""http://neembuuuploader.sourceforge.net/""));
        } catch (Exception ex) {
            NULogger.getLogger().severe(ex.toString());
        }
    }",0,0
"    public PNMatrix transpose() {
        PNMatrix X = new PNMatrix(n, m);
        int[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static int[] permute(int N, Random rand) {
        int[] a = new int[N];
        for (int i = 0; i < N; i++) a[i] = i;
        for (int i = 0; i < N; i++) {
            int r = rand.nextInt(i + 1);
            int swap = a[r];
            a[r] = a[i];
            a[i] = swap;
        }
        return a;
    }",0,0
"    public boolean copyDir(File oSource, File oDestination) {
        try {
            if (oSource.exists()) {
                if (oSource.isDirectory()) {
                    if (!oDestination.exists()) {
                        oDestination.mkdir();
                    }
                    String[] children = oSource.list();
                    for (int i = 0; i < children.length; i++) {
                        copyDir(new File(oSource, children[i]), new File(oDestination, children[i]));
                    }
                } else {
                    InputStream in = new FileInputStream(oSource);
                    OutputStream out = new FileOutputStream(oDestination);
                    byte[] buf = new byte[1024];
                    int len;
                    while ((len = in.read(buf)) > 0) {
                        out.write(buf, 0, len);
                    }
                    in.close();
                    out.close();
                }
                return true;
            }
        } catch (IOException ex) {
            throw new FilesystemException(ex.getMessage() + "" "" + oSource.getName(), ex);
        }
        return false;
    }","	public static void BubbleSortDouble1(double[] num) {
		boolean flag = true; // set flag to true to begin first pass
		double temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}",0,0
"    boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","	public FTPClient sample1a(String server, int port, String username, String password) throws SocketException, IOException {
		FTPClient ftpClient = new FTPClient();
		ftpClient.connect(server, port);
		ftpClient.login(username, password);
		return ftpClient;
	}",0,0
"    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public int saveBuildingInstructionstoPDF(boolean mustWrite, String testNum) {
        int totalbricks = 0;
        Paragraph p;
        Chunk chunk;
        int width;
        int i;
        File fileToDelete;
        if (mustWrite) {
            totalNumLegoBricksUsed = new int[LBricks.numLegoBricks];
            try {
                Document document = new Document(PageSize.A0, 50, 50, 50, 50);
                PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(program.directory + ""BuildingInstructions"" + program.startIndex + ""_"" + program.stopIndex + testNum + "".pdf""));
                writer.setPageEvent(new pdfListener());
                document.open();
                PdfContentByte cb = writer.getDirectContent();
                int canvasWidth = (int) PageSize.A0.width() - 200;
                int canvasHeight = (int) PageSize.A0.height() - 200;
                if (program.gridWidth != program.gridHeight) {
                    if (program.gridWidth > program.gridHeight) {
                        width = (int) Math.floor((double) (canvasWidth - 100) / (double) program.gridWidth);
                    } else {
                        width = (int) Math.floor((double) (canvasWidth - 100) / (double) program.gridHeight);
                    }
                } else {
                    width = (int) Math.floor((double) (canvasWidth - 100) / (double) program.gridWidth);
                }
                for (i = program.startIndex; i <= program.stopIndex; i++) {
                    p = new Paragraph();
                    chunk = new Chunk(""Layout Layer "" + i + "" :"", FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, Color.black));
                    chunk.setUnderline(1.5f, -2.5f);
                    p.add(chunk);
                    document.add(p);
                    Graphics2D g = cb.createGraphics(canvasWidth, canvasHeight);
                    g.setColor(Color.LIGHT_GRAY);
                    drawGrid(g, width);
                    if (!program.fileExtension.equals("".sl2"")) {
                        if (i > program.startIndex) {
                            g.setColor(Color.gray);
                            loadLayerBricks(i - 1, false);
                            drawBlocks(g, 100, 150, currentLayerBricks, width);
                            g.setColor(Color.DARK_GRAY);
                            drawBlocksOutline(g, 100, 150, currentLayerBricks, width);
                        }
                    }
                    if (!program.fileExtension.equals("".sl2"")) {
                        g.setColor(Color.LIGHT_GRAY);
                    }
                    loadLayerBricks(i, true);
                    drawBlocks(g, 100, 150, currentLayerBricks, width);
                    g.setColor(Color.BLACK);
                    drawBlocksOutline(g, 100, 150, currentLayerBricks, width);
                    g.setColor(Color.BLACK);
                    g.dispose();
                    cb.saveState();
                    document.newPage();
                }
                p = new Paragraph();
                chunk = new Chunk(""LEGO bricks required to build sculpture:"", FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, Color.black));
                chunk.setUnderline(1.5f, -2.5f);
                p.add(chunk);
                document.add(p);
                float[] widths = { 0.60f, 0.40f };
                PdfPTable table = new PdfPTable(widths);
                table.setTotalWidth(250);
                table.setLockedWidth(true);
                table.setSpacingBefore(25f);
                table.getDefaultCell().setBackgroundColor(new Color(0.59f, 0.6f, 0.97f));
                table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                table.setHorizontalAlignment(Element.ALIGN_LEFT);
                PdfPCell cell = new PdfPCell(new Paragraph(""Type"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(new Color(0.34f, 0.41f, 0.98f));
                table.addCell(cell);
                cell = new PdfPCell(new Paragraph(""Amount required"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(new Color(0.34f, 0.41f, 0.98f));
                table.addCell(cell);
                totalbricks += totalNumLegoBricksUsed[0];
                table.addCell("""" + LBricks.blockNames[0]);
                table.addCell("""" + totalNumLegoBricksUsed[0]);
                for (i = 1; i < 10; i = i + 2) {
                    totalbricks += totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1];
                    table.addCell("""" + LBricks.blockNames[i]);
                    table.addCell("""" + (totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1]));
                }
                for (i = 11; i < 16; i++) {
                    totalbricks += totalNumLegoBricksUsed[i];
                    table.addCell("""" + LBricks.blockNames[i]);
                    table.addCell("""" + totalNumLegoBricksUsed[i]);
                }
                for (i = 16; i < LBricks.numLegoBricks - 1; i = i + 2) {
                    totalbricks += totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1];
                    table.addCell("""" + LBricks.blockNames[i]);
                    table.addCell("""" + (totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1]));
                }
                cell = new PdfPCell(new Paragraph(""Total"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(Color.YELLOW);
                table.addCell(cell);
                cell = new PdfPCell(new Paragraph("""" + totalbricks, FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(Color.YELLOW);
                table.addCell(cell);
                document.add(table);
                document.close();
            } catch (Exception e) {
                System.out.println(""An error occured while trying to save the list of LEGO bricks used."");
                System.out.println(e.getMessage());
                System.exit(0);
            }
        } else {
            for (i = 0; i < LBricks.numLegoBricks; i++) {
                totalbricks += totalNumLegoBricksUsed[i];
            }
        }
        return totalbricks;
    }",0,0
"    private void clickLabelMouseClicked(java.awt.event.MouseEvent evt) {
        if (!Desktop.isDesktopSupported()) return;
        try {
            NULogger.getLogger().log(Level.INFO, ""{0}: Link clicked.. Opening the homepage.."", getClass().getName());
            Desktop.getDesktop().browse(new URI(""http://neembuuuploader.sourceforge.net/""));
        } catch (Exception ex) {
            NULogger.getLogger().severe(ex.toString());
        }
    }","    public void elimina(Cliente cli) throws errorSQL, errorConexionBD {
        System.out.println(""GestorCliente.elimina()"");
        int id = cli.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM cliente WHERE cod_cliente ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            sql = ""DELETE FROM usuario WHERE cod_usuario ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            sql = ""DELETE FROM persona WHERE id ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        }
    }",0,0
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","        private Factorisation(int entier) {
            factL = new ArrayList<Integer>();
            int n = entier;
            for (int i = 2; i <= n / i; i++) {
                while (n % i == 0) {
                    factL.add(i);
                    n /= i;
                }
            }
            if (n > 1) {
                factL.add(n);
            }
        }",0,0
"    public static double[][] invert(double[][] matrix) {
        double[][] result = new double[matrix[0].length][matrix.length];
        for (int row = 0; row < matrix.length; row++) for (int col = 0; col < matrix[row].length; col++) result[col][row] = result[row][col];
        return result;
    }","    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"    public void put(String path, File fileToPut) throws IOException {
        FTPClient ftp = new FTPClient();
        try {
            int reply;
            ftp.connect(this.endpointURL, this.endpointPort);
            log.debug(""Ftp put reply: "" + ftp.getReplyString());
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp put server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            ftp.enterLocalPassiveMode();
            InputStream input = new FileInputStream(fileToPut);
            if (ftp.storeFile(path, input) != true) {
                ftp.logout();
                input.close();
                throw new IOException(""FTP put exception"");
            }
            input.close();
            ftp.logout();
        } catch (Exception e) {
            log.error(""Ftp client exception: "" + e.getMessage(), e);
            throw new IOException(e.getMessage());
        }
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public void actionPerformed(ActionEvent event) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                Logging.LOG.error(""Failed to open web browser"", e);
            }
        }
    }","    public void testEnd() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""spiritbot\\W"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""spiritbot: how are you doing"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }",0,0
"    public RealSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }","	public static void shuffle1(int[] a) {
		//Standard Fisher-Yates/Knuth Shuffle
		int length = a.length;

		Random random = new Random();
		random.nextInt();

		for(int i = 0; i < length; i++) {
			//Chose index to swap with from i <= j < length
			int j = i + random.nextInt(length-i);

			//Swap
			int tmp = a[i];
			a[i] = a[j];
			a[j] = tmp;
		}
	}",0,0
"    private Integer slowFib(int i) {
        if (i <= 0) return 0;
        if (i == 1) return 1;
        return slowFib(i - 1) + slowFib(i - 2);
    }","    public static void main(String[] args) {
        System.out.println(""Chapter 1 example 1: Hello World"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0101.pdf""));
            document.open();
            document.add(new Paragraph(""Hello World""));
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0,0
"    public static void main(String[] args) {
        System.out.println(""Chapter 6 example 2: Adding a Gif, Jpeg and Png-file using filenames"");
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(""Chap0602.pdf""));
            HtmlWriter.getInstance(document, new FileOutputStream(""Chap0602.html""));
            document.open();
            Image gif = Image.getInstance(""vonnegut.gif"");
            Image jpeg = Image.getInstance(""myKids.jpg"");
            Image png = Image.getInstance(""hitchcock.png"");
            document.add(gif);
            document.add(jpeg);
            document.add(png);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public static Object[] addToArray(Object[] array, Object member) {
        Object[] newArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = member;
        return newArray;
    }",0,0
"    public static double[][] calcTranspose(double[][] mat) {
        double[][] transpose = new double[mat[0].length][mat.length];
        for (int a = 0; a < transpose.length; a++) {
            for (int b = 0; b < transpose[0].length; b++) {
                transpose[a][b] = mat[b][a];
            }
        }
        return transpose;
    }","    public void browse(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                logger.getLogger().log(Level.WARNING, Application.getInstance(GreenTone.class).getContext().getResourceMap().getString(""ErrorMessage.cannotOpenURL"") + "" "" + uri.getPath(), e);
            }
        }
    }",0,0
"    public static final int binarySearch(Object[] a, Object key, int begin, int end) {
        int x1 = begin;
        int x2 = end;
        int i = x1 + (x2 - x1) / 2, c;
        while (x1 < x2) {
            c = ((Comparable) a[i]).compareTo(key);
            if (c == 0) {
                return i;
            } else if (c < 0) {
                x1 = i + 1;
            } else {
                x2 = i;
            }
            i = x1 + (x2 - x1) / 2;
        }
        return -1 * (i + 1);
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static Object[] append(Object[] lst, Object[] lst1) {
        Object[] l = (Object[]) Array.newInstance(lst.getClass().getComponentType(), lst.length + lst1.length);
        System.arraycopy(lst, 0, l, 0, lst.length);
        System.arraycopy(lst1, 0, l, lst.length, lst1.length);
        return l;
    }",0,0
"    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, ""Failed to launch the link, "" + ""your computer is likely misconfigured."", ""Cannot Launch Link"", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, ""Java is not able to launch links on your computer."", ""Cannot Launch Link"", JOptionPane.WARNING_MESSAGE);
        }
    }","    boolean deleteAll(File file) {
        if (file.isDirectory()) {
            for (File f : file.listFiles()) deleteAll(f);
        }
        return file.delete();
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"        private Factorisation(int entier) {
            factL = new ArrayList<Integer>();
            int n = entier;
            for (int i = 2; i <= n / i; i++) {
                while (n % i == 0) {
                    factL.add(i);
                    n /= i;
                }
            }
            if (n > 1) {
                factL.add(n);
            }
        }","    public Object[] toArray(Object[] a) {
        if (a.length < size) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size) a[size] = null;
        return a;
    }",0,0
"    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public final void randomize(int[] index, Random random) {
        for (int j = index.length - 1; j > 0; j--) {
            int k = random.nextInt(j + 1);
            int temp = index[j];
            index[j] = index[k];
            index[k] = temp;
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static long crc32(String s) {
        java.util.zip.CRC32 crc32 = new java.util.zip.CRC32();
        crc32.update(s.getBytes());
        return crc32.getValue();
    }",0,0
"    public static LImage[][] getFlipHorizintalImage2D(LImage[][] pixels) {
        int w = pixels.length;
        int h = pixels[0].length;
        LImage pixel[][] = new LImage[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                pixel[i][j] = pixels[j][i];
            }
        }
        return pixel;
    }","    public void testSentFront() {
        String botRecord = ""hello"";
        String msg = ""hellohow are you"";
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile("".*?hel"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(msg);
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }",0,0
"    public RobotList<Location> sort_incr_Location(RobotList<Location> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        Location cur_loc = this.getLocation();
        for (int i = 0; i < length; i++) {
            enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i)));
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value > enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Location> new_location_list = new RobotList<Location>(Location.class);
        for (int i = 0; i < length; i++) {
            new_location_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_location_list;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    private void openSaveFileActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == openSaveFile) {
            int returnVal = fc.showOpenDialog(ParameterSolutions.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File savedFile = fc.getSelectedFile();
                log.append(""Opening: "" + savedFile.getName() + ""\n"");
                String name = savedFile.getName();
                if (!savedFile.canRead() || !((name.substring(name.length() - 4, name.length()).equals("".cpm""))) || !recoverSavedData(savedFile)) {
                    log.append(""That is not a valid saved file, please choose"" + "" a file previously saved in this program.\n"");
                }
            } else {
                log.append(""Dialog Cancelled by User.\n"");
            }
        }
    }","    public RMatrix transposed() {
        RMatrix m = new RMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }",0,0
"    private static boolean deleteFile(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                deleteFile(child);
            }
        }
        return resource.delete();
    }","    public boolean copyDir(File oSource, File oDestination) {
        try {
            if (oSource.exists()) {
                if (oSource.isDirectory()) {
                    if (!oDestination.exists()) {
                        oDestination.mkdir();
                    }
                    String[] children = oSource.list();
                    for (int i = 0; i < children.length; i++) {
                        copyDir(new File(oSource, children[i]), new File(oDestination, children[i]));
                    }
                } else {
                    InputStream in = new FileInputStream(oSource);
                    OutputStream out = new FileOutputStream(oDestination);
                    byte[] buf = new byte[1024];
                    int len;
                    while ((len = in.read(buf)) > 0) {
                        out.write(buf, 0, len);
                    }
                    in.close();
                    out.close();
                }
                return true;
            }
        } catch (IOException ex) {
            throw new FilesystemException(ex.getMessage() + "" "" + oSource.getName(), ex);
        }
        return false;
    }",0,0
"    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }","    private double[][] transpose(double[][] in) {
        double[][] out = new double[in[0].length][in.length];
        for (int r = 0; r < in.length; r++) {
            for (int c = 0; c < in[0].length; c++) {
                out[c][r] = in[r][c];
            }
        }
        return out;
    }",0,0
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Contact contact = (Contact) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_CONTACT""));
            pst.setString(1, contact.getName());
            pst.setString(2, contact.getFirstname());
            pst.setString(3, contact.getPhone());
            pst.setString(4, contact.getEmail());
            if (contact.getAccount() == 0) {
                pst.setNull(5, java.sql.Types.INTEGER);
            } else {
                pst.setInt(5, contact.getAccount());
            }
            pst.setBoolean(6, contact.isArchived());
            pst.setInt(7, contact.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }",0,0
"    public IntSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }","    public void help() {
        if (Desktop.isDesktopSupported()) {
            URI uri = URI.create(props.getProperty(""help.url""));
            try {
                Desktop.getDesktop().browse(uri);
            } catch (IOException ex) {
                logger.error(ex, ex);
            }
        }
    }",0,0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], 'POINT( 10.0 59.0 )', "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returnFloat )"";
        final String colNames[] = { ""value"", ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println(""EXCEPTION: rs.close: "" + ex);
                }
            }
        }
    }","    public int saveBuildingInstructionstoPDF(boolean mustWrite) {
        int totalbricks = 0;
        Paragraph p;
        Chunk chunk;
        int width;
        int i;
        File fileToDelete;
        if (mustWrite) {
            try {
                Document document = new Document(PageSize.A0, 50, 50, 50, 50);
                PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(layersDirectory + ""BuildingInstructions"" + firstLayer + ""_"" + lastLayer + "".pdf""));
                writer.setPageEvent(new pdfListener());
                document.open();
                PdfContentByte cb = writer.getDirectContent();
                int canvasWidth = (int) PageSize.A0.width() - 200;
                int canvasHeight = (int) PageSize.A0.height() - 200;
                if (xSize != ySize) {
                    if (xSize > ySize) {
                        width = (int) Math.floor((double) (canvasWidth - 100) / (double) xSize);
                    } else {
                        width = (int) Math.floor((double) (canvasWidth - 100) / (double) ySize);
                    }
                } else {
                    width = (int) Math.floor((double) (canvasWidth - 100) / (double) xSize);
                }
                for (i = firstLayer; i <= lastLayer; i++) {
                    p = new Paragraph();
                    chunk = new Chunk(""Layout Layer "" + i + "" :"", FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, Color.black));
                    chunk.setUnderline(1.5f, -2.5f);
                    p.add(chunk);
                    document.add(p);
                    Graphics2D g = cb.createGraphics(PageSize.A0.width(), PageSize.A0.height());
                    g.setColor(Color.LIGHT_GRAY);
                    drawGrid(g, width);
                    if (i > firstLayer) {
                        g.setColor(Color.gray);
                        loadLayerBricks(i - 1);
                        drawBlocks(g, 100, 150, currentLayerBricks, width);
                        g.setColor(Color.DARK_GRAY);
                        drawBlocksOutline(g, 100, 150, currentLayerBricks, width);
                    }
                    g.setColor(Color.LIGHT_GRAY);
                    loadLayerBricks(i);
                    drawBlocks(g, 100, 150, currentLayerBricks, width);
                    g.setColor(Color.BLACK);
                    drawBlocksOutline(g, 100, 150, currentLayerBricks, width);
                    g.setColor(Color.BLACK);
                    g.dispose();
                    cb.saveState();
                    document.newPage();
                }
                p = new Paragraph();
                chunk = new Chunk(""Bricks required to build sculpture:"", FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, Color.black));
                chunk.setUnderline(1.5f, -2.5f);
                p.add(chunk);
                document.add(p);
                float[] widths = { 0.60f, 0.40f };
                PdfPTable table = new PdfPTable(widths);
                table.setTotalWidth(250);
                table.setLockedWidth(true);
                table.setSpacingBefore(25f);
                table.getDefaultCell().setBackgroundColor(new Color(0.59f, 0.6f, 0.97f));
                table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                table.setHorizontalAlignment(Element.ALIGN_LEFT);
                PdfPCell cell = new PdfPCell(new Paragraph(""Type"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(new Color(0.34f, 0.41f, 0.98f));
                table.addCell(cell);
                cell = new PdfPCell(new Paragraph(""Amount required"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(new Color(0.34f, 0.41f, 0.98f));
                table.addCell(cell);
                totalbricks += totalNumLegoBricksUsed[0];
                table.addCell("""" + LBricks.blockNames[0]);
                table.addCell("""" + totalNumLegoBricksUsed[0]);
                for (i = 1; i < 10; i = i + 2) {
                    totalbricks += totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1];
                    table.addCell("""" + LBricks.blockNames[i]);
                    table.addCell("""" + (totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1]));
                }
                for (i = 11; i < 16; i++) {
                    totalbricks += totalNumLegoBricksUsed[i];
                    table.addCell("""" + LBricks.blockNames[i]);
                    table.addCell("""" + totalNumLegoBricksUsed[i]);
                }
                for (i = 16; i < LBricks.numLegoBricks - 1; i = i + 2) {
                    totalbricks += totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1];
                    table.addCell("""" + LBricks.blockNames[i]);
                    table.addCell("""" + (totalNumLegoBricksUsed[i] + totalNumLegoBricksUsed[i + 1]));
                }
                cell = new PdfPCell(new Paragraph(""Total"", FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(Color.YELLOW);
                table.addCell(cell);
                cell = new PdfPCell(new Paragraph("""" + totalbricks, FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD)));
                cell.setBackgroundColor(Color.YELLOW);
                table.addCell(cell);
                document.add(table);
                document.close();
            } catch (Exception e) {
                System.out.println(""An error occured while trying to save the list of LEGO bricks used."");
                System.out.println(e.getMessage());
                System.exit(0);
            }
        } else {
            for (i = 0; i < LBricks.numLegoBricks; i++) {
                totalbricks += totalNumLegoBricksUsed[i];
            }
        }
        return totalbricks;
    }",0,0
"    public TaggedDoubleChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            double tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    private void buildAttributeConstructor(Instances data) throws Exception {
        m_eigenvalues = null;
        m_outputNumAtts = -1;
        m_attributeFilter = null;
        m_nominalToBinFilter = null;
        m_sumOfEigenValues = 0.0;
        if (data.checkForStringAttributes()) {
            throw new UnsupportedAttributeTypeException(""Can't handle string attributes!"");
        }
        m_trainInstances = data;
        m_trainCopy = new Instances(m_trainInstances);
        m_replaceMissingFilter = new ReplaceMissingValues();
        m_replaceMissingFilter.setInputFormat(m_trainInstances);
        m_trainInstances = Filter.useFilter(m_trainInstances, m_replaceMissingFilter);
        if (m_normalize) {
            m_normalizeFilter = new Normalize();
            m_normalizeFilter.setInputFormat(m_trainInstances);
            m_trainInstances = Filter.useFilter(m_trainInstances, m_normalizeFilter);
        }
        m_nominalToBinFilter = new NominalToBinary();
        m_nominalToBinFilter.setInputFormat(m_trainInstances);
        m_trainInstances = Filter.useFilter(m_trainInstances, m_nominalToBinFilter);
        Vector deleteCols = new Vector();
        for (int i = 0; i < m_trainInstances.numAttributes(); i++) {
            if (m_trainInstances.numDistinctValues(i) <= 1) {
                deleteCols.addElement(new Integer(i));
            }
        }
        if (m_trainInstances.classIndex() >= 0) {
            m_hasClass = true;
            m_classIndex = m_trainInstances.classIndex();
            deleteCols.addElement(new Integer(m_classIndex));
        }
        if (deleteCols.size() > 0) {
            m_attributeFilter = new Remove();
            int[] todelete = new int[deleteCols.size()];
            for (int i = 0; i < deleteCols.size(); i++) {
                todelete[i] = ((Integer) (deleteCols.elementAt(i))).intValue();
            }
            m_attributeFilter.setAttributeIndicesArray(todelete);
            m_attributeFilter.setInvertSelection(false);
            m_attributeFilter.setInputFormat(m_trainInstances);
            m_trainInstances = Filter.useFilter(m_trainInstances, m_attributeFilter);
        }
        m_numInstances = m_trainInstances.numInstances();
        m_numAttribs = m_trainInstances.numAttributes();
        fillCorrelation();
        double[] d = new double[m_numAttribs];
        double[][] v = new double[m_numAttribs][m_numAttribs];
        Matrix corr = new Matrix(m_correlation);
        corr.eigenvalueDecomposition(v, d);
        m_eigenvectors = (double[][]) v.clone();
        m_eigenvalues = (double[]) d.clone();
        for (int i = 0; i < m_eigenvalues.length; i++) {
            if (m_eigenvalues[i] < 0) {
                m_eigenvalues[i] = 0.0;
            }
        }
        m_sortedEigens = Utils.sort(m_eigenvalues);
        m_sumOfEigenValues = Utils.sum(m_eigenvalues);
        m_transformedFormat = setOutputFormat();
        if (m_transBackToOriginal) {
            m_originalSpaceFormat = setOutputFormatOriginal();
            int numVectors = (m_transformedFormat.classIndex() < 0) ? m_transformedFormat.numAttributes() : m_transformedFormat.numAttributes() - 1;
            double[][] orderedVectors = new double[m_eigenvectors.length][numVectors + 1];
            for (int i = m_numAttribs - 1; i > (m_numAttribs - numVectors - 1); i--) {
                for (int j = 0; j < m_numAttribs; j++) {
                    orderedVectors[j][m_numAttribs - i] = m_eigenvectors[j][m_sortedEigens[i]];
                }
            }
            int nr = orderedVectors.length;
            int nc = orderedVectors[0].length;
            m_eTranspose = new double[nc][nr];
            for (int i = 0; i < nc; i++) {
                for (int j = 0; j < nr; j++) {
                    m_eTranspose[i][j] = orderedVectors[j][i];
                }
            }
        }
    }",0,0
"    public Matrice transposee() {
        final int ni = ni();
        final int nj = nj();
        final Matrice r = new Matrice(nj, ni);
        for (int i = 0; i < ni; i++) {
            for (int j = 0; j < nj; j++) {
                r.a_[j][i] = a_[i][j];
            }
        }
        return r;
    }","    public static Object cut(Object obj, int size) {
        int j;
        if ((j = Array.getLength(obj)) == 1) {
            return Array.newInstance(obj.getClass().getComponentType(), 0);
        }
        int k;
        if ((k = j - size - 1) > 0) {
            System.arraycopy(obj, size + 1, obj, size, k);
        }
        j--;
        Object obj1 = Array.newInstance(obj.getClass().getComponentType(), j);
        System.arraycopy(obj, 0, obj1, 0, j);
        return obj1;
    }",0,0
"    public static double[][] Transpose(double[][] a) {
        if (logger.isLoggable(Level.FINEST)) {
            logger.finest(""Performing Transpose..."");
        }
        int tms = a.length;
        double m[][] = new double[tms][tms];
        for (int i = 0; i < tms; i++) {
            for (int j = 0; j < tms; j++) {
                m[i][j] = a[j][i];
            }
        }
        return m;
    }","    public static void main(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""msgsend"";
        String file = null;
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-a"")) {
                file = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: msgsend [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-a attach-file] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            String text = collect(in);
            if (file != null) {
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setText(text);
                MimeBodyPart mbp2 = new MimeBodyPart();
                mbp2.attachFile(file);
                MimeMultipart mp = new MimeMultipart();
                mp.addBodyPart(mbp1);
                mp.addBodyPart(mbp2);
                msg.setContent(mp);
            } else {
                msg.setText(text);
            }
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"    public ZnMatrix transposed() {
        ZnMatrix m = new ZnMatrix(columns, rows, modulus);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }","    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }",0,0
"    @SuppressWarnings(""unchecked"")
    public static <T> T[] append(T[] oldArray, T[] toAppend) {
        Class<?> component = oldArray.getClass().getComponentType();
        T[] array = (T[]) Array.newInstance(component, oldArray.length + toAppend.length);
        System.arraycopy(oldArray, 0, array, 0, oldArray.length);
        System.arraycopy(toAppend, 0, array, oldArray.length, toAppend.length);
        return array;
    }","    public void actionPerformed(ActionEvent event) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                Logging.LOG.error(""Failed to open web browser"", e);
            }
        }
    }",0,0
"    private static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public void Sort(int a[]) {
        for (int i = a.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (a[j] > a[j + 1]) {
                    int temp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = temp;
                }
            }
        }
    }","    public void openURI(URI uri) {
        if (!java.awt.Desktop.isDesktopSupported()) {
            JOptionPane.showMessageDialog(this, Messages.getString(""Msg_DesktopIsNotSupported""));
            return;
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            JOptionPane.showMessageDialog(this, Messages.getString(""Msg_BrowseActionNotSupported""));
            return;
        }
        try {
            desktop.browse(uri);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, Messages.getString(""Msg_AnErrorOccuredWhileBrowsing"") + "" "" + e.getMessage());
        }
    }",0,0
"    public ComplexMatrix hermitianAdjoint() {
        final double arrayRe[][] = new double[numCols][numRows];
        final double arrayIm[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            arrayRe[0][i] = matrixRe[i][0];
            arrayIm[0][i] = -matrixIm[i][0];
            for (j = 1; j < numCols; j++) {
                arrayRe[j][i] = matrixRe[i][j];
                arrayIm[j][i] = -matrixIm[i][j];
            }
        }
        return new ComplexMatrix(arrayRe, arrayIm);
    }","    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }","    protected Object growIndexedProperty(String name, Object indexedProperty, int index) {
        if (indexedProperty instanceof List) {
            List list = (List) indexedProperty;
            while (index >= list.size()) {
                Class contentType = getDynaClass().getDynaProperty(name).getContentType();
                Object value = null;
                if (contentType != null) {
                    value = createProperty(name + ""["" + list.size() + ""]"", contentType);
                }
                list.add(value);
            }
        }
        if ((indexedProperty.getClass().isArray())) {
            int length = Array.getLength(indexedProperty);
            if (index >= length) {
                Class componentType = indexedProperty.getClass().getComponentType();
                Object newArray = Array.newInstance(componentType, (index + 1));
                System.arraycopy(indexedProperty, 0, newArray, 0, length);
                indexedProperty = newArray;
                set(name, indexedProperty);
                int newLength = Array.getLength(indexedProperty);
                for (int i = length; i < newLength; i++) {
                    Array.set(indexedProperty, i, createProperty(name + ""["" + i + ""]"", componentType));
                }
            }
        }
        return indexedProperty;
    }",0,0
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    public QMatrix transposed() {
        QMatrix m = new QMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }",0,0
"        @Override
        public void actionPerformed(ActionEvent evt) {
            if (Desktop.isDesktopSupported()) {
                try {
                    URI uri = new URI(evt.getActionCommand());
                    Desktop.getDesktop().browse(uri);
                } catch (Exception e) {
                }
            }
        }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int i = dirChooser.showOpenDialog(getMe());
            if (i == JFileChooser.APPROVE_OPTION) {
                importPathField.setText(dirChooser.getSelectedFile().toString());
            }
            load();
            selectAll();
        }",0,0
