FUNCTION_ONE,FUNCTION_TWO,LABEL,PREDICT
"    public static double[][] Pearson(double[][] X) {
        double[][] output = new double[X.length][X.length];
        try {
            for (int i = 0; i < X.length; i++) {
                output[i][i] = 1.0;
                for (int j = 0; j < i; j++) {
                    output[i][j] = GeneUtils.pearson(X[i], X[j]);
                    output[j][i] = output[i][j];
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Statistic.class.getName()).log(Level.SEVERE, null, ex);
        }
        return output;
    }","            public List<Code> getProperties() {
                if (value == null) {
                    return Collections.emptyList();
                }
                String value = org.apache.commons.lang.StringUtils.strip(this.value, ""\"" \n\r\f\t"");
                Pattern p = Pattern.compile(""(memo|date|desc|summary|milestone|def|value|vdef|quote|ref|title|cause)\\s*:\\s*"");
                Matcher m = p.matcher(value);
                List<Code> result = new LinkedList<Code>();
                String lastKey = ""desc"";
                StringBuilder currentValue = new StringBuilder();
                int pos = 0;
                while (m.find()) {
                    int start = m.start();
                    String key = m.group(1);
                    if (pos < start) {
                        currentValue.append(value.substring(pos, start));
                    }
                    pos = m.end();
                    if (currentValue.length() > 0) {
                        result.add(new TagCodedCode(lastKey + ""=\"""" + org.apache.commons.lang.StringUtils.strip(currentValue.toString(), "", \n\r\f\t"") + ""\""""));
                        currentValue = new StringBuilder();
                    }
                    lastKey = key;
                }
                if (pos < value.length()) {
                    currentValue.append(value.substring(pos));
                }
                if (currentValue.length() > 0) {
                    result.add(new TagCodedCode(lastKey + ""=\"""" + org.apache.commons.lang.StringUtils.strip(currentValue.toString(), "", \n\r\f\t"") + ""\""""));
                }
                return result;
            }",0,0
"            public void actionPerformed(ActionEvent e) {
                JFileChooser chooser = new JFileChooser();
                try {
                    chooser.setCurrentDirectory(new File(new File(""."").getCanonicalPath()));
                } catch (IOException ioe) {
                }
                int returnVal = chooser.showOpenDialog(frame);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    openFile(chooser.getSelectedFile());
                }
            }","        public static void transpose3(double[][] in, double[][] out) {
            if (D.isIdentityMatrix(in)) {
                if (in != out) D.identityMatrix(out);
                return;
            }
            double[][] copyIn;
            if (in == out) {
                D.copyMatrix(in, _dummyMatrix);
                copyIn = _dummyMatrix;
            } else {
                copyIn = in;
            }
            for (int rowI = 0; rowI < 3; rowI++) {
                for (int colI = 0; colI < 3; colI++) {
                    out[colI][rowI] = copyIn[rowI][colI];
                }
            }
        }",0,0
"    public static int[][] getPixels2D(int[] pixels, int w, int h, int size) {
        int[][] npixels = new int[w][h];
        for (int i = 0; i < npixels.length; i++) {
            for (int j = 0; j < npixels[i].length; j++) {
                npixels[i][j] = pixels[i + j * size];
            }
        }
        int pixel[][] = new int[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                pixel[i][j] = npixels[j][i];
            }
        }
        return pixel;
    }","    private void lblHomepageMouseUp(MouseEvent evt) {
        if (!java.awt.Desktop.isDesktopSupported()) {
            return;
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            return;
        }
        try {
            java.net.URI uri = new java.net.URI(this.lblHomepage.getText());
            desktop.browse(uri);
        } catch (Exception e) {
        }
    }",0,0
"    @SuppressWarnings(""unchecked"")
    private void doOpenCommand() {
        int returnVal = fileChooser.showOpenDialog(frame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                String filename = fileChooser.getSelectedFile().getCanonicalPath();
                FileInputStream fin = new FileInputStream(filename);
                ObjectInputStream oin = new ObjectInputStream(fin);
                ArrayList<Column> openedColumns = (ArrayList<Column>) oin.readObject();
                oin.close();
                doNewCommand();
                for (int i = 0; i < openedColumns.size(); i++) {
                    columns.get(i).setTo(openedColumns.get(i));
                }
                setNumColsShown(openedColumns.get(0).getNumColumnsShown());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(frame, ""There was an error while reading the file."", ""Error"", JOptionPane.ERROR_MESSAGE);
            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(frame, ""This isn't the right file type.  You can only load files saved by this program."", ""Error"", JOptionPane.ERROR_MESSAGE);
            } catch (ClassCastException e) {
                JOptionPane.showMessageDialog(frame, ""This isn't the right file type.  You can only load files saved by this program."", ""Error"", JOptionPane.ERROR_MESSAGE);
            }
        }
    }","    private static JsniJavaRefReplacementResult replaceJsniJavaRefs(String jsni) {
        Map<String, String> replacements = new HashMap<String, String>();
        Pattern p = Pattern.compile(""@[a-zA-Z0-9._$]+::[a-zA-Z0-9_$]+(\\(.*?\\)\\(.*?\\))?"");
        Matcher m = p.matcher(jsni);
        while (m.find()) {
            int start = m.start();
            int end = m.end();
            String ref = jsni.substring(start, end);
            String jsToken = makeJsToken(ref);
            while (replacements.containsKey(jsToken) && !replacements.get(jsToken).equals(ref)) {
                jsToken = makeJsToken(jsToken);
            }
            replacements.put(jsToken, ref);
        }
        for (Entry<String, String> kvp : replacements.entrySet()) {
            jsni = jsni.replace(kvp.getValue(), kvp.getKey());
        }
        return new JsniJavaRefReplacementResult(jsni, replacements);
    }",0,0
"    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }","    public Object getProperty(Map context, Object target, Object name) throws OgnlException {
        Object result = null;
        if (name instanceof String) {
            if (name.equals(""size"") || name.equals(""length"")) {
                result = new Integer(Array.getLength(target));
            } else {
                if (name.equals(""iterator"")) {
                    result = Arrays.asList(target).iterator();
                } else {
                    if (name.equals(""isEmpty"") || name.equals(""empty"")) {
                        result = Array.getLength(target) == 0 ? Boolean.TRUE : Boolean.FALSE;
                    } else {
                        result = super.getProperty(context, target, name);
                    }
                }
            }
        } else {
            Object index = name;
            if (index instanceof DynamicSubscript) {
                int len = Array.getLength(target);
                switch(((DynamicSubscript) index).getFlag()) {
                    case DynamicSubscript.ALL:
                        result = Array.newInstance(target.getClass().getComponentType(), len);
                        System.arraycopy(target, 0, result, 0, len);
                        break;
                    case DynamicSubscript.FIRST:
                        index = new Integer((len > 0) ? 0 : -1);
                        break;
                    case DynamicSubscript.MID:
                        index = new Integer((len > 0) ? (len / 2) : -1);
                        break;
                    case DynamicSubscript.LAST:
                        index = new Integer((len > 0) ? (len - 1) : -1);
                        break;
                }
            }
            if (result == null) {
                if (index instanceof Number) {
                    int i = ((Number) index).intValue();
                    result = (i >= 0) ? Array.get(target, i) : null;
                } else {
                    throw new NoSuchPropertyException(target, index);
                }
            }
        }
        return result;
    }",0,0
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(MasteryCards.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
            }
        }","    public LinkedList<SearchResult> search(String strRequest) {
        LinkedList<SearchResult> ret = new LinkedList<SearchResult>();
        HttpClient h = new HttpClient();
        try {
            String strRequestUrl = ""http://www.youporn.com/search"";
            if (strRequest.toLowerCase().contains(""straight!"")) {
                strRequestUrl += ""?type=straight"";
                strRequest = strRequest.replaceAll(""straight!"", """");
            }
            if (strRequest.toLowerCase().contains(""gay!"")) {
                strRequestUrl += ""?type=gay"";
                strRequest = strRequest.replaceAll(""gay!"", """");
            }
            if (strRequest.toLowerCase().contains(""cocks!"")) {
                strRequestUrl += ""?type=cocks"";
                strRequest = strRequest.replaceAll(""cocks!"", """");
            }
            if (!strRequestUrl.endsWith(""search"")) strRequestUrl += ""&""; else strRequestUrl += ""?"";
            strRequestUrl += ""query="" + URLEncoder.encode(strRequest, ""UTF-8"");
            if (NoMuleRuntime.DEBUG) System.out.println(strRequestUrl);
            GetMethod get = new GetMethod(strRequestUrl);
            Date d = new Date((new Date()).getTime() + (1 * 24 * 3600 * 1000));
            h.getState().addCookie(new Cookie("".youporn.com"", ""age_check"", ""1"", ""/"", d, false));
            h.executeMethod(get);
            BufferedReader in = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream()));
            String s = """";
            String res = """";
            while ((s = in.readLine()) != null) {
                res += s;
            }
            get.releaseConnection();
            if (NoMuleRuntime.DEBUG) System.out.println(res);
            String regexp = ""\\<a href\\=\""\\/watch\\/[^\""]+\""\\>[^\\<]+"";
            Pattern p = Pattern.compile(regexp);
            Matcher m = p.matcher(res);
            while (m.find()) {
                int startPos = m.start() + ""<a href=\"""".length();
                String strUrl = ""http://www.youporn.com"";
                int pos = 0;
                for (pos = startPos; pos < m.end() && (res.charAt(pos) != '\""'); pos++) {
                    strUrl += res.charAt(pos);
                }
                String strTitle = res.substring(pos + 2, m.end());
                if (strTitle.trim().length() > 0) ret.add(new SearchResult(strTitle + "" at YouPorn"", strUrl));
            }
            return ret;
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (HttpException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }",0,0
"        public void viewFile(int file_nx) {
            FTPClient ftp = new FTPClient();
            boolean error = false;
            try {
                int reply;
                ftp.connect(""tgftp.nws.noaa.gov"");
                ftp.login(""anonymous"", """");
                Log.d(""WXDroid"", ""Connected to tgftp.nws.noaa.gov."");
                Log.d(""WXDroid"", ftp.getReplyString());
                reply = ftp.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftp.disconnect();
                    System.err.println(""FTP server refused connection."");
                    System.exit(1);
                }
                ftp.changeWorkingDirectory(""fax"");
                Log.d(""WXDroid"", ""working directory: "" + ftp.printWorkingDirectory());
                ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
                InputStream img_file = ftp.retrieveFileStream(""PYAA10.gif"");
                Intent intent = new Intent();
                intent.setClass(WXdroid.this, showProgressFTP.class);
                startActivity(intent);
                String storage_state = Environment.getExternalStorageState();
                if (storage_state.contains(""mounted"")) {
                    String filepath = Environment.getExternalStorageDirectory().getAbsolutePath() + ""/NOAAWX/"";
                    File imageDirectory = new File(filepath);
                    File local_file = new File(filepath + ""PYAA10.gif"");
                    OutputStream out = new FileOutputStream(local_file);
                    byte[] buffer = new byte[1024];
                    int count;
                    while ((count = img_file.read(buffer)) != -1) {
                        if (Thread.interrupted() == true) {
                            String functionName = Thread.currentThread().getStackTrace()[2].getMethodName() + ""()"";
                            throw new InterruptedException(""The function "" + functionName + "" was interrupted."");
                        }
                        out.write(buffer, 0, count);
                    }
                    showImage();
                    out.flush();
                    out.close();
                    img_file.close();
                    Log.d(""WXDroid"", ""file saved: "" + filepath + "" "" + local_file);
                } else {
                    Log.d(""WXDroid"", ""The SD card is not mounted"");
                }
                ftp.logout();
                ftp.disconnect();
            } catch (IOException e) {
                error = true;
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            } finally {
                if (ftp.isConnected()) {
                    try {
                        ftp.disconnect();
                    } catch (IOException ioe) {
                    }
                }
            }
        }","    private int[][] balanceMatchDayMatrix(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = i + 1; j < matrix.length; j++) {
                if (matrix[i][j] % 2 != 0) {
                    int tmp = matrix[i][j];
                    matrix[i][j] = matrix[j][i];
                    matrix[j][i] = tmp;
                }
            }
        }
        return matrix;
    }",0,0
"    public static boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }","    protected void ConvertSpotColors() {
        int pos = 0, lastPos = 0, prevLastPos = 0;
        String blobAsString = new String(mBlob);
        String rgbCommand = """";
        String cmykCommand = """";
        ByteArrayOutputStream theBlob = new ByteArrayOutputStream();
        Pattern p = Pattern.compile(""\\d+.\\d+ \\d+.\\d+ \\d+.\\d+ setrgbcolor"");
        Matcher m = p.matcher(blobAsString);
        while (m.find()) {
            lastPos = m.end();
            pos = m.start();
            rgbCommand = blobAsString.substring(pos, lastPos);
            cmykCommand = GetCMYKCommand(rgbCommand);
            theBlob.write(mBlob, prevLastPos, pos - prevLastPos);
            theBlob.write(cmykCommand.getBytes(), 0, cmykCommand.length());
            prevLastPos = lastPos;
        }
        theBlob.write(mBlob, prevLastPos, mBlob.length - prevLastPos);
        mBlob = theBlob.toByteArray();
    }",0,0
"    public void login(String a_username, String a_password) throws GB_SecurityException {
        Exception l_exception = null;
        try {
            if (clientFtp == null) {
                clientFtp = new FTPClient();
                clientFtp.connect(""ftp://"" + ftp);
            }
            boolean b = clientFtp.login(a_username, a_password);
            if (b) {
                username = a_username;
                password = a_password;
                return;
            }
        } catch (Exception ex) {
            l_exception = ex;
        }
        String l_msg = ""Cannot login to ftp server with user [{1}], {2}"";
        String[] l_replaces = new String[] { a_username, ftp };
        l_msg = STools.replace(l_msg, l_replaces);
        throw new GB_SecurityException(l_msg, l_exception);
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    public static double[][] Transpose(double[][] a) {
        if (logger.isLoggable(Level.FINEST)) {
            logger.finest(""Performing Transpose..."");
        }
        int tms = a.length;
        double m[][] = new double[tms][tms];
        for (int i = 0; i < tms; i++) {
            for (int j = 0; j < tms; j++) {
                m[i][j] = a[j][i];
            }
        }
        return m;
    }","    public int getParamIndex(String sql, String parameter) {
        String pat = ""\\{[a-z0-9_]+\\}"";
        Pattern p = Pattern.compile(pat);
        Matcher m = p.matcher(sql);
        int s = 0;
        int i = 1;
        while (m.find(s)) {
            s = m.start();
            if (sql.substring(s, s + parameter.length()).equals(parameter)) return i;
            s = m.end();
            i++;
        }
        throw new RuntimeException(""Failed to find parameter "" + parameter + "" in sql "" + sql);
    }",0,0
"    public static void main(String[] args) {
        FTPClient client = new FTPClient();
        FileInputStream fis = null;
        try {
            client.connect(""192.168.1.10"");
            client.login(""a"", ""123456"");
            String filename = ""D:\\DHTH5CLT\\HK3\\Ung dung phan tan\\FTP_JAVA\\FTP_DETAI\\FTP\\src\\DemoFTP\\filename\\5s.txt"";
            fis = new FileInputStream(filename);
            client.storeFile(filename, fis);
            client.logout();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                client.disconnect();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }","    public static double[][] transpose(double[][] M) {
        double[][] tM = new double[M[0].length][M.length];
        for (int i = 0; i < tM.length; i++) {
            for (int j = 0; j < tM[0].length; j++) {
                tM[i][j] = M[j][i];
            }
        }
        return tM;
    }",0,0
"    public static void transpose(double[][] A, double[][] B) {
        assert rows(B) == cols(A);
        assert cols(B) == rows(A);
        int rows = rows(B);
        int cols = cols(B);
        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) B[i][j] = A[j][i];
    }","    public Object[] toArray(Object a[]) {
        if (a.length < size) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        if (head < tail) {
            System.arraycopy(elementData, head, a, 0, tail - head);
        } else {
            System.arraycopy(elementData, head, a, 0, elementData.length - head);
            System.arraycopy(elementData, 0, a, elementData.length - head, tail);
        }
        if (a.length > size) a[size] = null;
        return a;
    }",0,0
"    private String removeInvalidChars(String input) {
        String text;
        StringBuffer contents = new StringBuffer();
        BufferedReader reader = null;
        if (isFile) {
            try {
                reader = new BufferedReader(new FileReader(input));
                String line = null;
                while ((line = reader.readLine()) != null) {
                    contents.append(line);
                    contents.append(System.getProperty(""line.separator""));
                }
                reader.close();
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            text = contents.toString();
        } else {
            text = input;
        }
        Pattern pattern = Pattern.compile(""Comment=\""[a-zA-Z0-9 \t\\-\\+\\{\\}!@#$%\\^\\&\\*\\(\\;:\\',./\\?\\\\|<>)]*\"""");
        Matcher matcher = pattern.matcher(text);
        boolean found = false;
        StringBuilder newText = new StringBuilder();
        int lastEnd = 0;
        while (matcher.find()) {
            String str = matcher.group();
            str = str.substring(str.indexOf(""\"""") + 1);
            str = str.substring(0, str.lastIndexOf(""\""""));
            if (str.contains(""&"") || str.contains(""<"") || str.contains("">"") || str.contains(""'"")) {
                if (!found) found = true;
                str = str.replace(""&"", ""&amp;"").replace(""<"", ""&lt;"").replace("">"", ""&gt;"").replace(""'"", ""&apos;"").replace(""\"""", ""&quot;"");
                newText.append(text.substring(lastEnd, matcher.start()) + ""Comment=\"""" + str + ""\"""");
                lastEnd = matcher.end();
            }
        }
        if (found) {
            newText.append(text.substring(lastEnd));
            if (isFile) {
                File temp = null;
                Writer output = null;
                try {
                    temp = File.createTempFile(""fbench"", """");
                    if (temp != null && temp.exists()) {
                        output = new BufferedWriter(new FileWriter(temp));
                        output.write(newText.toString());
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                } finally {
                    if (output != null) {
                        try {
                            output.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
                input = temp.getPath();
            } else {
                input = newText.toString();
            }
        }
        return input;
    }","    static boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }",0,0
"    private static void zip(ZipOutputStream zo, File root, File file) throws IOException {
        String rootPath = root.getAbsolutePath();
        String path = file.getAbsolutePath();
        path = path.replace('\\', '/');
        if (file.isDirectory()) {
            path = path + ""/"";
        }
        String name = path.substring(rootPath.length());
        if (Utils.isEmptyString(name)) {
            name = file.getName();
        }
        ZipEntry entry = new ZipEntry(name);
        if (file.isFile()) {
            zo.putNextEntry(entry);
            BufferedInputStream is = new BufferedInputStream(new FileInputStream(file));
            byte[] buff = new byte[4096];
            int read;
            while ((read = is.read(buff)) > 0) {
                zo.write(buff, 0, read);
            }
            zo.closeEntry();
        } else if (file.isDirectory()) {
            zo.putNextEntry(entry);
            zo.closeEntry();
            File[] files = file.listFiles();
            if (files.length > 0) {
                for (File f : files) {
                    zip(zo, root, f);
                }
            }
        }
    }","    private static void testRepetitions() {
        String type = ""V2"";
        Pattern number = Pattern.compile(""([0-9]*)"");
        Matcher matcher = number.matcher(type);
        while (matcher.find()) {
            int start = matcher.start();
            int end = matcher.end();
            System.out.print(start + "":"");
            System.out.print(end + ""=>"");
            System.out.println(type.substring(start, end));
        }
    }",0,0
"    String parseText(String text, String patternName, Hashtable<String, String> patterns) throws JDOMException, IOException {
        String docString = ""<X>"" + text.replace(""&"", ""&amp;"") + ""</X>"";
        Element e = org.exmaralda.common.jdomutilities.IOUtilities.readDocumentFromString(docString).getRootElement();
        String returnText = """";
        for (Object o : e.getContent()) {
            if (!(o instanceof Text)) {
                returnText += org.exmaralda.common.jdomutilities.IOUtilities.elementToString((Element) o);
                continue;
            }
            Pattern p = Pattern.compile(patterns.get(patternName));
            String thisText = ((Text) o).getText();
            Matcher m = p.matcher(thisText);
            int fromWhere = 0;
            while (m.find(fromWhere)) {
                int i1 = m.start();
                int i2 = m.end();
                thisText = thisText.substring(0, i1) + ""<"" + patternName + "">"" + thisText.substring(i1, i2) + ""</"" + patternName + "">"" + thisText.substring(i2);
                m = p.matcher(thisText);
                fromWhere = i2 + 2 * patternName.length() + 5;
            }
            returnText += thisText;
        }
        return returnText;
    }","    public ComplexMatrix hermitianAdjoint() {
        final double arrayRe[][] = new double[numCols][numRows];
        final double arrayIm[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            arrayRe[0][i] = matrixRe[i][0];
            arrayIm[0][i] = -matrixIm[i][0];
            for (j = 1; j < numCols; j++) {
                arrayRe[j][i] = matrixRe[i][j];
                arrayIm[j][i] = -matrixIm[i][j];
            }
        }
        return new ComplexMatrix(arrayRe, arrayIm);
    }",0,0
"    public static String[] expandMacros(String string) {
        String expression = ""\\[([\\d]+)-([\\d]+)\\]"";
        Pattern pattern = Pattern.compile(expression);
        Matcher matcher = pattern.matcher(string);
        Vector vector = new Vector();
        int startPos = 0;
        while (matcher.find()) {
            try {
                Integer lowVal = new Integer(matcher.group(1));
                Integer highVal = new Integer(matcher.group(2));
                vector.add(new Object[] { string.substring(startPos, matcher.start(0)), lowVal, highVal });
                startPos = matcher.end(0);
            } catch (NumberFormatException exception) {
            }
        }
        String ending = string.substring(startPos);
        int dimSize = vector.size();
        String[] stringParts = new String[dimSize];
        int[] startVals = new int[dimSize];
        int[] endVals = new int[dimSize];
        for (int i = 0; i < vector.size(); i++) {
            stringParts[i] = (String) ((Object[]) vector.get(i))[0];
            startVals[i] = ((Integer) ((Object[]) vector.get(i))[1]).intValue();
            endVals[i] = ((Integer) ((Object[]) vector.get(i))[2]).intValue();
        }
        int count = 1;
        int[] dimensions = new int[dimSize];
        int[] positions = new int[dimSize];
        for (int d = 0; d < dimSize; d++) {
            dimensions[d] = Math.abs(startVals[d] - endVals[d]) + 1;
            count *= dimensions[d];
        }
        if (count > Constants.MAX_NAME_MACRO_EXPANSIONS) {
            return null;
        }
        String[] strings = new String[count];
        int pos = 0;
        for (int s = 0; s < count; s++) {
            string = """";
            pos = s;
            for (int d = dimSize - 1; d >= 0; d--) {
                positions[d] = pos % dimensions[d];
                pos /= dimensions[d];
            }
            for (int d = 0; d < dimSize; d++) {
                string += stringParts[d] + (startVals[d] + positions[d] * (endVals[d] - startVals[d] >= 0 ? 1 : -1));
            }
            strings[s] = string + ending;
        }
        return strings;
    }","    public TabelaVerdade(String tipoDeExercicio, String ordem, String ordem2, String[][] valores, String preposicao) {
        super(Usuario.statusDoExercicio(tipoDeExercicio, InterfaceDados.obtemNumeroDoExercicioCorrente()));
        pSuperior = new JPanel(new GridLayout(2, 1));
        pTitulo = new JPanel(new FlowLayout(FlowLayout.CENTER));
        titulo = new JLabel(tipoDeExercicio);
        titulo.setFont(new Font(""Arial"", 0, 25));
        titulo.setForeground(new Color(0, 0, 128));
        pTitulo.add(titulo);
        pSuperior.add(pTitulo);
        preposicao = alteraString(preposicao);
        valores = alteraMatrizDeStrings(valores);
        pEnun = new JPanel(new GridLayout(2, 1));
        enunciado1 = new JLabel(this.retornaEspacoAjustado(""    "") + ordem);
        enunciado1.setFont(new Font(""Arial"", 1, 14));
        enunciado1.setForeground(new Color(0, 0, 128));
        pEnun.add(enunciado1);
        pEnun2 = new JPanel(new FlowLayout(FlowLayout.LEFT));
        enunciado2 = new JLabel(this.retornaEspacoAjustado(""    "") + ordem2);
        enunciado2.setFont(new Font(""Arial"", 1, 14));
        enunciado2.setForeground(new Color(0, 0, 128));
        pEnun2.add(enunciado2);
        enunciado2 = new JLabel(preposicao);
        enunciado2.setFont(new Font(""Times"", 1, 16));
        enunciado2.setForeground(new Color(0, 0, 128));
        pEnun2.add(enunciado2);
        pEnun.add(pEnun2);
        pSuperior.add(pEnun);
        getContentPane().add(""North"", pSuperior);
        pOeste = new JPanel(new FlowLayout(FlowLayout.LEFT));
        pOeste.add(new JLabel(this.retornaEspacoAjustado(""  "")));
        getContentPane().add(""East"", pOeste);
        pOeste.add(new JLabel(this.retornaEspacoAjustado(""    "")));
        getContentPane().add(""West"", pOeste);
        pCentral = new JPanel(new GridLayout(1, valores[0].length + 1));
        pColuna = new JPanel(new GridLayout(valores.length, 1));
        String[][] valor = new String[valores[1].length][valores.length];
        for (int i = 0; i < valor.length; i++) for (int j = 0; j < valor[i].length; j++) {
            valor[i][j] = valores[j][i];
        }
        int total = 0;
        for (int i = 0; i < valor.length; i++) {
            if (valor[i][1].equals(""nada"")) total++;
        }
        preencher = new JTextField[total + 1][valor[1].length - 1];
        resposta = new String[total + 1][valor[1].length - 1];
        int aux = 0;
        for (int i = 0; i <= valor.length; i++) {
            pColuna = new JPanel(new GridLayout(valor[1].length, 1));
            for (int j = 0; j < valor[1].length; j++) {
                if (i == valor.length) {
                    if (j == 0) {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        JLabel prep = new JLabel(preposicao);
                        prep.setFont(new Font(""Times"", 0, 11));
                        prep.setForeground(new Color(0, 0, 128));
                        pAux.add(prep);
                    } else {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        preencher[total][j - 1] = new JTextField("""", 3);
                        preencher[total][j - 1].setDocument(new DefinePadraoDoTexto(1));
                        preencher[total][j - 1].addKeyListener(this);
                        pAux.add(preencher[total][j - 1]);
                    }
                } else {
                    if ((valor[i][j]).equals(""nada"")) {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        preencher[aux][j - 1] = new JTextField("""", 3);
                        preencher[aux][j - 1].setDocument(new DefinePadraoDoTexto(1));
                        preencher[aux][j - 1].addKeyListener(this);
                        pAux.add(preencher[aux][j - 1]);
                        if (j == valor[i].length - 1) aux++;
                    } else {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        JLabel vals = new JLabel(valor[i][j]);
                        if (j == 0) {
                            vals.setFont(new Font(""Times"", 0, 14));
                            vals.setForeground(new Color(0, 0, 128));
                        }
                        pAux.add(vals);
                    }
                }
                pColuna.add(pAux);
            }
            pCentral.add(pColuna);
        }
        getContentPane().add(""Center"", pCentral);
    }",0,0
"    public static GameRoleList load() {
        GameRoleList gameRoleList = new GameRoleList();
        Connection conn = null;
        try {
            String dbURL = ""jdbc:hsqldb:/tmp/yacht"";
            Class.forName(""org.hsqldb.jdbcDriver"");
            conn = DriverManager.getConnection(dbURL, ""sa"", """");
        } catch (Exception e) {
            System.out.println(""ERROR: Could not connect to database"");
            System.out.print(e);
        }
        try {
            String sql = ""select * from role"";
            Statement stmt = conn.createStatement();
            ResultSet res = stmt.executeQuery(sql);
            while (res.next()) {
                Role role = (Role) res.getObject(""role"");
                gameRoleList.addRole(role);
            }
            stmt.close();
            conn.close();
        } catch (Exception e) {
            System.out.println(e);
        }
        return gameRoleList;
    }","    public static int[][] find(String text, String term, boolean caseInsensitive, boolean fuzzy) {
        List<int[]> beginEnds = new ArrayList<int[]>();
        String regexp = """";
        if (fuzzy) {
            String[] termArray = term.split(""\\s+"");
            for (String termElement : termArray) {
                if (!regexp.isEmpty()) {
                    regexp += ""[\\W|_]*"";
                }
                regexp += Pattern.quote(termElement);
            }
        } else {
            regexp = Pattern.quote(term);
        }
        Pattern pattern;
        if (caseInsensitive) {
            pattern = Pattern.compile(regexp, Pattern.CASE_INSENSITIVE);
        } else {
            pattern = Pattern.compile(regexp);
        }
        Matcher matcher = pattern.matcher(text);
        while (matcher.find()) {
            int[] beginEnd = new int[] { matcher.start(), matcher.end() };
            beginEnds.add(beginEnd);
        }
        return beginEnds.toArray(new int[0][0]);
    }",0,0
"    public static Object[] remove(Object[] array, Object obj) {
        int index = indexOf(array, obj);
        if (index < 0) {
            return array;
        }
        Object[] newArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length - 1);
        if (index > 0) {
            System.arraycopy(array, 0, newArray, 0, index);
        }
        if (index < array.length - 1) {
            System.arraycopy(array, index + 1, newArray, index, newArray.length - index);
        }
        return newArray;
    }","    @Override
    public List<SectionFinderResult> lookForSections(String text, Section<?> father, Type type) {
        ArrayList<SectionFinderResult> result = new ArrayList<SectionFinderResult>();
        Pattern TABLE_LINE = Pattern.compile(TABLE_LINE_REGEXP, Pattern.MULTILINE);
        Matcher m = TABLE_LINE.matcher(text);
        int end = 0;
        int tableStart = -1;
        int tableEnd = -1;
        while (m.find(end)) {
            int start = m.start();
            end = m.end();
            if (tableEnd == start) {
                tableEnd = end;
            } else {
                addResultIfAvailable(result, tableStart, tableEnd);
                tableStart = start;
                tableEnd = end;
            }
            if (end >= text.length()) break;
        }
        addResultIfAvailable(result, tableStart, tableEnd);
        return result;
    }",0,0
"    public boolean login() {
        if (super.isAuthenticated()) return true;
        try {
            if (client == null) {
                client = new FTPClient();
                FTPClientConfig config = new FTPClientConfig();
                client.configure(config);
            }
            if (!client.isConnected()) {
                client.connect(super.getStoreConfig().getServerName(), new Integer(super.getStoreConfig().getServerPort()).intValue());
            }
            if (client.login(super.getStoreConfig().getUserName(), super.getStoreConfig().getPassword(), super.getStoreConfig().getServerName())) {
                super.setAuthenticated(true);
                return true;
            }
            log.error(""Login ftp server error"");
        } catch (Exception e) {
            log.info(""FTPStore.login"", e);
        }
        return false;
    }","    public static double[][] rotation(final double[][] pos, final double[][] refPos) {
        if (pos.length != refPos.length) throw new IllegalArgumentException(""All arguments must have the same length."");
        double R_m[] = new double[3];
        double R_p[] = new double[3];
        double matrix[][] = new double[4][4];
        for (int k = 0; k < pos.length; ++k) {
            R_m = BLA.subtract(pos[k], refPos[k]);
            R_p = BLA.add(refPos[k], pos[k]);
            matrix[0][0] += (R_m[0] * R_m[0] + R_m[1] * R_m[1] + R_m[2] * R_m[2]);
            matrix[1][1] += (R_m[0] * R_m[0] + R_p[1] * R_p[1] + R_p[2] * R_p[2]);
            matrix[2][2] += (R_p[0] * R_p[0] + R_m[1] * R_m[1] + R_p[2] * R_p[2]);
            matrix[3][3] += (R_p[0] * R_p[0] + R_p[1] * R_p[1] + R_m[2] * R_m[2]);
            matrix[1][0] += (R_m[2] * R_p[1] - R_m[1] * R_p[2]);
            matrix[2][0] += (R_p[2] * R_m[0] - R_p[0] * R_m[2]);
            matrix[2][1] += (R_m[0] * R_m[1] - R_p[1] * R_p[0]);
            matrix[3][0] += (R_m[1] * R_p[0] - R_p[1] * R_m[0]);
            matrix[3][1] += (R_m[2] * R_m[0] - R_p[0] * R_p[2]);
            matrix[3][2] += (R_m[2] * R_m[1] - R_p[1] * R_p[2]);
        }
        for (int i = 0; i < 4; ++i) {
            for (int j = i + 1; j < 4; ++j) {
                matrix[i][j] = matrix[j][i];
            }
        }
        double eigenvals[] = new double[4];
        BLA.diagonalizeSymmetric(matrix, eigenvals);
        double q[] = new double[4];
        for (int i = 0; i < 4; ++i) q[i] = matrix[i][3];
        double operator[][] = BLA.zeroes(4, 4);
        operator[0][0] = q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
        operator[1][1] = q[0] * q[0] + q[2] * q[2] - q[1] * q[1] - q[3] * q[3];
        operator[2][2] = q[0] * q[0] + q[3] * q[3] - q[1] * q[1] - q[2] * q[2];
        operator[1][0] = 2 * (q[1] * q[2] - q[0] * q[3]);
        operator[2][0] = 2 * (q[1] * q[3] + q[0] * q[2]);
        operator[2][1] = 2 * (q[2] * q[3] - q[0] * q[1]);
        operator[0][1] = 2 * (q[1] * q[2] + q[0] * q[3]);
        operator[0][2] = 2 * (q[1] * q[3] - q[0] * q[2]);
        operator[1][2] = 2 * (q[2] * q[3] + q[0] * q[1]);
        operator[3] = eigenvals;
        return operator;
    }",0,0
"    private final void createActionMap() {
        m_actionMap.clear();
        m_actionMap.put(EdaActionKey.NEW_PCB_DOC, new EdaGlobalAction(this, EdaActionKey.NEW_PCB_DOC) {

            public void actionPerformed(ActionEvent e) {
                getEda().addDocument(new EdaPcb(new EdaPcbPane(getEda())));
            }
        });
        m_actionMap.put(EdaActionKey.NEW_SCHEMATIC_DOC, new EdaGlobalAction(this, EdaActionKey.NEW_SCHEMATIC_DOC) {

            public void actionPerformed(ActionEvent e) {
                getEda().addDocument(new EdaSchematic(new EdaSchematicPane(getEda())));
            }
        });
        m_actionMap.put(EdaActionKey.NEW_DOCUMENT, new EdaGlobalAction(this, EdaActionKey.NEW_DOCUMENT) {

            public void actionPerformed(ActionEvent e) {
                EdaNewDocumentDialog.showDialog(getEda());
            }
        });
        m_actionMap.put(EdaActionKey.IMPORT_GEDA_FILE, new EdaGlobalAction(this, EdaActionKey.IMPORT_GEDA_FILE) {

            private File chooseGedaFile() {
                fileDialog.setDialogTitle(""Choose a symbol file"");
                if (fileDialog.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                    return fileDialog.getSelectedFile();
                }
                return null;
            }

            public void actionPerformed(ActionEvent e) {
                final File gedaFile = chooseGedaFile();
                if (gedaFile == null) {
                    return;
                }
                final EdaGedaFileParser parser = new EdaGedaFileParser(new EdaDefaultSaveableObjectFactory(), false);
                try {
                    final EdaDrawing drawing = parser.parseGedaSymbolFile(gedaFile);
                    final EdaDrawingPane pane = new EdaSchematicPane(getEda(), drawing);
                    final EdaSchematic document = new EdaSchematic(pane);
                    document.setName(gedaFile.getName());
                    getEda().addDocument(document);
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });
        m_actionMap.put(EdaActionKey.NEW_PROJECT, new EdaGlobalAction(this, EdaActionKey.NEW_PROJECT) {

            public void actionPerformed(ActionEvent e) {
                EdaProject ep = new EdaProject(getEda());
                ep.setName(""Untitled"");
                getEda().getProjectTree().addProject(ep);
            }
        });
        m_actionMap.put(EdaActionKey.CLOSE_PROJECT, new EdaGlobalAction(this, EdaActionKey.CLOSE_PROJECT) {

            public void actionPerformed(ActionEvent e) {
                getEda().removeProject();
            }
        });
        m_actionMap.put(EdaActionKey.OPEN_PROJECT, new EdaGlobalAction(this, EdaActionKey.OPEN_PROJECT) {

            public void actionPerformed(ActionEvent e) {
                getEda().openProject();
            }
        });
        m_actionMap.put(EdaActionKey.SAVE_PROJECT, new EdaGlobalAction(this, EdaActionKey.SAVE_PROJECT) {

            public void actionPerformed(ActionEvent e) {
                getEda().saveProject();
            }
        });
        m_actionMap.put(EdaActionKey.NEXT_WINDOW, new EdaGlobalAction(this, EdaActionKey.NEXT_WINDOW) {

            public void actionPerformed(ActionEvent e) {
                getEda().nextWindow();
            }
        });
        m_actionMap.put(EdaActionKey.RENAME_NODE, new EdaGlobalAction(this, EdaActionKey.RENAME_NODE) {

            public void actionPerformed(ActionEvent e) {
                getEda().renameNode();
            }
        });
        m_actionMap.put(EdaActionKey.CLOSE_DOCUMENT, new EdaGlobalAction(this, EdaActionKey.CLOSE_DOCUMENT) {

            public void actionPerformed(ActionEvent e) {
                getEda().closeDocument();
            }
        });
        m_actionMap.put(EdaActionKey.CUT_TREE_NODE, new EdaGlobalAction(this, EdaActionKey.CUT_TREE_NODE) {

            public void actionPerformed(ActionEvent e) {
                getEda().getProjectTree().cut();
            }
        });
        m_actionMap.put(EdaActionKey.COPY_TREE_NODE, new EdaGlobalAction(this, EdaActionKey.COPY_TREE_NODE) {

            public void actionPerformed(ActionEvent e) {
                getEda().getProjectTree().copy();
            }
        });
        m_actionMap.put(EdaActionKey.MOVE_NODE_UP, new EdaGlobalAction(this, EdaActionKey.MOVE_NODE_UP) {

            public void actionPerformed(ActionEvent e) {
                getEda().getProjectTree().moveUp();
            }
        });
        m_actionMap.put(EdaActionKey.MOVE_NODE_DOWN, new EdaGlobalAction(this, EdaActionKey.MOVE_NODE_DOWN) {

            public void actionPerformed(ActionEvent e) {
                getEda().getProjectTree().moveDown();
            }
        });
        m_actionMap.put(EdaActionKey.MOVE_NODE_RIGHT, new EdaGlobalAction(this, EdaActionKey.MOVE_NODE_RIGHT) {

            public void actionPerformed(ActionEvent e) {
                getEda().getProjectTree().moveRight();
            }
        });
        m_actionMap.put(EdaActionKey.MOVE_NODE_LEFT, new EdaGlobalAction(this, EdaActionKey.MOVE_NODE_LEFT) {

            public void actionPerformed(ActionEvent e) {
                getEda().getProjectTree().moveLeft();
            }
        });
        m_actionMap.put(EdaActionKey.PASTE_TREE_NODE, new EdaGlobalAction(this, EdaActionKey.PASTE_TREE_NODE) {

            public void actionPerformed(ActionEvent e) {
                getEda().getProjectTree().paste();
            }
        });
        m_actionMap.put(EdaActionKey.SHOW_DOCUMENT, new EdaGlobalAction(this, EdaActionKey.SHOW_DOCUMENT) {

            public void actionPerformed(ActionEvent e) {
                getEda().showDocument();
            }
        });
        m_actionMap.put(EdaActionKey.NEW_FOLDER, new EdaGlobalAction(this, EdaActionKey.NEW_FOLDER) {

            public void actionPerformed(ActionEvent e) {
                getEda().newFolder();
            }
        });
        m_actionMap.put(EdaActionKey.ADD_LIBRARY, new EdaGlobalAction(this, EdaActionKey.ADD_LIBRARY) {

            public void actionPerformed(ActionEvent e) {
                getEda().addLibrary();
            }
        });
        m_actionMap.put(EdaActionKey.REMOVE_NODE, new EdaGlobalAction(this, EdaActionKey.REMOVE_NODE) {

            public void actionPerformed(ActionEvent e) {
                getEda().removeNode();
            }
        });
        m_actionMap.put(EdaActionKey.SETTINGS, new EdaGlobalAction(this, EdaActionKey.SETTINGS) {

            public void actionPerformed(ActionEvent e) {
                getEda().showSettings();
            }
        });
        m_actionMap.put(EdaActionKey.PRINT, new EdaGlobalAction(this, EdaActionKey.PRINT) {

            public void actionPerformed(ActionEvent e) {
                getEda().print();
            }
        });
        m_actionMap.put(EdaActionKey.EXIT, new EdaGlobalAction(this, EdaActionKey.EXIT) {

            public void actionPerformed(ActionEvent e) {
                getEda().close();
            }
        });
        m_actionMap.put(EdaActionKey.ABOUT, new EdaGlobalAction(this, EdaActionKey.ABOUT) {

            public void actionPerformed(ActionEvent e) {
                new EdaSplashScreen(getEda());
            }
        });
        m_actionMap.put(EdaActionKey.WEB_SITE, new EdaGlobalAction(this, EdaActionKey.WEB_SITE) {

            public void actionPerformed(ActionEvent e) {
                if (Desktop.isDesktopSupported()) {
                    try {
                        Desktop.getDesktop().browse(new URI(""http://www.circuitsmith.com""));
                    } catch (Exception ioe) {
                    }
                }
            }
        });
        m_actionMap.put(EdaActionKey.DEBUG, new EdaGlobalAction(this, EdaActionKey.DEBUG) {

            public void actionPerformed(ActionEvent e) {
                EdaProject p = getEda().getProjectTree().getSelectedProject();
                EdaTreeNode n = getEda().getProjectTree().getSelectedNode();
                System.out.println(""Eda.createActionMap working on node "" + n.getName());
                for (Iterator<EdaTreeNode> i = n.iterator(); i.hasNext(); ) {
                    EdaTreeNode tn = i.next();
                    if (tn instanceof EdaSchematic) {
                        EdaSchematic s = (EdaSchematic) tn;
                        EdaAttributeList al = s.getDrawing().getAttributeList();
                        EdaAttribute f = al.get(""footprint"");
                        if (f != null) {
                            String fs[] = f.getValue().split(""//"");
                            if (fs.length > 1) {
                                EdaDocAttribute fl = new EdaDocAttribute(""footprint-lib"", fs[0]);
                                f.setValue(fs[1]);
                                fl.linkDocument(p);
                                al.add(fl);
                                System.out.println(""Eda.createActionMap debug doing footprints for "" + tn.getName());
                            }
                        }
                    }
                }
            }
        });
        m_actionMap.put(EdaActionKey.RELOAD_LIBRARY, new EdaGlobalAction(this, EdaActionKey.RELOAD_LIBRARY) {

            public void actionPerformed(ActionEvent e) {
                getEda().reloadLibrary();
            }
        });
        m_actionMap.put(EdaActionKey.CALC_NETS, new EdaGlobalAction(this, EdaActionKey.CALC_NETS) {

            public void actionPerformed(ActionEvent e) {
                getEda().calcNets();
            }
        });
    }","    @SuppressWarnings(""unchecked"")
    public <T> T[] toArray(T[] a) {
        a = (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size());
        E[] elementData = (E[]) toArray();
        System.arraycopy(elementData, 0, a, 0, size());
        if (a.length > size()) a[size()] = null;
        return a;
    }",0,0
"    public static Object resizeArray(Object oldArray, int newSize) {
        int oldSize = java.lang.reflect.Array.getLength(oldArray);
        Class elementType = oldArray.getClass().getComponentType();
        Object newArray = java.lang.reflect.Array.newInstance(elementType, newSize);
        int preserveLength = Math.min(oldSize, newSize);
        if (preserveLength > 0) System.arraycopy(oldArray, 0, newArray, 0, preserveLength);
        return newArray;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 4) {
            System.out.println(""usage: java msgmultisend <to> <from> <smtp> true|false"");
            return;
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Multipart Test"");
            msg.setSentDate(new Date());
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setText(msgText2, ""us-ascii"");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        }
    }","    protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException {
        String cmd = ""mysqldump -u "" + Constants.dbUser + "" -p"" + Constants.dbPassword + "" "" + Constants.dbName + "" > "" + Constants.tmpDir + ""Backup.sql"";
        FileWriter fstream = new FileWriter(Constants.tmpDir + Constants.tmpScript);
        BufferedWriter out = new BufferedWriter(fstream);
        out.write(cmd);
        out.close();
        Process process = Runtime.getRuntime().exec(Constants.tmpDir + Constants.tmpScript);
        InputStream is = process.getInputStream();
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        while (br.readLine() != null) {
            ;
        }
        String fileName = now4backup();
        cmd = ""\""C:\\Archivos de programa\\WinRAR\\Rar.exe\"" a -m5 -ed "" + Constants.tmpDir + fileName + "" "" + Constants.tmpDir + ""Backup.sql"";
        process = Runtime.getRuntime().exec(cmd);
        is = process.getInputStream();
        isr = new InputStreamReader(is);
        br = new BufferedReader(isr);
        while (br.readLine() != null) {
            ;
        }
        FTPClient client = new FTPClient();
        client.connect(Constants.ftpBackupAddr);
        client.login(Constants.ftpBackupUser, Constants.ftpBackupPassword);
        client.changeDirectory(""/"" + Shared.getConfig(""storeName""));
        File f = new File(Constants.tmpDir + fileName);
        client.upload(f);
        client.disconnect(false);
    }",0,0
"    private void openURI(String uriString) {
        try {
            URI uri = new URI(uriString);
            if (java.awt.Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)) {
                    desktop.browse(uri);
                }
            }
        } catch (Exception ex) {
        }
    }","    void bsort(int a[], int lo, int hi) throws Exception {
        for (int j = hi; j > lo; j--) {
            for (int i = lo; i < j; i++) {
                if (a[i] > a[i + 1]) {
                    int T = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = T;
                    pause();
                }
            }
        }
    }",0,0
"    @Override
    protected struct[] getPole(int classIndex) throws OperatorException {
        if (classifier == null) {
            return new struct[0];
        }
        int vectNumber = 0;
        double[][] vectors = classifier.getLearningInputVectors();
        double[][] inputs = new double[0][0];
        double[][] outputs = classifier.getLearningOutputVectors();
        if (vectors.length > 0) {
            inputs = new double[vectors[0].length][vectors.length];
        }
        for (int i = 0; i < vectors.length; i++) {
            for (int j = 0; j < vectors[0].length; j++) {
                inputs[j][i] = vectors[i][j];
            }
        }
        if (inputs.length > 0) {
            vectNumber = inputs.length;
        }
        struct[] pole = new struct[vectNumber];
        for (int i = 0; i < inputs.length; i++) {
            pole[i] = new struct();
            pole[i].response = classifier.getOutputProbabilities(inputs[i])[classIndex];
            double expectedOutput = outputs[classIndex][i];
            assert expectedOutput == 0 || expectedOutput == 1;
            pole[i].expected = expectedOutput;
        }
        return pole;
    }","    public static Object[] concat(Object[][] lsts) {
        int totLength = 0;
        Class<?> componentType = null;
        for (int i = 0; i < lsts.length; i++) {
            Object[] lst = lsts[i];
            if (lst == null) continue;
            if (componentType == null) componentType = lst.getClass().getComponentType(); else {
                Class<?> newComponentType = lst.getClass().getComponentType();
                if (newComponentType != componentType) {
                    if (!componentType.isAssignableFrom(newComponentType)) {
                        if (newComponentType.isAssignableFrom(componentType)) {
                            componentType = newComponentType;
                        } else {
                            componentType = Object.class;
                        }
                    }
                }
            }
            totLength += lst.length;
        }
        if (componentType == null) {
            return new Object[0];
        }
        Object[] l = (Object[]) Array.newInstance(componentType, totLength);
        int offset = 0;
        for (int i = 0; i < lsts.length; i++) {
            Object[] lst = lsts[i];
            if (lst == null) continue;
            System.arraycopy(lst, 0, l, offset, lst.length);
            offset += lst.length;
        }
        return l;
    }",0,0
"    public void startFileConversion() {
        FileManagement.startTime = System.currentTimeMillis();
        FileManagement.fetchAllFiles(new File(sourceDir), javaFileList);
        Collections.sort(javaFileList);
        for (JavaFileBean javaFile : javaFileList) {
            performConversion(javaFile);
        }
        htmlManagementIndex = new HTMLManagementIndexFile();
        htmlManagementIndex.createIndexHtmlFile(javaFileList, destinationDir);
        Desktop desktop = null;
        if (Desktop.isDesktopSupported()) {
            desktop = Desktop.getDesktop();
            URI uri = null;
            try {
                uri = new URI(""file://"" + destinationDir.replace('\\', '/') + ""/index.html"");
                desktop.browse(uri);
            } catch (URISyntaxException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }","    public void testHref() {
        String page = ""Stuff you say, it is<a href=\""coolsite.htm\"">Yea</a>I find it interesting"";
        Pattern p = Pattern.compile(""(<a.*?href=.*?>(.*?)</a>)"");
        Matcher m = p.matcher(page);
        while (m.find()) {
            System.out.println("" ***** : "" + m.groupCount());
            System.out.println("" ***** : "" + m.group());
            System.out.println("" ***** + at "" + m.start());
            System.out.println("" ***** - to "" + m.end());
        }
    }",0,0
"    private void checkForUpdates() {
        SwingWorker<String, Object> worker = new SwingWorker<String, Object>() {

            public String doInBackground() {
                ok.setEnabled(false);
                BufferedReader in = null;
                try {
                    URL url = new URL(net.mjrz.fm.ui.utils.UIDefaults.LATEST_VERSION_URL);
                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                    int status = conn.getResponseCode();
                    if (status == 200) {
                        in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                        StringBuilder str = new StringBuilder();
                        while (true) {
                            String line = in.readLine();
                            if (line == null) break;
                            str.append(line);
                        }
                        return str.toString();
                    } else {
                        logger.error(""Unable to retrieve latest version: HTTP ERROR CODE: "" + status);
                        return """";
                    }
                } catch (Exception e) {
                    logger.error(""Unable to retrieve latest version: HTTP ERROR CODE: "" + e.getMessage());
                    return null;
                } finally {
                    if (in != null) {
                        try {
                            in.close();
                        } catch (Exception e) {
                            logger.error(e);
                        }
                    }
                }
            }

            public void done() {
                try {
                    dispose();
                    String str = get();
                    if (str == null || str.length() == 0) {
                        JOptionPane.showMessageDialog(parent, tr(""Unable to retrieve version information.\nPlease check network connectivity""), tr(""Error""), JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    net.mjrz.fm.Version v = net.mjrz.fm.Version.getVersion();
                    if (v.isVersionGreater(str.toString())) {
                        String[] args = { str };
                        String msg = form.format(args);
                        int n = JOptionPane.showConfirmDialog(parent, msg + ""\n"" + tr(""Do you want to download the latest version?""), tr(""Message""), JOptionPane.YES_NO_OPTION);
                        if (n == JOptionPane.YES_OPTION) {
                            java.awt.Desktop d = Desktop.getDesktop();
                            if (Desktop.isDesktopSupported()) {
                                d.browse(new URI(""http://www.mjrz.net/dl.html""));
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(UpdateCheckDialog.this, tr(""No new updates are available""));
                    }
                } catch (Exception e) {
                    logger.error(MiscUtils.stackTrace2String(e));
                }
            }
        };
        worker.execute();
    }","    public static String injectAfterAnnotation(Message extend, Message by, String extendProto, String byContent) {
        Pattern messageRegexp = Pattern.compile(""[\\n\\r]?([ \\t]*)(message\\s+"" + extend.getName() + ""\\s+\\{)"", Pattern.MULTILINE);
        int messageIndex = -1, openBracketIndex = -1;
        Matcher matcher = messageRegexp.matcher(extendProto);
        if (matcher.find()) {
            int is = matcher.start(1), ie = matcher.end(1);
            String indentation = generateIndentation(extendProto.substring(is, ie), 4);
            messageIndex = matcher.start(2);
            openBracketIndex = matcher.end(2);
            extendProto = extendProto.substring(0, openBracketIndex) + LINE_SEPARATOR + indentation + ""// "" + generateTimestamp(extend, by) + LINE_SEPARATOR + insertIndentation(byContent, indentation) + LINE_SEPARATOR + extendProto.substring(openBracketIndex);
        }
        Pattern annotationRegexp = Pattern.compile(""[\\n\\r]?([ \\t]*@Extend\\s*\\([^)]+"" + by.getName() + ""[^)]*\\))"");
        String annotationSpace = extendProto.substring(0, messageIndex);
        matcher = annotationRegexp.matcher(annotationSpace);
        int astart = -1, aend = 0;
        while (matcher.find(aend)) {
            astart = matcher.start(1);
            aend = matcher.end(1);
        }
        if (astart > -1) extendProto = extendProto.substring(0, astart) + ""// "" + extendProto.substring(astart);
        return extendProto;
    }",0,0
"    @SuppressWarnings(""unchecked"")
    public static final <T> T[] add(final T[] a1, final T... a2) {
        if (a1 == null) return a2 == null ? null : a2.clone();
        if (a2 == null) return a1.clone();
        final T[] a = (T[]) Array.newInstance(a1.getClass().getComponentType(), a1.length + a2.length);
        System.arraycopy(a1, 0, a, 0, a1.length);
        System.arraycopy(a2, 0, a, a1.length, a2.length);
        return a;
    }","    public ImageDisplay(ImageDisplayApplet applet, GraphicsConfiguration gc) {
        this.applet = applet;
        if (applet == null) {
            frame = new JFrame(gc);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(PREFERRED_WIDTH, PREFERRED_HEIGHT));
        Action openAction = new AbstractAction(""Open File"", new ImageIcon(getClass().getResource(""/open.gif""))) {

            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }
        };
        JToolBar bar = new JToolBar();
        bar.add(new ToolBarButton(openAction));
        add(bar, BorderLayout.NORTH);
        if (applet == null) {
            frame.setTitle(""Image Display - Control Panel"");
            frame.getContentPane().add(this, BorderLayout.CENTER);
            frame.pack();
            frame.show();
        }
    }",0,0
"    public static String format(String json) {
        json = json.replaceAll(""\\\\\"""", """").replaceAll(""\\\\\'"", """");
        int offset = 0;
        StringBuilder buffer = new StringBuilder(json);
        Pattern p = Pattern.compile(""\""([^\""]*)\"""");
        Matcher m = p.matcher(json);
        while (m.find()) {
            buffer.replace(m.start(), m.end(), ""'"" + m.group(1).replace(""'"", "" "") + ""'"");
        }
        json = buffer.toString();
        json = json.replaceAll(""\\s+:"", "":"").replaceAll("":\\s+"", "":"");
        json = json.replaceAll(""\\s+,"", "","").replaceAll("",\\s+"", "","");
        p = Pattern.compile(""'(\\w+)':"");
        m = p.matcher(json);
        buffer.delete(0, buffer.length()).append(json);
        while (m.find()) {
            buffer.deleteCharAt(m.start() - offset);
            offset++;
            buffer.deleteCharAt(m.end() - 2 - offset);
            offset++;
        }
        p = Pattern.compile("":([a-zA-Z_]+)([,\\]\\}])"");
        m = p.matcher(buffer.toString());
        offset = 0;
        while (m.find()) {
            buffer.insert(m.start() + 1 + offset, '\'');
            offset++;
            buffer.insert(m.end() - 1 + offset, '\'');
            offset++;
        }
        return buffer.toString();
    }","    public void actionPerformed(ActionEvent evt) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(HOMEPAGE));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }",0,0
"    public static Object[] append(Object[] oldArray, Object o) {
        NullArgumentException.check(oldArray);
        NullArgumentException.check(o);
        Object[] newArray = (Object[]) Array.newInstance(oldArray.getClass().getComponentType(), oldArray.length + 1);
        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);
        newArray[oldArray.length] = o;
        return newArray;
    }","    public static Set getCode(String strMail) {
        Set set = new HashSet();
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""1[3,5][4,5,6,7,8,9]\\d{8}|15[8,9]\\d{8}"");
        m = p.matcher(strMail);
        while (m.find()) {
            String str = strMail.substring(m.start(), m.end());
            set.add(str);
        }
        return set;
    }",0,0
"    protected static double[][] buildDistancesMatrix(PairwiseDistanceCalculator pairwiseDistanceCalculator, int dimension, boolean useTwiceMaximumDistanceWhenPairwiseDistanceNotCalculatable, ProgressListener progress) throws CannotBuildDistanceMatrixException {
        double[][] distances = new double[dimension][dimension];
        float tot = (dimension * (dimension - 1)) / 2;
        int done = 0;
        final double noDistance = -1;
        double maxDistance = -1;
        for (int i = 0; i < dimension; ++i) {
            for (int j = i + 1; j < dimension; ++j) {
                try {
                    distances[i][j] = pairwiseDistanceCalculator.calculatePairwiseDistance(i, j);
                    maxDistance = Math.max(distances[i][j], maxDistance);
                } catch (CannotBuildDistanceMatrixException e) {
                    if (!useTwiceMaximumDistanceWhenPairwiseDistanceNotCalculatable) {
                        throw e;
                    }
                    distances[i][j] = noDistance;
                }
                distances[j][i] = distances[i][j];
                if (progress != null) progress.setProgress(++done / tot);
            }
        }
        if (maxDistance < 0) {
            throw new CannotBuildDistanceMatrixException(""It is not possible to compute the Tamura-Nei genetic distance "" + ""for these sequences because no pair of sequences overlap in the alignment."");
        }
        for (int i = 0; i < dimension; ++i) {
            for (int j = i + 1; j < dimension; ++j) {
                if (distances[i][j] == noDistance) {
                    distances[i][j] = distances[j][i] = maxDistance * 2;
                }
            }
        }
        return distances;
    }","    public static void main(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""msgsend"";
        String file = null;
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-a"")) {
                file = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: msgsend [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-a attach-file] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            String text = collect(in);
            if (file != null) {
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setText(text);
                MimeBodyPart mbp2 = new MimeBodyPart();
                mbp2.attachFile(file);
                MimeMultipart mp = new MimeMultipart();
                mp.addBodyPart(mbp1);
                mp.addBodyPart(mbp2);
                msg.setContent(mp);
            } else {
                msg.setText(text);
            }
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"    public void deleteSynchrnServerFile(SynchrnServerVO synchrnServerVO) throws Exception {
        FTPClient ftpClient = new FTPClient();
        ftpClient.setControlEncoding(""euc-kr"");
        if (!EgovWebUtil.isIPAddress(synchrnServerVO.getServerIp())) {
            throw new RuntimeException(""IP is needed. ("" + synchrnServerVO.getServerIp() + "")"");
        }
        InetAddress host = InetAddress.getByName(synchrnServerVO.getServerIp());
        ftpClient.connect(host, Integer.parseInt(synchrnServerVO.getServerPort()));
        ftpClient.login(synchrnServerVO.getFtpId(), synchrnServerVO.getFtpPassword());
        FTPFile[] fTPFile = null;
        try {
            ftpClient.changeWorkingDirectory(synchrnServerVO.getSynchrnLc());
            fTPFile = ftpClient.listFiles(synchrnServerVO.getSynchrnLc());
            for (int i = 0; i < fTPFile.length; i++) {
                if (synchrnServerVO.getDeleteFileNm().equals(fTPFile[i].getName())) ftpClient.deleteFile(fTPFile[i].getName());
            }
            SynchrnServer synchrnServer = new SynchrnServer();
            synchrnServer.setServerId(synchrnServerVO.getServerId());
            synchrnServer.setReflctAt(""N"");
            synchrnServerDAO.processSynchrn(synchrnServer);
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            ftpClient.logout();
        }
    }","    private void openSaveFileActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == openSaveFile) {
            int returnVal = fc.showOpenDialog(ParameterSolutions.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File savedFile = fc.getSelectedFile();
                log.append(""Opening: "" + savedFile.getName() + ""\n"");
                String name = savedFile.getName();
                if (!savedFile.canRead() || !((name.substring(name.length() - 4, name.length()).equals("".cpm""))) || !recoverSavedData(savedFile)) {
                    log.append(""That is not a valid saved file, please choose"" + "" a file previously saved in this program.\n"");
                }
            } else {
                log.append(""Dialog Cancelled by User.\n"");
            }
        }
    }",0,0
"    public static void main(String[] args) {
        String driver = ""org.apache.derby.jdbc.EmbeddedDriver"";
        String dbName = ""jdbcDemoDB"";
        String connectionURL = ""jdbc:derby:"" + dbName + "";create=true"";
        Connection conn = null;
        Statement s;
        PreparedStatement psInsert;
        ResultSet myWishes;
        String printLine = ""  __________________________________________________"";
        String createString = ""CREATE TABLE WISH_LIST  "" + ""(WISH_ID INT NOT NULL GENERATED ALWAYS AS IDENTITY "" + ""   CONSTRAINT WISH_PK PRIMARY KEY, "" + "" ENTRY_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP, "" + "" WISH_ITEM VARCHAR(32) NOT NULL) "";
        String answer;
        try {
            Class.forName(driver);
            System.out.println(driver + "" loaded. "");
        } catch (java.lang.ClassNotFoundException e) {
            System.err.print(""ClassNotFoundException: "");
            System.err.println(e.getMessage());
            System.out.println(""\n    >>> Please check your CLASSPATH variable   <<<\n"");
        }
        try {
            conn = DriverManager.getConnection(connectionURL);
            System.out.println(""Connected to database "" + dbName);
            s = conn.createStatement();
            if (!WwdUtils.wwdChk4Table(conn)) {
                System.out.println("" . . . . creating table WISH_LIST"");
                s.execute(createString);
            }
            psInsert = conn.prepareStatement(""insert into WISH_LIST(WISH_ITEM) values (?)"");
            do {
                answer = WwdUtils.getWishItem();
                if (!answer.equals(""exit"")) {
                    psInsert.setString(1, answer);
                    psInsert.executeUpdate();
                    myWishes = s.executeQuery(""select ENTRY_DATE, WISH_ITEM from WISH_LIST order by ENTRY_DATE"");
                    System.out.println(printLine);
                    while (myWishes.next()) {
                        System.out.println(""On "" + myWishes.getTimestamp(1) + "" I wished for "" + myWishes.getString(2));
                    }
                    System.out.println(printLine);
                    myWishes.close();
                }
            } while (!answer.equals(""exit""));
            psInsert.close();
            s.close();
            conn.close();
            System.out.println(""Closed connection"");
            if (driver.equals(""org.apache.derby.jdbc.EmbeddedDriver"")) {
                boolean gotSQLExc = false;
                try {
                    DriverManager.getConnection(""jdbc:derby:;shutdown=true"");
                } catch (SQLException se) {
                    if (se.getSQLState().equals(""XJ015"")) {
                        gotSQLExc = true;
                    }
                }
                if (!gotSQLExc) {
                    System.out.println(""Database did not shut down normally"");
                } else {
                    System.out.println(""Database shut down normally"");
                }
            }
        } catch (Throwable e) {
            System.out.println("" . . . exception thrown:"");
            errorPrint(e);
        }
        System.out.println(""Getting Started With Derby JDBC program ending."");
    }","    public static LImage[][] reversalXandY(final LImage[][] array) {
        int col = array[0].length;
        int row = array.length;
        LImage[][] result = new LImage[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }",0,0
"    private Pattern createPattern(String pattern) {
        StringBuilder patternBuilder = new StringBuilder();
        Matcher m = GLOB_PATTERN.matcher(pattern);
        int end = 0;
        while (m.find()) {
            patternBuilder.append(quote(pattern, end, m.start()));
            String match = m.group();
            if (""?"".equals(match)) {
                patternBuilder.append('.');
            } else if (""*"".equals(match)) {
                patternBuilder.append("".*"");
            } else if (match.startsWith(""{"") && match.endsWith(""}"")) {
                int colonIdx = match.indexOf(':');
                if (colonIdx == -1) {
                    patternBuilder.append(DEFAULT_VARIABLE_PATTERN);
                    variableNames.add(m.group(1));
                } else {
                    String variablePattern = match.substring(colonIdx + 1, match.length() - 1);
                    patternBuilder.append('(');
                    patternBuilder.append(variablePattern);
                    patternBuilder.append(')');
                    String variableName = match.substring(1, colonIdx);
                    variableNames.add(variableName);
                }
            }
            end = m.end();
        }
        patternBuilder.append(quote(pattern, end, pattern.length()));
        return Pattern.compile(patternBuilder.toString());
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] add(T[] array, T element) {
        final T[] result;
        if (array != null) {
            result = Arrays.createArray((Class<? extends T>) array.getClass().getComponentType(), array.length + 1);
            System.arraycopy(array, 0, result, 0, array.length);
        } else {
            Validations.isTrue(element != null, ""Both array and element are null"");
            assert element != null;
            result = Arrays.createArray((Class<? extends T>) element.getClass(), 1);
        }
        result[result.length - 1] = element;
        return result;
    }",0,0
"    private String removeInvalidChars(String input) {
        String text;
        StringBuffer contents = new StringBuffer();
        BufferedReader reader = null;
        if (isFile) {
            try {
                reader = new BufferedReader(new FileReader(input));
                String line = null;
                while ((line = reader.readLine()) != null) {
                    contents.append(line);
                    contents.append(System.getProperty(""line.separator""));
                }
                reader.close();
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            text = contents.toString();
        } else {
            text = input;
        }
        Pattern pattern = Pattern.compile(""Comment=\""[a-zA-Z0-9 \t\\-\\+\\{\\}!@#$%\\^\\&\\*\\(\\;:\\',./\\?\\\\|<>)]*\"""");
        Matcher matcher = pattern.matcher(text);
        boolean found = false;
        StringBuilder newText = new StringBuilder();
        int lastEnd = 0;
        while (matcher.find()) {
            String str = matcher.group();
            str = str.substring(str.indexOf(""\"""") + 1);
            str = str.substring(0, str.lastIndexOf(""\""""));
            if (str.contains(""&"") || str.contains(""<"") || str.contains("">"") || str.contains(""'"")) {
                if (!found) found = true;
                str = str.replace(""&"", ""&amp;"").replace(""<"", ""&lt;"").replace("">"", ""&gt;"").replace(""'"", ""&apos;"").replace(""\"""", ""&quot;"");
                newText.append(text.substring(lastEnd, matcher.start()) + ""Comment=\"""" + str + ""\"""");
                lastEnd = matcher.end();
            }
        }
        if (found) {
            newText.append(text.substring(lastEnd));
            if (isFile) {
                File temp = null;
                Writer output = null;
                try {
                    temp = File.createTempFile(""fbench"", """");
                    if (temp != null && temp.exists()) {
                        output = new BufferedWriter(new FileWriter(temp));
                        output.write(newText.toString());
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                } finally {
                    if (output != null) {
                        try {
                            output.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
                input = temp.getPath();
            } else {
                input = newText.toString();
            }
        }
        return input;
    }","    public Object[] toArray(Object[] a) {
        int size = size();
        if (a.length < size) {
            a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        }
        System.arraycopy(toArray(), 0, a, 0, size);
        if (a.length > size) {
            a[size] = null;
        }
        return a;
    }",0,0
"    protected static Object getNextMatchPosRegExImpl(String regEx, CharSequence searchIn, boolean goForward, boolean matchCase, boolean wholeWord, String replaceStr) {
        int flags = matchCase ? 0 : (Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
        Pattern pattern = Pattern.compile(regEx, flags);
        Matcher m = pattern.matcher(searchIn);
        if (goForward) {
            if (!wholeWord) {
                if (m.find()) {
                    if (replaceStr == null) {
                        return new Point(m.start(), m.end());
                    } else {
                        return new RegExReplaceInfo(m.group(0), m.start(), m.end(), getReplacementText(m, replaceStr));
                    }
                }
            } else {
                while (m.find()) {
                    Point loc = new Point(m.start(), m.end());
                    if (isWholeWord(searchIn, loc.x, loc.y - loc.x)) {
                        if (replaceStr == null) {
                            return loc;
                        } else {
                            return new RegExReplaceInfo(m.group(0), loc.x, loc.y, getReplacementText(m, replaceStr));
                        }
                    }
                }
            }
        } else {
            List matches = getMatches(m, replaceStr);
            if (matches.isEmpty()) return null;
            int pos = matches.size() - 1;
            if (wholeWord == false) {
                if (replaceStr == null) {
                    return matches.get(pos);
                } else {
                    return matches.get(pos);
                }
            }
            while (pos >= 0) {
                Object matchObj = matches.get(pos);
                if (replaceStr == null) {
                    Point loc = (Point) matchObj;
                    if (isWholeWord(searchIn, loc.x, loc.y - loc.x)) {
                        return matchObj;
                    }
                } else {
                    RegExReplaceInfo info = (RegExReplaceInfo) matchObj;
                    int x = info.getStartIndex();
                    int y = info.getEndIndex();
                    if (isWholeWord(searchIn, x, y - x)) {
                        return matchObj;
                    }
                }
                pos--;
            }
        }
        return null;
    }","        public static void transpose(double[][] in, double[][] out) {
            if (D3.isIdentity(in)) {
                if (in != out) D3.setIdentity(out);
                return;
            }
            double[][] matIn = D3.getMatrixPool().borrowObject();
            try {
                double[][] copyIn;
                if (in == out) {
                    D3.copyMatrix(in, matIn);
                    copyIn = matIn;
                } else {
                    copyIn = in;
                }
                for (int rowI = 0; rowI < 3; rowI++) {
                    for (int colI = 0; colI < 3; colI++) {
                        out[colI][rowI] = copyIn[rowI][colI];
                    }
                }
            } finally {
                D3.getMatrixPool().returnObject(matIn);
            }
        }",0,0
"    @Override
    public void runCode() {
        if (Desktop.isDesktopSupported()) {
            final Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(new URI(HELP_URI));
            } catch (final IOException e) {
                LogEngine.error(""Could not launch the default browser for your system"", e);
            } catch (final URISyntaxException e) {
                LogEngine.error(""Invalid URI "" + HELP_URI, e);
            }
        } else {
            LogEngine.inform(""Unfortunately your system doesn't support Java SE 6 Desktop API"", null);
        }
    }","    private static void deleteDirectory(File f) {
        File[] files = f.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isDirectory()) deleteDirectory(files[i]);
            files[i].delete();
        }
    }",0,0
"    public static Object[][] reverseObjArray(Object[][] obj) {
        int objRow = obj.length, objColumn = obj[0].length;
        Object[][] result = new Object[objColumn][objRow];
        for (int row = 0; row < result.length; row++) for (int column = 0; column < result[0].length; column++) result[row][column] = obj[column][row];
        return result;
    }","    public void testVowels() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""[a-z&&[aeiou]]"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""BerlinBrown"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Vowel-Search \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }",0,0
"                @Override
                public void hyperlinkUpdate(HyperlinkEvent hlinkEvt) {
                    try {
                        if (hlinkEvt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                            if (!Desktop.isDesktopSupported()) throw new Exception(""Cannot open link: this system does not support opening web links."");
                            Desktop desktop = Desktop.getDesktop();
                            desktop.browse(hlinkEvt.getURL().toURI());
                        }
                    } catch (Throwable e) {
                        ErrDialog.errorDialog(getContentPane(), ErrUtils.getExceptionMessage(e));
                    }
                }","    public TranscodeInputStream startTranscodeProcess(String localPath, String videoCodec, int videoBitrate, String audioCodec, int audioBitrate, String scale, boolean deint, String mux) throws Throwable {
        readProperties();
        String fileExt = (String) fileExtMap.get(mux);
        if (fileExt == null) {
            throw new IOException(""Invalid mux specified"");
        }
        if (streams.size() >= maxStreams) {
            throw new IOException(""Maximum number of streams reached."");
        }
        ServerSocket socket = findAvailablePort();
        if (socket == null) {
            throw new IOException(""Unable to allocate port for streaming "" + ""between specified ports "" + startPort + ""-"" + stopPort);
        }
        int port = socket.getLocalPort();
        StringBuffer cmdBuff = new StringBuffer();
        cmdBuff.append("" \"""");
        cmdBuff.append(vlcCmd);
        cmdBuff.append(""\"" "");
        cmdBuff.append(vlcOpts);
        replaceFirst(cmdBuff, OPT_TOKEN_LOCAL_PATH, localPath);
        replaceFirst(cmdBuff, OPT_TOKEN_VIDEO_CODEC, videoCodec);
        replaceFirst(cmdBuff, OPT_TOKEN_VIDEO_BITRATE, String.valueOf(videoBitrate));
        replaceFirst(cmdBuff, OPT_TOKEN_AUDIO_CODEC, audioCodec);
        replaceFirst(cmdBuff, OPT_TOKEN_AUDIO_BITRATE, String.valueOf(audioBitrate));
        replaceFirst(cmdBuff, OPT_TOKEN_SERVERPORT, localhostAddr.getHostAddress() + "":"" + port);
        replaceFirst(cmdBuff, OPT_TOKEN_SCALE, scale);
        replaceFirst(cmdBuff, OPT_TOKEN_MUX, mux);
        if (deint) {
            replaceFirst(cmdBuff, OPT_TOKEN_DEINT, "",deinterlace"");
        } else {
            replaceFirst(cmdBuff, OPT_TOKEN_DEINT, """");
        }
        if (debugLog) Acme.Serve.Serve.extLog(""OS: "" + System.getProperty(""os.name""));
        if (System.getProperty(""os.name"").toLowerCase().startsWith(""linux"")) {
            if (debugLog) Acme.Serve.Serve.extLog(""Converting Command for Linux: "" + cmdBuff);
            String UQ = ""(?<=[^\\\\])\\\"""";
            String US = ""(?<=[^\\\\])\\s"";
            Pattern p = Pattern.compile(UQ + "".*?"" + UQ);
            Matcher m = p.matcher(cmdBuff.toString());
            StringBuffer sb = new StringBuffer();
            while (m.find()) {
                String s = cmdBuff.toString().substring(m.start() + 1, m.end() - 1);
                Acme.Serve.Serve.extLog(""s1: "" + s);
                s = s.replaceAll(US, ""\\\\ "");
                Acme.Serve.Serve.extLog(""s2: "" + s);
                s = s.replace(""\\"", ""\\\\"");
                Acme.Serve.Serve.extLog(""s3: "" + s);
                m.appendReplacement(sb, s);
            }
            m.appendTail(sb);
            cmdBuff = sb;
            replaceFirst(cmdBuff, ""--dummy-quiet"", """");
        }
        TranscodeInputStream is = null;
        synchronized (streams) {
            socket.close();
            if (debugLog) Acme.Serve.Serve.extLog(""Executing command: "" + cmdBuff.substring(1));
            final Process proc = Runtime.getRuntime().exec(cmdBuff.toString().substring(1), null, vlcWkDir);
            if (proc != null) {
                Thread stdout_reader = new Thread() {

                    public void run() {
                        BufferedReader proc_out = new BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));
                        String line;
                        try {
                            while (null != (line = proc_out.readLine())) if (debugLog) Acme.Serve.Serve.extLog(""VLC(out): "" + line);
                        } catch (IOException e) {
                        }
                        try {
                            proc_out.close();
                        } catch (IOException e) {
                        }
                    }
                };
                stdout_reader.start();
                Thread stderr_reader = new Thread() {

                    public void run() {
                        BufferedReader proc_err = new BufferedReader(new java.io.InputStreamReader(proc.getErrorStream()));
                        String line;
                        try {
                            while (null != (line = proc_err.readLine())) if (debugLog) Acme.Serve.Serve.extLog(""VLC(err): "" + line);
                        } catch (IOException e) {
                        }
                        try {
                            proc_err.close();
                        } catch (IOException e) {
                        }
                    }
                };
                stderr_reader.start();
            }
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            try {
                int retryCount = 0;
                URL url = new URL(""http://"" + localhostAddr.getHostAddress() + "":"" + String.valueOf(socket.getLocalPort()));
                while (retryCount < maxRetries) {
                    try {
                        URLConnection conn = url.openConnection();
                        if (debugLog) Acme.Serve.Serve.extLog(""Connected to "" + conn.toString());
                        is = new TranscodeInputStream(conn.getInputStream(), proc, port, fileExt, serverBuffer);
                        streams.add(is);
                        if (debugLog) Acme.Serve.Serve.extLog(""Returning InputStream: "" + is);
                        return is;
                    } catch (IOException ex) {
                        Acme.Serve.Serve.extLog(""Unable to connect, retrying. "" + ex);
                        retryCount++;
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
                throw new IOException(""Too many retries"");
            } catch (Throwable e) {
                Acme.Serve.Serve.extLog(""Failed to set up InputStream: "" + e);
                Acme.Serve.Serve.extLog(""Shutting down vlc transcoder process"");
                if (proc != null) proc.destroy();
                throw e;
            }
        }
    }",0,0
"    private void send(HttpServletRequest req, HttpServletResponse res, ServletOutputStream out, HttpSession ssn) throws IOException {
        String to = req.getParameter(""to"");
        String cc = req.getParameter(""cc"");
        String subj = req.getParameter(""subject"");
        String text = req.getParameter(""text"");
        try {
            MailUserData mud = getMUD(ssn);
            if (mud == null) throw new Exception(""trying to send, but not logged in"");
            Message msg = new MimeMessage(mud.getSession());
            InternetAddress[] toAddrs = null, ccAddrs = null;
            if (to != null) {
                toAddrs = InternetAddress.parse(to, false);
                msg.setRecipients(Message.RecipientType.TO, toAddrs);
            } else throw new MessagingException(""No \""To\"" address specified"");
            if (cc != null) {
                ccAddrs = InternetAddress.parse(cc, false);
                msg.setRecipients(Message.RecipientType.CC, ccAddrs);
            }
            if (subj != null) msg.setSubject(subj);
            URLName u = mud.getURLName();
            msg.setFrom(new InternetAddress(u.getUsername() + ""@"" + u.getHost()));
            if (text != null) msg.setText(text);
            Transport.send(msg);
            out.println(""<h1>Message sent successfully</h1></body></html>"");
            out.close();
        } catch (Exception mex) {
            out.println(""<h1>Error sending message.</h1>"");
            out.println(mex.toString());
            out.println(""<br></body></html>"");
        }
    }","    public String escapeString(String s) {
        Pattern pattern = Pattern.compile(""\\W"");
        Matcher matcher = pattern.matcher(s);
        StringBuffer escapedString = new StringBuffer();
        int previousEnd = 0;
        while (matcher.find()) {
            escapedString.append(s.substring(previousEnd, matcher.start()));
            escapedString.append(""\\"");
            escapedString.append(matcher.group());
            previousEnd = matcher.end();
        }
        if (previousEnd != s.length()) {
            escapedString.append(s.substring(previousEnd, s.length()));
        }
        return escapedString.toString();
    }",0,0
"    public Collection findUsersByLoginNameStateGroup(String login, String name, Integer state, Integer groupId) throws DAOException {
        ArrayList users = new ArrayList();
        try {
            StringBuffer sql = new StringBuffer();
            boolean loginExists = false;
            this.acquire();
            sql.append(""SELECT u.Id "");
            sql.append("",u.Login "");
            sql.append("",u.Password "");
            sql.append("",u.Object_State "");
            sql.append("",p.id "");
            sql.append("",p.Name "");
            sql.append("",p.First_Name "");
            sql.append("",p.Nick_Name "");
            sql.append("",p.Email "");
            sql.append("",p.Title "");
            sql.append("",p.Url "");
            sql.append("",p.Salutation "");
            sql.append("",p.Position "");
            sql.append("",p.Department "");
            sql.append("",p.Disability "");
            sql.append(""FROM "").append(DatabaseTableConstants.USER_TABLE).append("" u, "");
            sql.append(DatabaseTableConstants.PERSON_TABLE).append("" p "");
            if (groupId != null) {
                sql.append("","").append(DatabaseTableConstants.USER_GROUP_TABLE).append("" up "");
            }
            sql.append(""WHERE u.Person_Id = p.id"");
            StringBuffer sqlZusatz = new StringBuffer();
            String[] loginArray = new String[login.length() + 1];
            int i = 0;
            if (state != null) {
                sqlZusatz.append("" AND u.Object_State = "").append(state);
            } else {
                sqlZusatz.append("" AND u.Object_State <>"").append(Constants.DELETED);
            }
            if (groupId != null) {
                sqlZusatz.append("" AND u.id = up.User_Id AND up.Group_Id = "").append(groupId);
            }
            if (login != null) {
                if (!(login.equals("""") || login.equals(""*"") || login.startsWith(""&"") || login.endsWith(""&"") || login.startsWith("" "") || login.endsWith("" ""))) {
                    loginExists = true;
                    login = login.replace('*', '%');
                    Pattern p = Pattern.compile(""&"");
                    Matcher m = p.matcher(login);
                    if (m.find()) {
                        String loginAnf = login.substring(0, m.start()).trim();
                        String gross = loginAnf.substring(0, 1).toUpperCase() + loginAnf.substring(1, loginAnf.length());
                        String klein = loginAnf.substring(0, 1).toLowerCase() + loginAnf.substring(1, loginAnf.length());
                        if (loginAnf.length() >= 1) {
                            loginArray[i] = ("" AND u.Login like '"" + gross + ""%'"");
                            i++;
                            loginArray[i] = ("" AND u.Login like '"" + klein + ""%'"");
                            i++;
                        } else {
                            loginArray[i] = ("" AND u.Login like '%'"");
                            i++;
                        }
                        login = login.substring(m.end(), login.length()).trim();
                        m = p.matcher(login);
                        while (m.find()) {
                            loginAnf = login.substring(0, m.start()).trim();
                            if (loginAnf.length() >= 1) {
                                gross = loginAnf.substring(0, 1).toUpperCase() + loginAnf.substring(1, loginAnf.length());
                                klein = loginAnf.substring(0, 1).toLowerCase() + loginAnf.substring(1, loginAnf.length());
                                loginArray[i] = ("" AND u.Login like '"" + gross + ""%'"");
                                i++;
                                loginArray[i] = ("" AND u.Login like '"" + klein + ""%'"");
                                i++;
                            } else {
                                loginArray[i] = ("" AND u.Login like '%'"");
                                i++;
                            }
                            login = login.substring(m.end(), login.length()).trim();
                            m = p.matcher(login);
                        }
                        if (login.length() >= 1) {
                            gross = login.substring(0, 1).toUpperCase() + login.substring(1, login.length());
                            klein = login.substring(0, 1).toLowerCase() + login.substring(1, login.length());
                            loginArray[i] = ("" AND u.Login like '"" + gross + ""%'"");
                            i++;
                            loginArray[i] = ("" AND u.Login like '"" + klein + ""%'"");
                            i++;
                        } else {
                            loginArray[i] = ("" AND u.Login like '%'"");
                            i++;
                        }
                    } else {
                        String gross = login.substring(0, 1).toUpperCase() + login.substring(1, login.length());
                        String klein = login.substring(0, 1).toLowerCase() + login.substring(1, login.length());
                        loginArray[i] = ("" AND u.Login like '"" + gross + ""%'"");
                        i++;
                        loginArray[i] = ("" AND u.Login like '"" + klein + ""%'"");
                        i++;
                    }
                } else {
                    loginArray[i] = ("" AND u.Login like '%'"");
                    i++;
                }
            } else {
                loginArray[i] = ("" AND u.Login like '%'"");
                i++;
            }
            if (name != null) {
                if (!(name.equals("""") || name.equals(""*"") || name.startsWith(""&"") || name.endsWith(""&"") || name.startsWith("" "") || name.endsWith("" ""))) {
                    name = name.replace('*', '%');
                    Pattern p = Pattern.compile(""&"");
                    Matcher m = p.matcher(name);
                    if (m.find()) {
                        String nameAnf = name.substring(0, m.start()).trim();
                        String gross = nameAnf.substring(0, 1).toUpperCase() + nameAnf.substring(1, nameAnf.length());
                        String klein = nameAnf.substring(0, 1).toLowerCase() + nameAnf.substring(1, nameAnf.length());
                        if (nameAnf.length() >= 1) {
                            sql.append("" AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[0]);
                            for (int j = 1; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                            }
                            for (int j = 0; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(klein).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                            }
                        } else {
                            for (int j = 0; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[j]);
                            }
                        }
                        name = name.substring(m.end(), name.length()).trim();
                        m = p.matcher(name);
                        while (m.find()) {
                            nameAnf = name.substring(0, m.start()).trim();
                            if (nameAnf.length() >= 1) {
                                gross = nameAnf.substring(0, 1).toUpperCase() + nameAnf.substring(1, nameAnf.length());
                                klein = nameAnf.substring(0, 1).toLowerCase() + nameAnf.substring(1, nameAnf.length());
                                for (int j = 0; j < i; j++) {
                                    sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                                }
                                for (int j = 0; j < i; j++) {
                                    sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(klein).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                                }
                            } else {
                                for (int j = 0; j < i; j++) {
                                    sql.append("" OR u.Person_Id = p.id AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[j]);
                                }
                            }
                            name = name.substring(m.end(), name.length()).trim();
                            m = p.matcher(name);
                        }
                        if (name.length() >= 1) {
                            gross = name.substring(0, 1).toUpperCase() + name.substring(1, name.length());
                            klein = name.substring(0, 1).toLowerCase() + name.substring(1, name.length());
                            for (int j = 0; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                            }
                            for (int j = 0; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(klein).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                            }
                        } else {
                            for (int j = 0; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[j]);
                            }
                        }
                    } else {
                        String gross = name.substring(0, 1).toUpperCase() + name.substring(1, name.length());
                        String klein = name.substring(0, 1).toLowerCase() + name.substring(1, name.length());
                        sql.append("" AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[0]);
                        for (int j = 1; j < i; j++) {
                            sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                        }
                        for (int j = 0; j < i; j++) {
                            sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(klein).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                        }
                    }
                } else {
                    sql.append("" AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[0]);
                    for (int j = 1; j < i; j++) {
                        sql.append("" OR u.Person_Id = p.id AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[j]);
                    }
                }
            } else {
                sql.append("" AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[0]);
                for (int j = 1; j < i; j++) {
                    sql.append("" OR u.Person_Id = p.id AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[j]);
                }
            }
            if (loginExists) {
                sql.append("" order by u.Login"");
            } else {
                sql.append("" order by p.Name"");
            }
            Statement statement = getConnection().createStatement();
            ResultSet result = statement.executeQuery(sql.toString());
            while (result.next()) {
                UserVo user = new UserVo();
                PersonVo person = new PersonVo();
                user.setId(new Integer(result.getInt(1)));
                user.setLogin(result.getString(2));
                user.setPassword(result.getString(3));
                user.setObjectState(new Integer(result.getInt(4)));
                person.setId(new Integer(result.getInt(5)));
                person.setName(result.getString(6));
                person.setFirstName(result.getString(7));
                person.setNickName(result.getString(8));
                person.setEmail(result.getString(9));
                person.setTitle(result.getString(10));
                person.setUrl(result.getString(11));
                person.setSalutation(result.getString(12));
                person.setPosition(result.getString(13));
                person.setDepartment(result.getString(14));
                person.setDisability(result.getString(15));
                user.setPerson(person);
                users.add(user);
            }
            statement.close();
            result.close();
            StringBuffer phoneSearch = new StringBuffer();
            phoneSearch.append(""SELECT Typ "");
            phoneSearch.append("",Phone_Jack "");
            phoneSearch.append("",Direct_Dial "");
            phoneSearch.append("",City_Code "");
            phoneSearch.append("",Country_Code "");
            phoneSearch.append(""FROM "").append(DatabaseTableConstants.PHONE_TABLE);
            phoneSearch.append("" WHERE Person_Id = ?"");
            PreparedStatement phoneStmt = getConnection().prepareStatement(phoneSearch.toString());
            for (Iterator it = users.iterator(); it.hasNext(); ) {
                PersonVo person = ((UserVo) it.next()).getPerson();
                phoneStmt.setInt(1, person.getId().intValue());
                ResultSet res = phoneStmt.executeQuery();
                ArrayList phones = new ArrayList();
                while (res.next()) {
                    PhoneVo phone = new PhoneVo();
                    phone.setTyp(new Integer(res.getInt(1)));
                    phone.setPhoneJack(res.getString(2));
                    phone.setDirectDial(res.getString(3));
                    phone.setCityCode(res.getString(4));
                    phone.setCountryCode(res.getString(5));
                    phones.add(phone);
                }
                person.addPhones(phones);
                res.close();
            }
            phoneStmt.close();
            StringBuffer addressSearch = new StringBuffer();
            addressSearch.append(""SELECT Typ "");
            addressSearch.append("",Locality "");
            addressSearch.append("",Street "");
            addressSearch.append("",Pcode "");
            addressSearch.append(""FROM "").append(DatabaseTableConstants.ADDRESS_TABLE);
            addressSearch.append("" WHERE Person_Id = ?"");
            PreparedStatement addressStmt = getConnection().prepareStatement(addressSearch.toString());
            for (Iterator it = users.iterator(); it.hasNext(); ) {
                PersonVo person = ((UserVo) it.next()).getPerson();
                addressStmt.setInt(1, person.getId().intValue());
                ResultSet res = addressStmt.executeQuery();
                ArrayList addresses = new ArrayList();
                while (res.next()) {
                    AddressVo address = new AddressVo();
                    address.setTyp(new Integer(res.getInt(1)));
                    address.setLocality(res.getString(2));
                    address.setStreet(res.getString(3));
                    address.setPcode(res.getString(4));
                    addresses.add(address);
                }
                person.addAddresses(addresses);
                res.close();
            }
            addressStmt.close();
        } catch (Exception e) {
            throw new DAOException();
        } finally {
            try {
                this.release();
            } catch (Exception e) {
                System.out.println(""Exception releasing connection !"" + e.toString());
            }
        }
        return users;
    }","    public Object applyN(Object[] args) throws Throwable {
        if (kind == 'P') throw new RuntimeException(getName() + "": invoke-special not allowed at run time"");
        int nargs = args.length;
        Procedure.checkArgCount(this, nargs);
        Object arg0 = args[0];
        ObjectType dtype = (kind != 'V' && kind != '*' ? typeFrom(arg0, this) : (ObjectType) Type.make(arg0.getClass()));
        Object mname;
        if (kind == 'N') {
            mname = null;
            if (dtype instanceof TypeValue) {
                Procedure constructor = ((TypeValue) dtype).getConstructor();
                if (constructor != null) {
                    nargs--;
                    Object[] xargs = new Object[nargs];
                    System.arraycopy(args, 1, xargs, 0, nargs);
                    return constructor.applyN(xargs);
                }
            }
            if (dtype instanceof PairClassType) {
                PairClassType ptype = (PairClassType) dtype;
                dtype = ptype.instanceType;
            }
            if (dtype instanceof ArrayType) {
                Type elementType = ((ArrayType) dtype).getComponentType();
                int len;
                len = args.length - 1;
                String name;
                int length;
                int i;
                boolean lengthSpecified;
                if (len >= 2 && args[1] instanceof Keyword && (""length"".equals(name = ((Keyword) args[1]).getName()) || ""size"".equals(name))) {
                    length = ((Number) args[2]).intValue();
                    i = 3;
                    lengthSpecified = true;
                } else {
                    length = len;
                    i = 1;
                    lengthSpecified = false;
                }
                Object arr = Array.newInstance(elementType.getReflectClass(), length);
                int index = 0;
                for (; i <= len; i++) {
                    Object arg = args[i];
                    if (lengthSpecified && arg instanceof Keyword && i < len) {
                        String kname = ((Keyword) arg).getName();
                        try {
                            index = Integer.parseInt(kname);
                        } catch (Throwable ex) {
                            throw new RuntimeException(""non-integer keyword '"" + kname + ""' in array constructor"");
                        }
                        arg = args[++i];
                    }
                    Array.set(arr, index, elementType.coerceFromObject(arg));
                    index++;
                }
                return arr;
            }
        } else {
            mname = args[1];
        }
        MethodProc proc = lookupMethods((ObjectType) dtype, mname);
        if (kind != 'N') {
            Object[] margs = new Object[nargs - (kind == 'S' || kind == 's' ? 2 : 1)];
            int i = 0;
            if (kind == 'V' || kind == '*') margs[i++] = args[0];
            System.arraycopy(args, 2, margs, i, nargs - 2);
            return proc.applyN(margs);
        } else {
            CallContext vars = CallContext.getInstance();
            int err = proc.matchN(args, vars);
            if (err == 0) return vars.runUntilValue();
            if ((nargs & 1) == 1) {
                for (int i = 1; ; i += 2) {
                    if (i == nargs) {
                        Object result;
                        result = proc.apply1(args[0]);
                        for (i = 1; i < nargs; i += 2) {
                            Keyword key = (Keyword) args[i];
                            Object arg = args[i + 1];
                            SlotSet.apply(false, result, key.getName(), arg);
                        }
                        return result;
                    }
                    if (!(args[i] instanceof Keyword)) break;
                }
            }
            MethodProc vproc = ClassMethods.apply((ClassType) dtype, ""valueOf"", '\0', language);
            if (vproc != null) {
                Object[] margs = new Object[nargs - 1];
                System.arraycopy(args, 1, margs, 0, nargs - 1);
                err = vproc.matchN(margs, vars);
                if (err == 0) return vars.runUntilValue();
            }
            throw MethodProc.matchFailAsException(err, proc, args);
        }
    }",0,0
"    @Override
    public void runCode() {
        if (Desktop.isDesktopSupported()) {
            final Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(new URI(HELP_URI));
            } catch (final IOException e) {
                LogEngine.error(""Could not launch the default browser for your system"", e);
            } catch (final URISyntaxException e) {
                LogEngine.error(""Invalid URI "" + HELP_URI, e);
            }
        } else {
            LogEngine.inform(""Unfortunately your system doesn't support Java SE 6 Desktop API"", null);
        }
    }","    public void close() {
        boolean goodExit = false;
        if (!pending()) commit();
        try {
            DriverManager.getConnection(""jdbc:derby:"" + dbName + "";shutdown=true"");
        } catch (SQLException e) {
            if (e.getSQLState().equals(""XJ015"")) {
                goodExit = true;
            }
        }
        if (!goodExit) {
            System.err.println(""Database "" + dbName + "" did not shut down correctly."");
        }
    }",0,0
"        public void actionPerformed(ActionEvent e) {
            JFileChooser chooser = new JFileChooser();
            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) m_viewer.setGMNFile(chooser.getSelectedFile());
        }","    public IntSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",0,0
"    public double[][] getFSDistances() {
        int size = getMatrix().size();
        double[][] distances;
        try {
            distances = new double[size][size];
            for (int i = 0; i < size; i++) {
                double distii = get(i, i);
                for (int j = i; j < size; j++) {
                    distances[i][j] = Math.sqrt(distii + get(j, j) - 2 * get(i, j));
                    distances[j][i] = distances[i][j];
                }
            }
        } catch (OutOfMemoryError e) {
            distances = null;
            System.err.println(""Not enough memory for distances!"");
            System.gc();
        }
        return distances;
    }","        public void actionPerformed(ActionEvent e) {
            JFileChooser chooser = new JFileChooser();
            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) m_viewer.setGMNFile(chooser.getSelectedFile());
        }",0,0
"    public Object[] toArray(Object[] a) {
        int size = size();
        if (a.length < size) {
            a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        }
        System.arraycopy(toArray(), 0, a, 0, size);
        if (a.length > size) {
            a[size] = null;
        }
        return a;
    }","
    public static int[] findLastRegExp2(String input, String regExp) throws java.util.regex.PatternSyntaxException {
        int[] out = new int[2];
        out[0] = -1;
        Pattern lbPattern = Pattern.compile(regExp);
        Matcher matcher = lbPattern.matcher(input);
        while (matcher.find()) {
            out[0] = matcher.start();
            out[1] = matcher.end();
        }
        return out;",0,0
"    int old_javah(List<String> options, File outDir, File bootclasspath, String className) throws IOException, InterruptedException {
        List<String> cmd = new ArrayList<String>();
        cmd.add(old_javah_cmd.getPath());
        cmd.addAll(options);
        cmd.add(""-d"");
        cmd.add(outDir.getPath());
        cmd.add(""-bootclasspath"");
        cmd.add(bootclasspath.getPath());
        cmd.add(className);
        System.err.println(""old_javah: "" + cmd);
        ProcessBuilder pb = new ProcessBuilder(cmd);
        pb.redirectErrorStream(true);
        Process p = pb.start();
        BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
        String line;
        StringBuilder sb = new StringBuilder();
        while ((line = in.readLine()) != null) {
            sb.append(line);
            sb.append(""\n"");
        }
        System.err.println(""old javah out: "" + sb.toString());
        return p.waitFor();
    }","            @Override
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    if (Desktop.isDesktopSupported()) {
                        Desktop desktop = Desktop.getDesktop();
                        if (desktop.isSupported(Desktop.Action.BROWSE)) {
                            try {
                                desktop.browse(URI.create(e.getDescription()));
                                textEntry.requestFocusInWindow();
                                viewPane.setCaretPosition(viewPane.getStyledDocument().getLength());
                            } catch (IOException ex) {
                                JOptionPane.showMessageDialog(viewPane, messages.getString(""ChatPane.msg.CouldNotLaunchDefaultBrowserSeeLogForReason""));
                                logger.log(Level.INFO, messages.getString(""ChatPane.msg.CouldNotLaunchBrowser""), ex);
                            }
                        }
                    }
                }
            }",0,0
"    public RoutesMap getInverse() {
        DenseRoutesMap transposed = new DenseRoutesMap(distances.length);
        for (int i = 0; i < distances.length; i++) {
            for (int j = 0; j < distances.length; j++) {
                transposed.distances[i][j] = distances[j][i];
            }
        }
        return transposed;
    }","    private static String sort(final String item) {
        final char[] chars = item.toCharArray();
        for (int i = 1; i < chars.length; i++) {
            for (int j = 0; j < chars.length - 1; j++) {
                if (chars[j] > chars[j + 1]) {
                    final char temp = chars[j];
                    chars[j] = chars[j + 1];
                    chars[j + 1] = temp;
                }
            }
        }
        return String.valueOf(chars);
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","                @Override
                public void hyperlinkUpdate(HyperlinkEvent hlinkEvt) {
                    try {
                        if (hlinkEvt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                            if (!Desktop.isDesktopSupported()) throw new Exception(""Cannot open link: this system does not support opening web links."");
                            Desktop desktop = Desktop.getDesktop();
                            desktop.browse(hlinkEvt.getURL().toURI());
                        }
                    } catch (Throwable e) {
                        ErrDialog.errorDialog(getContentPane(), ErrUtils.getExceptionMessage(e));
                    }
                }",0,0
"    public static String[] expandMacros(String string) {
        String expression = ""\\[([\\d]+)-([\\d]+)\\]"";
        Pattern pattern = Pattern.compile(expression);
        Matcher matcher = pattern.matcher(string);
        Vector vector = new Vector();
        int startPos = 0;
        while (matcher.find()) {
            try {
                Integer lowVal = new Integer(matcher.group(1));
                Integer highVal = new Integer(matcher.group(2));
                vector.add(new Object[] { string.substring(startPos, matcher.start(0)), lowVal, highVal });
                startPos = matcher.end(0);
            } catch (NumberFormatException exception) {
            }
        }
        String ending = string.substring(startPos);
        int dimSize = vector.size();
        String[] stringParts = new String[dimSize];
        int[] startVals = new int[dimSize];
        int[] endVals = new int[dimSize];
        for (int i = 0; i < vector.size(); i++) {
            stringParts[i] = (String) ((Object[]) vector.get(i))[0];
            startVals[i] = ((Integer) ((Object[]) vector.get(i))[1]).intValue();
            endVals[i] = ((Integer) ((Object[]) vector.get(i))[2]).intValue();
        }
        int count = 1;
        int[] dimensions = new int[dimSize];
        int[] positions = new int[dimSize];
        for (int d = 0; d < dimSize; d++) {
            dimensions[d] = Math.abs(startVals[d] - endVals[d]) + 1;
            count *= dimensions[d];
        }
        if (count > Constants.MAX_NAME_MACRO_EXPANSIONS) {
            return null;
        }
        String[] strings = new String[count];
        int pos = 0;
        for (int s = 0; s < count; s++) {
            string = """";
            pos = s;
            for (int d = dimSize - 1; d >= 0; d--) {
                positions[d] = pos % dimensions[d];
                pos /= dimensions[d];
            }
            for (int d = 0; d < dimSize; d++) {
                string += stringParts[d] + (startVals[d] + positions[d] * (endVals[d] - startVals[d] >= 0 ? 1 : -1));
            }
            strings[s] = string + ending;
        }
        return strings;
    }","    public TabelaVerdade(String tipoDeExercicio, String ordem, String ordem2, String[][] valores, String preposicao) {
        super(Usuario.statusDoExercicio(tipoDeExercicio, InterfaceDados.obtemNumeroDoExercicioCorrente()));
        pSuperior = new JPanel(new GridLayout(2, 1));
        pTitulo = new JPanel(new FlowLayout(FlowLayout.CENTER));
        titulo = new JLabel(tipoDeExercicio);
        titulo.setFont(new Font(""Arial"", 0, 25));
        titulo.setForeground(new Color(0, 0, 128));
        pTitulo.add(titulo);
        pSuperior.add(pTitulo);
        preposicao = alteraString(preposicao);
        valores = alteraMatrizDeStrings(valores);
        pEnun = new JPanel(new GridLayout(2, 1));
        enunciado1 = new JLabel(this.retornaEspacoAjustado(""    "") + ordem);
        enunciado1.setFont(new Font(""Arial"", 1, 14));
        enunciado1.setForeground(new Color(0, 0, 128));
        pEnun.add(enunciado1);
        pEnun2 = new JPanel(new FlowLayout(FlowLayout.LEFT));
        enunciado2 = new JLabel(this.retornaEspacoAjustado(""    "") + ordem2);
        enunciado2.setFont(new Font(""Arial"", 1, 14));
        enunciado2.setForeground(new Color(0, 0, 128));
        pEnun2.add(enunciado2);
        enunciado2 = new JLabel(preposicao);
        enunciado2.setFont(new Font(""Times"", 1, 16));
        enunciado2.setForeground(new Color(0, 0, 128));
        pEnun2.add(enunciado2);
        pEnun.add(pEnun2);
        pSuperior.add(pEnun);
        getContentPane().add(""North"", pSuperior);
        pOeste = new JPanel(new FlowLayout(FlowLayout.LEFT));
        pOeste.add(new JLabel(this.retornaEspacoAjustado(""  "")));
        getContentPane().add(""East"", pOeste);
        pOeste.add(new JLabel(this.retornaEspacoAjustado(""    "")));
        getContentPane().add(""West"", pOeste);
        pCentral = new JPanel(new GridLayout(1, valores[0].length + 1));
        pColuna = new JPanel(new GridLayout(valores.length, 1));
        String[][] valor = new String[valores[1].length][valores.length];
        for (int i = 0; i < valor.length; i++) for (int j = 0; j < valor[i].length; j++) {
            valor[i][j] = valores[j][i];
        }
        int total = 0;
        for (int i = 0; i < valor.length; i++) {
            if (valor[i][1].equals(""nada"")) total++;
        }
        preencher = new JTextField[total + 1][valor[1].length - 1];
        resposta = new String[total + 1][valor[1].length - 1];
        int aux = 0;
        for (int i = 0; i <= valor.length; i++) {
            pColuna = new JPanel(new GridLayout(valor[1].length, 1));
            for (int j = 0; j < valor[1].length; j++) {
                if (i == valor.length) {
                    if (j == 0) {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        JLabel prep = new JLabel(preposicao);
                        prep.setFont(new Font(""Times"", 0, 11));
                        prep.setForeground(new Color(0, 0, 128));
                        pAux.add(prep);
                    } else {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        preencher[total][j - 1] = new JTextField("""", 3);
                        preencher[total][j - 1].setDocument(new DefinePadraoDoTexto(1));
                        preencher[total][j - 1].addKeyListener(this);
                        pAux.add(preencher[total][j - 1]);
                    }
                } else {
                    if ((valor[i][j]).equals(""nada"")) {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        preencher[aux][j - 1] = new JTextField("""", 3);
                        preencher[aux][j - 1].setDocument(new DefinePadraoDoTexto(1));
                        preencher[aux][j - 1].addKeyListener(this);
                        pAux.add(preencher[aux][j - 1]);
                        if (j == valor[i].length - 1) aux++;
                    } else {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        JLabel vals = new JLabel(valor[i][j]);
                        if (j == 0) {
                            vals.setFont(new Font(""Times"", 0, 14));
                            vals.setForeground(new Color(0, 0, 128));
                        }
                        pAux.add(vals);
                    }
                }
                pColuna.add(pAux);
            }
            pCentral.add(pColuna);
        }
        getContentPane().add(""Center"", pCentral);
    }",0,0
"    public static final int[][] transpose(final int m1[][]) {
        int[][] m3 = new int[m1[0].length][m1.length];
        for (int ii = 0; ii < m1.length; ii++) for (int jj = 0; jj < m1[ii].length; jj++) m3[jj][ii] = m1[ii][jj];
        return m3;
    }","    public AboutDialog(JFrame parent) {
        super(parent, DialogMessages.about_dialog_title, true);
        Container cp = getContentPane();
        cp.setLayout(new BorderLayout());
        JPanel aboutPanel = new JPanel();
        aboutPanel.setLayout(new GridBagLayout());
        cp.add(aboutPanel, BorderLayout.CENTER);
        JLabel splash = new JLabel();
        splash.setIcon(ImageManager.getDefault().getSplashScreen());
        splash.setHorizontalAlignment(JTextField.CENTER);
        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.gridx = 0;
        c.gridy = 1;
        aboutPanel.add(splash, c);
        HyperlinkLabel websiteLink = new HyperlinkLabel(DialogMessages.website);
        websiteLink.setHorizontalAlignment(JTextField.CENTER);
        websiteLink.setHyperlinkListener(new IHyperlinkListener() {

            @Override
            public void mouseClicked(int id) {
                URI uri;
                try {
                    uri = new URI(DialogMessages.website);
                    if (Desktop.isDesktopSupported()) {
                        try {
                            Desktop.getDesktop().browse(uri);
                        } catch (IOException e) {
                            MessageUtil.addMessage(""Unable to open the license file: "" + e.getMessage());
                        }
                    }
                } catch (URISyntaxException e1) {
                    MessageUtil.addMessage(""Unable to open the website: "" + e1.getMessage());
                }
            }
        });
        c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.gridx = 0;
        c.gridy = 2;
        aboutPanel.add(websiteLink, c);
        JLabel aboutLabel2 = new JLabel();
        aboutLabel2.setHorizontalAlignment(JTextField.CENTER);
        aboutLabel2.setText(DialogMessages.build_number);
        c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.gridx = 0;
        c.gridy = 3;
        aboutPanel.add(aboutLabel2, c);
        HyperlinkLabel licenseLink = new HyperlinkLabel(""Released under GNU GPL v3"");
        licenseLink.setHorizontalAlignment(JTextField.CENTER);
        licenseLink.setHyperlinkListener(new IHyperlinkListener() {

            @Override
            public void mouseClicked(int id) {
                File licenseFile = new File(""."" + File.separator + ""license.txt"");
                if (!licenseFile.exists()) {
                    licenseFile = new File(""."" + File.separator + ""deploy"" + File.separator + ""license.txt"");
                }
                if (licenseFile.exists()) {
                    if (Desktop.isDesktopSupported()) {
                        try {
                            Desktop.getDesktop().open(licenseFile);
                        } catch (IOException e) {
                            MessageUtil.addMessage(""Unable to open the license file: "" + e.getMessage());
                        }
                    }
                } else {
                    MessageUtil.addMessage(""Unable to locate the license file: "" + licenseFile.getAbsolutePath());
                }
            }
        });
        c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.gridx = 0;
        c.gridy = 4;
        aboutPanel.add(licenseLink, c);
        HyperlinkLabel thirdPartyLink = new HyperlinkLabel(""Third Party Software"");
        thirdPartyLink.setHorizontalAlignment(JTextField.CENTER);
        thirdPartyLink.setHyperlinkListener(new IHyperlinkListener() {

            @Override
            public void mouseClicked(int id) {
                File readmeFile = new File(""."" + File.separator + ""readme.txt"");
                if (!readmeFile.exists()) {
                    readmeFile = new File(""."" + File.separator + ""deploy"" + File.separator + ""readme.txt"");
                }
                if (readmeFile.exists()) {
                    if (Desktop.isDesktopSupported()) {
                        try {
                            Desktop.getDesktop().open(readmeFile);
                        } catch (IOException e) {
                            MessageUtil.addMessage(""Unable to open the readme file: "" + e.getMessage());
                        }
                    }
                } else {
                    MessageUtil.addMessage(""Unable to locate the readme file: "" + readmeFile.getAbsolutePath());
                }
            }
        });
        c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.gridx = 0;
        c.gridy = 5;
        aboutPanel.add(thirdPartyLink, c);
        JPanel buttonPanel = new JPanel();
        cp.add(buttonPanel, BorderLayout.SOUTH);
        closeButton = new JButton();
        closeButton.setText(DialogMessages.close_button);
        closeButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent arg0) {
                AboutDialog.this.setVisible(false);
            }
        });
        buttonPanel.add(closeButton);
        this.pack();
        this.setLocation(ScreenUtil.centralise(this.getSize().width, this.getSize().height));
    }",0,0
"        public Object[] toArray(Object array[]) {
            Object[] result = array;
            if (array.length > 0) {
                result = (Object[]) Array.newInstance(array.getClass().getComponentType(), 0);
            }
            result = collection.toArray(result);
            for (int i = 0; i < result.length; i++) {
                result[i] = new MapEntry((Map.Entry) result[i], parent);
            }
            if (result.length > array.length) {
                return result;
            }
            System.arraycopy(result, 0, array, 0, result.length);
            if (array.length > result.length) {
                array[result.length] = null;
            }
            return array;
        }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                ripperPathField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0,0
"    public static boolean delete(File directory) {
        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.isDirectory()) {
                    boolean answer = delete(file);
                    if (!answer) {
                        return false;
                    }
                } else {
                    if (!file.delete()) {
                        return false;
                    }
                }
            }
        }
        return directory.delete();
    }","    public static long getCheckSum(String chaine) {
        CRC32 crc32 = new CRC32();
        crc32.update(chaine.getBytes());
        return crc32.getValue();
    }",0,0
"    public static int[][] getPixels2D(int[] pixels, int w, int h, int size) {
        int[][] npixels = new int[w][h];
        for (int i = 0; i < npixels.length; i++) {
            for (int j = 0; j < npixels[i].length; j++) {
                npixels[i][j] = pixels[i + j * size];
            }
        }
        int pixel[][] = new int[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                pixel[i][j] = npixels[j][i];
            }
        }
        return pixel;
    }","    private void classButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (m_fc2.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            setClassText(m_fc2.getSelectedFile().getPath());
        }
        classText.requestFocus();
    }",0,0
"    private void downloadFtp(File file, URL jurl) throws SocketException, IOException {
        System.out.println(""downloadFtp("" + file + "", "" + jurl + "")"");
        FTPClient client = new FTPClient();
        client.addProtocolCommandListener(new ProtocolCommandListener() {

            public void protocolCommandSent(ProtocolCommandEvent event) {
                System.out.println(""downloadFtp: "" + event.getMessage());
            }

            public void protocolReplyReceived(ProtocolCommandEvent event) {
                System.out.println(""downloadFtp: "" + event.getMessage());
            }
        });
        try {
            client.connect(jurl.getHost(), -1 == jurl.getPort() ? FTP.DEFAULT_PORT : jurl.getPort());
            int reply = client.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                client.disconnect();
                throw new IOException(""FTP server refused connection."");
            }
            if (!client.login(""anonymous"", ""anonymous"")) {
                client.logout();
                throw new IOException(""Authentication failure."");
            }
            client.setFileType(FTP.BINARY_FILE_TYPE);
            client.enterLocalPassiveMode();
            FileOutputStream out = new FileOutputStream(file);
            boolean ok = client.retrieveFile(jurl.getPath(), out);
            out.close();
            client.logout();
            if (!ok) {
                throw new IOException(""File transfer failure."");
            }
        } catch (IOException e) {
            throw e;
        } finally {
            if (client.isConnected()) {
                try {
                    client.disconnect();
                } catch (IOException e) {
                }
            }
        }
    }","    public NamedPattern(final String namedRegex, final int flags) {
        StringBuilder sb = new StringBuilder();
        Pattern p = Pattern.compile(""\\((\\{(\\S+?)})"");
        Matcher m = p.matcher(namedRegex);
        int pos = 0;
        while (m.find()) {
            groups.add(m.group(2));
            sb.append(namedRegex.substring(pos, m.start(1)));
            pos = m.end();
        }
        String regex = sb.append(namedRegex.substring(pos)).toString();
        pattern = Pattern.compile(regex, flags);
    }",0,0
"    public static void main(String[] args) throws Exception {
        boolean external = false;
        if (args.length == 1) {
            if (args[0].equals(""-h"")) {
                printZMERTUsage(args.length, true);
                System.exit(2);
            } else {
                external = false;
            }
        } else if (args.length == 3) {
            external = true;
        } else {
            printZMERTUsage(args.length, false);
            System.exit(1);
        }
        if (!external) {
            MertCore myMert = new MertCore(args[0]);
            myMert.run_MERT();
            myMert.finish();
        } else {
            int maxMem = Integer.parseInt(args[1]);
            String configFileName = args[2];
            String stateFileName = ""ZMERT.temp.state"";
            String cp = System.getProperty(""java.class.path"");
            boolean done = false;
            int iteration = 0;
            while (!done) {
                ++iteration;
                Runtime rt = Runtime.getRuntime();
                Process p = rt.exec(""java -Xmx"" + maxMem + ""m -cp "" + cp + "" joshua.zmert.MertCore "" + configFileName + "" "" + stateFileName + "" "" + iteration);
                BufferedReader br_i = new BufferedReader(new InputStreamReader(p.getInputStream()));
                BufferedReader br_e = new BufferedReader(new InputStreamReader(p.getErrorStream()));
                String dummy_line = null;
                while ((dummy_line = br_i.readLine()) != null) {
                    System.out.println(dummy_line);
                }
                while ((dummy_line = br_e.readLine()) != null) {
                    System.out.println(dummy_line);
                }
                int status = p.waitFor();
                if (status == 90) {
                    done = true;
                } else if (status == 91) {
                    done = false;
                } else {
                    System.out.println(""Z-MERT exiting prematurely (MertCore returned "" + status + "")..."");
                    break;
                }
            }
        }
        System.exit(0);
    }","    public static String[] separate(String str, String reg) {
        List<String> list = new ArrayList<String>();
        Pattern pattern = Pattern.compile(reg);
        Matcher matcher = pattern.matcher(str);
        while (matcher.find()) list.add(str.substring(matcher.start(), matcher.end()));
        return list.toArray(new String[list.size()]);
    }",0,0
"    static final Object[] resizeArray(Object[] src, int new_size) {
        Class compClass = src.getClass().getComponentType();
        Object tmp[] = (Object[]) Array.newInstance(compClass, new_size);
        System.arraycopy(src, 0, tmp, 0, (src.length < new_size ? src.length : new_size));
        return tmp;
    }","        public MNewProject(JFrame par, String projFileName, int msg) {
            super(par, true);
            m_dialogOK = false;
            setSize(650, 500);
            if (projFileName == null) reset();
            m_message = msg;
            if (projFileName == null) {
                m_srcLang = CommandThread.core.getPreference(OConsts.PREF_SRCLANG);
                m_locLang = CommandThread.core.getPreference(OConsts.PREF_LOCLANG);
                if (m_srcLang.equals("""")) m_srcLang = ""EN-US"";
                if (m_locLang.equals("""")) m_locLang = ""ES"";
            }
            m_browseTarget = 0;
            m_messageLabel = new JLabel();
            Box bMes = Box.createHorizontalBox();
            bMes.add(m_messageLabel);
            bMes.add(Box.createHorizontalGlue());
            m_srcRootLabel = new JLabel();
            Box bSrc = Box.createHorizontalBox();
            bSrc.add(m_srcRootLabel);
            bSrc.add(Box.createHorizontalGlue());
            m_srcBrowse = new JButton();
            bSrc.add(m_srcBrowse);
            m_srcRootField = new JTextField();
            m_srcRootField.setEditable(false);
            m_locRootLabel = new JLabel();
            Box bLoc = Box.createHorizontalBox();
            bLoc.add(m_locRootLabel);
            bLoc.add(Box.createHorizontalGlue());
            m_locBrowse = new JButton();
            bLoc.add(m_locBrowse);
            m_locRootField = new JTextField();
            m_locRootField.setEditable(false);
            m_glosRootLabel = new JLabel();
            Box bGlos = Box.createHorizontalBox();
            bGlos.add(m_glosRootLabel);
            bGlos.add(Box.createHorizontalGlue());
            m_glosBrowse = new JButton();
            bGlos.add(m_glosBrowse);
            m_glosRootField = new JTextField();
            m_glosRootField.setEditable(false);
            m_tmRootLabel = new JLabel();
            Box bTM = Box.createHorizontalBox();
            bTM.add(m_tmRootLabel);
            bTM.add(Box.createHorizontalGlue());
            m_tmBrowse = new JButton();
            bTM.add(m_tmBrowse);
            m_tmRootField = new JTextField();
            m_tmRootField.setEditable(false);
            m_srcLangLabel = new JLabel();
            Box bSL = Box.createHorizontalBox();
            bSL.add(m_srcLangLabel);
            bSL.add(Box.createHorizontalGlue());
            m_srcLangField = new JTextField();
            m_srcLangField.setText(m_srcLang);
            m_locLangLabel = new JLabel();
            Box bLL = Box.createHorizontalBox();
            bLL.add(m_locLangLabel);
            bLL.add(Box.createHorizontalGlue());
            m_locLangField = new JTextField();
            m_locLangField.setText(m_locLang);
            m_okButton = new JButton();
            m_cancelButton = new JButton();
            Box b = Box.createVerticalBox();
            b.add(bMes);
            b.add(bSrc);
            b.add(m_srcRootField);
            b.add(bLoc);
            b.add(m_locRootField);
            b.add(bGlos);
            b.add(m_glosRootField);
            b.add(bTM);
            b.add(m_tmRootField);
            b.add(bSL);
            b.add(m_srcLangField);
            b.add(bLL);
            b.add(m_locLangField);
            getContentPane().add(b, ""North"");
            Box b2 = Box.createHorizontalBox();
            b2.add(Box.createHorizontalGlue());
            b2.add(m_cancelButton);
            b2.add(Box.createHorizontalStrut(5));
            b2.add(m_okButton);
            getContentPane().add(b2, ""South"");
            m_okButton.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    doOK();
                }
            });
            m_cancelButton.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    doCancel();
                }
            });
            m_srcBrowse.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    m_browseTarget = 1;
                    doBrowseDirectoy();
                }
            });
            m_locBrowse.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    m_browseTarget = 2;
                    doBrowseDirectoy();
                }
            });
            m_glosBrowse.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    m_browseTarget = 3;
                    doBrowseDirectoy();
                }
            });
            m_tmBrowse.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    m_browseTarget = 4;
                    doBrowseDirectoy();
                }
            });
            if (projFileName == null) {
                NewDirectoryChooser ndc = new NewDirectoryChooser();
                String label;
                label = OStrings.PP_SAVE_PROJECT_FILE;
                ndc.setDialogTitle(label);
                String curDir = CommandThread.core.getPreference(OConsts.PREF_CUR_DIR);
                if (curDir != null) {
                    File dir = new File(curDir);
                    if (dir.exists() && dir.isDirectory()) {
                        ndc.setCurrentDirectory(dir);
                    }
                }
                int val = ndc.showSaveDialog(this);
                if (val != JFileChooser.APPROVE_OPTION) {
                    m_dialogCancelled = true;
                    return;
                }
                m_projRoot = ndc.getSelectedFile().getAbsolutePath() + File.separator;
                m_projFile = m_projRoot + OConsts.PROJ_FILENAME;
                CommandThread.core.setPreference(OConsts.PREF_CUR_DIR, ndc.getSelectedFile().getParent());
                m_projName = m_projFile.substring(m_projRoot.length());
                m_srcRoot = m_projRoot + OConsts.DEFAULT_SRC + File.separator;
                m_locRoot = m_projRoot + OConsts.DEFAULT_LOC + File.separator;
                m_glosRoot = m_projRoot + OConsts.DEFAULT_GLOS + File.separator;
                m_tmRoot = m_projRoot + OConsts.DEFAULT_TM + File.separator;
            } else {
                m_projFile = projFileName;
                m_projRoot = m_projFile.substring(0, m_projFile.lastIndexOf(File.separator));
            }
            m_projInternal = m_projRoot + OConsts.DEFAULT_INTERNAL + File.separator;
            m_srcRootField.setText(m_srcRoot);
            m_locRootField.setText(m_locRoot);
            m_glosRootField.setText(m_glosRoot);
            m_tmRootField.setText(m_tmRoot);
            m_srcLangField.setText(m_srcLang);
            m_locLangField.setText(m_locLang);
            updateUIText();
        }",0,0
"    public EstimatedPolynomial evaluate() {
        for (int i = 0; i < systemConstants.length; i++) {
            for (int j = i + 1; j < systemConstants.length; j++) systemMatrix[i][j] = systemMatrix[j][i];
        }
        try {
            LUPDecomposition lupSystem = new LUPDecomposition(systemMatrix);
            double[][] components = lupSystem.inverseMatrixComponents();
            LUPDecomposition.symmetrizeComponents(components);
            return new EstimatedPolynomial(lupSystem.solve(systemConstants), SymmetricMatrix.fromComponents(components));
        } catch (DhbIllegalDimension e) {
        } catch (DhbNonSymmetricComponents ex) {
        }
        ;
        return null;
    }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"    private void transform() {
        double apq = rows[p][q];
        if (apq == 0) return;
        double app = rows[p][p];
        double aqq = rows[q][q];
        double arp = (aqq - app) * 0.5 / apq;
        double t = arp > 0 ? 1 / (Math.sqrt(arp * arp + 1) + arp) : 1 / (arp - Math.sqrt(arp * arp + 1));
        double c = 1 / Math.sqrt(t * t + 1);
        double s = t * c;
        double tau = s / (1 + c);
        rows[p][p] = app - t * apq;
        rows[q][q] = aqq + t * apq;
        rows[p][q] = 0;
        rows[q][p] = 0;
        int n = rows.length;
        for (int i = 0; i < n; i++) {
            if (i != p && i != q) {
                rows[p][i] = rows[i][p] - s * (rows[i][q] + tau * rows[i][p]);
                rows[q][i] = rows[i][q] + s * (rows[i][p] - tau * rows[i][q]);
                rows[i][p] = rows[p][i];
                rows[i][q] = rows[q][i];
            }
            arp = transform[i][p];
            aqq = transform[i][q];
            transform[i][p] = arp - s * (aqq + tau * arp);
            transform[i][q] = aqq + s * (arp - tau * aqq);
        }
    }","    public static String[] splitPreserveAllTokens(String input, String regex) {
        int index = 0;
        Pattern p = Pattern.compile(regex);
        ArrayList<String> result = new ArrayList<String>();
        Matcher m = p.matcher(input);
        int lastBeforeIdx = 0;
        while (m.find()) {
            if (StringUtils.isNotEmpty(m.group())) {
                String match = input.subSequence(index, m.start()).toString();
                if (StringUtils.isNotEmpty(match)) {
                    result.add(match);
                }
                result.add(input.subSequence(m.start(), m.end()).toString());
                index = m.end();
            }
        }
        if (index == 0) {
            return new String[] { input };
        }
        final String remaining = input.subSequence(index, input.length()).toString();
        if (StringUtils.isNotEmpty(remaining)) {
            result.add(remaining);
        }
        return result.toArray(new String[result.size()]);
    }",0,0
"    public Matrix transpose() {
        Matrix matrix = new Matrix();
        matrix.m = new double[m[0].length][m.length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++) {
                matrix.m[j][i] = m[i][j];
            }
        }
        return matrix;
    }","    public static String getFormattedName(final InformationUnit unit) {
        StringWriter returnValue = new StringWriter();
        String string = ContactActivator.getDefault().getPreferenceStore().getString(ContactPreferenceInitializer.FORMATTED_NAME_PATTERN);
        Pattern compile = Pattern.compile(FORMATTED_REGEXP);
        Matcher matcher = compile.matcher(string);
        int lastEnd = 0;
        while (matcher.find()) {
            String group = matcher.group();
            matcher.start();
            returnValue.append(string.substring(lastEnd, matcher.start()));
            lastEnd = matcher.end();
            String substring = group.substring(1);
            InformationUnit childByType = InformationUtil.getChildByType(unit, substring);
            if (childByType != null && childByType.getStringValue() != null) {
                returnValue.append(childByType.getStringValue());
            }
        }
        return StringUtils.strip(returnValue.toString());
    }",0,0
"    public static String convert2WinStyle(String inn) {
        StringBuffer sb = new StringBuffer(inn);
        Pattern p = Pattern.compile(""\\${1}[1-9a-zA-Z]+"");
        Matcher m = p.matcher(inn);
        int increased = 0;
        while (m.find()) {
            sb.replace(m.start() + increased, m.start() + increased + 1, ""%"");
            sb.insert(m.end() + increased, ""%"");
            increased++;
        }
        return sb.toString().replace('/', '\\');
    }","    public FTPUtil(final String server) {
        log.debug(""~ftp.FTPUtil() : Creating object"");
        ftpClient = new FTPClient();
        try {
            ftpClient.connect(server);
            ftpClient.login(""anonymous"", """");
            ftpClient.setConnectTimeout(120000);
            ftpClient.setSoTimeout(120000);
            final int reply = ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                final String errMsg = ""Non-positive completion connecting FTPClient"";
                log.warn(""~ftp.FTPUtil() : ["" + errMsg + ""]"");
            }
        } catch (IOException ioe) {
            final String errMsg = ""Cannot connect and login to ftpClient ["" + ioe.getMessage() + ""]"";
            log.warn(""~ftp.FTPUtil() : ["" + errMsg + ""]"");
            ioe.printStackTrace();
        }
    }",0,0
"    File createJar(String name, String... entries) throws IOException {
        File jar = new File(name);
        OutputStream out = new FileOutputStream(jar);
        try {
            JarOutputStream jos = new JarOutputStream(out);
            for (String e : entries) {
                jos.putNextEntry(new ZipEntry(e));
                jos.write(e.getBytes());
            }
            jos.close();
        } finally {
            out.close();
        }
        return jar;
    }","    public static Object resize(final Object[] ary, final int length) {
        final Object newary = Array.newInstance(ary.getClass().getComponentType(), length);
        final int copysize = length > ary.length ? length : ary.length;
        System.arraycopy(ary, 0, newary, 0, copysize);
        return newary;
    }",0,0
"    private void execute() {
        Iterator<Entry<String, File>> iterator = files.entrySet().iterator();
        int t = 0;
        Pattern pattern = Pattern.compile(""\\[(.+?)\\]"");
        Pattern replacePattern = Pattern.compile("".*[/\\\\_@].*"");
        while (iterator.hasNext()) {
            Entry<String, File> entry = iterator.next();
            currentFilename = entry.getValue().getName();
            fileMap.put(currentFilename, t);
            String label = nscripterMap.addLabel(currentFilename, null);
            BufferedReader in = null;
            BufferedWriter out = null;
            try {
                in = new BufferedReader(new InputStreamReader(new FileInputStream(entry.getValue()), ""UTF-16""));
                out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(targetDir, t + "".txt"")), ""GBK""));
                if (t == 0) {
                    writer(out, "";mode800"");
                    writer(out, ""*define"");
                    writer(out, ""caption \""甘井子传说\"""");
                    writer(out, ""roff"");
                    writer(out, ""savenumber 10"");
                    writer(out, ""kidokuskip"");
                    writer(out, ""windowback"");
                    writer(out, ""numalias tempnum,"" + nscripterMap.getNumberVariable(""temp_num"").substring(1));
                    writer(out, ""game"");
                    writer(out, ""*start"");
                }
                writer(out, label);
                String line;
                num = 0;
                for (int i = 1; (line = in.readLine()) != null; i++) {
                    num++;
                    line = line.trim();
                    if (line.length() == 0) continue;
                    if (line.startsWith("";"")) continue;
                    if (line.startsWith(""*"")) {
                        int index = line.indexOf('|');
                        if (index >= 0) line = line.substring(0, index);
                        writer(out, nscripterMap.addLabel(currentFilename, line));
                        continue;
                    }
                    if (line.startsWith(""@"")) {
                        String command = transform(line.substring(1));
                        if (command != null) {
                            writer(out, command);
                        }
                        continue;
                    }
                    Matcher matcher = pattern.matcher(line);
                    StringBuilder sb = new StringBuilder();
                    int index = 0;
                    while (matcher.find()) {
                        String temp = line.substring(index, matcher.start());
                        if (replacePattern.matcher(temp).matches()) {
                            for (int j = 0; j < temp.length(); j++) {
                                char c = temp.charAt(j);
                                switch(c) {
                                    case '/':
                                        sb.append('／');
                                        break;
                                    case '\\':
                                        sb.append('＼');
                                        break;
                                    case '_':
                                        sb.append('＿');
                                        break;
                                    case '@':
                                        sb.append('＠');
                                        break;
                                    default:
                                        sb.append(c);
                                        break;
                                }
                            }
                        } else {
                            sb.append(temp);
                        }
                        index = matcher.end();
                        String command = transform(matcher.group(1));
                        if (command == null) command = """";
                        sb.append(command);
                    }
                    sb.append(line.substring(index, line.length()));
                    if (sb.length() > 0) {
                        writer(out, sb.toString());
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (in != null) try {
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if (out != null) try {
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            t++;
        }
        if (!ifMap.isEmpty()) {
            BufferedWriter out = null;
            try {
                out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(targetDir, t++ + "".txt"")), ""GBK""));
                Iterator<Entry<String, String>> iter = ifMap.entrySet().iterator();
                while (iter.hasNext()) {
                    Entry<String, String> entry = iter.next();
                    out.write(entry.getKey());
                    out.newLine();
                    out.write(entry.getValue());
                    out.newLine();
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (out != null) try {
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }","    private static void ftpTest() {
        FTPClient f = new FTPClient();
        try {
            f.connect(""oscomak.net"");
            System.out.print(f.getReplyString());
            f.setFileType(FTPClient.BINARY_FILE_TYPE);
        } catch (SocketException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        String password = JOptionPane.showInputDialog(""Enter password"");
        if (password == null || password.equals("""")) {
            System.out.println(""No password"");
            return;
        }
        try {
            f.login(""oscomak_pointrel"", password);
            System.out.print(f.getReplyString());
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            String workingDirectory = f.printWorkingDirectory();
            System.out.println(""Working directory: "" + workingDirectory);
            System.out.print(f.getReplyString());
        } catch (IOException e1) {
            e1.printStackTrace();
        }
        try {
            f.enterLocalPassiveMode();
            System.out.print(f.getReplyString());
            System.out.println(""Trying to list files"");
            String[] fileNames = f.listNames();
            System.out.print(f.getReplyString());
            System.out.println(""Got file list fileNames: "" + fileNames.length);
            for (String fileName : fileNames) {
                System.out.println(""File: "" + fileName);
            }
            System.out.println();
            System.out.println(""done reading stream"");
            System.out.println(""trying alterative way to read stream"");
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            f.retrieveFile(fileNames[0], outputStream);
            System.out.println(""size: "" + outputStream.size());
            System.out.println(outputStream.toString());
            System.out.println(""done with alternative"");
            System.out.println(""Trying to store file back"");
            ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());
            boolean storeResult = f.storeFile(""test.txt"", inputStream);
            System.out.println(""Done storing "" + storeResult);
            f.disconnect();
            System.out.print(f.getReplyString());
            System.out.println(""disconnected"");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }",0,0
"    private String[] execSingleLineOutputCmd(String cmdWithParams) {
        String result = """";
        try {
            Process p = Runtime.getRuntime().exec(cmdWithParams.split("" ""));
            BufferedReader sin = new BufferedReader(new InputStreamReader(p.getInputStream()));
            result = sin.readLine();
            sin.close();
            return result.split("" "");
        } catch (Exception ex) {
            System.out.println(""ERROR: "" + ex.getMessage());
            return null;
        }
    }","    protected void attachAndRunDemo(final File selectedFile, final File autoStartFile) {
        if (selectedFile.getName().toLowerCase().endsWith("".pdf"")) {
            try {
                final File pdfFile = selectedFile;
                if (pdfFile.exists()) {
                    if (Desktop.isDesktopSupported()) {
                        Desktop.getDesktop().open(pdfFile);
                    } else {
                        System.out.println(""Awt Desktop is not supported!"");
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            config.sidplay2().setLastDirectory(config.sidplay2().getDemos());
            if (diskfileFilter.accept(selectedFile)) {
                getUiEvents().fireEvent(IInsertMedia.class, new IInsertMedia() {

                    @Override
                    public MediaType getMediaType() {
                        return MediaType.DISK;
                    }

                    @Override
                    public File getSelectedMedia() {
                        return selectedFile;
                    }

                    @Override
                    public File getAutostartFile() {
                        return autoStartFile;
                    }

                    @Override
                    public Component getComponent() {
                        return DiskCollection.this;
                    }
                });
            } else {
                getUiEvents().fireEvent(IInsertMedia.class, new IInsertMedia() {

                    @Override
                    public MediaType getMediaType() {
                        return MediaType.TAPE;
                    }

                    @Override
                    public File getSelectedMedia() {
                        return selectedFile;
                    }

                    @Override
                    public File getAutostartFile() {
                        return autoStartFile;
                    }

                    @Override
                    public Component getComponent() {
                        return DiskCollection.this;
                    }
                });
            }
            if (autoStartFile == null) {
                final String command;
                if (diskfileFilter.accept(selectedFile)) {
                    command = ""LOAD\""*\"",8,1\rRUN\r"";
                } else {
                    command = ""LOAD\rRUN\r"";
                }
                getUiEvents().fireEvent(Reset.class, new Reset() {

                    @Override
                    public boolean switchToVideoTab() {
                        return true;
                    }

                    @Override
                    public String getCommand() {
                        return command;
                    }

                    @Override
                    public Component getComponent() {
                        return DiskCollection.this;
                    }
                });
            }
        }
    }",0,0
"    public static String replaceWithGroup(String a_src, String a_findPattern, String a_replace) {
        StringBuffer retour = new StringBuffer();
        Pattern l_pattern = Pattern.compile(a_findPattern);
        String l_src = a_src;
        Matcher l_matcher = l_pattern.matcher(l_src);
        int l_groupCount = l_matcher.groupCount();
        while (l_matcher.find()) {
            String[] l_groups = new String[l_groupCount + 1];
            for (int i = 0; i < l_groupCount + 1; i++) {
                l_groups[i] = l_matcher.group(i);
            }
            String l_replace = replaceGroupIntoExpression(a_replace, l_groups);
            retour.append(l_src.substring(0, l_matcher.start(0)));
            retour.append(l_replace);
            l_src = l_src.substring(l_matcher.end(0));
            l_matcher = l_pattern.matcher(l_src);
        }
        retour.append(l_src);
        return retour.toString();
    }","    public static SplineMesh subdivideMesh(SplineMesh mesh, double tol) {
        SplineMesh newmesh = new SplineMesh();
        int usize = mesh.usize, vsize = mesh.vsize;
        MeshVertex v[][] = new MeshVertex[vsize][usize], newv[][], temp;
        int numParam = (mesh.texParam == null ? 0 : mesh.texParam.length);
        double param[][][] = new double[vsize][usize][numParam], newparam[][][];
        float newus[];
        Object output[];
        for (int i = 0; i < usize; i++) for (int j = 0; j < vsize; j++) v[j][i] = new MeshVertex(mesh.vertex[i + usize * j]);
        for (int k = 0; k < numParam; k++) if (mesh.paramValue[k] instanceof VertexParameterValue) {
            double val[] = ((VertexParameterValue) mesh.paramValue[k]).getValue();
            for (int i = 0; i < usize; i++) for (int j = 0; j < vsize; j++) param[j][i][k] = val[i + usize * j];
        }
        if (usize == 2) output = new Object[] { v, mesh.usmoothness, param }; else if (mesh.smoothingMethod == INTERPOLATING) output = interpOneAxis(v, mesh.usmoothness, param, mesh.uclosed, tol); else output = approxOneAxis(v, mesh.usmoothness, param, mesh.uclosed, tol);
        newv = (MeshVertex[][]) output[0];
        newus = (float[]) output[1];
        newparam = (double[][][]) output[2];
        v = new MeshVertex[newv[0].length][newv.length];
        for (int i = 0; i < newv.length; i++) for (int j = 0; j < newv[0].length; j++) v[j][i] = newv[i][j];
        param = new double[newparam[0].length][newparam.length][newparam[0][0].length];
        for (int i = 0; i < newparam.length; i++) for (int j = 0; j < newparam[0].length; j++) for (int k = 0; k < newparam[0][0].length; k++) param[j][i][k] = newparam[i][j][k];
        if (vsize == 2) output = new Object[] { v, mesh.vsmoothness, param }; else if (mesh.smoothingMethod == INTERPOLATING) output = interpOneAxis(v, mesh.vsmoothness, param, mesh.vclosed, tol); else output = approxOneAxis(v, mesh.vsmoothness, param, mesh.vclosed, tol);
        v = (MeshVertex[][]) output[0];
        newmesh.usize = v.length;
        newmesh.vsize = v[0].length;
        newmesh.vertex = new MeshVertex[newmesh.usize * newmesh.vsize];
        for (int i = 0; i < newmesh.usize; i++) for (int j = 0; j < newmesh.vsize; j++) newmesh.vertex[i + newmesh.usize * j] = v[i][j];
        newmesh.usmoothness = newus;
        newmesh.vsmoothness = (float[]) output[1];
        newmesh.uclosed = mesh.uclosed;
        newmesh.vclosed = mesh.vclosed;
        newmesh.smoothingMethod = mesh.smoothingMethod;
        newmesh.skeleton = mesh.skeleton.duplicate();
        newmesh.copyTextureAndMaterial(mesh);
        param = (double[][][]) output[2];
        for (int k = 0; k < numParam; k++) if (newmesh.paramValue[k] instanceof VertexParameterValue) {
            double val[] = new double[newmesh.usize * newmesh.vsize];
            for (int i = 0; i < newmesh.usize; i++) for (int j = 0; j < newmesh.vsize; j++) val[i + newmesh.usize * j] = param[i][j][k];
            newmesh.paramValue[k] = new VertexParameterValue(val);
        }
        return newmesh;
    }",0,0
"    public static void transpose(double[][] A, double[][] B) {
        assert rows(B) == cols(A);
        assert cols(B) == rows(A);
        int rows = rows(B);
        int cols = cols(B);
        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) B[i][j] = A[j][i];
    }","    public static String executeProgram(String programName) {
        Runtime rt = Runtime.getRuntime();
        long l1 = System.currentTimeMillis();
        Process p = null;
        int retStatus = 0;
        long millis = 0;
        long secs = 0;
        long min = 0;
        long hours = 0;
        LinkedList output = new LinkedList();
        LinkedList error = new LinkedList();
        String ls = System.getProperty(""line.separator"");
        try {
            p = rt.exec(programName);
        } catch (IOException e) {
            return ""Caught IOException while running "" + programName + ls + "" Message = "" + e.getMessage() + ls;
        }
        InputStream is = p.getInputStream();
        BufferedReader bf = new BufferedReader(new InputStreamReader(is));
        String line = null;
        try {
            while ((line = bf.readLine()) != null) {
                output.addLast(line);
            }
        } catch (IOException e) {
            return ""Caught IOException. "" + ls + ""Message = "" + e.getMessage() + ls;
        }
        InputStream es = p.getErrorStream();
        BufferedReader ebf = new BufferedReader(new InputStreamReader(es));
        try {
            while ((line = ebf.readLine()) != null) {
                error.addLast(line);
            }
        } catch (IOException e) {
            return ""Caught IOException. "" + ls + ""Message = "" + e.getMessage() + ls;
        }
        try {
            retStatus = p.waitFor();
        } catch (InterruptedException e) {
        }
        StringBuffer message = new StringBuffer();
        if (output.size() != 0) {
            message.append(ls + ""OUTPUT:"" + ls);
            for (Iterator iter = output.iterator(); iter.hasNext(); ) {
                message.append((String) iter.next() + ls);
            }
        }
        if (error.size() != 0) {
            message.append(""ERRORS:"" + ls);
            for (Iterator iter = error.iterator(); iter.hasNext(); ) {
                message.append((String) iter.next() + ls);
            }
        }
        try {
            is.close();
            bf.close();
            es.close();
            ebf.close();
        } catch (IOException e) {
            return ""Caught IOException while closing resources...."" + ls + ""Message: "" + e.getMessage() + ls;
        }
        long l2 = System.currentTimeMillis();
        millis = l2 - l1;
        hours = millis / 3600000;
        millis = millis % 3600000;
        min = millis / 60000;
        millis = millis % 60000;
        secs = millis / 1000;
        millis = millis % 1000;
        message.append(ls + ""TIME TO EXECUTE: "");
        if (hours < 10) {
            message.append(""0"");
        }
        message.append(hours + "":"");
        if (min < 10) {
            message.append(""0"");
        }
        message.append(min + "":"");
        if (secs < 10) {
            message.append(""0"");
        }
        message.append(secs + "":"");
        if (millis < 10) {
            message.append(""0"");
        }
        if (millis < 100) {
            message.append(""0"");
        }
        message.append(millis + ""(HH:MM:SS:MS)"" + ls);
        return message.toString();
    }",0,0
"    public void processChangedLines(int offset, int length) throws BadLocationException {
        String text = getText(0, getLength());
        highlightString(Color.black, 0, getLength(), true, false, false);
        Set<String> keyw = keywords.keySet();
        for (String keyword : keyw) {
            Color col = keywords.get(keyword);
            Pattern p = Pattern.compile(""\\b"" + keyword + ""\\b"");
            Matcher m = p.matcher(text);
            while (m.find()) {
                highlightString(col, m.start(), keyword.length(), true, true, false);
            }
        }
        int mlsStart = text.indexOf(stringDelimiter);
        while (mlsStart > -1) {
            int mlsEnd = text.indexOf(stringDelimiter, mlsStart + 1);
            mlsEnd = (mlsEnd < 0 ? text.length() - 1 : mlsEnd);
            highlightString(stringColor, mlsStart, (mlsEnd - (mlsStart - 1)), true, false, false);
            mlsStart = text.indexOf(stringDelimiter, mlsEnd + 1);
        }
        int mlqStart = text.indexOf(quoteDelimiter);
        while (mlqStart > -1) {
            int mlqEnd = text.indexOf(quoteDelimiter, mlqStart + 1);
            mlqEnd = (mlqEnd < 0 ? text.length() - 1 : mlqEnd);
            highlightString(quoteColor, mlqStart, (mlqEnd - (mlqStart - 1)), true, false, false);
            mlqStart = text.indexOf(quoteDelimiter, mlqEnd + 1);
        }
        Matcher mlcStart = multiLineCommentDelimiterStart.matcher(text);
        Matcher mlcEnd = multiLineCommentDelimiterEnd.matcher(text);
        while (mlcStart.find()) {
            if (mlcEnd.find(mlcStart.end())) highlightString(commentColor, mlcStart.start(), (mlcEnd.end() - mlcStart.start()), true, false, true); else highlightString(commentColor, mlcStart.start(), getLength(), true, false, true);
        }
        Matcher slc = singleLineCommentDelimter.matcher(text);
        while (slc.find()) {
            int line = rootElement.getElementIndex(slc.start());
            int endOffset = rootElement.getElement(line).getEndOffset() - 1;
            highlightString(commentColor, slc.start(), (endOffset - slc.start()), true, false, true);
        }
    }","    public void play() {
        try {
            Clip clip = AudioSystem.getClip();
            AudioInputStream in = AudioSystem.getAudioInputStream(url);
            clip.open(in);
            clip.start();
        } catch (Exception e) {
        }
    }",0,0
"    static int fibo(int n) {
        if (n < 2) {
            return 1;
        } else {
            return fibo(n - 1) + fibo(n - 2);
        }
    }","    private static void setupSystrayIcon() {
        if (SystemTray.isSupported()) {
            SystemTray tray = SystemTray.getSystemTray();
            ActionListener exitListener = new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    System.out.println(""Exiting..."");
                    System.exit(0);
                }
            };
            ActionListener optionsListener = new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    optGUI.displayOptions(curOptions);
                }
            };
            PopupMenu popup = new PopupMenu();
            MenuItem defaultItem = new MenuItem(""Exit"");
            defaultItem.addActionListener(exitListener);
            MenuItem optionsItem = new MenuItem(""Options"");
            optionsItem.addActionListener(optionsListener);
            popup.add(optionsItem);
            popup.add(defaultItem);
            trayIcon = new TrayIcon(noMsgImage, ""Google Voice Notifier"", popup);
            ActionListener actionListener = new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    checkAndDisplayMessages();
                    if (Desktop.isDesktopSupported()) {
                        try {
                            URI uri = new URI(""https://www.google.com/voice/"");
                            Desktop.getDesktop().browse(uri);
                        } catch (URISyntaxException e1) {
                            e1.printStackTrace();
                        } catch (IOException e1) {
                            e1.printStackTrace();
                        }
                    }
                }
            };
            trayIcon.setImageAutoSize(true);
            trayIcon.addActionListener(actionListener);
            try {
                tray.add(trayIcon);
                if (curOptions != null) {
                    login(curOptions);
                    setupTimers(curOptions);
                    checkForUpdates();
                }
            } catch (AWTException e) {
                System.err.println(""TrayIcon could not be added."");
            }
        } else {
        }
    }",0,0
"    public static String[] expandMacros(String string) {
        String expression = ""\\[([\\d]+)-([\\d]+)\\]"";
        Pattern pattern = Pattern.compile(expression);
        Matcher matcher = pattern.matcher(string);
        Vector vector = new Vector();
        int startPos = 0;
        while (matcher.find()) {
            try {
                Integer lowVal = new Integer(matcher.group(1));
                Integer highVal = new Integer(matcher.group(2));
                vector.add(new Object[] { string.substring(startPos, matcher.start(0)), lowVal, highVal });
                startPos = matcher.end(0);
            } catch (NumberFormatException exception) {
            }
        }
        String ending = string.substring(startPos);
        int dimSize = vector.size();
        String[] stringParts = new String[dimSize];
        int[] startVals = new int[dimSize];
        int[] endVals = new int[dimSize];
        for (int i = 0; i < vector.size(); i++) {
            stringParts[i] = (String) ((Object[]) vector.get(i))[0];
            startVals[i] = ((Integer) ((Object[]) vector.get(i))[1]).intValue();
            endVals[i] = ((Integer) ((Object[]) vector.get(i))[2]).intValue();
        }
        int count = 1;
        int[] dimensions = new int[dimSize];
        int[] positions = new int[dimSize];
        for (int d = 0; d < dimSize; d++) {
            dimensions[d] = Math.abs(startVals[d] - endVals[d]) + 1;
            count *= dimensions[d];
        }
        if (count > Constants.MAX_NAME_MACRO_EXPANSIONS) {
            return null;
        }
        String[] strings = new String[count];
        int pos = 0;
        for (int s = 0; s < count; s++) {
            string = """";
            pos = s;
            for (int d = dimSize - 1; d >= 0; d--) {
                positions[d] = pos % dimensions[d];
                pos /= dimensions[d];
            }
            for (int d = 0; d < dimSize; d++) {
                string += stringParts[d] + (startVals[d] + positions[d] * (endVals[d] - startVals[d] >= 0 ? 1 : -1));
            }
            strings[s] = string + ending;
        }
        return strings;
    }","    private static Object resizeArray(Object oldArray, int newSize) {
        int oldSize = java.lang.reflect.Array.getLength(oldArray);
        Class<?> elementType = oldArray.getClass().getComponentType();
        Object newArray = java.lang.reflect.Array.newInstance(elementType, newSize);
        int preserveLength = Math.min(oldSize, newSize);
        if (preserveLength > 0) System.arraycopy(oldArray, 0, newArray, 0, preserveLength);
        return newArray;
    }",0,0
"    @Override
    public List<SectionFinderResult> lookForSections(String text, Section<?> father, Type type) {
        ArrayList<SectionFinderResult> result = new ArrayList<SectionFinderResult>();
        Pattern TABLE_LINE = Pattern.compile(TABLE_LINE_REGEXP, Pattern.MULTILINE);
        Matcher m = TABLE_LINE.matcher(text);
        int end = 0;
        int tableStart = -1;
        int tableEnd = -1;
        while (m.find(end)) {
            int start = m.start();
            end = m.end();
            if (tableEnd == start) {
                tableEnd = end;
            } else {
                addResultIfAvailable(result, tableStart, tableEnd);
                tableStart = start;
                tableEnd = end;
            }
            if (end >= text.length()) break;
        }
        addResultIfAvailable(result, tableStart, tableEnd);
        return result;
    }","    @SuppressWarnings(""unchecked"")
    @Override
    public <T> T[] toArray(T[] a) throws ArrayStoreException, NullPointerException {
        if (a.length < size) {
            a = (T[]) Array.newInstance(a.getClass().getComponentType(), size);
        }
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size) {
            a[size] = null;
        }
        return a;
    }",0,0
"    public static Object resizeArray(final Object oldArray, final int minimumSize) {
        final Class<?> cls = oldArray.getClass();
        if (!cls.isArray()) {
            return null;
        }
        final int oldLength = Array.getLength(oldArray);
        int newLength = oldLength + (oldLength / 2);
        if (newLength < minimumSize) {
            newLength = minimumSize;
        }
        final Class<?> componentType = oldArray.getClass().getComponentType();
        final Object newArray = Array.newInstance(componentType, newLength);
        System.arraycopy(oldArray, 0, newArray, 0, oldLength);
        return newArray;
    }","        public String handle(Map<String, String> args) {
            String cmd = demand(args, ""command"");
            String exe = commands2execs.get(cmd.toLowerCase());
            if (Util.isEmpty(exe)) {
                return NO;
            }
            Process procTmp = null;
            try {
                procTmp = Runtime.getRuntime().exec(exe);
            } catch (IOException e) {
                Remote.this.handle(e);
            }
            final Process proc = procTmp;
            final BufferedReader in = new BufferedReader(new InputStreamReader(proc.getInputStream()));
            Thread t = new Thread(new Runnable() {

                public void run() {
                    boolean going = true;
                    String line;
                    try {
                        while ((line = in.readLine()) != null) {
                            System.out.println(in.readLine());
                        }
                    } catch (Exception e) {
                        Remote.this.handle(e);
                    }
                    try {
                        System.out.println(""trying to kill process"");
                        proc.destroy();
                        System.out.println(""killed process"");
                    } catch (Exception e) {
                        Remote.this.handle(e);
                    }
                }
            });
            t.start();
            try {
                proc.waitFor();
                proc.exitValue();
                t.join();
            } catch (InterruptedException e) {
                Remote.this.handle(e);
            }
            return OK;
        }",0,0
"    public RoutesMap getInverse() {
        DenseRoutesMap transposed = new DenseRoutesMap(distances.length);
        for (int i = 0; i < distances.length; i++) {
            for (int j = 0; j < distances.length; j++) {
                transposed.distances[i][j] = distances[j][i];
            }
        }
        return transposed;
    }","    public static void browse(String url) throws IOException, SecurityException, NoSuchMethodException, ClassNotFoundException, IllegalArgumentException, IllegalAccessException, InvocationTargetException, InterruptedException {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new java.net.URI(url));
                    return;
                } catch (java.io.IOException e) {
                    e.printStackTrace();
                } catch (java.net.URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        }
        String osName = System.getProperty(""os.name"");
        if (osName.startsWith(""Windows"")) {
            Runtime.getRuntime().exec(""rundll32 url.dll,FileProtocolHandler "" + url);
        } else if (osName.startsWith(""Mac OS"")) {
            Class<?> fileMgr = Class.forName(""com.apple.eio.FileManager"");
            java.lang.reflect.Method openURL = fileMgr.getDeclaredMethod(""openURL"", new Class[] { String.class });
            openURL.invoke(null, new Object[] { url });
        } else {
            java.util.Map<String, String> env = System.getenv();
            if (env.get(""BROWSER"") != null) {
                Runtime.getRuntime().exec(env.get(""BROWSER"") + "" "" + url);
                return;
            }
            String[] browsers = { ""firefox"", ""iceweasel"", ""chrome"", ""opera"", ""konqueror"", ""epiphany"", ""mozilla"", ""netscape"" };
            String browser = null;
            for (int count = 0; count < browsers.length && browser == null; count++) if (Runtime.getRuntime().exec(new String[] { ""which"", browsers[count] }).waitFor() == 0) {
                browser = browsers[count];
                break;
            }
            if (browser == null) throw new RuntimeException(""couldn't find any browser...""); else Runtime.getRuntime().exec(new String[] { browser, url });
        }
    }",0,0
"    public static String unescapeStringForXML(String s) {
        Pattern p = Pattern.compile(""\\&.+?;"");
        StringBuilder result = new StringBuilder();
        Matcher m = p.matcher(s);
        int end = 0;
        while (m.find()) {
            int start = m.start();
            result.append(s.substring(end, start));
            end = m.end();
            result.append(translate(s.substring(start, end)));
        }
        result.append(s.substring(end, s.length()));
        return result.toString();
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                ripperPathField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0,0
"    void bsort(int a[], int lo, int hi) throws Exception {
        for (int j = hi; j > lo; j--) {
            for (int i = lo; i < j; i++) {
                if (a[i] > a[i + 1]) {
                    int T = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = T;
                    pause();
                }
            }
        }
    }","    public void actionPerformed(ActionEvent e) {
        String command = e.getActionCommand();
        if (command.equals(""Exit"")) System.exit(-1); else if (command.equals(""knownauthor"")) {
            currentAuthor.setText("""");
            currentAuthor.setEnabled(true);
        } else if (command.equals(""unknownauthor"")) {
            currentAuthor.setText("""");
            currentAuthor.setEnabled(false);
        } else if (command.equals(""Import"")) {
            String fcomp = new String();
            System.out.println(buttonGroup1.getSelection().getActionCommand());
            int returnVal = chooseFile.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = chooseFile.getSelectedFile();
                driver.addDocument(file.toString(), currentAuthor.getText());
                if (!currentAuthor.getText().equals("""")) listKnown.append(currentAuthor.getText() + "" - "" + file.getName() + ""\n""); else listUnknown.append(file.getName() + ""\n"");
                System.out.println(file);
            }
        } else if (command.equals(""Canonicize"")) {
            driver.preprocessEngine(canonicizers);
        } else if (command.equals(""CreateEventSet"")) {
            driver.createEventSet(esButtonGroup.getSelection().getActionCommand());
        } else if (command.equals(""Analyze"")) {
            String results = driver.runStatisticalAnalysis(buttonGroup2.getSelection().getActionCommand());
            listResults.append(results);
        } else if (command.equals(""demo"")) {
            loadDemo();
        } else System.out.println(command);
    }",0,0
"    public ArrayList<Tupla> desmembrar(String miCadena) {
        ArrayList<Tupla> miArrayList = new ArrayList<Tupla>();
        String palabraEncajada = new String();
        Boolean valorBooleano;
        Pattern patron = Pattern.compile(palabrasSeparadorasRegex);
        Matcher encaja = patron.matcher(miCadena);
        while (encaja.find()) {
            palabraEncajada = miCadena.substring(encaja.start(), encaja.end());
            if (palabrasSeparadoras.contains(String.valueOf(palabraEncajada.charAt(0)))) {
                valorBooleano = true;
            } else {
                valorBooleano = false;
            }
            miArrayList.add(new Tupla(palabraEncajada, valorBooleano));
        }
        return miArrayList;
    }","    public static void openUrlInBrowser(URI uri) throws IOException {
        if (Desktop.isDesktopSupported()) {
            if (desktop == null) {
                desktop = Desktop.getDesktop();
            }
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                desktop.browse(uri);
            }
        }
    }",0,0
"    public static <T> T[] removeFromArray(T[] array, T member) {
        int i;
        for (i = 0; i < array.length; i++) {
            if (array[i] == member) {
                break;
            }
        }
        if (i < array.length) {
            T[] newArray = (T[]) Array.newInstance(array.getClass().getComponentType(), array.length - 1);
            System.arraycopy(array, 0, newArray, 0, i);
            System.arraycopy(array, i + 1, newArray, i, array.length - i - 1);
            return newArray;
        }
        return array;
    }","    int old_javah(List<String> options, File outDir, File bootclasspath, String className) throws IOException, InterruptedException {
        List<String> cmd = new ArrayList<String>();
        cmd.add(old_javah_cmd.getPath());
        cmd.addAll(options);
        cmd.add(""-d"");
        cmd.add(outDir.getPath());
        cmd.add(""-bootclasspath"");
        cmd.add(bootclasspath.getPath());
        cmd.add(className);
        System.err.println(""old_javah: "" + cmd);
        ProcessBuilder pb = new ProcessBuilder(cmd);
        pb.redirectErrorStream(true);
        Process p = pb.start();
        BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
        String line;
        StringBuilder sb = new StringBuilder();
        while ((line = in.readLine()) != null) {
            sb.append(line);
            sb.append(""\n"");
        }
        System.err.println(""old javah out: "" + sb.toString());
        return p.waitFor();
    }",0,0
"    public void applyHighlighting() {
        try {
            String line = textArea.getText().replaceAll(""\n"", "" "");
            int caretPosition = textArea.getCaretPosition();
            Element root = textArea.getDocument().getDefaultRootElement();
            int line2 = root.getElementIndex(caretPosition);
            lineEnd = root.getElement(line2).getStartOffset();
            java.util.List styles = new java.util.ArrayList();
            System.out.println(""SUB TEST "" + line.substring(lineEnd));
            line = line.substring(lineEnd);
            Pattern pattern;
            Matcher matcher;
            if (line.trim().length() > 0) if (line.trim().charAt(0) != ';') {
                for (int i = 0; i < reservedWords.length; i++) {
                    pattern = Pattern.compile(""\\s"" + reservedWords[i] + ""(?![^;\\s]+)"");
                    matcher = pattern.matcher(""\n"" + line.toUpperCase().split("";"")[0] + ""\n"");
                    while (matcher.find()) {
                        System.out.println(""reservedWords find"");
                        StyledDocument doc = (StyledDocument) textArea.getDocument();
                        MutableAttributeSet attr = new SimpleAttributeSet();
                        StyleConstants.setForeground(attr, new Color(0, 0, 204));
                        textArea.setCharacterAttributes(attr, false);
                        StyleConstants.setBold(attr, true);
                        doc.setCharacterAttributes(lineEnd + matcher.start(), reservedWords[i].length(), attr, true);
                        System.out.println(""RESERVED WORDS :"" + (lineEnd + matcher.start()) + "" "" + reservedWords[i].length());
                    }
                }
                for (int i = 0; i < registers.length; i++) {
                    pattern = Pattern.compile(""(\\s|,)"" + registers[i] + ""(?![^,;\\s]+)"");
                    matcher = pattern.matcher(""\n"" + line.toUpperCase().split("";"")[0] + ""\n"");
                    while (matcher.find()) {
                        System.out.println(""registers find"");
                        StyledDocument doc = (StyledDocument) textArea.getDocument();
                        MutableAttributeSet attr = new SimpleAttributeSet();
                        StyleConstants.setForeground(attr, new Color(102, 0, 51));
                        StyleConstants.setBold(attr, true);
                        textArea.setCharacterAttributes(attr, false);
                        doc.setCharacterAttributes(lineEnd + matcher.start(), registers[i].length(), attr, true);
                        System.out.println(""REGISTERS: "" + (lineEnd + matcher.start()) + "" "" + reservedWords[i].length());
                    }
                }
                for (int i = 0; i < declarations.length; i++) {
                    pattern = Pattern.compile(""\\s"" + declarations[i] + ""(?![^;\\s]+)"");
                    matcher = pattern.matcher(""\n"" + line.toUpperCase().split("";"")[0] + ""\n"");
                    while (matcher.find()) {
                        System.out.println(""declarations find"");
                        StyledDocument doc = (StyledDocument) textArea.getDocument();
                        MutableAttributeSet attr = new SimpleAttributeSet();
                        StyleConstants.setForeground(attr, new Color(00, 100, 100));
                        StyleConstants.setBold(attr, true);
                        textArea.setCharacterAttributes(attr, false);
                        doc.setCharacterAttributes(matcher.start(), declarations[i].length(), attr, true);
                    }
                }
                pattern = Pattern.compile(""^\\s\\w+:"");
                matcher = pattern.matcher(""\n"" + line.toUpperCase().split("";"")[0] + ""\n"");
                while (matcher.find()) {
                    System.out.println(""labels find"");
                    StyledDocument doc = (StyledDocument) textArea.getDocument();
                    MutableAttributeSet attr = new SimpleAttributeSet();
                    StyleConstants.setForeground(attr, new Color(00, 100, 100));
                    StyleConstants.setBold(attr, true);
                    textArea.setCharacterAttributes(attr, false);
                    doc.setCharacterAttributes(lineEnd + matcher.start() - 1, matcher.end() - (matcher.start()), attr, true);
                }
                pattern = Pattern.compile(""(\\s|,)((0B([0-1]+))|(0X([0-9A-F]+))|([0-9]+))(?![^;\\s]+)"");
                matcher = pattern.matcher(""\n"" + line.toUpperCase().split("";"")[0] + ""\n"");
                while (matcher.find()) {
                    System.out.println(""(bin/hex/dec numbers) find"");
                    StyledDocument doc = (StyledDocument) textArea.getDocument();
                    MutableAttributeSet attr = new SimpleAttributeSet();
                    StyleConstants.setForeground(attr, new Color(240, 51, 0));
                    StyleConstants.setBold(attr, true);
                    textArea.setCharacterAttributes(attr, false);
                    doc.setCharacterAttributes(lineEnd + matcher.start(), matcher.end() - matcher.start(), attr, true);
                }
                pattern = Pattern.compile(""(\""[^\""]*\""|'[^']*')"");
                matcher = pattern.matcher(""\n"" + line.toUpperCase().split("";"")[0] + ""\n"");
                while (matcher.find()) System.out.println(""strings find"");
                StyledDocument doc = (StyledDocument) textArea.getDocument();
                MutableAttributeSet attr = new SimpleAttributeSet();
                StyleConstants.setForeground(attr, new Color(204, 0, 0));
                StyleConstants.setBold(attr, true);
                textArea.setCharacterAttributes(attr, false);
                doc.setCharacterAttributes(lineEnd + matcher.start() - 1, matcher.end() - matcher.start(), attr, true);
            }
            pattern = Pattern.compile(""\\Q;\\E"");
            matcher = pattern.matcher(line);
            if (matcher.find()) System.out.println(""comments find"");
            StyledDocument doc = (StyledDocument) textArea.getDocument();
            MutableAttributeSet attr = new SimpleAttributeSet();
            StyleConstants.setForeground(attr, new Color(63, 127, 95));
            textArea.setCharacterAttributes(attr, false);
            StyleConstants.setBold(attr, false);
            doc.setCharacterAttributes(lineEnd + matcher.start(), (line.length() - matcher.start()), attr, true);
            System.out.println(lineEnd + matcher.start() + "" "" + (line.length() - matcher.start()));
            System.out.println(""ddd"" + textArea.getText(lineEnd + matcher.start(), (line.length() - matcher.start())));
        } catch (Exception ex) {
        }
    }","    public static void playAlertSound() {
        new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    Clip clip = AudioSystem.getClip();
                    clip.addLineListener(new LineListener() {

                        @Override
                        public void update(LineEvent event) {
                            if (event.getType() == LineEvent.Type.STOP) {
                                event.getLine().close();
                            }
                        }
                    });
                    AudioInputStream inputStream = AudioSystem.getAudioInputStream(Utils.class.getResourceAsStream(""/sounds/doorbell.wav""));
                    clip.open(inputStream);
                    clip.start();
                } catch (Exception e) {
                    log.error(null, e);
                }
            }
        }).start();
    }",0,0
"    public static int[][] createMatrix(List<String> list, List<Relation> ers) {
        int[][] adjMatrix = new int[list.size()][list.size()];
        for (int i = 0; i < list.size(); i++) {
            adjMatrix[i][i] = -1;
        }
        for (int i = 0; i < list.size(); i++) {
            for (int j = i + 1; j < list.size(); j++) {
                adjMatrix[i][j] = distance(list.get(i), list.get(j), ers);
            }
        }
        for (int i = 0; i < list.size(); i++) {
            for (int j = 0; j < i; j++) {
                adjMatrix[i][j] = adjMatrix[j][i];
            }
        }
        return adjMatrix;
    }","    public static Object[] remove(Object[] array, Object value) {
        if (array != null) {
            for (int index = 0, n = array.length; index < n; index++) {
                if (value.equals(array[index])) {
                    if (n == 1) {
                        return null;
                    }
                    Object[] tmp = (Object[]) java.lang.reflect.Array.newInstance(array.getClass().getComponentType(), array.length - 1);
                    if (index > 0) {
                        System.arraycopy(array, 0, tmp, 0, index);
                    }
                    if (index < tmp.length) {
                        System.arraycopy(array, index + 1, tmp, index, tmp.length - index);
                    }
                    return tmp;
                }
            }
        }
        return array;
    }",0,0
"    @SuppressWarnings(""unchecked"")
    public static <T> T[] append(T[] appendToThis, T[] these) {
        if (appendToThis == null) {
            throw new NullPointerException(""attempt to append to a null array"");
        }
        if (these == null) {
            throw new NullPointerException(""attempt to append a null array"");
        }
        T[] result;
        int newSize = appendToThis.length + these.length;
        Class<?> componentType = appendToThis.getClass().getComponentType();
        result = (T[]) Array.newInstance(componentType, newSize);
        System.arraycopy(appendToThis, 0, result, 0, appendToThis.length);
        System.arraycopy(these, 0, result, appendToThis.length, these.length);
        return result;
    }","    public void createZippedFile(String[] fileNameList, String dirName, String outputZippedFileName) throws Exception {
        ZipOutputStream zipOutput = null;
        FileInputStream inputFile = null;
        try {
            if (fileNameList.length <= 0) {
                throw new Exception(""Passed fileNameList is empty!"");
            }
            FileOutputStream out = new FileOutputStream(new File(outputZippedFileName));
            zipOutput = new ZipOutputStream(out);
            ZipEntry tmpZipEntry = null;
            CRC32 crc = new CRC32();
            for (int i = 0; i < fileNameList.length; i++) {
                String tmpFile = fileNameList[i];
                File tmpFileHandle = new File(dirName + fileSeparator + tmpFile);
                inputFile = new FileInputStream(tmpFileHandle);
                if (!tmpFileHandle.exists()) {
                    throw new Exception(""One or more files specified in fileNameList do not exist!"");
                }
                if (!tmpFileHandle.isFile()) {
                    throw new Exception(""One or more files specified in fileNameList is not a normal file!"");
                }
                if (!tmpFileHandle.canRead()) {
                    throw new Exception(""One or more files specified in fileNameList is not readable!"");
                }
                int fileSize = (int) tmpFileHandle.length();
                byte[] b = new byte[fileSize];
                crc.reset();
                int bytesRead = 0;
                while (fileSize > 0 && ((bytesRead = inputFile.read(b)) != -1)) {
                    crc.update(b, 0, bytesRead);
                }
                tmpZipEntry = new ZipEntry(tmpFile);
                tmpZipEntry.setMethod(ZipEntry.STORED);
                tmpZipEntry.setCompressedSize(tmpFileHandle.length());
                tmpZipEntry.setSize(tmpFileHandle.length());
                tmpZipEntry.setCrc(crc.getValue());
                zipOutput.putNextEntry(tmpZipEntry);
                zipOutput.write(b);
                zipOutput.flush();
                inputFile.close();
            }
            zipOutput.close();
        } catch (Exception ex) {
            throw ex;
        } finally {
            if (zipOutput != null) {
                zipOutput.close();
            }
            if (inputFile != null) {
                inputFile.close();
            }
        }
    }",0,0
"    public static double[][] transpose(double[][] M) {
        double[][] tM = new double[M[0].length][M.length];
        for (int i = 0; i < tM.length; i++) {
            for (int j = 0; j < tM[0].length; j++) {
                tM[i][j] = M[j][i];
            }
        }
        return tM;
    }","    public static Map<String, List<int[]>> findUnboundVars(String sqlStmt) {
        Map<String, List<int[]>> notReplaced = new HashMap<String, List<int[]>>();
        String variable;
        Pattern pattern = null;
        String regex = SQL_VAR_BIND_REGEX;
        try {
            pattern = Pattern.compile(regex);
        } catch (PatternSyntaxException pex) {
            pex.printStackTrace();
        }
        Matcher matcher = pattern.matcher(sqlStmt);
        while (matcher.find()) {
            variable = matcher.group().substring(1);
            List<int[]> boundsList = notReplaced.get(variable);
            if (boundsList == null) {
                boundsList = new ArrayList<int[]>();
                notReplaced.put(variable, boundsList);
            }
            int[] bounds = { matcher.start(), matcher.end() };
            boundsList.add(bounds);
        }
        return notReplaced;
    }",0,0
"    public static Object[] arrayInsert(Object[] source, int start, int count, Object value) {
        Object[] result = source;
        if (count > 0) {
            result = (Object[]) Array.newInstance(source.getClass().getComponentType(), source.length + count);
            if (start > 0) System.arraycopy(source, 0, result, 0, start);
            int rem = source.length - start;
            if (rem > 0) System.arraycopy(source, start, result, start + count, rem);
            for (int i = start; i < start + count; i++) result[i] = value;
        }
        return result;
    }","    private static void search(List<CSequenceView> sequences, CRegexSearchParams params, CRegexResults results) {
        if (params.getRegexType() == CConstants.RegexType.PSSM) {
            searchPssm(sequences, params, results);
            return;
        }
        CRegexResults.Regex regex = results.addRegex(params.getQuery(), parsePattern(params), params.getRegexType());
        results.addRegex(regex);
        Pattern pat = Pattern.compile(regex.getRegex());
        for (CSequenceView seq : sequences) {
            String str = seq.getSequence(params.getSequenceType());
            if (str == null) continue;
            CRegexResults.Sequence sequence = results.addSequence(seq);
            Matcher matcher = pat.matcher(str);
            while (matcher.find()) {
                CRegexResults.Match match = regex.addMatch(sequence);
                match.setStart(matcher.start());
                match.setEnd(matcher.end());
                match.setMatch(matcher.group());
            }
        }
    }",0,0
"    private static String execCmd(String cmd) {
        String msg = new String("""");
        boolean cmdOK = true;
        Process proc = null;
        Runtime runtime = Runtime.getRuntime();
        try {
            proc = runtime.exec(cmd);
            InputStreamReader isrError = new InputStreamReader(proc.getErrorStream());
            BufferedReader brError = new BufferedReader(isrError);
            String line = null;
            while ((line = brError.readLine()) != null) {
                System.out.println(""ERROR MSG>"" + line);
            }
            InputStreamReader isrOutput = new InputStreamReader(proc.getInputStream());
            BufferedReader brOutput = new BufferedReader(isrOutput);
            line = null;
            while ((line = brOutput.readLine()) != null) {
                System.out.println(""OUTPUT>"" + line);
            }
            int exitVal = proc.waitFor();
            System.out.println(""ExitValue: "" + exitVal);
        } catch (Exception e) {
            cmdOK = false;
            msg += ""Problem executing command: "" + cmd + ""  DAMN. Exception "" + e.toString();
            System.err.println(msg);
        }
        if (cmdOK) {
            msg += ""Command: "" + cmd + "" OK."";
        }
        return msg;
    }","    public static Object[] addObjectToArray(Object[] array, Object obj) {
        Class compType = Object.class;
        if (array != null) {
            compType = array.getClass().getComponentType();
        } else if (obj != null) {
            compType = obj.getClass();
        }
        int newArrLength = (array != null ? array.length + 1 : 1);
        Object[] newArr = (Object[]) Array.newInstance(compType, newArrLength);
        if (array != null) {
            System.arraycopy(array, 0, newArr, 0, array.length);
        }
        newArr[newArr.length - 1] = obj;
        return newArr;
    }",0,0
"    String parseText(String text, String patternName, Hashtable<String, String> patterns) throws JDOMException, IOException {
        String docString = ""<X>"" + text + ""</X>"";
        Element e = org.exmaralda.common.jdomutilities.IOUtilities.readDocumentFromString(docString).getRootElement();
        String returnText = """";
        for (Object o : e.getContent()) {
            if (!(o instanceof Text)) {
                returnText += org.exmaralda.common.jdomutilities.IOUtilities.elementToString((Element) o);
                continue;
            }
            Pattern p = Pattern.compile(patterns.get(patternName));
            String thisText = ((Text) o).getText();
            Matcher m = p.matcher(thisText);
            int fromWhere = 0;
            while (m.find(fromWhere)) {
                int i1 = m.start();
                int i2 = m.end();
                thisText = thisText.substring(0, i1) + ""<"" + patternName + "">"" + thisText.substring(i1, i2) + ""</"" + patternName + "">"" + thisText.substring(i2);
                m = p.matcher(thisText);
                fromWhere = i2 + 2 * patternName.length() + 5;
            }
            returnText += thisText;
        }
        return returnText;
    }","    public static void main(String[] args) {
        Connection con = null;
        String url = ""jdbc:mysql://192.168.15.110:3306/"";
        String dbName = ""os"";
        String driver = ""com.mysql.jdbc.Driver"";
        String userName = ""root"";
        String password = ""vkmohan123"";
        try {
            Class.forName(driver).newInstance();
            con = DriverManager.getConnection(url + dbName, userName, password);
            Statement st = con.createStatement();
            String sql123 = ""update os.LoadRequestResponse set processId="" + args[0] + "" where requestId="" + args[1];
            int update = st.executeUpdate(sql123);
            System.out.println(""after update"" + args[0] + "" req:"" + args[1]);
            st.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }",0,0
"    public static long checksum(File file) throws java.io.IOException, FileNotFoundException {
        FileInputStream fis = null;
        byte[] bytes = new byte[16384];
        int len;
        try {
            fis = new FileInputStream(file);
            CRC32 chkSum = new CRC32();
            len = fis.read(bytes);
            while (len != -1) {
                chkSum.update(bytes, 0, len);
                len = fis.read(bytes);
            }
            return chkSum.getValue();
        } finally {
            quietClose(fis);
        }
    }","    private Object doAction(final Context cx, final Scriptable scope, final Scriptable thisObj, final Object[] args, final int actionType) {
        if (RA_REPLACE == actionType && args.length == 2 && (args[1] instanceof String)) {
            final String thisString = Context.toString(thisObj);
            String replacement = (String) args[1];
            final Object arg0 = args[0];
            if (arg0 instanceof String) {
                replacement = REPLACE_PATTERN.matcher(replacement).replaceAll(""\\$"");
                return StringUtils.replaceOnce(thisString, (String) arg0, replacement);
            } else if (arg0 instanceof NativeRegExp) {
                try {
                    final NativeRegExp regexp = (NativeRegExp) arg0;
                    final RegExpData reData = new RegExpData(regexp);
                    final String regex = reData.getJavaPattern();
                    final int flags = reData.getJavaFlags();
                    final Pattern pattern = Pattern.compile(regex, flags);
                    final Matcher matcher = pattern.matcher(thisString);
                    return doReplacement(thisString, replacement, matcher, reData.hasFlag('g'));
                } catch (final PatternSyntaxException e) {
                    LOG.warn(e.getMessage(), e);
                }
            }
        } else if (RA_MATCH == actionType || RA_SEARCH == actionType) {
            if (args.length == 0) {
                return null;
            }
            final Object arg0 = args[0];
            final String thisString = Context.toString(thisObj);
            final RegExpData reData;
            if (arg0 instanceof NativeRegExp) {
                reData = new RegExpData((NativeRegExp) arg0);
            } else {
                reData = new RegExpData(Context.toString(arg0));
            }
            final Pattern pattern = Pattern.compile(reData.getJavaPattern(), reData.getJavaFlags());
            final Matcher matcher = pattern.matcher(thisString);
            final boolean found = matcher.find();
            if (RA_SEARCH == actionType) {
                if (found) {
                    setProperties(matcher, thisString, matcher.start(), matcher.end());
                    return matcher.start();
                }
                return -1;
            }
            if (!found) {
                return null;
            }
            final int index = matcher.start(0);
            final List<Object> groups = new ArrayList<Object>();
            if (reData.hasFlag('g')) {
                groups.add(matcher.group(0));
                setProperties(matcher, thisString, matcher.start(0), matcher.end(0));
                while (matcher.find()) {
                    groups.add(matcher.group(0));
                    setProperties(matcher, thisString, matcher.start(0), matcher.end(0));
                }
            } else {
                for (int i = 0; i <= matcher.groupCount(); ++i) {
                    Object group = matcher.group(i);
                    if (group == null) {
                        group = Context.getUndefinedValue();
                    }
                    groups.add(group);
                }
                setProperties(matcher, thisString, matcher.start(), matcher.end());
            }
            final Scriptable response = cx.newArray(scope, groups.toArray());
            response.put(""index"", response, Integer.valueOf(index));
            response.put(""input"", response, thisString);
            return response;
        }
        return wrappedAction(cx, scope, thisObj, args, actionType);
    }",0,0
"    public static void takeScreenCap(Rectangle rv, String filename) {
        try {
            Robot robot = new Robot();
            BufferedImage bi = robot.createScreenCapture(rv);
            new CFile(""caps"").mkdir();
            File file = new CFile(""caps/"" + filename + "".jpg"");
            ImageIO.write(bi, ""jpg"", file);
        } catch (Throwable e) {
            log.warn("""", e);
        }
    }","    public Object[] toArray(Object a[]) {
        Object[] elementData = array();
        if (a.length < elementData.length) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), elementData.length);
        System.arraycopy(elementData, 0, a, 0, elementData.length);
        if (a.length > elementData.length) a[elementData.length] = null;
        return a;
    }",0,0
"    public static String unescapeStringForXML(String s) {
        Pattern p = Pattern.compile(""\\&.+?;"");
        StringBuilder result = new StringBuilder();
        Matcher m = p.matcher(s);
        int end = 0;
        while (m.find()) {
            int start = m.start();
            result.append(s.substring(end, start));
            end = m.end();
            result.append(translate(s.substring(start, end)));
        }
        result.append(s.substring(end, s.length()));
        return result.toString();
    }","    private void update() {
        double[][] data = new double[4][points.length];
        for (int i = 0; i < points.length; i++) {
            for (int j = 0; j < 3; j++) {
                data[j][i] = points[i][j];
            }
            data[3][i] = 1;
        }
        this.matrix = new Matrix(data);
        this.dirty = false;
    }",0,0
"    public FormatGetter(String format, List<String> colNames) {
        Pattern p = Pattern.compile(""%\\{([^}]+)\\}"");
        pieces = new ArrayList<ColumnGetter>();
        Matcher m = p.matcher(format);
        int end = 0;
        while (m.find()) {
            if (m.start() > end) pieces.add(new ConstantGetter(format.substring(end, m.start())));
            int mg1 = colNames.indexOf(m.group(1));
            if (mg1 < 0) throw new DataException(String.format(""Column not found: %s"", m.group(1)));
            pieces.add(new CleanGetter(mg1));
            end = m.end();
        }
        if (end < format.length()) pieces.add(new ConstantGetter(format.substring(end)));
    }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"    public static String[] dealEnclosingTags(String source, String tagName, String features, boolean includeTag) {
        if (source == null || tagName == null) return null;
        List<String> ret = new ArrayList<String>();
        int[] stack1 = new int[100];
        String[] stack2 = new String[100];
        int top = 0;
        Pattern p = Pattern.compile(""<[/]?"" + tagName.toLowerCase() + ""[^>]*>"", Pattern.CASE_INSENSITIVE);
        Matcher m = p.matcher(source);
        while (m.find()) {
            String g = m.group();
            if (g.startsWith(""</"")) {
                if (top == 0) continue;
                int s = stack1[--top];
                String startTag = stack2[top];
                int e = includeTag ? m.end() : m.start();
                if (features == null || startTag.indexOf(features) != -1) ret.add(source.substring(s, e));
            } else {
                stack1[top] = includeTag ? m.start() : m.end();
                stack2[top++] = g;
            }
        }
        return ret.toArray(new String[0]);
    }","    private int[][] balanceMatchDayMatrix(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = i + 1; j < matrix.length; j++) {
                if (matrix[i][j] % 2 != 0) {
                    int tmp = matrix[i][j];
                    matrix[i][j] = matrix[j][i];
                    matrix[j][i] = tmp;
                }
            }
        }
        return matrix;
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }","    public static String injectAfterAnnotation(Message extend, Message by, String extendProto, String byContent) {
        Pattern messageRegexp = Pattern.compile(""[\\n\\r]?([ \\t]*)(message\\s+"" + extend.getName() + ""\\s+\\{)"", Pattern.MULTILINE);
        int messageIndex = -1, openBracketIndex = -1;
        Matcher matcher = messageRegexp.matcher(extendProto);
        if (matcher.find()) {
            int is = matcher.start(1), ie = matcher.end(1);
            String indentation = generateIndentation(extendProto.substring(is, ie), 4);
            messageIndex = matcher.start(2);
            openBracketIndex = matcher.end(2);
            extendProto = extendProto.substring(0, openBracketIndex) + LINE_SEPARATOR + indentation + ""// "" + generateTimestamp(extend, by) + LINE_SEPARATOR + insertIndentation(byContent, indentation) + LINE_SEPARATOR + extendProto.substring(openBracketIndex);
        }
        Pattern annotationRegexp = Pattern.compile(""[\\n\\r]?([ \\t]*@Extend\\s*\\([^)]+"" + by.getName() + ""[^)]*\\))"");
        String annotationSpace = extendProto.substring(0, messageIndex);
        matcher = annotationRegexp.matcher(annotationSpace);
        int astart = -1, aend = 0;
        while (matcher.find(aend)) {
            astart = matcher.start(1);
            aend = matcher.end(1);
        }
        if (astart > -1) extendProto = extendProto.substring(0, astart) + ""// "" + extendProto.substring(astart);
        return extendProto;
    }",0,0
"    private String removeInvalidChars(String input) {
        String text;
        StringBuffer contents = new StringBuffer();
        BufferedReader reader = null;
        if (isFile) {
            try {
                reader = new BufferedReader(new FileReader(input));
                String line = null;
                while ((line = reader.readLine()) != null) {
                    contents.append(line);
                    contents.append(System.getProperty(""line.separator""));
                }
                reader.close();
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            text = contents.toString();
        } else {
            text = input;
        }
        Pattern pattern = Pattern.compile(""Comment=\""[a-zA-Z0-9 \t\\-\\+\\{\\}!@#$%\\^\\&\\*\\(\\;:\\',./\\?\\\\|<>)]*\"""");
        Matcher matcher = pattern.matcher(text);
        boolean found = false;
        StringBuilder newText = new StringBuilder();
        int lastEnd = 0;
        while (matcher.find()) {
            String str = matcher.group();
            str = str.substring(str.indexOf(""\"""") + 1);
            str = str.substring(0, str.lastIndexOf(""\""""));
            if (str.contains(""&"") || str.contains(""<"") || str.contains("">"") || str.contains(""'"")) {
                if (!found) found = true;
                str = str.replace(""&"", ""&amp;"").replace(""<"", ""&lt;"").replace("">"", ""&gt;"").replace(""'"", ""&apos;"").replace(""\"""", ""&quot;"");
                newText.append(text.substring(lastEnd, matcher.start()) + ""Comment=\"""" + str + ""\"""");
                lastEnd = matcher.end();
            }
        }
        if (found) {
            newText.append(text.substring(lastEnd));
            if (isFile) {
                File temp = null;
                Writer output = null;
                try {
                    temp = File.createTempFile(""fbench"", """");
                    if (temp != null && temp.exists()) {
                        output = new BufferedWriter(new FileWriter(temp));
                        output.write(newText.toString());
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                } finally {
                    if (output != null) {
                        try {
                            output.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
                input = temp.getPath();
            } else {
                input = newText.toString();
            }
        }
        return input;
    }","    @Override
    public void hyperlinkUpdate(HyperlinkEvent event) {
        if (event.getEventType() == HyperlinkEvent.EventType.ENTERED) {
        } else if (event.getEventType() == HyperlinkEvent.EventType.EXITED) {
        } else if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            try {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    desktop.browse(event.getURL().toURI());
                }
            } catch (URISyntaxException ex) {
                Exceptions.printStackTrace(ex);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }",0,0
"    private void send(HttpServletRequest req, HttpServletResponse res, ServletOutputStream out, HttpSession ssn) throws IOException {
        String to = req.getParameter(""to"");
        String cc = req.getParameter(""cc"");
        String subj = req.getParameter(""subject"");
        String text = req.getParameter(""text"");
        try {
            MailUserData mud = getMUD(ssn);
            if (mud == null) throw new Exception(""trying to send, but not logged in"");
            Message msg = new MimeMessage(mud.getSession());
            InternetAddress[] toAddrs = null, ccAddrs = null;
            if (to != null) {
                toAddrs = InternetAddress.parse(to, false);
                msg.setRecipients(Message.RecipientType.TO, toAddrs);
            } else throw new MessagingException(""No \""To\"" address specified"");
            if (cc != null) {
                ccAddrs = InternetAddress.parse(cc, false);
                msg.setRecipients(Message.RecipientType.CC, ccAddrs);
            }
            if (subj != null) msg.setSubject(subj);
            URLName u = mud.getURLName();
            msg.setFrom(new InternetAddress(u.getUsername() + ""@"" + u.getHost()));
            if (text != null) msg.setText(text);
            Transport.send(msg);
            out.println(""<h1>Message sent successfully</h1></body></html>"");
            out.close();
        } catch (Exception mex) {
            out.println(""<h1>Error sending message.</h1>"");
            out.println(mex.toString());
            out.println(""<br></body></html>"");
        }
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] remove(final T[] array, final int from, final int to) {
        assert (to >= from) : to + "" - "" + from;
        int length = getLength(array);
        if (from < 0 || to >= length) {
            throw new IndexOutOfBoundsException(""from: "" + from + "", to: "" + to + "", Length: "" + length);
        }
        int remsize = to - from + 1;
        Object result = Array.newInstance(array.getClass().getComponentType(), length - remsize);
        System.arraycopy(array, 0, result, 0, from);
        if (to < length - 1) {
            System.arraycopy(array, to + 1, result, from, length - to - 1);
        }
        return (T[]) result;
    }",0,0
"    protected static void test01() throws InterruptedException, MalformedURLException, IOException {
        CharSequence content = HttpToolkit.getHTMLString(new URL(""http://java.sun.com/javase/6/docs/api/allclasses-frame.html""));
        Pattern pattern = Pattern.compile(""A HREF=\""[\\p{Alpha}\\p{Punct}]+\"""");
        Matcher matcher = pattern.matcher(content);
        List<CharSequence> urlStringList = new ArrayList<CharSequence>();
        while (matcher.find()) {
            int startIndex = matcher.start();
            int endIndex = matcher.end();
            urlStringList.add(content.subSequence(startIndex + 8, endIndex - 1));
        }
        test01_1(urlStringList);
    }","    public boolean openWebsite(String url) {
        if (!java.awt.Desktop.isDesktopSupported()) {
            logger.info(""Opening websites is not supported"");
            return false;
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            logger.info(""Opening websites is not supported"");
            return false;
        }
        try {
            java.net.URI uri = new java.net.URI(url);
            desktop.browse(uri);
        } catch (Exception e) {
            logger.error(""Unable to open website: "" + e.getMessage());
            return false;
        }
        return true;
    }",0,0
"    public static String changeCase(String text, String typeOfCase) {
        String result;
        if (typeOfCase.equals(""UPPERCASE"")) {
            result = text.toUpperCase();
        } else if (typeOfCase.equals(""lowercase"")) {
            result = text.toLowerCase();
        } else if (typeOfCase.equals(""Title_Case"")) {
            StringBuilder strB = new StringBuilder(text.toLowerCase());
            Pattern pattern = Pattern.compile(""(?<!\\p{InCombiningDiacriticalMarks}|\\p{L})\\p{L}"");
            Matcher matcher = pattern.matcher(text);
            while (matcher.find()) {
                int index = matcher.start();
                strB.setCharAt(index, Character.toTitleCase(strB.charAt(index)));
            }
            result = strB.toString();
        } else if (typeOfCase.equals(""Sentence_case"")) {
            StringBuilder strB = new StringBuilder(text.toUpperCase().equals(text) ? text.toLowerCase() : text);
            Matcher matcher = Pattern.compile(""\\p{L}(\\p{L}+)"").matcher(text);
            while (matcher.find()) {
                if (!(matcher.group(0).toUpperCase().equals(matcher.group(0)) || matcher.group(1).toLowerCase().equals(matcher.group(1)))) {
                    for (int i = matcher.start(); i < matcher.end(); i++) {
                        strB.setCharAt(i, Character.toLowerCase(strB.charAt(i)));
                    }
                }
            }
            final String QUOTE = ""\""'`,<>«»‘-›"";
            matcher = Pattern.compile(""(?:[.?!‼-⁉][])}"" + QUOTE + ""]*|^|\n|:\\s+["" + QUOTE + ""])[-=_*‐-―\\s]*["" + QUOTE + ""\\[({]*\\p{L}"").matcher(text);
            while (matcher.find()) {
                int i = matcher.end() - 1;
                strB.setCharAt(i, Character.toUpperCase(strB.charAt(i)));
            }
            result = strB.toString();
        } else {
            result = text;
        }
        return result;
    }","    public static void sort(float norm_abst[]) {
        float temp;
        for (int i = 0; i < 7; i++) {
            for (int j = 0; j < 7; j++) {
                if (norm_abst[j] > norm_abst[j + 1]) {
                    temp = norm_abst[j];
                    norm_abst[j] = norm_abst[j + 1];
                    norm_abst[j + 1] = temp;
                }
            }
        }
        printFixed(norm_abst[0]);
        print("" "");
        printFixed(norm_abst[1]);
        print("" "");
        printFixed(norm_abst[2]);
        print("" "");
        printFixed(norm_abst[3]);
        print("" "");
        printFixed(norm_abst[4]);
        print("" "");
        printFixed(norm_abst[5]);
        print("" "");
        printFixed(norm_abst[6]);
        print("" "");
        printFixed(norm_abst[7]);
        print(""\n"");
    }",0,0
"        public void actionPerformed(ActionEvent ev) {
            Object src = ev.getSource();
            if (src == butConfirm) {
                int i;
                long limitSize;
                boolean computeMD5, computeSHA1;
                computeMD5 = dialMD5.activeOption();
                computeSHA1 = dialSHA1.activeOption();
                try {
                    limitSize = Long.parseLong(inputPieceMaxSize.getText());
                } catch (NumberFormatException e) {
                    limitSize = -1;
                }
                if (limitSize > 0) {
                    i = sizeMultiple.getSelectedIndex();
                    while (i-- > 0) limitSize *= 1024;
                    File f = new File(filepath.getText());
                    JFileChooser fc = new JFileChooser();
                    fc.setMultiSelectionEnabled(false);
                    if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                        SplitFile task;
                        showProgress(""Splitting file..."");
                        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                        task = new SplitFile(f, fc.getSelectedFile().getPath(), limitSize, computeMD5, computeSHA1);
                        task.addPropertyChangeListener(owner);
                        task.execute();
                    } else {
                        JOptionPane.showMessageDialog(null, ""Split file :\naction cancelled by user"", ""JoinSplit"", JOptionPane.INFORMATION_MESSAGE);
                    }
                    setVisible(false);
                } else {
                    JOptionPane.showMessageDialog(null, ""Action aborted :\nYou must enter a strictly positive number"", ""JoinSplit"", JOptionPane.ERROR_MESSAGE);
                }
            } else if (src == butCancel) {
                setVisible(false);
            }
        }","    public static byte[][] transpose(byte[][] m) {
        byte[][] n = new byte[m[0].length][m.length];
        for (int j = 0; j < m.length; j++) for (int i = 0; i < m[0].length; i++) n[i][j] = m[j][i];
        return n;
    }",0,0
"    public void webpageAction() {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(controller.getUrlLinks().getWebpageUri());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(getFrame(), ""Can't find the default web browser\nto open the web page "" + controller.getUrlLinks().getWebpageUrlStr() + ""."", ""Cannot open web page"", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(getFrame(), ""Operation not supported on this platform.\nPlease go to "" + controller.getUrlLinks().getWebpageUrlStr(), ""Cannot open web page"", JOptionPane.INFORMATION_MESSAGE);
        }
    }","    public static Object[] join(Object[] arr1, Object[] arr2) {
        if (arr1 == null && arr2 != null) {
            return arr2;
        } else if (arr2 == null) {
            return arr1;
        } else {
            int size = arr1.length + arr2.length;
            Object[] arr = (Object[]) Array.newInstance(arr1.getClass().getComponentType(), size);
            System.arraycopy(arr1, 0, arr, 0, arr1.length);
            System.arraycopy(arr2, 0, arr, arr1.length, arr2.length);
            return arr;
        }
    }",0,0
"    public static String executeProgram(String programName) {
        Runtime rt = Runtime.getRuntime();
        long l1 = System.currentTimeMillis();
        Process p = null;
        int retStatus = 0;
        long millis = 0;
        long secs = 0;
        long min = 0;
        long hours = 0;
        LinkedList output = new LinkedList();
        LinkedList error = new LinkedList();
        String ls = System.getProperty(""line.separator"");
        try {
            p = rt.exec(programName);
        } catch (IOException e) {
            return ""Caught IOException while running "" + programName + ls + "" Message = "" + e.getMessage() + ls;
        }
        InputStream is = p.getInputStream();
        BufferedReader bf = new BufferedReader(new InputStreamReader(is));
        String line = null;
        try {
            while ((line = bf.readLine()) != null) {
                output.addLast(line);
            }
        } catch (IOException e) {
            return ""Caught IOException. "" + ls + ""Message = "" + e.getMessage() + ls;
        }
        InputStream es = p.getErrorStream();
        BufferedReader ebf = new BufferedReader(new InputStreamReader(es));
        try {
            while ((line = ebf.readLine()) != null) {
                error.addLast(line);
            }
        } catch (IOException e) {
            return ""Caught IOException. "" + ls + ""Message = "" + e.getMessage() + ls;
        }
        try {
            retStatus = p.waitFor();
        } catch (InterruptedException e) {
        }
        StringBuffer message = new StringBuffer();
        if (output.size() != 0) {
            message.append(ls + ""OUTPUT:"" + ls);
            for (Iterator iter = output.iterator(); iter.hasNext(); ) {
                message.append((String) iter.next() + ls);
            }
        }
        if (error.size() != 0) {
            message.append(""ERRORS:"" + ls);
            for (Iterator iter = error.iterator(); iter.hasNext(); ) {
                message.append((String) iter.next() + ls);
            }
        }
        try {
            is.close();
            bf.close();
            es.close();
            ebf.close();
        } catch (IOException e) {
            return ""Caught IOException while closing resources...."" + ls + ""Message: "" + e.getMessage() + ls;
        }
        long l2 = System.currentTimeMillis();
        millis = l2 - l1;
        hours = millis / 3600000;
        millis = millis % 3600000;
        min = millis / 60000;
        millis = millis % 60000;
        secs = millis / 1000;
        millis = millis % 1000;
        message.append(ls + ""TIME TO EXECUTE: "");
        if (hours < 10) {
            message.append(""0"");
        }
        message.append(hours + "":"");
        if (min < 10) {
            message.append(""0"");
        }
        message.append(min + "":"");
        if (secs < 10) {
            message.append(""0"");
        }
        message.append(secs + "":"");
        if (millis < 10) {
            message.append(""0"");
        }
        if (millis < 100) {
            message.append(""0"");
        }
        message.append(millis + ""(HH:MM:SS:MS)"" + ls);
        return message.toString();
    }","    private JPanel getOpisAutora() {
        if (panelOpisaAutora == null) {
            panelOpisaAutora = new JPanel();
            panelOpisaAutora.setLayout(new GridLayout(6, 1));
            JLabel jLabel = new JLabel();
            jLabel.setText(""Аутор програма је студент Милан Алексић 63/02 - ЕТФ Београд"");
            jLabel.setHorizontalAlignment(JLabel.CENTER);
            JLabel jLabel4 = new JLabel();
            jLabel4.setText(""ВЕРЗИЈА 3 (март 2007)"");
            jLabel4.setHorizontalAlignment(JLabel.CENTER);
            JLabel jLabel2 = new JLabel();
            jLabel2.setText(""http://drop.to/goblin"");
            jLabel2.setHorizontalAlignment(JLabel.CENTER);
            jLabel2.setForeground(Color.blue);
            jLabel2.setFont(new Font(""Dialog"", Font.BOLD, 12));
            jLabel2.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    new Thread(new Runnable() {

                        public void run() {
                            if (Desktop.isDesktopSupported()) {
                                Desktop desktop = Desktop.getDesktop();
                                if (desktop.isSupported(Desktop.Action.BROWSE)) {
                                    try {
                                        desktop.browse(URI.create(""http://drop.to/goblin""));
                                    } catch (Exception exc) {
                                        System.err.println(""Nije omoguceno krstarenje Internetom"");
                                    }
                                }
                            }
                        }
                    }).start();
                }
            });
            JLabel jLabel3 = new JLabel();
            jLabel3.setText(""milan.aleksic@gmail.com"");
            jLabel3.setHorizontalAlignment(JLabel.CENTER);
            jLabel3.setForeground(Color.blue);
            jLabel3.setFont(new Font(""Dialog"", Font.BOLD, 12));
            jLabel3.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    new Thread(new Runnable() {

                        public void run() {
                            if (Desktop.isDesktopSupported()) {
                                Desktop desktop = Desktop.getDesktop();
                                if (desktop.isSupported(Desktop.Action.MAIL)) {
                                    try {
                                        desktop.mail(new URI(""mailto:milan.aleksic@gmail.com""));
                                    } catch (Exception exc) {
                                        System.err.println(""Nemoguce slanje elektronske poste"");
                                    }
                                }
                            }
                        }
                    }).start();
                }
            });
            panelOpisaAutora.add(new JLabel(""""));
            panelOpisaAutora.add(jLabel);
            panelOpisaAutora.add(jLabel4);
            panelOpisaAutora.add(jLabel2);
            panelOpisaAutora.add(jLabel3);
            panelOpisaAutora.add(new JLabel(""""));
        }
        return panelOpisaAutora;
    }",0,0
"    private Class compile0(String name, String source) throws CannotCompileException, NotFoundException {
        source = source.trim();
        Map<String, StringBuilder> smap = new HashMap<String, StringBuilder>();
        {
            StringBuilder sb = new StringBuilder();
            StringBuilder sv = null;
            for (int i = 0; i < source.length(); i++) {
                char c = source.charAt(i);
                if (c == '\\') {
                    (sv != null ? sv : sb).append('\\').append(source.charAt(++i));
                    continue;
                }
                if (c == '""') {
                    if (sv == null) {
                        String k = ""[!-"" + i + ""-!]"";
                        smap.put(k, sv = new StringBuilder().append(c));
                        sb.append(k);
                    } else {
                        sv.append(c);
                        sv = null;
                    }
                } else if (sv == null) {
                    sb.append(c);
                } else {
                    sv.append(c);
                }
            }
            source = sb.toString();
        }
        CtClass ctCls = classPool.makeClass(""cn.webwheel.gen."" + name);
        {
            String s = source.substring(0, source.indexOf('{'));
            int ei = s.indexOf(""extends "");
            int ii = s.indexOf(""implements "");
            String es = null;
            String is = null;
            if (ii == -1) {
                if (ei != -1) {
                    es = s.substring(ei + ""extends "".length());
                }
            } else if (ei == -1) {
                if (ii != -1) {
                    is = s.substring(ii + ""implements "".length());
                }
            } else if (ii > ei) {
                es = s.substring(ei + ""extends "".length(), ii);
                is = s.substring(ii + ""implements "".length());
            } else {
                is = s.substring(ii + ""implements "".length(), ei);
                es = s.substring(ei + ""extends "".length());
            }
            if (es != null) {
                ctCls.setSuperclass(classPool.get(es.trim()));
            }
            if (is != null) {
                String[] ss = is.split("","");
                CtClass[] cs = new CtClass[ss.length];
                for (int i = 0; i < ss.length; i++) {
                    cs[i] = classPool.get(ss[i].trim());
                }
                ctCls.setInterfaces(cs);
            }
            source = source.substring(source.indexOf('{') + 1, source.length() - 1);
        }
        {
            StringBuilder sb = new StringBuilder();
            int i = 0;
            int j = 0;
            Pattern pat = Pattern.compile(""\\[!\\-(\\d+)\\-!\\]"");
            List<String> ms = new ArrayList<String>();
            for (; i < source.length(); i++) {
                char c = source.charAt(i);
                sb.append(c);
                if (c == '{') {
                    j++;
                } else if (c == '}') {
                    j--;
                    if (j == 0) {
                        String s = sb.toString();
                        Matcher matcher = pat.matcher(s);
                        sb = new StringBuilder();
                        int end = 0;
                        while (matcher.find()) {
                            sb.append(s.substring(end, matcher.start()));
                            sb.append(smap.get(matcher.group()));
                            end = matcher.end();
                        }
                        sb.append(s.substring(end));
                        ms.add(sb.toString());
                        sb = new StringBuilder();
                    }
                } else if (c == ';' && j == 0) {
                    ctCls.addField(CtField.make(sb.toString(), ctCls));
                    sb = new StringBuilder();
                }
            }
            for (String m : ms) {
                ctCls.addMethod(CtMethod.make(m, ctCls));
            }
        }
        return ctCls.toClass(classLoader, null);
    }","    public static Object[] concat(Object[] source, Object[] objs) {
        Object[] copy = (Object[]) Array.newInstance(source.getClass().getComponentType(), source.length + objs.length);
        System.arraycopy(source, 0, copy, 0, source.length);
        System.arraycopy(objs, 0, copy, source.length, objs.length);
        return copy;
    }",0,0
"    private void buildMenu() {
        JMenuBar menuBar;
        JMenu file;
        JMenuItem newItem, open, save, close, quit;
        menuBar = new JMenuBar();
        file = new JMenu(""File..."");
        file.setMnemonic(KeyEvent.VK_F);
        menuBar.add(file);
        newItem = new JMenuItem(""New"", KeyEvent.VK_N);
        newItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.META_MASK));
        newItem.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                new Training();
            }
        });
        open = new JMenuItem(""Open"", KeyEvent.VK_O);
        open.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ActionEvent.META_MASK));
        open.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                JFileChooser chooser = new JFileChooser();
                try {
                    chooser.setCurrentDirectory(new File(new File(""."").getCanonicalPath()));
                } catch (IOException ioe) {
                }
                int returnVal = chooser.showOpenDialog(frame);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    openFile(chooser.getSelectedFile());
                }
            }
        });
        save = new JMenuItem(""Save"", KeyEvent.VK_S);
        save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.META_MASK));
        save.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                saveClassifier();
            }
        });
        close = new JMenuItem(""Close"", KeyEvent.VK_W);
        close.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W, ActionEvent.META_MASK));
        close.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                frame.setVisible(false);
                recognitionInfoFrame.setVisible(false);
            }
        });
        quit = new JMenuItem(""Quit"", KeyEvent.VK_Q);
        quit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, ActionEvent.META_MASK));
        quit.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
        file.add(newItem);
        file.add(open);
        file.add(save);
        file.addSeparator();
        file.add(close);
        file.add(quit);
        menuBar.add(file);
        frame.setJMenuBar(menuBar);
    }","    public static ArrayDataSet append(ArrayDataSet ths, ArrayDataSet ds) {
        if (ds.rank() != ths.rank) throw new IllegalArgumentException(""rank mismatch"");
        if (ds.len1 != ths.len1) throw new IllegalArgumentException(""len1 mismatch"");
        if (ds.len2 != ths.len2) throw new IllegalArgumentException(""len2 mismatch"");
        if (ds.len3 != ths.len3) throw new IllegalArgumentException(""len3 mismatch"");
        if (ths.getBack().getClass() != ds.getBack().getClass()) throw new IllegalArgumentException(""backing type mismatch"");
        int myLength = ths.len0 * ths.len1 * ths.len2 * ths.len3;
        int dsLength = ds.len0 * ds.len1 * ds.len2 * ds.len3;
        Object newback = Array.newInstance(ths.getBack().getClass().getComponentType(), myLength + dsLength);
        System.arraycopy(ths.getBack(), 0, newback, 0, myLength);
        System.arraycopy(ds.getBack(), 0, newback, myLength, dsLength);
        Units u1 = SemanticOps.getUnits(ths);
        Units u2 = SemanticOps.getUnits(ds);
        if (u1 != u2) {
            UnitsConverter uc = UnitsConverter.getConverter(u2, u1);
            Class backClass = ths.getBack().getClass().getComponentType();
            for (int i = myLength; i < myLength + dsLength; i++) {
                Number nv = uc.convert(Array.getDouble(newback, i));
                if (backClass == double.class) {
                    Array.set(newback, i, nv.doubleValue());
                } else if (backClass == float.class) {
                    Array.set(newback, i, nv.floatValue());
                } else if (backClass == long.class) {
                    Array.set(newback, i, nv.longValue());
                } else if (backClass == int.class) {
                    Array.set(newback, i, nv.intValue());
                } else if (backClass == short.class) {
                    Array.set(newback, i, nv.shortValue());
                } else if (backClass == byte.class) {
                    Array.set(newback, i, nv.byteValue());
                } else {
                    throw new IllegalArgumentException(""unsupported type: "" + backClass);
                }
            }
        }
        int len0 = ths.len0 + ds.len0;
        ArrayDataSet result = create(ths.rank, len0, ths.len1, ths.len2, ths.len3, newback);
        result.properties.putAll(joinProperties(ths, ds));
        result.properties.put(QDataSet.UNITS, u1);
        return result;
    }",0,0
"    public static String replaceWithGroup(String a_src, String a_findPattern, String a_replace) {
        StringBuffer retour = new StringBuffer();
        Pattern l_pattern = Pattern.compile(a_findPattern);
        String l_src = a_src;
        Matcher l_matcher = l_pattern.matcher(l_src);
        int l_groupCount = l_matcher.groupCount();
        while (l_matcher.find()) {
            String[] l_groups = new String[l_groupCount + 1];
            for (int i = 0; i < l_groupCount + 1; i++) {
                l_groups[i] = l_matcher.group(i);
            }
            String l_replace = replaceGroupIntoExpression(a_replace, l_groups);
            retour.append(l_src.substring(0, l_matcher.start(0)));
            retour.append(l_replace);
            l_src = l_src.substring(l_matcher.end(0));
            l_matcher = l_pattern.matcher(l_src);
        }
        retour.append(l_src);
        return retour.toString();
    }","    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == this.close) this.dispose(); else if (e.getSource() == this.openFile) {
            JFileChooser open = new JFileChooser();
            int option = open.showOpenDialog(this);
            if (option == JFileChooser.APPROVE_OPTION) {
                this.textArea.setText("""");
                try {
                    Scanner scan = new Scanner(new FileReader(open.getSelectedFile().getPath()));
                    while (scan.hasNext()) this.textArea.append(scan.nextLine() + ""\n"");
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                }
            }
        } else if (e.getSource() == this.saveFile) {
            JFileChooser save = new JFileChooser();
            int option = save.showSaveDialog(this);
            if (option == JFileChooser.APPROVE_OPTION) {
                try {
                    BufferedWriter out = new BufferedWriter(new FileWriter(save.getSelectedFile().getPath()));
                    out.write(this.textArea.getText());
                    out.close();
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                }
            }
        }
    }",0,0
"    public float[][] transposeMatrix(float[][] a) {
        int n = a.length;
        int m = a[0].length;
        float[][] b = new float[m][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                b[j][i] = a[i][j];
            }
        }
        return (b);
    }","    @SuppressWarnings(""unchecked"")
    public static <T, U> T[] copyOf(U[] original, int newLength, Class<? extends T[]> newType) {
        T[] copy = ((Object) newType == (Object) Object[].class) ? (T[]) new Object[newLength] : (T[]) Array.newInstance(newType.getComponentType(), newLength);
        System.arraycopy(original, 0, copy, 0, Math.min(original.length, newLength));
        return copy;
    }",0,0
"    public static String convertLocationRun(String sequence, String symbol) {
        String regex = symbol + ""+"";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(sequence);
        List<String> ranges = new ArrayList<String>();
        while (matcher.find()) {
            int start = matcher.start() + 1;
            int end = matcher.end();
            ranges.add(start + DELIMITER + end);
        }
        return CStringHelper.join(ranges, "","");
    }","    public static ArrayDataSet append(ArrayDataSet ths, ArrayDataSet ds) {
        if (ds.rank() != ths.rank) throw new IllegalArgumentException(""rank mismatch"");
        if (ds.len1 != ths.len1) throw new IllegalArgumentException(""len1 mismatch"");
        if (ds.len2 != ths.len2) throw new IllegalArgumentException(""len2 mismatch"");
        if (ds.len3 != ths.len3) throw new IllegalArgumentException(""len3 mismatch"");
        if (ths.getBack().getClass() != ds.getBack().getClass()) throw new IllegalArgumentException(""backing type mismatch"");
        int myLength = ths.len0 * ths.len1 * ths.len2 * ths.len3;
        int dsLength = ds.len0 * ds.len1 * ds.len2 * ds.len3;
        Object newback = Array.newInstance(ths.getBack().getClass().getComponentType(), myLength + dsLength);
        System.arraycopy(ths.getBack(), 0, newback, 0, myLength);
        System.arraycopy(ds.getBack(), 0, newback, myLength, dsLength);
        Units u1 = SemanticOps.getUnits(ths);
        Units u2 = SemanticOps.getUnits(ds);
        if (u1 != u2) {
            UnitsConverter uc = UnitsConverter.getConverter(u2, u1);
            Class backClass = ths.getBack().getClass().getComponentType();
            for (int i = myLength; i < myLength + dsLength; i++) {
                Number nv = uc.convert(Array.getDouble(newback, i));
                if (backClass == double.class) {
                    Array.set(newback, i, nv.doubleValue());
                } else if (backClass == float.class) {
                    Array.set(newback, i, nv.floatValue());
                } else if (backClass == long.class) {
                    Array.set(newback, i, nv.longValue());
                } else if (backClass == int.class) {
                    Array.set(newback, i, nv.intValue());
                } else if (backClass == short.class) {
                    Array.set(newback, i, nv.shortValue());
                } else if (backClass == byte.class) {
                    Array.set(newback, i, nv.byteValue());
                } else {
                    throw new IllegalArgumentException(""unsupported type: "" + backClass);
                }
            }
        }
        int len0 = ths.len0 + ds.len0;
        ArrayDataSet result = create(ths.rank, len0, ths.len1, ths.len2, ths.len3, newback);
        result.properties.putAll(joinProperties(ths, ds));
        result.properties.put(QDataSet.UNITS, u1);
        return result;
    }",0,0
"    private FileInfo inspectFile(String filePath, boolean compress) throws XPIException {
        long length = 0;
        long crc = 0;
        byte[] md5 = new byte[0];
        byte[] sha1 = new byte[0];
        File tmp = new File(baseDir, filePath);
        try {
            tmp = tmp.getCanonicalFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (!tmp.exists()) throw new XPIException(""  File \'"" + tmp.getAbsolutePath() + ""\' does not exist."", Main.ERR_FILE_NOT_FOUND);
        try {
            length = tmp.length();
            BufferedInputStream bis = null;
            try {
                bis = new BufferedInputStream(new FileInputStream(tmp));
            } catch (FileNotFoundException e1) {
            }
            digestMD5.reset();
            digestSHA.reset();
            DigestInputStream md5Stream = new DigestInputStream(bis, digestMD5);
            DigestInputStream shaStream = new DigestInputStream(md5Stream, digestSHA);
            CRC32 crc32 = new CRC32();
            byte[] data = new byte[1024 * 2];
            int byteCount;
            while ((byteCount = shaStream.read(data)) > -1) {
                crc32.update(data, 0, byteCount);
            }
            crc = crc32.getValue();
            crc32.reset();
            md5 = md5Stream.getMessageDigest().digest();
            sha1 = shaStream.getMessageDigest().digest();
            bis.close();
        } catch (IOException e1) {
            throw new XPIException(""Error reading from \'"" + tmp + ""\'"", Main.ERR_ERROR_READING_FILE);
        }
        return new FileInfo(filePath, length, crc, md5, sha1, compress);
    }","    public void captureSystemScreenshot() throws IOException, InterruptedException, ExecutionException, TimeoutException {
        final BufferedImage bufferedImage;
        final Rectangle captureSize;
        final Robot robot;
        robot = RobotRetriever.getRobot();
        captureSize = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
        bufferedImage = robot.createScreenCapture(captureSize);
        createNecessaryDirectories();
        ImageIO.write(bufferedImage, ""png"", this.file);
    }",0,0
"    public void close() {
        boolean goodExit = false;
        if (!pending()) commit();
        try {
            DriverManager.getConnection(""jdbc:derby:"" + dbName + "";shutdown=true"");
        } catch (SQLException e) {
            if (e.getSQLState().equals(""XJ015"")) {
                goodExit = true;
            }
        }
        if (!goodExit) {
            System.err.println(""Database "" + dbName + "" did not shut down correctly."");
        }
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] add(T[] array, T element) {
        final T[] result;
        if (array != null) {
            result = Arrays.createArray((Class<? extends T>) array.getClass().getComponentType(), array.length + 1);
            System.arraycopy(array, 0, result, 0, array.length);
        } else {
            Validations.isTrue(element != null, ""Both array and element are null"");
            assert element != null;
            result = Arrays.createArray((Class<? extends T>) element.getClass(), 1);
        }
        result[result.length - 1] = element;
        return result;
    }",0,0
"                @Override
                public void hyperlinkUpdate(HyperlinkEvent evt) {
                    if (evt.getEventType() == EventType.ACTIVATED) {
                        try {
                            if (Desktop.isDesktopSupported()) {
                                Desktop desktop = Desktop.getDesktop();
                                if (evt.getURL() != null) {
                                    desktop.browse(new URI(evt.getURL().toString()));
                                } else {
                                }
                            }
                        } catch (Exception e) {
                            log.log(Level.WARNING, ""Error"", e);
                        }
                    }
                }","    private void find() {
        this.expressions = null;
        Pattern p = Pattern.compile(regExpr);
        Matcher m = p.matcher(text);
        while (m.find()) {
            if (this.stopped) {
                System.out.println(""Finder was stopped."");
                this.expressions = null;
                return;
            }
            int start = m.start();
            int end = m.end();
            if (expressions == null) {
                expressions = new FoundExpressions();
            }
            Selection selection = new Selection();
            selection.setStart(start);
            selection.setEnd(end);
            expressions.add(selection);
        }
    }",0,0
"    public static String executeProgram(String programName) {
        Runtime rt = Runtime.getRuntime();
        long l1 = System.currentTimeMillis();
        Process p = null;
        int retStatus = 0;
        long millis = 0;
        long secs = 0;
        long min = 0;
        long hours = 0;
        LinkedList output = new LinkedList();
        LinkedList error = new LinkedList();
        String ls = System.getProperty(""line.separator"");
        try {
            p = rt.exec(programName);
        } catch (IOException e) {
            return ""Caught IOException while running "" + programName + ls + "" Message = "" + e.getMessage() + ls;
        }
        InputStream is = p.getInputStream();
        BufferedReader bf = new BufferedReader(new InputStreamReader(is));
        String line = null;
        try {
            while ((line = bf.readLine()) != null) {
                output.addLast(line);
            }
        } catch (IOException e) {
            return ""Caught IOException. "" + ls + ""Message = "" + e.getMessage() + ls;
        }
        InputStream es = p.getErrorStream();
        BufferedReader ebf = new BufferedReader(new InputStreamReader(es));
        try {
            while ((line = ebf.readLine()) != null) {
                error.addLast(line);
            }
        } catch (IOException e) {
            return ""Caught IOException. "" + ls + ""Message = "" + e.getMessage() + ls;
        }
        try {
            retStatus = p.waitFor();
        } catch (InterruptedException e) {
        }
        StringBuffer message = new StringBuffer();
        if (output.size() != 0) {
            message.append(ls + ""OUTPUT:"" + ls);
            for (Iterator iter = output.iterator(); iter.hasNext(); ) {
                message.append((String) iter.next() + ls);
            }
        }
        if (error.size() != 0) {
            message.append(""ERRORS:"" + ls);
            for (Iterator iter = error.iterator(); iter.hasNext(); ) {
                message.append((String) iter.next() + ls);
            }
        }
        try {
            is.close();
            bf.close();
            es.close();
            ebf.close();
        } catch (IOException e) {
            return ""Caught IOException while closing resources...."" + ls + ""Message: "" + e.getMessage() + ls;
        }
        long l2 = System.currentTimeMillis();
        millis = l2 - l1;
        hours = millis / 3600000;
        millis = millis % 3600000;
        min = millis / 60000;
        millis = millis % 60000;
        secs = millis / 1000;
        millis = millis % 1000;
        message.append(ls + ""TIME TO EXECUTE: "");
        if (hours < 10) {
            message.append(""0"");
        }
        message.append(hours + "":"");
        if (min < 10) {
            message.append(""0"");
        }
        message.append(min + "":"");
        if (secs < 10) {
            message.append(""0"");
        }
        message.append(secs + "":"");
        if (millis < 10) {
            message.append(""0"");
        }
        if (millis < 100) {
            message.append(""0"");
        }
        message.append(millis + ""(HH:MM:SS:MS)"" + ls);
        return message.toString();
    }","    public static void postMail(String hostAddr, String recipients[], String subject, String message, String from) throws MessagingException {
        boolean debug = false;
        Properties props = new Properties();
        props.put(""mail.host"", hostAddr);
        Session session = Session.getDefaultInstance(props, null);
        session.setDebug(debug);
        Message msg = new MimeMessage(session);
        InternetAddress addressFrom = new InternetAddress(from);
        msg.setFrom(addressFrom);
        InternetAddress[] addressTo = new InternetAddress[recipients.length];
        for (int i = 0; i < recipients.length; i++) {
            addressTo[i] = new InternetAddress(recipients[i]);
        }
        msg.setRecipients(Message.RecipientType.TO, addressTo);
        msg.setSubject(subject);
        msg.setContent(message, ""text/plain"");
        Transport.send(msg);
    }",0,0
"    protected final void showMsg(final String msg, final boolean quit) {
        final JPanel p = new JPanel();
        p.setLayout(new GridBagLayout());
        final GridBagConstraints c = new GridBagConstraints();
        c.insets = new Insets(10, 10, 10, 10);
        c.gridx = 0;
        c.gridy = 0;
        c.fill = GridBagConstraints.BOTH;
        final JImage im = new JImage(new ImageIcon(this.getClass().getResource(""error.png"")));
        final JLabel l = new JLabel(""Une erreur est survenue"");
        l.setFont(l.getFont().deriveFont(Font.BOLD));
        final JLabel lError = new JLabel(msg);
        final JTextArea textArea = new JTextArea();
        textArea.setFont(textArea.getFont().deriveFont(11f));
        c.gridheight = 3;
        p.add(im, c);
        c.insets = new Insets(2, 4, 2, 4);
        c.gridheight = 1;
        c.gridx++;
        c.weightx = 1;
        c.gridwidth = 2;
        p.add(l, c);
        c.gridy++;
        p.add(lError, c);
        c.gridy++;
        p.add(new JLabel(""Il s'agit probablement d'une mauvaise configuration ou installation du logiciel.""), c);
        c.gridx = 0;
        c.gridwidth = 3;
        c.gridy++;
        c.weighty = 0;
        c.gridwidth = 1;
        c.gridx = 1;
        c.gridy++;
        c.fill = GridBagConstraints.NONE;
        c.anchor = GridBagConstraints.EAST;
        final Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        final boolean browseSupported = desktop != null && desktop.isSupported(Action.BROWSE);
        if (ForumURL != null) {
            final javax.swing.Action communityAction;
            if (browseSupported) {
                communityAction = new AbstractAction(""Consulter le forum"") {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        try {
                            desktop.browse(new URI(ForumURL));
                        } catch (Exception e1) {
                            e1.printStackTrace();
                        }
                    }
                };
            } else {
                communityAction = new AbstractAction(""Copier l'adresse du forum"") {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        copyToClipboard(ForumURL);
                    }
                };
            }
            p.add(new JButton(communityAction), c);
        }
        c.weightx = 0;
        c.gridx++;
        final javax.swing.Action supportAction;
        if (browseSupported) supportAction = new AbstractAction(""Contacter l'assistance"") {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    desktop.browse(URI.create(ILM_CONTACT));
                } catch (Exception e1) {
                    e1.printStackTrace();
                }
            }
        }; else supportAction = new AbstractAction(""Copier l'adresse de l'assistance"") {

            @Override
            public void actionPerformed(ActionEvent e) {
                copyToClipboard(ILM_CONTACT);
            }
        };
        p.add(new JButton(supportAction), c);
        c.gridy++;
        c.gridx = 0;
        c.gridwidth = 3;
        c.fill = GridBagConstraints.BOTH;
        c.insets = new Insets(0, 0, 0, 0);
        p.add(new JSeparator(), c);
        c.gridx = 0;
        c.gridwidth = 3;
        c.gridy++;
        c.insets = new Insets(2, 4, 2, 4);
        p.add(new JLabel(""Détails de l'erreur:""), c);
        c.insets = new Insets(0, 0, 0, 0);
        c.gridy++;
        String message = this.getCause() == null ? null : this.getCause().getMessage();
        if (message == null) {
            message = msg;
        } else {
            message = msg + ""\n\n"" + message;
        }
        message += ""\n"";
        message += getTrace();
        textArea.setText(message);
        textArea.setEditable(false);
        JScrollPane scroll = new JScrollPane(textArea);
        scroll.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scroll.getViewport().setMinimumSize(new Dimension(200, 300));
        c.weighty = 1;
        c.gridwidth = 3;
        c.gridx = 0;
        c.gridy++;
        p.add(scroll, c);
        c.gridy++;
        c.fill = GridBagConstraints.NONE;
        c.weighty = 0;
        c.insets = new Insets(2, 4, 2, 4);
        final JButton buttonClose = new JButton(""Fermer"");
        p.add(buttonClose, c);
        final Window window = this.comp == null ? null : SwingUtilities.getWindowAncestor(this.comp);
        final JDialog f;
        if (window instanceof Frame) {
            f = new JDialog((Frame) window, ""Erreur"", true);
        } else {
            f = new JDialog((Dialog) window, ""Erreur"", true);
        }
        f.setContentPane(p);
        f.pack();
        f.setSize(580, 680);
        f.setMinimumSize(new Dimension(380, 380));
        f.setLocationRelativeTo(this.comp);
        final ActionListener al = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (quit) {
                    System.exit(1);
                } else {
                    f.dispose();
                }
            }
        };
        buttonClose.addActionListener(al);
        f.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                al.actionPerformed(null);
            }
        });
        f.setVisible(true);
    }","    public String foreach(String s, String regexp, String replacement) {
        Pattern rp = Pattern.compile(""\\$(\\d)"");
        Matcher rm = rp.matcher(replacement);
        StringBuffer res = new StringBuffer();
        Pattern p = Pattern.compile(regexp);
        Matcher m = p.matcher(s);
        int groupCount = m.groupCount();
        int end = 0;
        while (m.find()) {
            while (rm.find(end)) {
                res.append(replacement.substring(end, rm.start()));
                int g = Integer.parseInt(rm.group(1));
                if (0 <= g && g <= groupCount) {
                    res.append(m.group(g));
                }
                end = rm.end();
            }
            res.append(replacement.substring(end));
            end = 0;
        }
        return res.toString();
    }",0,0
"    public void startFileConversion() {
        FileManagement.startTime = System.currentTimeMillis();
        FileManagement.fetchAllFiles(new File(sourceDir), javaFileList);
        Collections.sort(javaFileList);
        for (JavaFileBean javaFile : javaFileList) {
            performConversion(javaFile);
        }
        htmlManagementIndex = new HTMLManagementIndexFile();
        htmlManagementIndex.createIndexHtmlFile(javaFileList, destinationDir);
        Desktop desktop = null;
        if (Desktop.isDesktopSupported()) {
            desktop = Desktop.getDesktop();
            URI uri = null;
            try {
                uri = new URI(""file://"" + destinationDir.replace('\\', '/') + ""/index.html"");
                desktop.browse(uri);
            } catch (URISyntaxException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }","    public void cutOff() {
        double[][] sim = new double[numSeqs][numSeqs];
        for (int i = 0; i < numSeqs; i++) {
            for (int j = i + 0; j < numSeqs; j++) {
                if (this.getDistance(i, j) > kAvg) {
                    sim[i][j] = this.getDistance(i, j);
                } else {
                    sim[i][j] = kAvg;
                }
                sim[j][i] = sim[i][j];
            }
        }
        kMin = kAvg;
        setDistances(sim);
    }",0,0
"    public static int fibonacci(int broj) {
        if (broj <= 1) return broj; else return fibonacci(broj - 1) + fibonacci(broj - 2);
    }","    public static void main(String[] args) {
        if (args.length != 4) {
            usage();
            System.exit(1);
        }
        System.out.println();
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        if (debug) props.put(""mail.debug"", args[3]);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            Message msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(args[0]) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Test"");
            msg.setSentDate(new Date());
            msg.setText(msgText);
            Transport.send(msg);
        } catch (MessagingException mex) {
            System.out.println(""\n--Exception handling in msgsendsample.java"");
            mex.printStackTrace();
            System.out.println();
            Exception ex = mex;
            do {
                if (ex instanceof SendFailedException) {
                    SendFailedException sfex = (SendFailedException) ex;
                    Address[] invalid = sfex.getInvalidAddresses();
                    if (invalid != null) {
                        System.out.println(""    ** Invalid Addresses"");
                        if (invalid != null) {
                            for (int i = 0; i < invalid.length; i++) System.out.println(""         "" + invalid[i]);
                        }
                    }
                    Address[] validUnsent = sfex.getValidUnsentAddresses();
                    if (validUnsent != null) {
                        System.out.println(""    ** ValidUnsent Addresses"");
                        if (validUnsent != null) {
                            for (int i = 0; i < validUnsent.length; i++) System.out.println(""         "" + validUnsent[i]);
                        }
                    }
                    Address[] validSent = sfex.getValidSentAddresses();
                    if (validSent != null) {
                        System.out.println(""    ** ValidSent Addresses"");
                        if (validSent != null) {
                            for (int i = 0; i < validSent.length; i++) System.out.println(""         "" + validSent[i]);
                        }
                    }
                }
                System.out.println();
                if (ex instanceof MessagingException) ex = ((MessagingException) ex).getNextException(); else ex = null;
            } while (ex != null);
        }
    }",0,0
"    public static void main(String[] args) {
        Connection con = null;
        String url = ""jdbc:mysql://192.168.15.110:3306/"";
        String dbName = ""os"";
        String driver = ""com.mysql.jdbc.Driver"";
        String userName = ""root"";
        String password = ""vkmohan123"";
        try {
            Class.forName(driver).newInstance();
            con = DriverManager.getConnection(url + dbName, userName, password);
            Statement st = con.createStatement();
            String sql123 = ""update os.LoadRequestResponse set processId="" + args[0] + "" where requestId="" + args[1];
            int update = st.executeUpdate(sql123);
            System.out.println(""after update"" + args[0] + "" req:"" + args[1]);
            st.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }","    public static String convertLocationRun(String sequence, String symbol) {
        String regex = symbol + ""+"";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(sequence);
        List<String> ranges = new ArrayList<String>();
        while (matcher.find()) {
            int start = matcher.start() + 1;
            int end = matcher.end();
            ranges.add(start + DELIMITER + end);
        }
        return CStringHelper.join(ranges, "","");
    }",0,0
"        public static void transpose4(double[][] in, double[][] out) {
            if (D.isIdentityMatrix(in)) {
                if (in != out) D.identityMatrix(out);
                return;
            }
            double[][] copyIn;
            if (in == out) {
                D.copyMatrix(in, _dummyMatrix);
                copyIn = _dummyMatrix;
            } else {
                copyIn = in;
            }
            for (int rowI = 0; rowI < 4; rowI++) {
                for (int colI = 0; colI < 4; colI++) {
                    out[colI][rowI] = copyIn[rowI][colI];
                }
            }
        }","    protected void highlightText(StyledDocument doc) {
        super.highlightText(doc);
        for (String search : searches) {
            Style searchHighlight = doc.addStyle(""RESULT_"" + search, null);
            StyleConstants.setBold(searchHighlight, true);
            StyleConstants.setBackground(searchHighlight, colourMap.get(search));
            Pattern p = Pattern.compile(""(?s)(?i)"" + search);
            try {
                Matcher matcher = p.matcher(doc.getText(0, doc.getLength()));
                while (matcher.find()) {
                    final int start = matcher.start();
                    final int end = matcher.end();
                    doc.setCharacterAttributes(start, end - start, searchHighlight, false);
                }
            } catch (BadLocationException e) {
                throw new RuntimeException(e);
            }
        }
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 4) {
            System.out.println(""usage: java msgmultisend <to> <from> <smtp> true|false"");
            return;
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Multipart Test"");
            msg.setSentDate(new Date());
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setText(msgText2, ""us-ascii"");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        }
    }","    public static Object[] setLength(Object[] source, int length) {
        Object[] copy = (Object[]) Array.newInstance(source.getClass().getComponentType(), length);
        System.arraycopy(source, 0, copy, 0, Math.min(source.length, length));
        return copy;
    }",0,0
"    private void labelHomepageMouseUp(MouseEvent evt) {
        if (!java.awt.Desktop.isDesktopSupported()) {
            return;
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            return;
        }
        try {
            java.net.URI uri = new java.net.URI(this.labelHomepage.getText());
            desktop.browse(uri);
        } catch (Exception e) {
        }
    }","    public SystemWrapper(String commandstring, String path) {
        try {
            String cmdline = stringArrayToString(commandstring.split(""\\[\\]""));
            (Megatron.getLog()).debug(""Trying to invoke: "" + cmdline + ""\n"");
            Process p = (Runtime.getRuntime()).exec(commandstring.split(""\\[\\]""), null, new File(path));
            String line;
            _noutput = new LinkedList<String>();
            BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));
            while ((line = r.readLine()) != null) _noutput.add(line);
            boolean done = false;
            while (!done) {
                try {
                    _retval = p.waitFor();
                    done = true;
                    (Megatron.getLog()).debug(""Process finished: "" + cmdline + ""\n"");
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }",0,0
"    public static <T> T[] clone(T[] array) {
        if (array == null) return null;
        if (array.length == 0) {
            return (T[]) Array.newInstance(array.getClass().getComponentType(), 0);
        }
        T[] tmp = (T[]) java.lang.reflect.Array.newInstance(array.getClass().getComponentType(), array.length);
        System.arraycopy(array, 0, tmp, 0, tmp.length);
        return tmp;
    }","    static double[][] transpose(final double a[][]) {
        int nc = 0;
        for (double[] v : a) {
            if (v.length > nc) nc = v.length;
        }
        double[][] b = new double[nc][];
        for (int i = 0; i < b.length; i++) b[i] = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a[i].length; j++) {
                b[j][i] = a[i][j];
            }
        }
        return b;
    }",0,0
"    public static void replacePattern(SpannableStringBuilder ssb, String source, String pattern, PatternListener lsr) {
        if (pattern == null || pattern.length() == 0 || lsr == null) return;
        Pattern p = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE);
        Matcher m = p.matcher(source);
        int s = 0;
        while (m.find()) {
            ssb.append(source.subSequence(s, m.start()));
            lsr.onPatternMatch(m.group(), ssb);
            s = m.end();
        }
        ssb.append(source.substring(s));
        lsr.onEnd(ssb);
    }","    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals(""browse"")) {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int val = chooser.showOpenDialog(frame.getContentPane());
            if (val == JFileChooser.APPROVE_OPTION) {
                webappField.setText(chooser.getSelectedFile().getAbsolutePath());
            }
        } else if (e.getActionCommand().equals(""install"")) {
            String user = userField.getText();
            String wapp = webappField.getText();
            String dir = homeField.getText();
            runInstall(new File(dir), wapp, user);
        }
    }",0,0
"    public void exportListDialog() {
        JFileChooser oracle = new JFileChooser();
        String[] vars = { "".list"", "".LIST"", ""List"" };
        oracle.addChoosableFileFilter(new scribeFilter(vars));
        oracle.setAcceptAllFileFilterUsed(false);
        if (oracle.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            temp = oracle.getSelectedFile().getPath();
            lincoln.exportList(temp);
        }
    }","    private void update() {
        double[][] data = new double[4][points.length];
        for (int i = 0; i < points.length; i++) {
            for (int j = 0; j < 3; j++) {
                data[j][i] = points[i][j];
            }
            data[3][i] = 1;
        }
        this.matrix = new Matrix(data);
        this.dirty = false;
    }",0,0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                shoutcastPlayer.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public static void main(String[] args) {
        System.out.println(""Input any text with Unicode symbols: \\u**** (or &#****; if the program started with &#; parameter). Type 'stop' to exit"");
        System.out.println(""If you want to read from and save to file, use < and > command line syntax"");
        String unicode = ""\\u"";
        if (args.length > 0) unicode = args[0];
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            Writer writer = new OutputStreamWriter(System.out);
            String delim = "" "";
            Pattern pattern = Pattern.compile(delim);
            while (true) {
                String ss = reader.readLine();
                if (ss == null || ""stop"".equalsIgnoreCase(ss)) break;
                Matcher m = pattern.matcher(ss);
                int i = 0;
                while (m.find()) {
                    String s = ss.substring(i, m.start());
                    i = m.end();
                    decode(writer, s, unicode);
                    writer.write(delim);
                }
                if (i < ss.length()) decode(writer, ss.substring(i), unicode);
                writer.write(""\r\n"");
                writer.flush();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }",0,0
"    public void notify(final UIEvent evt) {
        if (evt.isOfType(IReplayTune.class)) {
            if (getPlayer().getTune() != null) {
                playTune(getPlayer().getTune().getInfo().file);
            } else {
                playTune(null);
            }
        } else if (evt.isOfType(IPlayTune.class)) {
            IPlayTune ifObj = (IPlayTune) evt.getUIEventImpl();
            if (evt.isOfType(Reset.class)) {
                getPlayer().setCommand(((Reset) evt.getUIEventImpl()).getCommand());
            }
            playTune(ifObj.getFile());
        } else if (evt.isOfType(IGotoURL.class)) {
            IGotoURL ifObj = (IGotoURL) evt.getUIEventImpl();
            if (isActive()) {
                getAppletContext().showDocument(ifObj.getCollectionURL(), ""_blank"");
            } else {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    if (desktop.isSupported(Desktop.Action.BROWSE)) {
                        try {
                            desktop.browse(ifObj.getCollectionURL().toURI());
                        } catch (final IOException ioe) {
                            ioe.printStackTrace();
                        } catch (final URISyntaxException urie) {
                            urie.printStackTrace();
                        }
                    }
                }
            }
        } else if (evt.isOfType(IStopTune.class)) {
            stopC64();
        } else if (evt.isOfType(IInsertMedia.class)) {
            IInsertMedia ifObj = (IInsertMedia) evt.getUIEventImpl();
            File mediaFile = ifObj.getSelectedMedia();
            try {
                if (mediaFile instanceof ZipEntryFileProxy) {
                    mediaFile = ZipEntryFileProxy.extractFromZip((ZipEntryFileProxy) mediaFile);
                }
                if (mediaFile.getName().endsWith("".gz"")) {
                    mediaFile = ZipEntryFileProxy.extractFromGZ(mediaFile);
                }
                switch(ifObj.getMediaType()) {
                    case TAPE:
                        insertTape(mediaFile, ifObj.getAutostartFile(), ifObj.getComponent());
                        break;
                    case DISK:
                        insertDisk(mediaFile, ifObj.getAutostartFile(), ifObj.getComponent());
                        break;
                    case CART:
                        insertCartridge(mediaFile);
                        break;
                    default:
                        break;
                }
            } catch (IOException e) {
                System.err.println(String.format(""Cannot attach file '%s'."", mediaFile.getAbsolutePath()));
                return;
            }
        }
    }","    public static boolean insert(final Departamento ObjDepartamento) {
        int result = 0;
        final Connection c = DBConnection.getConnection();
        PreparedStatement pst = null;
        if (c == null) {
            return false;
        }
        try {
            c.setAutoCommit(false);
            final String sql = ""insert into departamento "" + ""(nome, sala, telefone, id_orgao)"" + "" values (?, ?, ?, ?)"";
            pst = c.prepareStatement(sql);
            pst.setString(1, ObjDepartamento.getNome());
            pst.setString(2, ObjDepartamento.getSala());
            pst.setString(3, ObjDepartamento.getTelefone());
            pst.setInt(4, (ObjDepartamento.getOrgao()).getCodigo());
            result = pst.executeUpdate();
            c.commit();
        } catch (final SQLException e) {
            try {
                c.rollback();
            } catch (final SQLException e1) {
                e1.printStackTrace();
            }
            System.out.println(""[DepartamentoDAO.insert] Erro ao inserir -> "" + e.getMessage());
        } finally {
            DBConnection.closePreparedStatement(pst);
            DBConnection.closeConnection(c);
        }
        if (result > 0) {
            return true;
        } else {
            return false;
        }
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 4) {
            usage();
            System.exit(1);
        }
        System.out.println();
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        if (debug) props.put(""mail.debug"", args[3]);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            Message msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(args[0]) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Test"");
            msg.setSentDate(new Date());
            msg.setText(msgText);
            Transport.send(msg);
        } catch (MessagingException mex) {
            System.out.println(""\n--Exception handling in msgsendsample.java"");
            mex.printStackTrace();
            System.out.println();
            Exception ex = mex;
            do {
                if (ex instanceof SendFailedException) {
                    SendFailedException sfex = (SendFailedException) ex;
                    Address[] invalid = sfex.getInvalidAddresses();
                    if (invalid != null) {
                        System.out.println(""    ** Invalid Addresses"");
                        if (invalid != null) {
                            for (int i = 0; i < invalid.length; i++) System.out.println(""         "" + invalid[i]);
                        }
                    }
                    Address[] validUnsent = sfex.getValidUnsentAddresses();
                    if (validUnsent != null) {
                        System.out.println(""    ** ValidUnsent Addresses"");
                        if (validUnsent != null) {
                            for (int i = 0; i < validUnsent.length; i++) System.out.println(""         "" + validUnsent[i]);
                        }
                    }
                    Address[] validSent = sfex.getValidSentAddresses();
                    if (validSent != null) {
                        System.out.println(""    ** ValidSent Addresses"");
                        if (validSent != null) {
                            for (int i = 0; i < validSent.length; i++) System.out.println(""         "" + validSent[i]);
                        }
                    }
                }
                System.out.println();
                if (ex instanceof MessagingException) ex = ((MessagingException) ex).getNextException(); else ex = null;
            } while (ex != null);
        }
    }","    private Collection<String> getVariants(String oldPatternText, String searchText, String replaceText) {
        Collection<String> variants = new HashSet<String>();
        java.util.regex.Pattern p = java.util.regex.Pattern.compile(searchText, java.util.regex.Pattern.LITERAL);
        Matcher m = p.matcher(oldPatternText);
        List<MatchResult> results = new ArrayList<MatchResult>();
        while (m.find()) {
            results.add(m.toMatchResult());
        }
        int n = results.size();
        for (int patNum = 1; patNum < twoToThe(n); patNum++) {
            String newPatternText = new String(oldPatternText);
            int offset = 0;
            for (int matchNum = 0; matchNum < n; matchNum++) {
                if (isBitSet(patNum, matchNum)) {
                    MatchResult hit = results.get(matchNum);
                    int realStart = hit.start() + offset;
                    int realEnd = hit.end() + offset;
                    Matcher replacer = p.matcher(newPatternText);
                    newPatternText = replaceFirst(replacer, realStart, realEnd, replaceText);
                    int hitLength = hit.end() - hit.start();
                    int growth = replaceText.length() - hitLength;
                    offset += growth;
                    variants.add(newPatternText);
                }
            }
        }
        return variants;
    }",0,0
"    public void saveAs() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fileChooser.addChoosableFileFilter(new VESTChartFilter());
        fileChooser.setCurrentDirectory(new File("".""));
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.CANCEL_OPTION) return;
        File fileName = fileChooser.getSelectedFile();
        if (fileName == null || fileName.getName().equals("""")) {
            JOptionPane.showMessageDialog(this, ""Invalid File Name"", ""Invalid File Name"", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                output = new ObjectOutputStream(new FileOutputStream(fileName));
                save();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, ""Error Saving File"", ""Error"", JOptionPane.ERROR_MESSAGE);
            }
        }
    }","    public int[][] get_spectrum(String spectrum) {
        if (spectrum == null) {
            return null;
        }
        int[][] num = new int[spectrum.split("","").length][];
        for (int i = 0; i < num.length; i++) {
            num[i] = new int[2];
        }
        Pattern sp = Pattern.compile(""\\d\\d?\\d?\\d?"");
        Matcher matcher = sp.matcher(spectrum);
        int i = 0;
        while (matcher.find()) {
            num[i][0] = Integer.parseInt(spectrum.substring(matcher.start(), matcher.end()));
            matcher.find();
            num[i][1] = Integer.parseInt(spectrum.substring(matcher.start(), matcher.end()));
            i++;
        }
        return num;
    }",0,0
"    public String getTargetCompilationUnitContents() {
        String result = null;
        if (getControlModel().getFacadeHelper() != null && (!targetCompilationUnitExists || !targetCompilationChanged)) {
            result = getControlModel().getFacadeHelper().getOriginalContents(targetCompilationUnit);
        }
        if (result == null) {
            result = targetCompilationUnit.getContents();
        }
        if (fixInterfaceBrace) {
            if (interfaceBracePattern == null) {
                interfaceBracePattern = Pattern.compile(""(?:\\n\\r|\\r\\n|\\n|\\r)(\\s*)(?:public|private|protected|static|\\s)*(?:interface|class)\\s*[^\\{\\n\\r]*(\\{)(\\n\\r|\\r\\n|\\n|\\r)"", Pattern.MULTILINE);
            }
            Matcher matcher = interfaceBracePattern.matcher(result);
            int offset = 0;
            while (matcher.find()) {
                if (getControlModel().standardBraceStyle) {
                    if (result.charAt(matcher.start(2) - 1) != ' ') {
                        result = result.substring(0, offset + matcher.start(2)) + "" {"" + result.substring(offset + matcher.end(2), result.length());
                        offset += 1;
                    }
                } else {
                    result = result.substring(0, offset + matcher.start(2)) + matcher.group(3) + matcher.group(1) + ""{"" + result.substring(offset + matcher.end(2), result.length());
                    offset += matcher.group(1).length() + matcher.group(3).length();
                }
            }
        }
        return result;
    }","    private int[][] balanceMatchDayMatrix(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = i + 1; j < matrix.length; j++) {
                if (matrix[i][j] % 2 != 0) {
                    int tmp = matrix[i][j];
                    matrix[i][j] = matrix[j][i];
                    matrix[j][i] = tmp;
                }
            }
        }
        return matrix;
    }",0,0
"        public void actionPerformed(ActionEvent e) {
            JFileChooser chooser = new JFileChooser();
            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) m_viewer.setGMNFile(chooser.getSelectedFile());
        }","    private FileInfo inspectFile(String filePath, boolean compress) throws XPIException {
        long length = 0;
        long crc = 0;
        byte[] md5 = new byte[0];
        byte[] sha1 = new byte[0];
        File tmp = new File(baseDir, filePath);
        try {
            tmp = tmp.getCanonicalFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (!tmp.exists()) throw new XPIException(""  File \'"" + tmp.getAbsolutePath() + ""\' does not exist."", Main.ERR_FILE_NOT_FOUND);
        try {
            length = tmp.length();
            BufferedInputStream bis = null;
            try {
                bis = new BufferedInputStream(new FileInputStream(tmp));
            } catch (FileNotFoundException e1) {
            }
            digestMD5.reset();
            digestSHA.reset();
            DigestInputStream md5Stream = new DigestInputStream(bis, digestMD5);
            DigestInputStream shaStream = new DigestInputStream(md5Stream, digestSHA);
            CRC32 crc32 = new CRC32();
            byte[] data = new byte[1024 * 2];
            int byteCount;
            while ((byteCount = shaStream.read(data)) > -1) {
                crc32.update(data, 0, byteCount);
            }
            crc = crc32.getValue();
            crc32.reset();
            md5 = md5Stream.getMessageDigest().digest();
            sha1 = shaStream.getMessageDigest().digest();
            bis.close();
        } catch (IOException e1) {
            throw new XPIException(""Error reading from \'"" + tmp + ""\'"", Main.ERR_ERROR_READING_FILE);
        }
        return new FileInfo(filePath, length, crc, md5, sha1, compress);
    }",0,0
"    public DataSourceImpl(List<String> data) {
        final Pattern p = Pattern.compile(""\\{[-+#!*/]?"");
        for (String s : data) {
            final StringTokenizer st = new StringTokenizer(s, ""|}"", true);
            while (st.hasMoreTokens()) {
                final String token = st.nextToken().trim();
                if (token.equals(""|"")) {
                    continue;
                }
                final Terminator terminator = st.hasMoreTokens() ? Terminator.NEWCOL : Terminator.NEWLINE;
                final Matcher m = p.matcher(token);
                final boolean found = m.find();
                if (found == false) {
                    addInternal(token, terminator);
                    continue;
                }
                int lastStart = 0;
                int end = 0;
                do {
                    final int start = m.start();
                    if (start > lastStart) {
                        addInternal(token.substring(lastStart, start), Terminator.NEWCOL);
                    }
                    end = m.end();
                    final Terminator t = end == token.length() ? terminator : Terminator.NEWCOL;
                    addInternal(token.substring(start, end), t);
                    lastStart = end;
                } while (m.find());
                if (end < token.length()) {
                    addInternal(token.substring(end), terminator);
                }
            }
        }
    }","    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fileChooser = new JFileChooser();
        ExampleFileFilter filter = new ExampleFileFilter(new String[] { ""qc"" }, ""quantum circuits"");
        fileChooser.addChoosableFileFilter(filter);
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            ObjectOutputStream output = null;
            try {
                output = new ObjectOutputStream(new FileOutputStream(file));
                try {
                    int[] size = { xRegister.size, yRegister.size };
                    output.writeObject(size);
                    output.writeObject(circuitPanel.gates);
                    output.flush();
                } catch (EOFException eof) {
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                try {
                    if (output != null) output.close();
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            }
        }
    }",0,0
"    public static String uploadOrDeleteMediaOrTemplates(String action, String object, String numElements, HttpServletRequest req, HttpSession session) {
        FTPClient ftp = new FTPClient();
        CofaxToolsUser user = (CofaxToolsUser) session.getAttribute(""user"");
        StringBuffer links = new StringBuffer();
        StringBuffer folders = new StringBuffer();
        String folder = """";
        String server = """";
        String login = """";
        String password = """";
        String fileTransferFolder = CofaxToolsServlet.fileTransferFolder;
        String liveFolder = """";
        ArrayList servers = new ArrayList();
        StringBuffer message = new StringBuffer();
        message.append(""Status:<BR>"");
        if (action.equals(""Upload"")) {
            server = (String) user.workingPubConfigElementsHash.get(""TESTFTPSERVER"");
            login = (String) user.workingPubConfigElementsHash.get(""TESTFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""TESTFTPPASSWORD"");
            if (object.equals(""Media"")) {
                folder = (String) user.workingPubConfigElementsHash.get(""TESTIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                folder = (String) user.workingPubConfigElementsHash.get(""TESTTEMPLATEFOLDER"");
            }
        }
        if (action.equals(""Delete"")) {
            login = (String) user.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (object.equals(""Media"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                folder = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                folder = (String) user.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
        }
        ArrayList al = new ArrayList();
        int numElement = Integer.parseInt(numElements);
        for (int i = 0; i < numElement; i++) {
            String key = String.valueOf(i);
            String file = req.getParameter(key);
            if (file != null) {
                al.add(file);
            }
        }
        if (action.equals(""Upload"")) {
            try {
                int reply;
                ftp.connect(server);
                CofaxToolsUtil.log(ftp.getReplyString());
                reply = ftp.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftp.disconnect();
                    return (""FTP server refused connection."");
                } else {
                    ftp.login(login, password);
                }
                for (int ii = 0; ii < al.size(); ii++) {
                    String fileName = (String) al.get(ii);
                    String folderName = stripName(fileName);
                    fileName = stripPath(fileName);
                    try {
                        ftp.changeWorkingDirectory(folderName);
                        OutputStream output;
                        output = new FileOutputStream(fileTransferFolder + fileName);
                        ftp.retrieveFile(fileName, output);
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates retrieving file: "" + ftp.getReplyString());
                        message.append(""Retrieving file "" + fileName + "" to local disk.<BR>"");
                        output.close();
                    } catch (java.io.IOException e) {
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot write file"" + e);
                    }
                }
                ftp.logout();
                ftp.disconnect();
            } catch (IOException e) {
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                return (""Could not connect to server: "" + e);
            }
            login = (String) user.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (object.equals(""Media"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                liveFolder = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                liveFolder = (String) user.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
            servers = splitServers(server);
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: server refused connection: "" + connectServer);
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates FTP server refused connection."");
                    } else {
                        ftp.login(login, password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        CofaxToolsUtil.log(""Original String "" + fileName);
                        CofaxToolsUtil.log(""Search for "" + folder);
                        CofaxToolsUtil.log(""Replace "" + liveFolder);
                        String folderName = CofaxToolsUtil.replace(fileName, folder, liveFolder);
                        CofaxToolsUtil.log(""Results: "" + folderName);
                        folderName = stripName(folderName);
                        fileName = stripPath(fileName);
                        try {
                            InputStream io;
                            io = new FileInputStream(fileTransferFolder + fileName);
                            CofaxToolsUtil.log(""Reading file : "" + fileTransferFolder + fileName);
                            boolean directoryExists = ftp.changeWorkingDirectory(folderName);
                            if (directoryExists == false) {
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates directory: "" + folderName + "" does not exist. Attempting to create."");
                                message.append(""Directory: "" + folderName + "" does not exist. Attempting to create.<BR>"");
                                boolean canCreatDir = ftp.makeDirectory(folderName);
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + canCreatDir);
                                message.append(""Results: "" + canCreatDir + ""<BR>"");
                            }
                            boolean isStored = ftp.storeFile(fileName, io);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates storing file: "" + fileName + "" in directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + isStored + "" : "" + ftp.getReplyString());
                            message.append(""Storing file "" + fileName + ""<BR> to location "" + folderName + ""<BR> on server "" + connectServer + "".<BR>"");
                        } catch (java.io.IOException e) {
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                            return (""Cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                        }
                    }
                    ftp.logout();
                    ftp.disconnect();
                    message.append(""Success<BR><BR>"");
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (object.equals(""Templates"")) {
                String cSServers = (String) user.workingPubConfigElementsHash.get(""CACHESERVERS"");
                System.out.println(""getting cache servers: "" + cSServers);
                ArrayList cServers = splitServers(cSServers);
                for (int iiii = 0; iiii < cServers.size(); iiii++) {
                    String thisClearCacheServer = (String) cServers.get(iiii);
                    try {
                        String connectServer = (String) cServers.get(iiii);
                        for (int iiiii = 0; iiiii < al.size(); iiiii++) {
                            String thisFilePath = (String) al.get(iiiii);
                            String folderNameFileName = CofaxToolsUtil.replace(thisFilePath, folder, liveFolder);
                            String URLToClear = CofaxToolsServlet.removeTemplateCache + folderNameFileName;
                            CofaxToolsClearCache clear = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheServer + URLToClear);
                            clear.start();
                            message.append(""Clearing Cache for "" + folderNameFileName + ""<BR>"");
                            message.append(""on server "" + thisClearCacheServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: could not connect to server clearing cache "" + e);
                    }
                }
            }
            for (int i = 0; i < al.size(); i++) {
                String fileName = (String) al.get(i);
                String folderName = stripName(fileName);
                fileName = stripPath(fileName);
                File file = new File(fileTransferFolder + fileName);
                boolean delete = file.delete();
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file from local drive: "" + fileTransferFolder + fileName);
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + delete);
            }
        }
        servers = splitServers(server);
        if (action.equals(""Delete"")) {
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: FTP server refused connection: "" + connectServer);
                        return (""FTP server refused connection."");
                    } else {
                        ftp.login(login, password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        String folderName = stripName(fileName);
                        fileName = stripPath(fileName);
                        try {
                            ftp.changeWorkingDirectory(folderName);
                            ftp.deleteFile(fileName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file: "" + fileName + "" from directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + ftp.getReplyString());
                            message.append(""Deleting file "" + fileName + ""<BR>"");
                            message.append(""from folder "" + folderName + ""<BR>"");
                            message.append(""on server "" + connectServer + ""<BR>"");
                        } catch (java.io.IOException e) {
                            return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot delete file"" + fileName);
                        }
                    }
                    message.append(""Success<BR><BR>"");
                    ftp.logout();
                    ftp.disconnect();
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (object.equals(""Templates"")) {
                String cISServers = (String) user.workingPubConfigElementsHash.get(""CACHESERVERS"");
                ArrayList cIServers = splitServers(cISServers);
                for (int iiiiii = 0; iiiiii < cIServers.size(); iiiiii++) {
                    String thisClearCacheIServer = (String) cIServers.get(iiiiii);
                    try {
                        String connectServer = (String) cIServers.get(iiiiii);
                        for (int iiiiiii = 0; iiiiiii < al.size(); iiiiiii++) {
                            String thisFilePathI = (String) al.get(iiiiiii);
                            String URLToClearI = CofaxToolsServlet.removeTemplateCache + thisFilePathI;
                            CofaxToolsClearCache clearI = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheIServer + URLToClearI);
                            clearI.start();
                            message.append(""Clearing Cache for "" + thisFilePathI + ""<BR>"");
                            message.append(""on server "" + thisClearCacheIServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR clearing cache "" + e);
                    }
                }
            }
        }
        return (message.toString());
    }","    void output(OutputStream out) throws IOException {
        CRC32 crc = new CRC32();
        byte[] dataBytes = data.toByteArray();
        byte[] lenBytes = intToBytes(dataBytes.length);
        out.write(lenBytes);
        for (int i = 0; i < 4; i++) {
            crc.update(type.charAt(i));
            out.write(type.charAt(i));
        }
        crc.update(dataBytes);
        out.write(dataBytes);
        out.write(intToBytes((int) crc.getValue()));
    }",0,0
"    public void rescale() {
        double[][] sim = new double[numSeqs][numSeqs];
        for (int i = 0; i < numSeqs; i++) {
            for (int j = i; j < numSeqs; j++) {
                if (this.getDistance(i, j) > 0) {
                    sim[i][j] = (this.getDistance(i, j) - kMin) * 2 / (kMax - kMin);
                }
                sim[j][i] = sim[i][j];
            }
        }
        setDistances(sim);
        System.out.println(""K rescaled"");
    }","    public static void openDefaultPDFViewer(String path) {
        if (Desktop.isDesktopSupported()) {
            File file = new File(path);
            if (file.exists()) {
                try {
                    Desktop.getDesktop().open(file);
                } catch (IOException e) {
                    logger.log(Level.SEVERE, LanguageResource.getLanguage().getString(""error.no_pdf_viewer_installed""), e);
                    LoggingDesktopController.printError(LanguageResource.getLanguage().getString(""error.no_pdf_viewer_installed""));
                }
            } else {
                logger.severe(LanguageResource.getLanguage().getString(""error.no_file.exists""));
                LoggingDesktopController.printError(LanguageResource.getLanguage().getString(""error.no_file.exists""));
            }
        } else {
            logger.severe(LanguageResource.getLanguage().getString(""error.no_desktop_support""));
            LoggingDesktopController.printError(LanguageResource.getLanguage().getString(""error.no_desktop_support""));
        }
    }",0,0
"    private void classButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        if (m_fc3.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            setJarText(m_fc3.getSelectedFile().getPath());
        }
        jarText.requestFocus();
    }","    public static boolean update(String user, String pass, String channelString, String globalIP) {
        FTPClient ftp = new FTPClient();
        int reply;
        try {
            ftp.connect(""witna.co.uk"", 21);
            ftp.login(user, pass);
            reply = ftp.getReplyCode();
            if (FTPReply.isPositiveCompletion(reply)) {
                updateChannelList(ftp, channelString);
                if (!ipUpdated) {
                    ipUpdated = updateMasterChannelIP(ftp, globalIP);
                }
                ftp.disconnect();
                return true;
            } else {
                ftp.disconnect();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return false;
    }",0,0
"    public static void browse(String url) throws IOException, SecurityException, NoSuchMethodException, ClassNotFoundException, IllegalArgumentException, IllegalAccessException, InvocationTargetException, InterruptedException {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new java.net.URI(url));
                    return;
                } catch (java.io.IOException e) {
                    e.printStackTrace();
                } catch (java.net.URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        }
        String osName = System.getProperty(""os.name"");
        if (osName.startsWith(""Windows"")) {
            Runtime.getRuntime().exec(""rundll32 url.dll,FileProtocolHandler "" + url);
        } else if (osName.startsWith(""Mac OS"")) {
            Class<?> fileMgr = Class.forName(""com.apple.eio.FileManager"");
            java.lang.reflect.Method openURL = fileMgr.getDeclaredMethod(""openURL"", new Class[] { String.class });
            openURL.invoke(null, new Object[] { url });
        } else {
            java.util.Map<String, String> env = System.getenv();
            if (env.get(""BROWSER"") != null) {
                Runtime.getRuntime().exec(env.get(""BROWSER"") + "" "" + url);
                return;
            }
            String[] browsers = { ""firefox"", ""iceweasel"", ""chrome"", ""opera"", ""konqueror"", ""epiphany"", ""mozilla"", ""netscape"" };
            String browser = null;
            for (int count = 0; count < browsers.length && browser == null; count++) if (Runtime.getRuntime().exec(new String[] { ""which"", browsers[count] }).waitFor() == 0) {
                browser = browsers[count];
                break;
            }
            if (browser == null) throw new RuntimeException(""couldn't find any browser...""); else Runtime.getRuntime().exec(new String[] { browser, url });
        }
    }","    private String processBrTags(String message, String contentType) {
        StringBuffer processedMessage;
        if (contentType != null && contentType.equals(HTML_CONTENT_TYPE)) {
            processedMessage = new StringBuffer();
            Pattern p = Pattern.compile(""<\\s*[bB][rR](.*?)(/\\s*>)"");
            Matcher m = p.matcher(message);
            int slash_index;
            int start = 0;
            while (m.find()) {
                processedMessage.append(message.substring(start, m.start()));
                slash_index = m.group().lastIndexOf(""/"");
                processedMessage.append(m.group().substring(0, slash_index));
                processedMessage.append(m.group().substring(slash_index + 1));
                start = m.end();
            }
            processedMessage.append(message.substring(start));
        } else {
            processedMessage = new StringBuffer(message);
        }
        return processedMessage.toString();
    }",0,0
"    public static double[][] transpose(double[][] a) {
        int rows = a.length;
        int cols = a[0].length;
        double[][] res = new double[cols][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                res[j][i] = a[i][j];
            }
        }
        return res;
    }","    public int fib(int n) {
        if (n == 0 || n == 1) return 1; else return fib(n - 1) + fib(n - 2);
    }",0,0
"    public static double[][] Kendall(double[][] X) {
        double[][] output = new double[X.length][X.length];
        try {
            for (int i = 0; i < X.length; i++) {
                output[i][i] = 1.0;
                for (int j = 0; j < i; j++) {
                    output[i][j] = GeneUtils.kendalltau(X[i], X[j]);
                    output[j][i] = output[i][j];
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Statistic.class.getName()).log(Level.SEVERE, null, ex);
        }
        return output;
    }","    public static void processTokens(StyledDocument doc, HighlightingStyleLoader styler, String word) {
        String delim = ""[\\W]"";
        Pattern p = Pattern.compile(delim);
        Matcher m = p.matcher(word);
        int start = 0;
        while (m.find(start)) {
            start = m.start();
            int end = m.end() - start;
            if (m.group().trim().length() > 0) {
                Style applyStyle = styler.getStyle(m.group());
                if (applyStyle != null) {
                    doc.setCharacterAttributes(start, end, applyStyle, true);
                }
            }
            start = m.end();
        }
        String[] t = word.split(delim);
        int startpt = 0;
        for (String tkn : t) {
            if (tkn.length() < 1) continue;
            startpt = word.indexOf(tkn, startpt);
            int endpt_orig = startpt + tkn.length();
            int endpt = tkn.length();
            Style applyStyle = styler.getStyle(word.substring(startpt, endpt_orig));
            if (applyStyle != null) {
                doc.setCharacterAttributes(startpt, endpt, applyStyle, true);
            } else {
                doc.setCharacterAttributes(startpt, endpt, defaultStyle, true);
            }
            startpt = endpt_orig;
        }
    }",0,0
"    public int exists(String fileToCheck) throws IOException {
        FTPClient ftp = new FTPClient();
        int found = 0;
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, this.endpointPort);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.enterLocalPassiveMode();
            if (ftp.listNames(fileToCheck) != null) {
                found = 1;
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return found;
    }","    public void exportListDialog() {
        JFileChooser oracle = new JFileChooser();
        String[] vars = { "".list"", "".LIST"", ""List"" };
        oracle.addChoosableFileFilter(new scribeFilter(vars));
        oracle.setAcceptAllFileFilterUsed(false);
        if (oracle.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            temp = oracle.getSelectedFile().getPath();
            lincoln.exportList(temp);
        }
    }",0,0
"    public static void main(String[] args) {
        FTPClient client = new FTPClient();
        FileInputStream fis = null;
        try {
            client.connect(""192.168.1.10"");
            client.login(""a"", ""123456"");
            String filename = ""D:\\DHTH5CLT\\HK3\\Ung dung phan tan\\FTP_JAVA\\FTP_DETAI\\FTP\\src\\DemoFTP\\filename\\5s.txt"";
            fis = new FileInputStream(filename);
            client.storeFile(filename, fis);
            client.logout();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                client.disconnect();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] insert(T list[], T obj, int index) {
        if (list != null) {
            int ndx = ((index > list.length) || (index < 0)) ? list.length : index;
            Class type = list.getClass().getComponentType();
            int size = (list.length > ndx) ? (list.length + 1) : (ndx + 1);
            T array[] = (T[]) Array.newInstance(type, size);
            if (ndx > 0) {
                int maxLen = (list.length >= ndx) ? ndx : list.length;
                System.arraycopy(list, 0, array, 0, maxLen);
            }
            array[ndx] = obj;
            if (ndx < list.length) {
                int maxLen = list.length - ndx;
                System.arraycopy(list, ndx, array, ndx + 1, maxLen);
            }
            return array;
        } else {
            return null;
        }
    }",0,0
"    public ComplexMatrix hermitianAdjoint() {
        final double arrayRe[][] = new double[numCols][numRows];
        final double arrayIm[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            arrayRe[0][i] = matrixRe[i][0];
            arrayIm[0][i] = -matrixIm[i][0];
            for (j = 1; j < numCols; j++) {
                arrayRe[j][i] = matrixRe[i][j];
                arrayIm[j][i] = -matrixIm[i][j];
            }
        }
        return new ComplexSquareMatrix(arrayRe, arrayIm);
    }","    public static long getCheckSum(String chaine) {
        CRC32 crc32 = new CRC32();
        crc32.update(chaine.getBytes());
        return crc32.getValue();
    }",0,0
"    public void set(Object obj, int i, Object newValue) throws InvocationTargetException, IllegalAccessException {
        if (isIndexed()) {
            IndexedPropertyDescriptor id = (IndexedPropertyDescriptor) myPD;
            growArrayToSize(obj, id.getIndexedPropertyType(), i);
            id.getIndexedWriteMethod().invoke(obj, new Object[] { new Integer(i), newValue });
        } else {
            Object array = get(obj);
            if (array == null || Array.getLength(array) <= i) {
                Class componentType = getType().getComponentType();
                Object newArray = Array.newInstance(componentType, i + 1);
                if (array != null) {
                    System.arraycopy(array, 0, newArray, 0, Array.getLength(array));
                }
                array = newArray;
            }
            Array.set(array, i, newValue);
            set(obj, array);
        }
    }","    public ContingencyTable(double[][] observed) {
        try {
            this.observed = observed;
            this.numberRow = observed.length;
            this.numberCol = observed[0].length;
            this.rowSumObserved = new int[this.numberRow];
            this.colSumObserved = new int[this.numberCol];
            double[][] currentColumnArray = new double[this.numberCol][this.numberRow];
            for (int i = 0; i < this.numberRow; i++) {
                rowSumObserved[i] = (int) AnalysisUtility.sum(observed[i]);
                for (int j = 0; j < this.numberCol; j++) {
                    currentColumnArray[j][i] = observed[i][j];
                    this.grandTotal += observed[i][j];
                }
            }
            for (int j = 0; j < this.numberCol; j++) {
                colSumObserved[j] = (int) AnalysisUtility.sum(currentColumnArray[j]);
            }
        } catch (DataIsEmptyException e) {
        } catch (NullPointerException e) {
        }
    }",0,0
"    public static <T> T[] appendToArrayBegining(T[] array, T element, T... elements) {
        Class<?> componentType = array.getClass().getComponentType();
        Object newArray = Array.newInstance(componentType, array.length + 1 + elements.length);
        Array.set(newArray, 0, element);
        if (elements.length > 0) {
            System.arraycopy(elements, 0, newArray, 1, elements.length);
            System.arraycopy(array, 0, newArray, elements.length, array.length);
        } else {
            System.arraycopy(array, 0, newArray, 1, array.length);
        }
        return (T[]) newArray;
    }","    String parseText(String text, String patternName, Hashtable<String, String> patterns) throws JDOMException, IOException {
        String docString = ""<X>"" + text + ""</X>"";
        Element e = org.exmaralda.common.jdomutilities.IOUtilities.readDocumentFromString(docString).getRootElement();
        String returnText = """";
        for (Object o : e.getContent()) {
            if (!(o instanceof Text)) {
                returnText += org.exmaralda.common.jdomutilities.IOUtilities.elementToString((Element) o);
                continue;
            }
            Pattern p = Pattern.compile(patterns.get(patternName));
            String thisText = ((Text) o).getText();
            Matcher m = p.matcher(thisText);
            int fromWhere = 0;
            while (m.find(fromWhere)) {
                int i1 = m.start();
                int i2 = m.end();
                thisText = thisText.substring(0, i1) + ""<"" + patternName + "">"" + thisText.substring(i1, i2) + ""</"" + patternName + "">"" + thisText.substring(i2);
                m = p.matcher(thisText);
                fromWhere = i2 + 2 * patternName.length() + 5;
            }
            returnText += thisText;
        }
        return returnText;
    }",0,0
"    public void connect(RescueMap rm, int uniformity, boolean nooneway, Random rand) {
        int nodes = rm.getNodeCount();
        distances = new int[nodes][nodes];
        for (int i = 0; i < nodes; i++) for (int j = 0; j < i; j++) {
            int x = rm.getX(i) - rm.getX(j);
            int y = rm.getY(i) - rm.getY(j);
            distances[i][j] = (int) Math.sqrt(x * x + y * y);
            distances[j][i] = distances[i][j];
        }
        usedCount = new int[nodes][nodes];
        System.out.print(""Simulating road use."");
        System.out.flush();
        int steps = RUNS / 20;
        int[] prevs = new int[nodes];
        int[] dists = new int[nodes];
        for (int i = 0; i < RUNS; i++) {
            int[] picked = pickNodes(rm, rand);
            runPath(prevs, dists, rm, picked[0], picked[1]);
            if (i % steps == 0) {
                System.out.print(""."");
                System.out.flush();
            }
        }
        System.out.println(""done."");
        ArrayList l = new ArrayList(nodes * 5);
        for (int i = 0; i < nodes; i++) for (int j = 0; j < nodes; j++) if (rm.getRoad(i, j) > 0) {
            l.add(new Integer(usedCount[i][j]));
        }
        Collections.sort(l);
        int index1 = (int) (l.size() * (1 - THREELANE / 100.0));
        int v1 = ((Integer) (l.get(index1))).intValue();
        int v2 = ((Integer) (l.get(index1 - (int) (l.size() * TWOLANE / 100.0)))).intValue();
        for (int i = 0; i < nodes; i++) for (int j = 0; j < nodes; j++) {
            if (usedCount[i][j] >= v1 || (nooneway && usedCount[j][i] >= v1)) {
                rm.setRoad(i, j, 3);
                if (nooneway) rm.setRoad(j, i, 3);
            } else if (usedCount[i][j] >= v2 || (nooneway && usedCount[j][i] >= v2)) {
                rm.setRoad(i, j, 2);
                if (nooneway) rm.setRoad(j, i, 2);
            }
        }
    }","    public void addRole(String role) {
        int arrayLength = Array.getLength(this.roles);
        String[] newArray = (String[]) Array.newInstance(this.roles.getClass().getComponentType(), arrayLength + 1);
        System.arraycopy(this.roles, 0, newArray, 0, arrayLength);
        newArray[arrayLength] = role;
        this.roles = newArray;
    }",0,0
"    public int fib(int n) {
        if (n == 0 || n == 1) return 1; else return fib(n - 1) + fib(n - 2);
    }","
    public static int[] findLastRegExp2(String input, String regExp) throws java.util.regex.PatternSyntaxException {
        int[] out = new int[2];
        out[0] = -1;
        Pattern lbPattern = Pattern.compile(regExp);
        Matcher matcher = lbPattern.matcher(input);
        while (matcher.find()) {
            out[0] = matcher.start();
            out[1] = matcher.end();
        }
        return out;",0,0
"    protected final void showMsg(final String msg, final boolean quit) {
        final JPanel p = new JPanel();
        p.setLayout(new GridBagLayout());
        final GridBagConstraints c = new GridBagConstraints();
        c.insets = new Insets(10, 10, 10, 10);
        c.gridx = 0;
        c.gridy = 0;
        c.fill = GridBagConstraints.BOTH;
        final JImage im = new JImage(new ImageIcon(this.getClass().getResource(""error.png"")));
        final JLabel l = new JLabel(""Une erreur est survenue"");
        l.setFont(l.getFont().deriveFont(Font.BOLD));
        final JLabel lError = new JLabel(msg);
        final JTextArea textArea = new JTextArea();
        textArea.setFont(textArea.getFont().deriveFont(11f));
        c.gridheight = 3;
        p.add(im, c);
        c.insets = new Insets(2, 4, 2, 4);
        c.gridheight = 1;
        c.gridx++;
        c.weightx = 1;
        c.gridwidth = 2;
        p.add(l, c);
        c.gridy++;
        p.add(lError, c);
        c.gridy++;
        p.add(new JLabel(""Il s'agit probablement d'une mauvaise configuration ou installation du logiciel.""), c);
        c.gridx = 0;
        c.gridwidth = 3;
        c.gridy++;
        c.weighty = 0;
        c.gridwidth = 1;
        c.gridx = 1;
        c.gridy++;
        c.fill = GridBagConstraints.NONE;
        c.anchor = GridBagConstraints.EAST;
        final Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        final boolean browseSupported = desktop != null && desktop.isSupported(Action.BROWSE);
        if (ForumURL != null) {
            final javax.swing.Action communityAction;
            if (browseSupported) {
                communityAction = new AbstractAction(""Consulter le forum"") {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        try {
                            desktop.browse(new URI(ForumURL));
                        } catch (Exception e1) {
                            e1.printStackTrace();
                        }
                    }
                };
            } else {
                communityAction = new AbstractAction(""Copier l'adresse du forum"") {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        copyToClipboard(ForumURL);
                    }
                };
            }
            p.add(new JButton(communityAction), c);
        }
        c.weightx = 0;
        c.gridx++;
        final javax.swing.Action supportAction;
        if (browseSupported) supportAction = new AbstractAction(""Contacter l'assistance"") {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    desktop.browse(URI.create(ILM_CONTACT));
                } catch (Exception e1) {
                    e1.printStackTrace();
                }
            }
        }; else supportAction = new AbstractAction(""Copier l'adresse de l'assistance"") {

            @Override
            public void actionPerformed(ActionEvent e) {
                copyToClipboard(ILM_CONTACT);
            }
        };
        p.add(new JButton(supportAction), c);
        c.gridy++;
        c.gridx = 0;
        c.gridwidth = 3;
        c.fill = GridBagConstraints.BOTH;
        c.insets = new Insets(0, 0, 0, 0);
        p.add(new JSeparator(), c);
        c.gridx = 0;
        c.gridwidth = 3;
        c.gridy++;
        c.insets = new Insets(2, 4, 2, 4);
        p.add(new JLabel(""Détails de l'erreur:""), c);
        c.insets = new Insets(0, 0, 0, 0);
        c.gridy++;
        String message = this.getCause() == null ? null : this.getCause().getMessage();
        if (message == null) {
            message = msg;
        } else {
            message = msg + ""\n\n"" + message;
        }
        message += ""\n"";
        message += getTrace();
        textArea.setText(message);
        textArea.setEditable(false);
        JScrollPane scroll = new JScrollPane(textArea);
        scroll.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scroll.getViewport().setMinimumSize(new Dimension(200, 300));
        c.weighty = 1;
        c.gridwidth = 3;
        c.gridx = 0;
        c.gridy++;
        p.add(scroll, c);
        c.gridy++;
        c.fill = GridBagConstraints.NONE;
        c.weighty = 0;
        c.insets = new Insets(2, 4, 2, 4);
        final JButton buttonClose = new JButton(""Fermer"");
        p.add(buttonClose, c);
        final Window window = this.comp == null ? null : SwingUtilities.getWindowAncestor(this.comp);
        final JDialog f;
        if (window instanceof Frame) {
            f = new JDialog((Frame) window, ""Erreur"", true);
        } else {
            f = new JDialog((Dialog) window, ""Erreur"", true);
        }
        f.setContentPane(p);
        f.pack();
        f.setSize(580, 680);
        f.setMinimumSize(new Dimension(380, 380));
        f.setLocationRelativeTo(this.comp);
        final ActionListener al = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (quit) {
                    System.exit(1);
                } else {
                    f.dispose();
                }
            }
        };
        buttonClose.addActionListener(al);
        f.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                al.actionPerformed(null);
            }
        });
        f.setVisible(true);
    }","        public static void transpose(double[][] in, double[][] out) {
            if (D3.isIdentity(in)) {
                if (in != out) D3.setIdentity(out);
                return;
            }
            double[][] matIn = D3.getMatrixPool().borrowObject();
            try {
                double[][] copyIn;
                if (in == out) {
                    D3.copyMatrix(in, matIn);
                    copyIn = matIn;
                } else {
                    copyIn = in;
                }
                for (int rowI = 0; rowI < 3; rowI++) {
                    for (int colI = 0; colI < 3; colI++) {
                        out[colI][rowI] = copyIn[rowI][colI];
                    }
                }
            } finally {
                D3.getMatrixPool().returnObject(matIn);
            }
        }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static void main(String[] args) throws Exception {
        boolean external = false;
        if (args.length == 1) {
            if (args[0].equals(""-h"")) {
                printZMERTUsage(args.length, true);
                System.exit(2);
            } else {
                external = false;
            }
        } else if (args.length == 3) {
            external = true;
        } else {
            printZMERTUsage(args.length, false);
            System.exit(1);
        }
        if (!external) {
            MertCore myMert = new MertCore(args[0]);
            myMert.run_MERT();
            myMert.finish();
        } else {
            int maxMem = Integer.parseInt(args[1]);
            String configFileName = args[2];
            String stateFileName = ""ZMERT.temp.state"";
            String cp = System.getProperty(""java.class.path"");
            boolean done = false;
            int iteration = 0;
            while (!done) {
                ++iteration;
                Runtime rt = Runtime.getRuntime();
                Process p = rt.exec(""java -Xmx"" + maxMem + ""m -cp "" + cp + "" joshua.zmert.MertCore "" + configFileName + "" "" + stateFileName + "" "" + iteration);
                BufferedReader br_i = new BufferedReader(new InputStreamReader(p.getInputStream()));
                BufferedReader br_e = new BufferedReader(new InputStreamReader(p.getErrorStream()));
                String dummy_line = null;
                while ((dummy_line = br_i.readLine()) != null) {
                    System.out.println(dummy_line);
                }
                while ((dummy_line = br_e.readLine()) != null) {
                    System.out.println(dummy_line);
                }
                int status = p.waitFor();
                if (status == 90) {
                    done = true;
                } else if (status == 91) {
                    done = false;
                } else {
                    System.out.println(""Z-MERT exiting prematurely (MertCore returned "" + status + "")..."");
                    break;
                }
            }
        }
        System.exit(0);
    }",0,0
"    public TabelaVerdade(String tipoDeExercicio, String ordem, String ordem2, String[][] valores, String preposicao) {
        super(Usuario.statusDoExercicio(tipoDeExercicio, InterfaceDados.obtemNumeroDoExercicioCorrente()));
        pSuperior = new JPanel(new GridLayout(2, 1));
        pTitulo = new JPanel(new FlowLayout(FlowLayout.CENTER));
        titulo = new JLabel(tipoDeExercicio);
        titulo.setFont(new Font(""Arial"", 0, 25));
        titulo.setForeground(new Color(0, 0, 128));
        pTitulo.add(titulo);
        pSuperior.add(pTitulo);
        preposicao = alteraString(preposicao);
        valores = alteraMatrizDeStrings(valores);
        pEnun = new JPanel(new GridLayout(2, 1));
        enunciado1 = new JLabel(this.retornaEspacoAjustado(""    "") + ordem);
        enunciado1.setFont(new Font(""Arial"", 1, 14));
        enunciado1.setForeground(new Color(0, 0, 128));
        pEnun.add(enunciado1);
        pEnun2 = new JPanel(new FlowLayout(FlowLayout.LEFT));
        enunciado2 = new JLabel(this.retornaEspacoAjustado(""    "") + ordem2);
        enunciado2.setFont(new Font(""Arial"", 1, 14));
        enunciado2.setForeground(new Color(0, 0, 128));
        pEnun2.add(enunciado2);
        enunciado2 = new JLabel(preposicao);
        enunciado2.setFont(new Font(""Times"", 1, 16));
        enunciado2.setForeground(new Color(0, 0, 128));
        pEnun2.add(enunciado2);
        pEnun.add(pEnun2);
        pSuperior.add(pEnun);
        getContentPane().add(""North"", pSuperior);
        pOeste = new JPanel(new FlowLayout(FlowLayout.LEFT));
        pOeste.add(new JLabel(this.retornaEspacoAjustado(""  "")));
        getContentPane().add(""East"", pOeste);
        pOeste.add(new JLabel(this.retornaEspacoAjustado(""    "")));
        getContentPane().add(""West"", pOeste);
        pCentral = new JPanel(new GridLayout(1, valores[0].length + 1));
        pColuna = new JPanel(new GridLayout(valores.length, 1));
        String[][] valor = new String[valores[1].length][valores.length];
        for (int i = 0; i < valor.length; i++) for (int j = 0; j < valor[i].length; j++) {
            valor[i][j] = valores[j][i];
        }
        int total = 0;
        for (int i = 0; i < valor.length; i++) {
            if (valor[i][1].equals(""nada"")) total++;
        }
        preencher = new JTextField[total + 1][valor[1].length - 1];
        resposta = new String[total + 1][valor[1].length - 1];
        int aux = 0;
        for (int i = 0; i <= valor.length; i++) {
            pColuna = new JPanel(new GridLayout(valor[1].length, 1));
            for (int j = 0; j < valor[1].length; j++) {
                if (i == valor.length) {
                    if (j == 0) {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        JLabel prep = new JLabel(preposicao);
                        prep.setFont(new Font(""Times"", 0, 11));
                        prep.setForeground(new Color(0, 0, 128));
                        pAux.add(prep);
                    } else {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        preencher[total][j - 1] = new JTextField("""", 3);
                        preencher[total][j - 1].setDocument(new DefinePadraoDoTexto(1));
                        preencher[total][j - 1].addKeyListener(this);
                        pAux.add(preencher[total][j - 1]);
                    }
                } else {
                    if ((valor[i][j]).equals(""nada"")) {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        preencher[aux][j - 1] = new JTextField("""", 3);
                        preencher[aux][j - 1].setDocument(new DefinePadraoDoTexto(1));
                        preencher[aux][j - 1].addKeyListener(this);
                        pAux.add(preencher[aux][j - 1]);
                        if (j == valor[i].length - 1) aux++;
                    } else {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        JLabel vals = new JLabel(valor[i][j]);
                        if (j == 0) {
                            vals.setFont(new Font(""Times"", 0, 14));
                            vals.setForeground(new Color(0, 0, 128));
                        }
                        pAux.add(vals);
                    }
                }
                pColuna.add(pAux);
            }
            pCentral.add(pColuna);
        }
        getContentPane().add(""Center"", pCentral);
    }","    public FormatGetter(String format, List<String> colNames) {
        Pattern p = Pattern.compile(""%\\{([^}]+)\\}"");
        pieces = new ArrayList<ColumnGetter>();
        Matcher m = p.matcher(format);
        int end = 0;
        while (m.find()) {
            if (m.start() > end) pieces.add(new ConstantGetter(format.substring(end, m.start())));
            int mg1 = colNames.indexOf(m.group(1));
            if (mg1 < 0) throw new DataException(String.format(""Column not found: %s"", m.group(1)));
            pieces.add(new CleanGetter(mg1));
            end = m.end();
        }
        if (end < format.length()) pieces.add(new ConstantGetter(format.substring(end)));
    }",0,0
"    public static void loadHelpPage(String key) {
        try {
            java.awt.Desktop d = Desktop.getDesktop();
            if (Desktop.isDesktopSupported()) {
                if (key == null || key.length() == 0) {
                    d.browse(new URI(UIDefaults.PRODUCT_DOCUMENTATION_URL));
                } else {
                    String url = HELP_URL + key;
                    d.browse(new URI(url));
                }
            }
        } catch (Exception e) {
            logger.error(MiscUtils.stackTrace2String(e));
        }
    }","    public ComplexMatrix hermitianAdjoint() {
        final double arrayRe[][] = new double[numCols][numRows];
        final double arrayIm[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            arrayRe[0][i] = matrixRe[i][0];
            arrayIm[0][i] = -matrixIm[i][0];
            for (j = 1; j < numCols; j++) {
                arrayRe[j][i] = matrixRe[i][j];
                arrayIm[j][i] = -matrixIm[i][j];
            }
        }
        return new ComplexMatrix(arrayRe, arrayIm);
    }",0,0
"    public static String markupStringReplacement(RenderRequest req, RenderResponse res, HttpServletRequest httpReq, HttpServletResponse httpRes, DefinableEntity entity, String inputString, String type, Long binderId, Long entryId) {
        String outputString = new String(inputString);
        outputString = outputString.replaceAll(""%20"", "" "");
        outputString = outputString.replaceAll(""%7B"", ""{"");
        outputString = outputString.replaceAll(""%7D"", ""}"");
        int loopDetector;
        try {
            if (httpReq != null && binderId != null) {
                Pattern p1 = Pattern.compile(""(\\{\\{attachmentUrl: ([^}]*)\\}\\})"");
                Matcher m1 = p1.matcher(outputString);
                loopDetector = 0;
                while (m1.find()) {
                    if (loopDetector > 2000) {
                        logger.error(""Error processing markup: "" + inputString);
                        return outputString;
                    }
                    loopDetector++;
                    String url = m1.group(2);
                    String webUrl = WebUrlUtil.getServletRootURL(httpReq) + WebKeys.SERVLET_VIEW_FILE + ""?"";
                    if (entity != null) {
                        FileAttachment fa = entity.getFileAttachment(url.trim());
                        if (fa != null) {
                            webUrl += WebKeys.URL_FILE_ID + ""="" + fa.getId().toString() + ""&amp;"";
                        } else {
                            webUrl += WebKeys.URL_FILE_TITLE + ""="" + url.trim() + ""&amp;"";
                        }
                    } else {
                        webUrl += WebKeys.URL_FILE_TITLE + ""="" + url.trim() + ""&amp;"";
                    }
                    webUrl += WebKeys.URL_FILE_VIEW_TYPE + ""="" + WebKeys.FILE_VIEW_TYPE_ATTACHMENT_FILE + ""&amp;"";
                    webUrl += WebKeys.URL_BINDER_ID + ""="" + binderId.toString() + ""&amp;"";
                    if (entryId != null) {
                        webUrl += WebKeys.URL_ENTRY_ID + ""="" + entryId.toString() + ""&amp;"";
                    }
                    outputString = m1.replaceFirst(webUrl);
                }
            }
            if (type.equals(WebKeys.MARKUP_VIEW) || type.equals(WebKeys.MARKUP_FORM)) {
                Pattern p2 = Pattern.compile(""(\\{\\{attachmentFileId: ([^}]*)\\}\\})"");
                Matcher m2 = p2.matcher(outputString);
                loopDetector = 0;
                while (m2.find()) {
                    if (loopDetector > 2000) {
                        logger.error(""Error processing markup: "" + inputString);
                        return outputString;
                    }
                    loopDetector++;
                    String fileIds = m2.group(2).trim();
                    String webUrl = WebUrlUtil.getServletRootURL(httpReq) + WebKeys.SERVLET_VIEW_FILE + ""?"";
                    webUrl += WebKeys.URL_FILE_VIEW_TYPE + ""="" + WebKeys.FILE_VIEW_TYPE_ATTACHMENT_FILE + ""&amp;"";
                    webUrl += fileIds;
                    outputString = m2.replaceFirst(webUrl);
                    m2 = p2.matcher(outputString);
                }
            }
            if (type.equals(WebKeys.MARKUP_VIEW)) {
                Pattern p2 = Pattern.compile(""(\\{\\{titleUrl: ([^\\}]*)\\}\\})"");
                Matcher m2 = p2.matcher(outputString);
                loopDetector = 0;
                while (m2.find()) {
                    if (loopDetector > 2000) {
                        logger.error(""Error processing markup: "" + inputString);
                        return outputString;
                    }
                    loopDetector++;
                    String urlParts = m2.group(2).trim();
                    String s_binderId = """";
                    Pattern p3 = Pattern.compile(""binderId=([^ ]*)"");
                    Matcher m3 = p3.matcher(urlParts);
                    if (m3.find() && m3.groupCount() >= 1) s_binderId = m3.group(1).trim();
                    String normalizedTitle = """";
                    Pattern p4 = Pattern.compile(""title=([^ ]*)"");
                    Matcher m4 = p4.matcher(urlParts);
                    if (m4.find() && m4.groupCount() >= 1) normalizedTitle = m4.group(1).trim();
                    String title = """";
                    Pattern p5 = Pattern.compile(""text=(.*)$"");
                    Matcher m5 = p5.matcher(urlParts);
                    if (m5.find() && m5.groupCount() >= 1) title = m5.group(1).trim();
                    String titleLink = """";
                    String action = WebKeys.ACTION_VIEW_FOLDER_ENTRY;
                    Map params = new HashMap();
                    params.put(WebKeys.URL_BINDER_ID, new String[] { s_binderId });
                    params.put(WebKeys.URL_NORMALIZED_TITLE, new String[] { normalizedTitle });
                    String webUrl = getPortletUrl(req, res, httpReq, httpRes, action, true, params);
                    titleLink = ""<a href=\"""" + webUrl + ""\"" "";
                    titleLink += ""onClick=\""if (self.ss_openTitleUrl) return self.ss_openTitleUrl(this);\"">"";
                    titleLink += ""<span class=\""ss_title_link\"">"";
                    titleLink += title + ""</span></a>"";
                    titleLink = titleLink.replaceAll(""&"", ""&amp;"");
                    outputString = outputString.substring(0, m2.start(0)) + titleLink + outputString.substring(m2.end(), outputString.length());
                    m2 = p2.matcher(outputString);
                }
            }
            if (binderId != null && (type.equals(WebKeys.MARKUP_VIEW) || type.equals(WebKeys.MARKUP_FILE))) {
                String action = WebKeys.ACTION_VIEW_FOLDER_ENTRY;
                Pattern p3 = Pattern.compile(""(\\[\\[([^\\]]*)\\]\\])"");
                Matcher m3 = p3.matcher(outputString);
                loopDetector = 0;
                while (m3.find()) {
                    if (loopDetector > 2000) {
                        logger.error(""Error processing markup: "" + inputString);
                        return outputString;
                    }
                    loopDetector++;
                    String title = m3.group(2).trim();
                    String normalizedTitle = getNormalizedTitle(title);
                    if (!normalizedTitle.equals("""")) {
                        String titleLink = """";
                        if (type.equals(WebKeys.MARKUP_VIEW)) {
                            Map params = new HashMap();
                            params.put(WebKeys.URL_BINDER_ID, binderId.toString());
                            params.put(WebKeys.URL_NORMALIZED_TITLE, normalizedTitle);
                            String webUrl = getPortletUrl(req, res, httpReq, httpRes, action, true, params);
                            titleLink = ""<a href=\"""" + webUrl + ""\"" "";
                            titleLink += ""onClick=\""if (self.ss_openTitleUrl) return self.ss_openTitleUrl(this);\"">"";
                            titleLink += ""<span class=\""ss_title_link\"">"";
                            titleLink += title + ""</span></a>"";
                        } else {
                            titleLink = ""{{titleUrl: "" + WebKeys.URL_BINDER_ID + ""="" + binderId.toString();
                            titleLink += "" "" + WebKeys.URL_NORMALIZED_TITLE + ""="" + normalizedTitle;
                            titleLink += "" text="" + title + ""}}"";
                        }
                        outputString = outputString.substring(0, m3.start(0)) + titleLink + outputString.substring(m3.end(), outputString.length());
                        m3 = p3.matcher(outputString);
                    }
                }
            }
        } catch (Exception e) {
            logger.error(""Error processing markup: "" + inputString);
            return inputString;
        }
        return outputString;
    }","    private Object createElement(Object father, String childName) {
        Object child = null;
        int arrayIndex = 0;
        String methodName = null;
        String setMethodName = null;
        Method method;
        Method setMethod;
        Class[] parameterTypes = new Class[] {};
        Class[] setParameterTypes = new Class[] {};
        Object[] arguments = new Object[] {};
        Object[] setParameters = new Object[] {};
        Object object = null;
        try {
            Class c = father.getClass();
            if (childName.indexOf(LEFT_BRACKET) != -1) {
                arrayIndex = (new Integer(childName.substring(childName.indexOf(LEFT_BRACKET) + 1, childName.indexOf(RIGHT_BRACKET)))).intValue();
                childName = childName.substring(0, childName.indexOf(LEFT_BRACKET));
            }
            methodName = GETTER_PREFIX.concat(childName);
            method = c.getMethod(methodName, parameterTypes);
            if (method.invoke(father, arguments) == null) {
                try {
                    String classPath = method.getReturnType().getCanonicalName();
                    if (method.getReturnType().isArray()) {
                        classPath = classPath.substring(0, classPath.indexOf(LEFT_BRACKET));
                    }
                    Class classDefinition = Class.forName(classPath);
                    if (method.getReturnType().isArray()) {
                        object = Array.newInstance(classDefinition, arrayIndex + 1);
                        Array.set(object, 0, classDefinition.newInstance());
                    } else {
                        object = classDefinition.newInstance();
                    }
                    setParameters = new Object[] { object };
                    setParameterTypes = new Class[] { method.getReturnType() };
                    setMethodName = SETTER_PREFIX.concat(childName);
                    setMethod = c.getMethod(setMethodName, setParameterTypes);
                    setMethod.invoke(father, setParameters);
                } catch (Exception e) {
                    logger.error(""IFXMessage|createElement("" + father.toString() + "","" + childName + ""): "" + e.getMessage() + ""|"");
                }
            }
            if (method.getReturnType().isArray()) {
                Object array = null;
                Object auxArray = null;
                array = method.invoke(father, arguments);
                try {
                    if (Array.getLength(array) < arrayIndex + 1) {
                        auxArray = Array.newInstance(method.getReturnType().getComponentType(), Array.getLength(array));
                        System.arraycopy(array, 0, auxArray, 0, Array.getLength(array));
                        array = Array.newInstance(method.getReturnType().getComponentType(), arrayIndex + 1);
                        System.arraycopy(auxArray, 0, array, 0, Array.getLength(auxArray));
                        Array.set(array, arrayIndex, method.getReturnType().getComponentType().newInstance());
                        object = array;
                        setParameters = new Object[] { object };
                        setParameterTypes = new Class[] { method.getReturnType() };
                        setMethodName = SETTER_PREFIX.concat(childName);
                        setMethod = c.getMethod(setMethodName, setParameterTypes);
                        setMethod.invoke(father, setParameters);
                    } else {
                        if (Array.get(array, arrayIndex) == null) {
                            Array.set(array, arrayIndex, method.getReturnType().getComponentType().newInstance());
                        }
                    }
                } catch (Exception e) {
                    logger.error(""IFXMessage|createElement("" + father.toString() + "","" + childName + ""): "" + e.getMessage() + ""|"");
                }
                child = Array.get(array, arrayIndex);
            } else {
                child = method.invoke(father, arguments);
            }
        } catch (NoSuchMethodException e) {
            child = null;
        } catch (IllegalAccessException e) {
            child = null;
        } catch (InvocationTargetException e) {
            child = null;
        }
        return child;
    }",0,0
"    private String[] splitContent(String matchexp, String content) {
        int startAt = 0;
        List tempList = new ArrayList();
        Pattern pattern = Pattern.compile(matchexp);
        Matcher matcher = pattern.matcher(content);
        while (matcher.find()) {
            tempList.add(content.substring(startAt, matcher.start()));
            tempList.add(matcher.group());
            startAt = matcher.end();
        }
        tempList.add(content.substring(startAt));
        String[] result = new String[tempList.size()];
        for (int i = 0; i < result.length; i++) {
            result[i] = (String) tempList.get(i);
        }
        return result;
    }","    protected void attachAndRunDemo(final File selectedFile, final File autoStartFile) {
        if (selectedFile.getName().toLowerCase().endsWith("".pdf"")) {
            try {
                final File pdfFile = selectedFile;
                if (pdfFile.exists()) {
                    if (Desktop.isDesktopSupported()) {
                        Desktop.getDesktop().open(pdfFile);
                    } else {
                        System.out.println(""Awt Desktop is not supported!"");
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            config.sidplay2().setLastDirectory(config.sidplay2().getDemos());
            if (diskfileFilter.accept(selectedFile)) {
                getUiEvents().fireEvent(IInsertMedia.class, new IInsertMedia() {

                    @Override
                    public MediaType getMediaType() {
                        return MediaType.DISK;
                    }

                    @Override
                    public File getSelectedMedia() {
                        return selectedFile;
                    }

                    @Override
                    public File getAutostartFile() {
                        return autoStartFile;
                    }

                    @Override
                    public Component getComponent() {
                        return DiskCollection.this;
                    }
                });
            } else {
                getUiEvents().fireEvent(IInsertMedia.class, new IInsertMedia() {

                    @Override
                    public MediaType getMediaType() {
                        return MediaType.TAPE;
                    }

                    @Override
                    public File getSelectedMedia() {
                        return selectedFile;
                    }

                    @Override
                    public File getAutostartFile() {
                        return autoStartFile;
                    }

                    @Override
                    public Component getComponent() {
                        return DiskCollection.this;
                    }
                });
            }
            if (autoStartFile == null) {
                final String command;
                if (diskfileFilter.accept(selectedFile)) {
                    command = ""LOAD\""*\"",8,1\rRUN\r"";
                } else {
                    command = ""LOAD\rRUN\r"";
                }
                getUiEvents().fireEvent(Reset.class, new Reset() {

                    @Override
                    public boolean switchToVideoTab() {
                        return true;
                    }

                    @Override
                    public String getCommand() {
                        return command;
                    }

                    @Override
                    public Component getComponent() {
                        return DiskCollection.this;
                    }
                });
            }
        }
    }",0,0
"    private String replacePlaceholders(String key, String value) throws ObclipseException {
        Pattern fsPattern = Pattern.compile(""\\$\\{[^(\\$\\{)^\\}]*\\}"");
        Matcher matcher = fsPattern.matcher(value);
        String newValue = new String();
        int index = 0;
        while (matcher.find()) {
            int start = matcher.start();
            int end = matcher.end();
            newValue += value.subSequence(index, start);
            String placeholder = value.substring(start + 2, end - 1);
            if (key.equals(placeholder)) {
                throw new ObclipseException(""It is not possible to use a property key inside its poperty value as placeholder! Key: "" + key);
            }
            String placeholderReplaceValue = System.getProperty(placeholder);
            if (placeholderReplaceValue == null) {
                Object object = _properties.get(placeholder);
                if (object != null) {
                    placeholderReplaceValue = (String) object;
                }
            }
            if (placeholderReplaceValue != null) {
                newValue += PropertiesUtil.trimEnclosingQuotes(placeholderReplaceValue);
            } else {
                throw new ObclipseException(""Cannot replace placeholder '"" + placeholder + ""'! This placeholder property key is not defined!"");
            }
            index = end;
        }
        newValue += value.subSequence(index, value.length());
        return newValue;
    }","    public static IDataGrid transpose(IDataGrid grid) {
        IDataGrid gridT;
        double[][] a = GridUtils.grid2Array(grid);
        int rows = a.length;
        int cols = a[0].length;
        if (rows == cols) {
            for (int i = 0; i < a.length; i++) {
                for (int j = i + 1; j < a[0].length; j++) {
                    double tmp = a[i][j];
                    a[i][j] = a[j][i];
                    a[j][i] = tmp;
                }
            }
            gridT = GridUtils.doubleArrayToGrid(a);
        } else {
            double[][] tmp = new double[cols][rows];
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    tmp[j][i] = a[i][j];
                }
            }
            gridT = GridUtils.doubleArrayToGrid(tmp);
        }
        return gridT;
    }",0,0
"                    public void run() {
                        if (my_chooser.showOpenDialog(GhinWebit.this) != JFileChooser.APPROVE_OPTION) return;
                        GhinWebit.this.repaint();
                        my_FChoosen = my_chooser.getSelectedFile();
                        my_OpenFile = my_chooser.getSelectedFile().toString();
                        sourceHTML(my_OpenFile);
                        toolbar.button[9].setVisible(false);
                        toolbar.button[7].setVisible(true);
                        int newIndex1 = top.getChildCount();
                        if (my_FChoosen.getAbsolutePath() != sourceDir.getAbsolutePath()) myTreeModel.insertNodeInto(new DefaultMutableTreeNode(new IconData(ICON_FILES, null, my_FChoosen.toString())), top, newIndex1); else myTreeModel.insertNodeInto(new DefaultMutableTreeNode(new IconData(ICON_FILES, null, my_FChoosen.getName())), top, newIndex1);
                        myTree.expandRow(newIndex1);
                        myTree.setSelectionRow(newIndex1 + 1);
                        myTree.repaint();
                    }","    private FTPClient connect() throws FTPException {
        try {
            FTPClient ftp = new FTPClient();
            ftp.connect(host, port);
            int reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                System.err.println(""FTP server refused connection."");
            }
            ftp.login(userName, password);
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            return ftp;
        } catch (SocketException e) {
            throw new FTPException(""Failed to connect to server"", e);
        } catch (IOException e) {
            throw new FTPException(""Failed to connect to server"", e);
        }
    }",0,0
"    protected GatherBot(IniEditor settings2, Rcon rcon2) {
        live = false;
        topicChanged = true;
        ready = false;
        this.rcon = rcon2;
        this.settings = settings2;
        setName(settings.get(""irc"", ""nick""));
        setVerbose(true);
        smartConnect(settings.get(""irc"", ""ip""), Integer.parseInt(settings.get(""irc"", ""port"")));
        chan = settings.get(""irc"", ""channel"");
        unregistererror = settings.get(""register"", ""unregistererror"");
        joinChannel(chan);
        joinChannel(""#Crit"");
        sendMessage(""Q@CServe.quakenet.org"", ""AUTH "" + settings.get(""irc"", ""qaccount"") + "" "" + settings.get(""irc"", ""qpassword""));
        setMode(getNick(), ""+x"");
        maxplayers = 12;
        players = new Players();
        maps = new ArrayList<Map>();
        if (settings.get(""sql"", ""usemysql"").equalsIgnoreCase(""true"")) {
            try {
                Class.forName(""com.mysql.jdbc.Driver"").newInstance();
                sql = DriverManager.getConnection(""jdbc:mysql://"" + settings.get(""sql"", ""ip"") + "":"" + settings.get(""sql"", ""port"") + ""/"" + settings.get(""sql"", ""database""), settings.get(""sql"", ""user""), settings.get(""sql"", ""password"")).createStatement();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            try {
                Class.forName(""org.sqlite.JDBC"").newInstance();
                sql = DriverManager.getConnection(""jdbc:sqlite:database.sqlite"").createStatement();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        live = false;
        reg = true;
    }","    public void comandoReemplazar(String comando, int posicionCursor) {
        String segundoArgumento = segundoArgumento(comando);
        String nombreVariable = nombreVariable(comando);
        String primerArgumento = primerArgumento(comando);
        String expresionRegular = primerArgumento.replace(nombreVariable, """");
        String texto = documentoActual.getTexto();
        System.out.println(comando);
        System.out.println(primerArgumento);
        System.out.println(segundoArgumento);
        System.out.println(nombreVariable);
        System.out.println(expresionRegular);
        Pattern patron = null;
        Matcher matcher = null;
        String expresionRegularCorrecta = expresionRegularCorrecta(expresionRegular);
        System.out.println(expresionRegularCorrecta);
        try {
            patron = Pattern.compile(expresionRegularCorrecta);
            matcher = patron.matcher(texto);
        } catch (PatternSyntaxException pse) {
            System.out.println(""Expresion regular mal conformada, por favor consultar sintaxis"");
            return;
        }
        while (matcher.find(posicionCursor)) {
            String cadenaOriginal = texto.substring(matcher.start(), matcher.end());
            String[] string = primerArgumento.split(""/"" + nombreVariable + ""."");
            System.out.println(string[0]);
            System.out.println(string[1]);
            String matcheoVariable = cadenaOriginal.replace(string[0], """");
            matcheoVariable = matcheoVariable.replace(string[1], """");
            System.out.println(matcheoVariable);
            String cadenaModificada = segundoArgumento.replace(""/"" + nombreVariable + ""/"", matcheoVariable);
            System.out.println(cadenaModificada);
            texto = texto.replaceFirst(cadenaOriginal, cadenaModificada);
            System.out.println(cadenaOriginal + "" "" + matcher.start() + ""-"" + matcher.end());
            posicionCursor = matcher.end();
        }
        documentoActual.setTexto(texto);
    }",0,0
"    public ImageDisplay(ImageDisplayApplet applet, GraphicsConfiguration gc) {
        this.applet = applet;
        if (applet == null) {
            frame = new JFrame(gc);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(PREFERRED_WIDTH, PREFERRED_HEIGHT));
        Action openAction = new AbstractAction(""Open File"", new ImageIcon(getClass().getResource(""/open.gif""))) {

            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }
        };
        JToolBar bar = new JToolBar();
        bar.add(new ToolBarButton(openAction));
        add(bar, BorderLayout.NORTH);
        if (applet == null) {
            frame.setTitle(""Image Display - Control Panel"");
            frame.getContentPane().add(this, BorderLayout.CENTER);
            frame.pack();
            frame.show();
        }
    }","            String[] findFields(String sFormat) {
                ArrayList<String> arStr = new ArrayList<String>();
                Pattern pat = Pattern.compile(""\\{(\\w*)\\}"");
                Matcher match = pat.matcher(sFormat);
                while (match.find()) {
                    for (int i = 1; i <= match.groupCount(); i++) {
                        match.start(i);
                        arStr.add(match.group(i));
                        match.end(i);
                    }
                }
                return arStr.toArray(new String[arStr.size()]);
            }",0,0
"    public static String unescapeStringForXML(String s) {
        Pattern p = Pattern.compile(""\\&.+?;"");
        StringBuilder result = new StringBuilder();
        Matcher m = p.matcher(s);
        int end = 0;
        while (m.find()) {
            int start = m.start();
            result.append(s.substring(end, start));
            end = m.end();
            result.append(translate(s.substring(start, end)));
        }
        result.append(s.substring(end, s.length()));
        return result.toString();
    }","            public void onClickDo(final MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    final Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(""http://eworld.sourceforge.net""));
                    } catch (final Exception e) {
                        e.printStackTrace();
                    }
                }
            }",0,0
"    private Collection<String> getVariants(String oldPatternText, String searchText, String replaceText) {
        Collection<String> variants = new HashSet<String>();
        java.util.regex.Pattern p = java.util.regex.Pattern.compile(searchText, java.util.regex.Pattern.LITERAL);
        Matcher m = p.matcher(oldPatternText);
        List<MatchResult> results = new ArrayList<MatchResult>();
        while (m.find()) {
            results.add(m.toMatchResult());
        }
        int n = results.size();
        for (int patNum = 1; patNum < twoToThe(n); patNum++) {
            String newPatternText = new String(oldPatternText);
            int offset = 0;
            for (int matchNum = 0; matchNum < n; matchNum++) {
                if (isBitSet(patNum, matchNum)) {
                    MatchResult hit = results.get(matchNum);
                    int realStart = hit.start() + offset;
                    int realEnd = hit.end() + offset;
                    Matcher replacer = p.matcher(newPatternText);
                    newPatternText = replaceFirst(replacer, realStart, realEnd, replaceText);
                    int hitLength = hit.end() - hit.start();
                    int growth = replaceText.length() - hitLength;
                    offset += growth;
                    variants.add(newPatternText);
                }
            }
        }
        return variants;
    }","    public static void symmetrizeComponents(double[][] components) {
        for (int i = 0; i < components.length; i++) {
            for (int j = i + 1; j < components.length; j++) {
                components[i][j] += components[j][i];
                components[i][j] *= 0.5;
                components[j][i] = components[i][j];
            }
        }
    }",0,0
"    public String ConstructXMLTree(double[][] dDistanceMatrix) throws Exception {
        ArrayList alDist = new ArrayList();
        String[] XMLTree = new String[dDistanceMatrix.length];
        int[] DataIds = new int[dDistanceMatrix.length];
        for (int i = 0; i < dDistanceMatrix.length; i++) DataIds[i] = i;
        int min_i = -1, min_j = -1;
        int k = 0;
        while (dDistanceMatrix.length > 1) {
            for (int i = 0; i < dDistanceMatrix.length; i++) {
                dDistanceMatrix[i][i] = 0;
            }
            double[] r = new double[dDistanceMatrix.length];
            for (int i = 0; i < dDistanceMatrix.length; i++) {
                for (int j = 0; j < dDistanceMatrix.length; j++) {
                    if (i != j) {
                        r[i] += dDistanceMatrix[i][j];
                    }
                }
            }
            double[][] M = new double[dDistanceMatrix.length][dDistanceMatrix.length];
            for (int i = 0; i < dDistanceMatrix.length; i++) {
                for (int j = i + 1; j < dDistanceMatrix.length; j++) {
                    if (i != j) {
                        M[i][j] = dDistanceMatrix[i][j] - (r[i] + r[j]) / 2;
                    }
                }
            }
            double min_dist = Double.MAX_VALUE;
            min_i = -1;
            min_j = -1;
            for (int i = 0; i < dDistanceMatrix.length; i++) {
                for (int j = i + 1; j < dDistanceMatrix.length; j++) {
                    if (min_dist > M[i][j]) {
                        min_i = i;
                        min_j = j;
                        min_dist = M[i][j];
                    }
                }
            }
            double s1;
            if (dDistanceMatrix.length > 2) {
                s1 = dDistanceMatrix[min_i][min_j] / 2 + (r[min_i] / (dDistanceMatrix.length - 2) - r[min_j] / (dDistanceMatrix.length - 2)) / 2;
            } else {
                s1 = dDistanceMatrix[min_i][min_j] / 2 + (r[min_i] - r[min_j]) / 2;
            }
            double s2 = dDistanceMatrix[min_i][min_j] - s1;
            if (XMLTree[min_i] == null && XMLTree[min_j] == null) {
                XMLTree[min_i] = ""<node id=\""-1\"" step=\"""" + k + ""\"" dist=\"""" + dDistanceMatrix[min_i][min_j] + ""\"">"";
                XMLTree[min_i] += ""<node bl=\"""" + s1 + ""\"" id=\"""" + DataIds[min_i] + ""\""/>"";
                XMLTree[min_i] += ""<node bl=\"""" + s2 + ""\"" id=\"""" + DataIds[min_j] + ""\""/>"";
                XMLTree[min_i] += ""</node>"";
            } else if (XMLTree[min_i] != null && XMLTree[min_j] != null) {
                XMLTree[min_i] = ""<node id=\""-1\"" step=\"""" + k + ""\"" dist=\"""" + dDistanceMatrix[min_i][min_j] + ""\"">"" + XMLTree[min_i] + XMLTree[min_j] + ""</node>"";
            } else if (XMLTree[min_i] != null) {
                XMLTree[min_i] = ""<node bl=\"""" + s1 + ""\"" id=\""-1\"" step=\"""" + k + ""\"" dist=\"""" + dDistanceMatrix[min_i][min_j] + ""\"">"" + XMLTree[min_i];
                XMLTree[min_i] += ""<node bl=\"""" + s2 + ""\"" id=\"""" + DataIds[min_j] + ""\""/>"";
                XMLTree[min_i] += ""</node>"";
            } else {
                XMLTree[min_i] = ""<node id=\""-1\"" step=\"""" + k + ""\"" dist=\"""" + dDistanceMatrix[min_i][min_j] + ""\"">"" + XMLTree[min_j];
                XMLTree[min_i] += ""<node bl=\"""" + s2 + ""\"" id=\"""" + DataIds[min_i] + ""\""/>"";
                XMLTree[min_i] += ""</node>"";
            }
            for (int i = min_j + 1; i < XMLTree.length; i++) {
                XMLTree[i - 1] = XMLTree[i];
                DataIds[i - 1] = DataIds[i];
            }
            double[][] dTempMatrix = new double[dDistanceMatrix.length - 1][dDistanceMatrix.length - 1];
            for (int i = 0; i < dDistanceMatrix.length; i++) {
                for (int j = i + 1; j < dDistanceMatrix.length; j++) {
                    if (i == min_i) {
                        if (j < min_j) {
                            dTempMatrix[min_i][j] = (dDistanceMatrix[min_i][j] + dDistanceMatrix[min_j][j] - s1 - s2) / 2;
                            dTempMatrix[j][min_i] = (dDistanceMatrix[min_i][j] + dDistanceMatrix[min_j][j] - s1 - s2) / 2;
                        } else if (j > min_j) {
                            dTempMatrix[min_i][j - 1] = (dDistanceMatrix[min_i][j] + dDistanceMatrix[min_j][j] - s1 - s2) / 2;
                            dTempMatrix[j - 1][min_i] = (dDistanceMatrix[min_i][j] + dDistanceMatrix[min_j][j] - s1 - s2) / 2;
                        }
                    } else if (i != min_j) {
                        if (j < min_j) {
                            if (i < min_j) {
                                dTempMatrix[i][j] = dDistanceMatrix[i][j];
                                dTempMatrix[j][i] = dDistanceMatrix[i][j];
                            } else {
                                dTempMatrix[i - 1][j] = dDistanceMatrix[i][j];
                                dTempMatrix[j][i - 1] = dDistanceMatrix[i][j];
                            }
                        } else if (j > min_j) {
                            if (i < min_j) {
                                dTempMatrix[i][j - 1] = dDistanceMatrix[i][j];
                                dTempMatrix[j - 1][i] = dDistanceMatrix[i][j];
                            } else {
                                dTempMatrix[i - 1][j - 1] = dDistanceMatrix[i][j];
                                dTempMatrix[j - 1][i - 1] = dDistanceMatrix[i][j];
                            }
                        }
                    }
                }
            }
            dDistanceMatrix = dTempMatrix;
            k++;
        }
        return XMLTree[min_i];
    }","    public void testNonGreedyMatch() {
        String page = ""Stuff you say, it is<a href=\""coolsite.htm\"">Yea</a>I find it interesting"";
        Pattern p = Pattern.compile(""<a.*?href=.*?>.*?</a>"");
        Matcher m = p.matcher(page);
        while (m.find()) {
            System.out.println("" ***** : "" + m.group());
            System.out.println("" ***** + at "" + m.start());
            System.out.println("" ***** - to "" + m.end());
        }
    }",0,0
"    public static double[][] transpose(double[][] matrix) {
        double[][] transposed = new double[matrix[0].length][matrix.length];
        int mLength = matrix.length, m0Length = matrix[0].length;
        for (int i = 0; i < mLength; i++) {
            for (int j = 0; j < m0Length; j++) {
                transposed[j][i] = matrix[i][j];
            }
        }
        return transposed;
    }","                    public void actionPerformed(ActionEvent evt) {
                        System.out.println(""File Browse button pressed."");
                        NewFileChooser = new JFileChooser(mediator.getCurDir());
                        int returnVal = NewFileChooser.showOpenDialog(AssignmentEdit.this);
                        if (returnVal == JFileChooser.APPROVE_OPTION) {
                            String file = mediator.molestPath(NewFileChooser.getSelectedFile().toString());
                            txtFilePath.setText(mediator.molestPath(file));
                            System.out.println(mediator.molestPath(file.replaceFirst(mediator.getCurDir(), """").trim()));
                        } else {
                            System.out.print(""Open command cancelled by user.\n"");
                        }
                    }",0,0
"    public void set(Object obj, int i, Object newValue) throws InvocationTargetException, IllegalAccessException {
        if (isIndexed()) {
            IndexedPropertyDescriptor id = (IndexedPropertyDescriptor) myPD;
            growArrayToSize(obj, id.getIndexedPropertyType(), i);
            id.getIndexedWriteMethod().invoke(obj, new Object[] { new Integer(i), newValue });
        } else {
            Object array = get(obj);
            if (array == null || Array.getLength(array) <= i) {
                Class componentType = getType().getComponentType();
                Object newArray = Array.newInstance(componentType, i + 1);
                if (array != null) {
                    System.arraycopy(array, 0, newArray, 0, Array.getLength(array));
                }
                array = newArray;
            }
            Array.set(array, i, newValue);
            set(obj, array);
        }
    }","    private static double[][] getCorrelationMatrix(Gene[] genes, int[] sign, boolean[] pos) {
        double[][] correlation = new double[genes.length][genes.length];
        int expSize = pos == null ? genes[0].value.length : ArrayUtils.countTrue(pos);
        for (int i = 0; i < genes.length - 1; i++) {
            for (int j = i + 1; j < genes.length; j++) {
                double[][] val = new double[2][];
                val[0] = genes[i].value;
                val[1] = genes[j].value;
                double cor = pos == null ? Pearson.calcCorrelation(val) : Pearson.calcCorrelation(val, pos);
                double pv = Pearson.calcCorrSignificance(cor, expSize);
                if (pv < CORR_PV_THR) {
                    correlation[i][j] = cor * sign[i] * sign[j];
                    correlation[j][i] = correlation[i][j];
                }
            }
        }
        return correlation;
    }",0,0
"    public static void main(String[] args) throws Exception {
        ServerSocket serverSocket = new ServerSocket(1949);
        while (true) {
            final Socket listener = serverSocket.accept();
            new Thread(new Runnable() {

                public void run() {
                    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                    System.out.printf(""width=%f, height=%f%n"", d.getWidth(), d.getHeight());
                    Robot robot = null;
                    try {
                        robot = new Robot();
                    } catch (AWTException e1) {
                        e1.printStackTrace();
                    }
                    while (true) {
                        try {
                            BufferedImage img = robot.createScreenCapture(new Rectangle(0, 0, (int) d.getWidth(), (int) d.getHeight()));
                            ImageIO.write(img, ""PNG"", listener.getOutputStream());
                            Thread.sleep(1000);
                        } catch (Exception e) {
                            e.printStackTrace();
                            break;
                        }
                    }
                    try {
                        System.out.println(""close:"" + listener);
                        listener.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }).start();
        }
    }","    public ComplexMatrix hermitianAdjoint() {
        final double arrayRe[][] = new double[numCols][numRows];
        final double arrayIm[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            arrayRe[0][i] = matrixRe[i][0];
            arrayIm[0][i] = -matrixIm[i][0];
            for (j = 1; j < numCols; j++) {
                arrayRe[j][i] = matrixRe[i][j];
                arrayIm[j][i] = -matrixIm[i][j];
            }
        }
        return new ComplexSquareMatrix(arrayRe, arrayIm);
    }",0,0
"    public static void browse(URI issueUrl) {
        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
            try {
                Desktop.getDesktop().browse(issueUrl);
            } catch (IOException e) {
                LOG.throwing(SwingUtils.class.getName(), ""open url"", e);
            }
        }
    }","    private String getAlbum() {
        String strAlbum = """";
        if (nddFile != null && nddFile.hasAlbum()) strAlbum = nddFile.getAlbum(); else {
            String title = getTitle();
            String url = """";
            try {
                url = ""http://musicbrainz.org/ws/1/track/?type=xml&title="" + URLEncoder.encode(title, ""UTF-8"") + ""&artist="" + URLEncoder.encode(getAuthor(), ""UTF-8"");
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
            String ret = HTTP.get(url);
            String regexp = ""<title>[^<]*</title>"";
            Pattern p = Pattern.compile(regexp);
            Matcher m = p.matcher(ret);
            while (m.find()) {
                String s = ret.substring(m.start() + 7, m.end() - 8);
                if (!s.toUpperCase().equals(title.toUpperCase())) {
                    strAlbum = s;
                    break;
                }
            }
        }
        try {
            String strImgUrl = """";
            if (nddFile != null && nddFile.hasAlbumImage()) strImgUrl = nddFile.getAlbumImage(); else {
                String url = ""http://albumart.org/index.php?srchkey="" + URLEncoder.encode(strAlbum, ""UTF-8"") + ""&itempage=1&newsearch=1&searchindex=Music"";
                String ret = HTTP.get(url);
                String regexp = ""\""http:\\/\\/[^\""\']*amazon[^\""\']*\\.jpg\"""";
                Pattern p = Pattern.compile(regexp);
                Matcher m = p.matcher(ret);
                m.find();
                strImgUrl = ret.substring(m.start() + 1, m.end() - 1);
            }
            HTTP.download(strImgUrl, strOutputfile + "".jpg"", new javax.swing.JLabel());
        } catch (IOException e) {
            System.out.println(""Hallo"");
        } catch (IllegalStateException e) {
            System.out.println(""Couldnt find an Album image"");
        }
        return strAlbum;
    }",0,0
"    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }","    public static void main(String arg[]) throws Exception {
        int idCounter = 0;
        boolean debug = false;
        Properties props = new Properties();
        props.put(""mail.smtp.host"", ""207.15.48.16"");
        Session session = Session.getDefaultInstance(props, null);
        session.setDebug(debug);
        Message msg = new MimeMessage(session);
        InternetAddress from = new InternetAddress(""anant.gowerdhan@momed.com"");
        InternetAddress to = new InternetAddress(""anant.gowerdhan@momed.com"");
        msg.setFrom(from);
        msg.setRecipient(Message.RecipientType.TO, to);
        msg.setSubject(""Testing Domino"");
        MimeBodyPart messageBodyPart = new MimeBodyPart();
        messageBodyPart.setText(""Hi, how are you"");
        Multipart multipart = new MimeMultipart();
        multipart.addBodyPart(messageBodyPart);
        msg.setContent(multipart);
        Transport.send(msg);
    }",0,0
"	public static <T extends Comparable<T>> int binarySearch3(T[] arr, T key, int imin, int imax) {
		//Implementation: Recursive, comparable type
		if(imax < imin)
			return -1;
		int imid = (imin+imax)/2;
		if(arr[imid].compareTo(key) > 0)
			return binarySearch3(arr,key,imin,imid-1);
		else if (arr[imid].compareTo(key) < 0)
			return binarySearch3(arr,key,imid+1,imax);
		else
			return imid;
	}","    public static double[][] transpose(final double[][] m) {
        final double[][] mt = new double[m[0].length][m.length];
        for (int i = 0; i < mt.length; i++) {
            for (int j = 0; j < mt[i].length; j++) {
                mt[i][j] = m[j][i];
            }
        }
        return mt;
    }",0,0
"    private Pattern createPattern(String pattern) {
        StringBuilder patternBuilder = new StringBuilder();
        Matcher m = GLOB_PATTERN.matcher(pattern);
        int end = 0;
        while (m.find()) {
            patternBuilder.append(quote(pattern, end, m.start()));
            String match = m.group();
            if (""?"".equals(match)) {
                patternBuilder.append('.');
            } else if (""*"".equals(match)) {
                patternBuilder.append("".*"");
            } else if (match.startsWith(""{"") && match.endsWith(""}"")) {
                int colonIdx = match.indexOf(':');
                if (colonIdx == -1) {
                    patternBuilder.append(DEFAULT_VARIABLE_PATTERN);
                    variableNames.add(m.group(1));
                } else {
                    String variablePattern = match.substring(colonIdx + 1, match.length() - 1);
                    patternBuilder.append('(');
                    patternBuilder.append(variablePattern);
                    patternBuilder.append(')');
                    String variableName = match.substring(1, colonIdx);
                    variableNames.add(variableName);
                }
            }
            end = m.end();
        }
        patternBuilder.append(quote(pattern, end, pattern.length()));
        return Pattern.compile(patternBuilder.toString());
    }","    static final float[][] transposeMatrix(float[][] a) {
        int ra = a.length;
        int ca = a[0].length;
        float[][] m = new float[ca][ra];
        for (int i = 0; i < ra; i++) {
            for (int j = 0; j < ca; j++) m[j][i] = a[i][j];
        }
        return m;
    }",0,0
"    public Matrix transpose() {
        final double array[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new DoubleMatrix(array);
    }","    public static final Object[] changeSize(Object[] o, int newSize) {
        if (o.length == newSize) return o;
        Object[] temp = (Object[]) java.lang.reflect.Array.newInstance(o.getClass().getComponentType(), newSize);
        if (o.length < newSize) System.arraycopy(o, 0, temp, 0, o.length); else System.arraycopy(o, 0, temp, 0, temp.length);
        return temp;
    }",0,0
"    public FTPSource(SourceDetail sourceDetail) throws SourceException {
        this.sourceDetail = sourceDetail;
        localPathMap = new HashMap<String, String>();
        client = new FTPClient();
        try {
            client.connect(sourceDetail.getHost());
            client.login(sourceDetail.getUser(), sourceDetail.getPassword());
            workingDirectory = new File(ConfigManager.getGUIConfig().getWorkingDirectoryName() + File.separator + sourceDetail.getName());
            workingDirectory.mkdir();
        } catch (Exception e) {
            throw new SourceException(e);
        }
    }","    public static Object[] addObjectToArray(Object[] array, Object obj) {
        Class<?> compType = Object.class;
        if (array != null) {
            compType = array.getClass().getComponentType();
        } else if (obj != null) {
            compType = obj.getClass();
        }
        int newArrLength = (array != null ? array.length + 1 : 1);
        Object[] newArr = (Object[]) Array.newInstance(compType, newArrLength);
        if (array != null) {
            System.arraycopy(array, 0, newArr, 0, array.length);
        }
        newArr[newArr.length - 1] = obj;
        return newArr;
    }",0,0
"    public static <T> T[] insert(final Object array, final int index, final Object element) {
        if (array == null) {
            if (index != 0) {
                throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: 0"");
            }
            Object joinedArray = Array.newInstance(element != null ? element.getClass() : Object.class, 1);
            Array.set(joinedArray, 0, element);
            return (T[]) joinedArray;
        }
        int length = getLength(array);
        if (index > length || index < 0) {
            throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: "" + length);
        }
        Object result = Array.newInstance(array.getClass().getComponentType(), length + 1);
        System.arraycopy(array, 0, result, 0, index);
        Array.set(result, index, element);
        if (index < length) {
            System.arraycopy(array, index, result, index + 1, length - index);
        }
        return (T[]) result;
    }","	public static File chooseFileOpen(JFrame frame) {
		File retval;

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(false);

		//Show dialog and wait for user input
		int status = fc.showOpenDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFile();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}",0,0
"    public static <E> E[][] transpose(final E[][] matrix, final E[][] transposed) {
        for (int i = matrix.length; --i >= 0; ) {
            for (int j = matrix[i].length; --j >= 0; ) {
                transposed[j][i] = matrix[i][j];
            }
        }
        return transposed;
    }","    private static Object setIndexInList(Object bean, int idx, Object child) {
        if (bean instanceof List) {
            List l = (List) bean;
            while (l.size() <= idx) {
                l.add(null);
            }
            l.set(idx, child);
            return l;
        } else if (bean.getClass().isArray()) {
            int length = Array.getLength(bean);
            if (length <= idx) {
                Object newArray = Array.newInstance(bean.getClass().getComponentType(), idx + 1);
                System.arraycopy(bean, 0, newArray, 0, length);
                bean = newArray;
            }
            Array.set(bean, idx, child);
            return bean;
        } else {
            return null;
        }
    }",0,0
"    private float[][] transpose(float[][] m) {
        float[][] toReturn = new float[m[0].length][m.length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++) {
                toReturn[j][i] = m[i][j];
            }
        }
        return toReturn;
    }","    private Integer slowFib(int i) {
        if (i <= 0) return 0;
        if (i == 1) return 1;
        return slowFib(i - 1) + slowFib(i - 2);
    }",0,0
"    public void testVowels() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""[a-z&&[aeiou]]"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""BerlinBrown"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Vowel-Search \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }","        synchronized double[][] getDistances(Alignment alignment, ProgressListener progress) {
            this.alignment = alignment;
            final int stateCount = alignment.getSequenceType().getCanonicalStateCount();
            if (stateCount != 4) {
                throw new IllegalArgumentException(""F84DistanceMatrix must have nucleotide patterns"");
            }
            int dimension = alignment.getTaxa().size();
            double[][] distances = new double[dimension][dimension];
            float tot = (dimension * (dimension - 1)) / 2;
            int done = 0;
            for (int i = 0; i < dimension; ++i) {
                for (int j = i + 1; j < dimension; ++j) {
                    distances[i][j] = calculatePairwiseDistance(i, j);
                    distances[j][i] = distances[i][j];
                    if (progress != null) progress.setProgress(++done / tot);
                }
            }
            return distances;
        }",0,0
"    public static void loadHelpPage(String key) {
        try {
            java.awt.Desktop d = Desktop.getDesktop();
            if (Desktop.isDesktopSupported()) {
                if (key == null || key.length() == 0) {
                    d.browse(new URI(UIDefaults.PRODUCT_DOCUMENTATION_URL));
                } else {
                    String url = HELP_URL + key;
                    d.browse(new URI(url));
                }
            }
        } catch (Exception e) {
            logger.error(MiscUtils.stackTrace2String(e));
        }
    }","    public List equivalenceClasses() {
        int[] weight = weightVector();
        Object[] cyclesArray = (Object[]) cycles.toArray();
        Arrays.sort(cyclesArray, new Comparator() {

            public int compare(Object o1, Object o2) {
                return (int) (((SimpleCycle) o1).weight() - ((SimpleCycle) o2).weight());
            }
        });
        Collection essentialCycles = essentialCycles();
        boolean[][] u = new boolean[cyclesArray.length][edgeList.size()];
        boolean[][] a = getCycleEdgeIncidenceMatrix(cyclesArray);
        boolean[][] ai = inverseBinaryMatrix(a, cyclesArray.length);
        for (int i = 0; i < cyclesArray.length; i++) {
            for (int j = 0; j < cyclesArray.length; j++) {
                u[i][j] = ai[j][i];
            }
        }
        UndirectedGraph h = new SimpleGraph();
        h.addAllVertices(cycles);
        ConnectivityInspector connectivityInspector = new ConnectivityInspector(h);
        int left = 0;
        for (int right = 0; right < weight.length; right++) {
            if ((right < weight.length - 1) && (weight[right + 1] == weight[right])) continue;
            for (int i = left; i <= right; i++) {
                if (essentialCycles.contains((SimpleCycle) cyclesArray[i])) continue;
                for (int j = i + 1; j <= right; j++) {
                    if (essentialCycles.contains((SimpleCycle) cyclesArray[j])) continue;
                    if (connectivityInspector.pathExists(cyclesArray[i], cyclesArray[j])) continue;
                    boolean sameClass = false;
                    AuxiliaryGraph2 auxGraph = new AuxiliaryGraph2(graph, edgeList, u[i], u[j]);
                    for (Iterator it = graph.vertexSet().iterator(); it.hasNext(); ) {
                        Object vertex = it.next();
                        boolean shouldSearchCycle = false;
                        Collection incidentEdges = graph.edgesOf(vertex);
                        Iterator edgeIterator = incidentEdges.iterator();
                        while (edgeIterator.hasNext()) {
                            Edge edge = (Edge) edgeIterator.next();
                            int index = getEdgeIndex(edge);
                            if (u[i][index] || u[j][index]) {
                                shouldSearchCycle = true;
                                break;
                            }
                        }
                        if (shouldSearchCycle) {
                            Object auxVertex00 = auxGraph.auxVertex00(vertex);
                            Object auxVertex11 = auxGraph.auxVertex11(vertex);
                            List auxPath = BFSShortestPath.findPathBetween(auxGraph, auxVertex00, auxVertex11);
                            double pathWeight = auxPath.size();
                            if (pathWeight == weight[left]) {
                                sameClass = true;
                                break;
                            }
                        }
                    }
                    if (sameClass) {
                        h.addEdge(cyclesArray[i], cyclesArray[j]);
                    }
                }
            }
            for (int i = left; i <= right; i++) {
                if (essentialCycles.contains((SimpleCycle) cyclesArray[i])) continue;
                for (int j = i + 1; j <= right; j++) {
                    if (essentialCycles.contains((SimpleCycle) cyclesArray[j])) continue;
                    if (connectivityInspector.pathExists(cyclesArray[i], cyclesArray[j])) continue;
                    boolean sameClass = false;
                    for (int k = 0; ((SimpleCycle) cyclesArray[k]).weight() < weight[left]; k++) {
                        AuxiliaryGraph2 auxGraph = new AuxiliaryGraph2(graph, edgeList, u[i], u[k]);
                        boolean shortestPathFound = false;
                        for (Iterator it = graph.vertexSet().iterator(); it.hasNext(); ) {
                            Object vertex = it.next();
                            Object auxVertex00 = auxGraph.auxVertex00(vertex);
                            Object auxVertex11 = auxGraph.auxVertex11(vertex);
                            List auxPath = BFSShortestPath.findPathBetween(auxGraph, auxVertex00, auxVertex11);
                            double pathWeight = auxPath.size();
                            if (pathWeight == weight[left]) {
                                shortestPathFound = true;
                                break;
                            }
                        }
                        if (!shortestPathFound) continue;
                        auxGraph = new AuxiliaryGraph2(graph, edgeList, u[j], u[k]);
                        for (Iterator it = graph.vertexSet().iterator(); it.hasNext(); ) {
                            Object vertex = it.next();
                            Object auxVertex00 = auxGraph.auxVertex00(vertex);
                            Object auxVertex11 = auxGraph.auxVertex11(vertex);
                            List auxPath = BFSShortestPath.findPathBetween(auxGraph, auxVertex00, auxVertex11);
                            double pathWeight = auxPath.size();
                            if (pathWeight == weight[left]) {
                                sameClass = true;
                                break;
                            }
                        }
                        if (sameClass) break;
                    }
                    if (sameClass) {
                        h.addEdge(cyclesArray[i], cyclesArray[j]);
                    }
                }
            }
            left = right + 1;
        }
        return connectivityInspector.connectedSets();
    }",0,0
"    @TestTargetNew(level = TestLevel.PARTIAL_COMPLETE, notes = ""Verifies that find() method returns correct value."", method = ""find"", args = {  })
    public void testFind() {
        String testPattern = ""(abb)"";
        String testString = ""cccabbabbabbabbabb"";
        Pattern pat = Pattern.compile(testPattern);
        Matcher mat = pat.matcher(testString);
        int start = 3;
        int end = 6;
        while (mat.find()) {
            assertEquals(start, mat.start(1));
            assertEquals(end, mat.end(1));
            start = end;
            end += 3;
        }
        testPattern = ""(\\d{1,3})"";
        testString = ""aaaa123456789045"";
        Pattern pat2 = Pattern.compile(testPattern);
        Matcher mat2 = pat2.matcher(testString);
        start = 4;
        int length = 3;
        while (mat2.find()) {
            assertEquals(testString.substring(start, start + length), mat2.group(1));
            start += length;
        }
    }","    public int fib(int n) {
        if (n == 0 || n == 1) return 1; else return fib(n - 1) + fib(n - 2);
    }",0,0
"    public File[] doFilesOpen() {
        JFileChooser chooser = new JFileChooser();
        ArchiveFilter filter = new ArchiveFilter();
        filter.addExtension(""jar"");
        filter.addExtension(""zip"");
        filter.setDescription(""Jar & Zip Files"");
        File root = new File(""/fuegotech3.1.3"");
        chooser.setCurrentDirectory(root);
        chooser.setMultiSelectionEnabled(true);
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(_getFrame(this));
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            return chooser.getSelectedFiles();
        } else {
            return null;
        }
    }","    private static void test_regex() {
        String input = ""{{pron-rég|France <!-- précisez svp la ville ou la région -->|bɔ̃.ʒuʁ|audio=Bonjour.ogg}}"";
        Pattern p = Pattern.compile(""(\\{\\{pron-rég|)([^|]*|)"");
        Matcher m = p.matcher(input);
        while (m.find()) {
            System.out.println(""Le texte \"""" + m.group() + ""\"" débute à "" + m.start() + "" et termine à "" + m.end());
        }
    }",0,0
"    public void removeValue(int index) {
        if (index >= 0 && index < values.length) {
            C[] newValues = (C[]) Array.newInstance(values.getClass().getComponentType(), values.length - 1);
            if (index >= 1) System.arraycopy(values, 0, newValues, 0, index);
            if (index <= values.length - 2) System.arraycopy(values, index + 1, newValues, index, values.length - index - 1);
            values = newValues;
            fireStateChanged();
        }
    }","    private void send(HttpServletRequest req, HttpServletResponse res, ServletOutputStream out, HttpSession ssn) throws IOException {
        String to = req.getParameter(""to"");
        String cc = req.getParameter(""cc"");
        String subj = req.getParameter(""subject"");
        String text = req.getParameter(""text"");
        try {
            MailUserData mud = getMUD(ssn);
            if (mud == null) throw new Exception(""trying to send, but not logged in"");
            Message msg = new MimeMessage(mud.getSession());
            InternetAddress[] toAddrs = null, ccAddrs = null;
            if (to != null) {
                toAddrs = InternetAddress.parse(to, false);
                msg.setRecipients(Message.RecipientType.TO, toAddrs);
            } else throw new MessagingException(""No \""To\"" address specified"");
            if (cc != null) {
                ccAddrs = InternetAddress.parse(cc, false);
                msg.setRecipients(Message.RecipientType.CC, ccAddrs);
            }
            if (subj != null) msg.setSubject(subj);
            URLName u = mud.getURLName();
            msg.setFrom(new InternetAddress(u.getUsername() + ""@"" + u.getHost()));
            if (text != null) msg.setText(text);
            Transport.send(msg);
            out.println(""<h1>Message sent successfully</h1></body></html>"");
            out.close();
        } catch (Exception mex) {
            out.println(""<h1>Error sending message.</h1>"");
            out.println(mex.toString());
            out.println(""<br></body></html>"");
        }
    }",0,0
"    public void open() {
        if (!java.awt.Desktop.isDesktopSupported()) {
            System.err.println(""Desktop is not supported (fatal)"");
            return;
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            System.err.println(""Desktop doesn't support the browse action (fatal)"");
            return;
        }
        try {
            java.net.URI uri = new java.net.URI(this.url);
            desktop.browse(uri);
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }","    public FTPClient getFTP(final Credentials credentials, final String remoteFile) throws NumberFormatException, SocketException, IOException, AccessDeniedException {
        String fileName = extractFilename(remoteFile);
        String fileDirectory = getPathName(remoteFile).substring(0, getPathName(remoteFile).indexOf(fileName));
        FTPClient ftp;
        ftp = new FTPClient();
        loadConfig();
        logger.info(""FTP connection to: "" + extractHostname(remoteFile));
        logger.info(""FTP PORT: "" + prop.getProperty(""port""));
        ftp.connect(extractHostname(remoteFile), Integer.parseInt(prop.getProperty(""port"")));
        int reply = ftp.getReplyCode();
        if (!(FTPReply.isPositiveCompletion(reply))) {
            return null;
        }
        ftp.setFileTransferMode(org.apache.commons.net.ftp.FTP.BINARY_FILE_TYPE);
        ftp.setFileType(org.apache.commons.net.ftp.FTP.BINARY_FILE_TYPE);
        if (!ftp.login(credentials.getUserName(), credentials.getPassword())) {
            throw new AccessDeniedException(prop.getProperty(""login_message""));
        }
        if (fileDirectory != null) {
            ftp.changeWorkingDirectory(fileDirectory);
        }
        return ftp;
    }",0,0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://prologdev1:5432/wdb"";
        final String dbuser = ""guest2"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT value, dataProviderName, placeName, placeGeometry,"" + ""        referencetime, "" + ""        validFrom, validTo, "" + ""        valueParameterName, valueParameterUnit, "" + ""        levelParameterName, levelUnitName, levelFrom, levelTo, "" + ""        dataVersion, confidenceCode, storetime, valueid, valuetype "" + "" FROM wci.read( array['hirlam 10'], 'POINT( 10.0 59.0 )', "" + ""                ('2000-01-03 01:00:00', '2000-01-03 01:00:00', 'exact'), "" + ""                NULL, "" + ""                array['instant temperature of air'], "" + ""                ( 2, 2, 'distance above ground', 'exact' ), "" + ""                array[-1], "" + ""                NULL::wci.returnOid )"";
        final String colNames[] = { ""value"", ""dataProviderName"", ""placeName"", ""referencetime"", ""validFrom"", ""validTo"", ""valueParameterName"", ""valueParameterUnit"", ""levelParameterName"", ""levelUnitName"", ""levelFrom"", ""levelTo"" };
        ResultSet rs = null;
        try {
            con.setAutoCommit(false);
            statement.execute(wdbInit);
            LargeObjectManager lobj = ((org.postgresql.PGConnection) con).getLargeObjectAPI();
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                long oid = rs.getLong(""value"");
                LargeObject obj = lobj.open(oid, LargeObjectManager.READ);
                byte buf[] = new byte[obj.size()];
                obj.read(buf, 0, obj.size());
                obj.close();
                System.out.print(""  BLOB size: "" + buf.length);
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                con.commit();
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }","    private Pattern createPattern(String pattern) {
        StringBuilder patternBuilder = new StringBuilder();
        Matcher m = GLOB_PATTERN.matcher(pattern);
        int end = 0;
        while (m.find()) {
            patternBuilder.append(quote(pattern, end, m.start()));
            String match = m.group();
            if (""?"".equals(match)) {
                patternBuilder.append('.');
            } else if (""*"".equals(match)) {
                patternBuilder.append("".*"");
            } else if (match.startsWith(""{"") && match.endsWith(""}"")) {
                int colonIdx = match.indexOf(':');
                if (colonIdx == -1) {
                    patternBuilder.append(DEFAULT_VARIABLE_PATTERN);
                    variableNames.add(m.group(1));
                } else {
                    String variablePattern = match.substring(colonIdx + 1, match.length() - 1);
                    patternBuilder.append('(');
                    patternBuilder.append(variablePattern);
                    patternBuilder.append(')');
                    String variableName = match.substring(1, colonIdx);
                    variableNames.add(variableName);
                }
            }
            end = m.end();
        }
        patternBuilder.append(quote(pattern, end, pattern.length()));
        return Pattern.compile(patternBuilder.toString());
    }",0,0
"    public static void main(String[] args) {
        Console console = System.console();
        if (console == null) {
            System.err.println(""No console."");
            System.exit(1);
        }
        while (true) {
            Pattern pattern = Pattern.compile(console.readLine(""%nEnter your regex: ""));
            Matcher matcher = pattern.matcher(console.readLine(""Enter input string to search: ""));
            boolean found = false;
            while (matcher.find()) {
                console.format(""I found the text \""%s\"" starting at "" + ""index %d and ending at index %d.%n"", matcher.group(), matcher.start(), matcher.end());
                found = true;
            }
            if (!found) {
                console.format(""No match found.%n"");
            }
        }
    }","            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }",0,0
"    private static File expandCommandLine(final String cmd) {
        final Pattern vars = Pattern.compile(""[$]\\{(\\S+)\\}"");
        final Matcher m = vars.matcher(cmd.trim());
        final StringBuffer sb = new StringBuffer(cmd.length());
        int lastMatchEnd = 0;
        while (m.find()) {
            sb.append(cmd.substring(lastMatchEnd, m.start()));
            final String envVar = m.group(1);
            String envVal = System.getenv(envVar);
            if (envVal == null) {
                File defPath = null;
                if (""mobac-prog"".equalsIgnoreCase(envVar)) defPath = programDir; else if (""home"".equalsIgnoreCase(envVar)) defPath = userHomeDir; else if (""XDG_CONFIG_HOME"".equalsIgnoreCase(envVar)) defPath = new File(userHomeDir, "".config""); else if (""XDG_CACHE_HOME"".equalsIgnoreCase(envVar)) defPath = new File(userHomeDir, "".cache""); else if (""XDG_DATA_HOME"".equalsIgnoreCase(envVar)) {
                    File localDataDir = new File(userHomeDir, "".local"");
                    defPath = new File(localDataDir, ""share"");
                }
                if (defPath != null) envVal = defPath.getAbsolutePath();
            }
            if (envVal == null) sb.append(cmd.substring(m.start(), m.end())); else sb.append(envVal);
            lastMatchEnd = m.end();
        }
        sb.append(cmd.substring(lastMatchEnd));
        return new File(sb.toString());
    }","    public StatusWindow(JFrame jframe) {
        this.frame = jframe;
        closeButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent actionEvent) {
                frame.setVisible(false);
                running = false;
            }
        });
        Thread downloadProgressThread = new Thread() {

            public void run() {
                while (running) {
                    killTransferIfTransferDied();
                    setStatusComponents();
                    updateCompletedTable();
                    System.out.print(""."");
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        };
        downloadProgressThread.start();
        abortCurrentDownloadButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent actionEvent) {
                XDCCConnectionManager.currentFileTransfer.close();
            }
        });
        openFileButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent actionEvent) {
                Desktop desktop = null;
                if (Desktop.isDesktopSupported()) {
                    desktop = Desktop.getDesktop();
                    try {
                        desktop.open(XDCCConnectionManager.completedFiles.get(finishedFiles.getSelectedRow()));
                    } catch (IOException e) {
                        DialogBuilder.showErrorDialog(""Error"", ""Could not open file!"");
                    }
                }
            }
        });
        openDirectoryButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent actionEvent) {
                Desktop desktop = null;
                if (Desktop.isDesktopSupported()) {
                    desktop = Desktop.getDesktop();
                    try {
                        desktop.open(XDCCConnectionManager.completedFiles.get(finishedFiles.getSelectedRow()).getParentFile());
                    } catch (IOException e) {
                        DialogBuilder.showErrorDialog(""Error"", ""Could not open folder!"");
                    }
                }
            }
        });
        removeFromListButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent actionEvent) {
                XDCCConnectionManager.completedFiles.remove(finishedFiles.getSelectedRow());
            }
        });
        clearAllButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent actionEvent) {
                XDCCConnectionManager.completedFiles.clear();
            }
        });
    }",0,0
"    private String applyMacro(XMLRegexPattern in, HashMap<String, XMLRegexPattern> macros) {
        String input = in.regex;
        int start = 0;
        int j = 0;
        int k = 0;
        int l = 0;
        String temp = """";
        XMLRegexGroup group = null;
        XMLRegexGroup newGroup = null;
        ArrayList<Integer> captGroups = getGroups(input);
        if (in.groups.getGroup().size() > 0) {
            for (int i : captGroups) {
                j++;
                group = null;
                for (Group g : in.groups.getGroup()) {
                    if (g.getId() == j) {
                        group = (XMLRegexGroup) in.groups.getGroup().get(l);
                        break;
                    }
                }
                if (group == null) {
                    continue;
                }
                newGroup = new XMLRegexGroup(0, group.getClassName());
                groups.getGroup().add(newGroup);
                k = groups.getGroup().size() - 1;
                temp += input.substring(start, i) + ""\\p{group:"" + k + ""}"";
                start = i;
                l++;
            }
        }
        temp += input.substring(start, input.length());
        if (in.getClassName() != null) {
            newGroup = new XMLRegexGroup(0, in.getClassName());
            groups.getGroup().add(newGroup);
            k = groups.getGroup().size() - 1;
            temp = ""\\p{group:"" + k + ""}("" + temp + "")"";
        }
        Pattern p = Pattern.compile(""\\\\p\\{pattern:([^}]+)\\}"");
        Matcher m = p.matcher(temp);
        String out = """";
        start = 0;
        while (m.find()) {
            XMLRegexPattern macro = macros.get(m.group(1));
            out += temp.substring(start, m.start()) + applyMacro(macro, macros);
            start = m.end();
        }
        out += temp.substring(start, temp.length());
        return out;
    }","    private void checkForUpdates() {
        ok.setEnabled(false);
        SwingWorker<String, Object> worker = new SwingWorker<String, Object>() {

            public String doInBackground() {
                BufferedReader in = null;
                try {
                    URL url = new URL(net.mjrz.fm.ui.utils.UIDefaults.LATEST_VERSION_URL);
                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                    int status = conn.getResponseCode();
                    if (status == 200) {
                        in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                        StringBuilder str = new StringBuilder();
                        while (true) {
                            String line = in.readLine();
                            if (line == null) break;
                            str.append(line);
                        }
                        return str.toString();
                    } else {
                        logger.error(""Unable to retrieve latest version: HTTP ERROR CODE: "" + status);
                        return """";
                    }
                } catch (Exception e) {
                    logger.error(""Unable to retrieve latest version: HTTP ERROR CODE: "" + e.getMessage());
                    return null;
                } finally {
                    if (in != null) {
                        try {
                            in.close();
                        } catch (Exception e) {
                        }
                    }
                }
            }

            public void done() {
                try {
                    dispose();
                    String str = get();
                    if (str == null || str.length() == 0) {
                        JOptionPane.showMessageDialog(frame, tr(""Unable to retrieve version information.\nPlease check network connectivity""), tr(""Error""), JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    net.mjrz.fm.Version v = net.mjrz.fm.Version.getVersion();
                    if (v.isVersionGreater(str.toString())) {
                        String[] args = { str };
                        String msg = form.format(args);
                        int n = JOptionPane.showConfirmDialog(frame, msg + ""\n"" + tr(""Do you want to download the latest version?""), tr(""Message""), JOptionPane.YES_NO_OPTION);
                        if (n == JOptionPane.YES_OPTION) {
                            java.awt.Desktop d = Desktop.getDesktop();
                            if (Desktop.isDesktopSupported()) {
                                d.browse(new URI(UIDefaults.PRODUCT_DOWNLOAD_URL));
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(frame, tr(""No new updates are available""));
                    }
                } catch (Exception e) {
                    logger.error(MiscUtils.stackTrace2String(e));
                } finally {
                    frame.hideSheet();
                }
            }
        };
        worker.execute();
    }",0,0
"    public SOCTradeOffer makeOffer(SOCPossiblePiece targetPiece) {
        D.ebugPrintln(""***** MAKE OFFER *****"");
        if (targetPiece == null) {
            return null;
        }
        SOCTradeOffer offer = null;
        SOCResourceSet targetResources = null;
        switch(targetPiece.getType()) {
            case SOCPossiblePiece.CARD:
                targetResources = SOCGame.CARD_SET;
                break;
            case SOCPossiblePiece.ROAD:
                targetResources = SOCGame.ROAD_SET;
                break;
            case SOCPossiblePiece.SETTLEMENT:
                targetResources = SOCGame.SETTLEMENT_SET;
                break;
            case SOCPossiblePiece.CITY:
                targetResources = SOCGame.CITY_SET;
                break;
        }
        SOCResourceSet ourResources = ourPlayerData.getResources();
        D.ebugPrintln(""*** targetResources = "" + targetResources);
        D.ebugPrintln(""*** ourResources = "" + ourResources);
        if (ourResources.contains(targetResources)) {
            return offer;
        }
        if (ourResources.getAmount(SOCResourceConstants.UNKNOWN) > 0) {
            D.ebugPrintln(""AGG WE HAVE UNKNOWN RESOURCES !!!! %%%%%%%%%%%%%%%%%%%%%%%%%%%%"");
            return offer;
        }
        SOCTradeOffer batna = getOfferToBank(targetResources);
        D.ebugPrintln(""*** BATNA = "" + batna);
        SOCBuildingSpeedEstimate estimate = new SOCBuildingSpeedEstimate(ourPlayerData.getNumbers());
        SOCResourceSet giveResourceSet = new SOCResourceSet();
        SOCResourceSet getResourceSet = new SOCResourceSet();
        int batnaBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
        D.ebugPrintln(""*** batnaBuildingTime = "" + batnaBuildingTime);
        if (batna != null) {
            batnaBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, batna.getGiveSet(), batna.getGetSet(), estimate);
        }
        D.ebugPrintln(""*** batnaBuildingTime = "" + batnaBuildingTime);
        int[] rollsPerResource = estimate.getRollsPerResource();
        int[] neededRsrc = new int[5];
        int[] notNeededRsrc = new int[5];
        int neededRsrcCount = 0;
        int notNeededRsrcCount = 0;
        for (int rsrcType = SOCResourceConstants.CLAY; rsrcType <= SOCResourceConstants.WOOD; rsrcType++) {
            if (targetResources.getAmount(rsrcType) > 0) {
                neededRsrc[neededRsrcCount] = rsrcType;
                neededRsrcCount++;
            } else {
                notNeededRsrc[notNeededRsrcCount] = rsrcType;
                notNeededRsrcCount++;
            }
        }
        for (int j = neededRsrcCount - 1; j >= 0; j--) {
            for (int i = 0; i < j; i++) {
                if (rollsPerResource[neededRsrc[i]] > rollsPerResource[neededRsrc[i + 1]]) {
                    int tmp = neededRsrc[i];
                    neededRsrc[i] = neededRsrc[i + 1];
                    neededRsrc[i + 1] = tmp;
                }
            }
        }
        if (D.ebugOn) {
            for (int i = 0; i < neededRsrcCount; i++) {
                D.ebugPrintln(""NEEDED RSRC: "" + neededRsrc[i] + "" : "" + rollsPerResource[neededRsrc[i]]);
            }
        }
        for (int j = notNeededRsrcCount - 1; j >= 0; j--) {
            for (int i = 0; i < j; i++) {
                if (rollsPerResource[notNeededRsrc[i]] > rollsPerResource[notNeededRsrc[i + 1]]) {
                    int tmp = notNeededRsrc[i];
                    notNeededRsrc[i] = notNeededRsrc[i + 1];
                    notNeededRsrc[i + 1] = tmp;
                }
            }
        }
        if (D.ebugOn) {
            for (int i = 0; i < notNeededRsrcCount; i++) {
                D.ebugPrintln(""NOT-NEEDED RSRC: "" + notNeededRsrc[i] + "" : "" + rollsPerResource[notNeededRsrc[i]]);
            }
        }
        boolean[] someoneIsSellingResource = new boolean[SOCResourceConstants.MAXPLUSONE];
        for (int rsrcType = SOCResourceConstants.CLAY; rsrcType <= SOCResourceConstants.WOOD; rsrcType++) {
            someoneIsSellingResource[rsrcType] = false;
            for (int pn = 0; pn < SOCGame.MAXPLAYERS; pn++) {
                if ((pn != ourPlayerData.getPlayerNumber()) && (isSellingResource[pn][rsrcType])) {
                    someoneIsSellingResource[rsrcType] = true;
                    D.ebugPrintln(""*** player "" + pn + "" is selling "" + rsrcType);
                    break;
                }
            }
        }
        int getRsrcIdx = neededRsrcCount - 1;
        while ((getRsrcIdx >= 0) && ((ourResources.getAmount(neededRsrc[getRsrcIdx]) >= targetResources.getAmount(neededRsrc[getRsrcIdx])) || (!someoneIsSellingResource[neededRsrc[getRsrcIdx]]))) {
            getRsrcIdx--;
        }
        if (getRsrcIdx >= 0) {
            D.ebugPrintln(""*** getRsrc = "" + neededRsrc[getRsrcIdx]);
            getResourceSet.add(1, neededRsrc[getRsrcIdx]);
            D.ebugPrintln(""*** offer should be null : offer = "" + offer);
            int giveRsrcIdx = 0;
            while ((giveRsrcIdx < notNeededRsrcCount) && (offer == null)) {
                D.ebugPrintln(""*** ourResources.getAmount("" + notNeededRsrc[giveRsrcIdx] + "") = "" + ourResources.getAmount(notNeededRsrc[giveRsrcIdx]));
                if (ourResources.getAmount(notNeededRsrc[giveRsrcIdx]) > 0) {
                    giveResourceSet.clear();
                    giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx]);
                    offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                    D.ebugPrintln(""*** offer = "" + offer);
                    int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                }
                giveRsrcIdx++;
            }
            D.ebugPrintln(""*** ourResources = "" + ourResources);
            if (offer == null) {
                int giveRsrcIdx1 = 0;
                while ((giveRsrcIdx1 < neededRsrcCount) && (offer == null)) {
                    D.ebugPrintln(""*** ourResources.getAmount("" + neededRsrc[giveRsrcIdx1] + "") = "" + ourResources.getAmount(neededRsrc[giveRsrcIdx1]));
                    D.ebugPrintln(""*** targetResources.getAmount("" + neededRsrc[giveRsrcIdx1] + "") = "" + targetResources.getAmount(neededRsrc[giveRsrcIdx1]));
                    if ((ourResources.getAmount(neededRsrc[giveRsrcIdx1]) > targetResources.getAmount(neededRsrc[giveRsrcIdx1])) && (neededRsrc[giveRsrcIdx1] != neededRsrc[getRsrcIdx])) {
                        giveResourceSet.clear();
                        giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                        int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                        if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                            offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                            D.ebugPrintln(""*** offer = "" + offer);
                            D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                        }
                    }
                    giveRsrcIdx1++;
                }
            }
            D.ebugPrintln(""*** ourResources = "" + ourResources);
            SOCResourceSet leftovers = ourResources.copy();
            leftovers.subtract(targetResources);
            D.ebugPrintln(""*** leftovers = "" + leftovers);
            if (offer == null) {
                int giveRsrcIdx1 = 0;
                int giveRsrcIdx2 = 0;
                while ((giveRsrcIdx1 < notNeededRsrcCount) && (offer == null)) {
                    if (ourResources.getAmount(notNeededRsrc[giveRsrcIdx1]) > 0) {
                        while ((giveRsrcIdx2 < notNeededRsrcCount) && (offer == null)) {
                            giveResourceSet.clear();
                            giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx1]);
                            giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx2]);
                            if (ourResources.contains(giveResourceSet)) {
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            giveRsrcIdx2++;
                        }
                        giveRsrcIdx2 = 0;
                        while ((giveRsrcIdx2 < neededRsrcCount) && (offer == null)) {
                            if (neededRsrc[giveRsrcIdx2] != neededRsrc[getRsrcIdx]) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx1]);
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx2]);
                                if (leftovers.contains(giveResourceSet)) {
                                    int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                    if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                        offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                        D.ebugPrintln(""*** offer = "" + offer);
                                        D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                    }
                                }
                            }
                            giveRsrcIdx2++;
                        }
                    }
                    giveRsrcIdx1++;
                }
                giveRsrcIdx1 = 0;
                giveRsrcIdx2 = 0;
                while ((giveRsrcIdx1 < neededRsrcCount) && (offer == null)) {
                    if ((leftovers.getAmount(neededRsrc[giveRsrcIdx1]) > 0) && (neededRsrc[giveRsrcIdx1] != neededRsrc[getRsrcIdx])) {
                        while ((giveRsrcIdx2 < notNeededRsrcCount) && (offer == null)) {
                            giveResourceSet.clear();
                            giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                            giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx2]);
                            if (leftovers.contains(giveResourceSet)) {
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            giveRsrcIdx2++;
                        }
                        giveRsrcIdx2 = 0;
                        while ((giveRsrcIdx2 < neededRsrcCount) && (offer == null)) {
                            if (neededRsrc[giveRsrcIdx2] != neededRsrc[getRsrcIdx]) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx2]);
                                if (leftovers.contains(giveResourceSet)) {
                                    int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                    if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                        offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                        D.ebugPrintln(""*** offer = "" + offer);
                                        D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                    }
                                }
                            }
                            giveRsrcIdx2++;
                        }
                    }
                    giveRsrcIdx1++;
                }
            }
        }
        if (offer == null) {
            SOCResourceSet leftovers = ourResources.copy();
            leftovers.subtract(targetResources);
            D.ebugPrintln(""*** leftovers = "" + leftovers);
            int getRsrcIdx2 = notNeededRsrcCount - 1;
            while ((getRsrcIdx2 >= 0) && (!someoneIsSellingResource[neededRsrc[getRsrcIdx2]])) {
                getRsrcIdx2--;
            }
            while ((getRsrcIdx2 >= 0) && (offer == null)) {
                getResourceSet.clear();
                getResourceSet.add(1, notNeededRsrc[getRsrcIdx2]);
                leftovers.add(1, notNeededRsrc[getRsrcIdx2]);
                if (offer == null) {
                    int giveRsrcIdx1 = 0;
                    while ((giveRsrcIdx1 < notNeededRsrcCount) && (offer == null)) {
                        if ((leftovers.getAmount(notNeededRsrc[giveRsrcIdx1]) > 0) && (notNeededRsrc[giveRsrcIdx1] != notNeededRsrc[getRsrcIdx2])) {
                            leftovers.subtract(1, notNeededRsrc[giveRsrcIdx1]);
                            if (getOfferToBank(targetResources, leftovers) != null) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx1]);
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if (offerBuildingTime < batnaBuildingTime) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, notNeededRsrc[getRsrcIdx2]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            leftovers.add(1, notNeededRsrc[giveRsrcIdx1]);
                        }
                        giveRsrcIdx1++;
                    }
                }
                if (offer == null) {
                    int giveRsrcIdx1 = 0;
                    while ((giveRsrcIdx1 < neededRsrcCount) && (offer == null)) {
                        if (leftovers.getAmount(neededRsrc[giveRsrcIdx1]) > 0) {
                            leftovers.subtract(1, neededRsrc[giveRsrcIdx1]);
                            if (getOfferToBank(targetResources, leftovers) != null) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if (offerBuildingTime < batnaBuildingTime) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, notNeededRsrc[getRsrcIdx2]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            leftovers.add(1, neededRsrc[giveRsrcIdx1]);
                        }
                        giveRsrcIdx1++;
                    }
                }
                leftovers.subtract(1, notNeededRsrc[getRsrcIdx2]);
                getRsrcIdx2--;
            }
        }
        return offer;
    }","    public static void parseTextInlinedElement(StringBuilder strb, String text, int start, int end) {
        Pattern boldPattern = Pattern.compile(""(^|[\\. ,])([\\*\\+\\_])(.+)\\2($|[\\. ,])"");
        Matcher matcher = boldPattern.matcher(text);
        matcher.region(start, end);
        int i = start, j, k;
        while (matcher.find()) {
            j = matcher.start(2);
            k = matcher.end(2);
            strb.append(text, i, j - 1);
            renderTextInlinedElement(strb, text, j, k);
            i = k + 1;
        }
        if (i < text.length()) {
            strb.append(text, i, end);
        }
    }",0,0
"    public float[][] findDistances() {
        float[][] distance = new float[noseqs][noseqs];
        if (pwtype.equals(""PID"")) {
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    if (j == i) {
                        distance[i][i] = 0;
                    } else {
                        distance[i][j] = 100 - Comparison.compare(sequence[i], sequence[j]);
                        distance[j][i] = distance[i][j];
                    }
                }
            }
        } else {
            float max = -1;
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    AlignSeq as = new AlignSeq(sequence[i], sequence[j], ""pep"");
                    as.calcScoreMatrix();
                    as.traceAlignment();
                    as.printAlignment();
                    distance[i][j] = (float) as.maxscore;
                    if (max < distance[i][j]) {
                        max = distance[i][j];
                    }
                }
            }
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    distance[i][j] = max - distance[i][j];
                    distance[j][i] = distance[i][j];
                }
            }
        }
        return distance;
    }","            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    try {
                        if (Desktop.isDesktopSupported()) {
                            Desktop.getDesktop().browse(e.getURL().toURI());
                        } else Tools.openURL(e.getURL().toString());
                    } catch (Exception x) {
                        x.printStackTrace();
                    }
                }
            }",0,0
"    public static void sort(float norm_abst[]) {
        float temp;
        for (int i = 0; i < 7; i++) {
            for (int j = 0; j < 7; j++) {
                if (norm_abst[j] > norm_abst[j + 1]) {
                    temp = norm_abst[j];
                    norm_abst[j] = norm_abst[j + 1];
                    norm_abst[j + 1] = temp;
                }
            }
        }
        printFixed(norm_abst[0]);
        print("" "");
        printFixed(norm_abst[1]);
        print("" "");
        printFixed(norm_abst[2]);
        print("" "");
        printFixed(norm_abst[3]);
        print("" "");
        printFixed(norm_abst[4]);
        print("" "");
        printFixed(norm_abst[5]);
        print("" "");
        printFixed(norm_abst[6]);
        print("" "");
        printFixed(norm_abst[7]);
        print(""\n"");
    }","    public static int binarySearch(short[] a, short key) {
        int low = 0;
        int high = a.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            short midVal = a[mid];
            if (midVal < key) low = mid + 1; else if (midVal > key) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }",0,0
"    public void init(String[] args) throws Exception {
        prop = new Properties();
        prop.load(new FileInputStream(""PanFmpGui.properties""));
        if (args.length == 1) {
            searchService = new SearchService(args[0]);
        } else if (args.length > 1) {
            System.out.println(""Please specify path to panFMP config file, e.g."");
            System.out.println(""java -jar PanFmpGui ./config.xml"");
        }
        this.setSize(800, 600);
        this.setTitle(""panFMP GUI - alpha"");
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((dim.width - getSize().width) / 2, (dim.height - getSize().height) / 2);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JMenuBar menuBar = new JMenuBar();
        JMenu menuSystem = new JMenu(""System"");
        JMenuItem loadLocal = new JMenuItem();
        loadLocal.setText(""Load config file"");
        loadLocal.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser(""/"");
                fileChooser.addChoosableFileFilter(new XmlFilter());
                fileChooser.setAcceptAllFileFilterUsed(false);
                int returnVal = fileChooser.showOpenDialog(PanFmpGui.this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File pathToConfigFile = fileChooser.getSelectedFile();
                    try {
                        searchService = new SearchService(pathToConfigFile.toString());
                        Config conf = new Config(pathToConfigFile.toString(), ConfigMode.SEARCH);
                        Map<String, Config.Config_Field> fields = conf.fields;
                        fieldsCombo.removeAllItems();
                        Iterator<Map.Entry<String, Config.Config_Field>> itFields = fields.entrySet().iterator();
                        while (itFields.hasNext()) {
                            Map.Entry itPair = (Map.Entry) itFields.next();
                            Config_Field fc = (Config_Field) itPair.getValue();
                            if (fc.datatype.equals(DataType.STRING) || fc.datatype.equals(DataType.TOKENIZEDTEXT)) fieldsCombo.addItem(fc.name);
                        }
                        Collection<IndexConfig> indexList = conf.indices.values();
                        virtIndexCombo.removeAllItems();
                        for (IndexConfig iconf : indexList) {
                            if (iconf instanceof VirtualIndexConfig) {
                                VirtualIndexConfig viconf = (VirtualIndexConfig) iconf;
                                virtIndexCombo.addItem(viconf.id);
                            }
                        }
                        PanFmpGui.this.status.setText(""Config file successfully loaded"");
                    } catch (Exception ex) {
                    }
                    fieldsCombo.setEnabled(true);
                    virtIndexCombo.setEnabled(true);
                    listContentButton.setEnabled(true);
                }
            }
        });
        JMenuItem options = new JMenuItem();
        options.setText(""Options"");
        options.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                PanFmpGuiOptions pfgo = new PanFmpGuiOptions(PanFmpGui.this.prop);
                pfgo.init();
                pfgo.setVisible(true);
            }
        });
        JMenuItem close = new JMenuItem();
        close.setText(""Close"");
        close.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                PanFmpGui.this.setVisible(false);
                PanFmpGui.this.dispose();
            }
        });
        menuSystem.add(loadLocal);
        menuSystem.add(options);
        menuSystem.addSeparator();
        menuSystem.add(close);
        JMenu menuOperations = new JMenu(""Operations"");
        JMenuItem startHarvesting = new JMenuItem();
        startHarvesting.setText(""Start Harvesting"");
        startHarvesting.setEnabled(false);
        JMenuItem startRebuilding = new JMenuItem();
        startRebuilding.setText(""Rebuild Index"");
        startRebuilding.setEnabled(false);
        menuOperations.add(startHarvesting);
        menuOperations.add(startRebuilding);
        menuBar.add(menuSystem);
        menuBar.add(menuOperations);
        this.setJMenuBar(menuBar);
        JPanel listTermOptionsPanel = new JPanel();
        {
            TableLayout listTermOptionsPanelLayout = new TableLayout(new double[][] { { 10, 125, 150, 10, TableLayout.PREFERRED, 10 }, { 5, 25, 25 } });
            listTermOptionsPanel.setLayout(listTermOptionsPanelLayout);
            JLabel fieldsLabel = new JLabel(""Available Fields"");
            fieldsCombo = new JComboBox();
            if (searchService == null) {
                fieldsCombo.setEnabled(false);
            } else {
                fieldsCombo.setEnabled(true);
            }
            JLabel virtIndexLabel = new JLabel(""Virtual Index"");
            virtIndexCombo = new JComboBox();
            if (searchService == null) {
                virtIndexCombo.setEnabled(false);
            } else {
                virtIndexCombo.setEnabled(true);
            }
            listContentButton = new JButton(""list content"");
            listContentButton.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    SearchHandler searchHandler = new SearchHandler(PanFmpGui.this.searchService, PanFmpGui.this.virtIndexCombo.getSelectedItem().toString(), PanFmpGui.this.fieldsCombo.getSelectedItem().toString(), Integer.parseInt(prop.getProperty(""numberOfResults"")));
                    try {
                        String[] searchArray = searchHandler.listTerms();
                        PanFmpGui.this.status.setText(searchArray.length + "" entries found"");
                        StringBuffer resultBuffer = new StringBuffer();
                        for (String result : searchArray) {
                            resultBuffer.append(result + ""\n"");
                        }
                        PanFmpGui.this.textArea.setText(resultBuffer.toString());
                    } catch (Exception ex) {
                        System.out.println(ex);
                    }
                }
            });
            if (searchService == null) {
                listContentButton.setEnabled(false);
            } else {
                listContentButton.setEnabled(true);
            }
            listTermOptionsPanel.add(fieldsLabel, ""1, 1"");
            listTermOptionsPanel.add(fieldsCombo, ""2, 1"");
            listTermOptionsPanel.add(virtIndexLabel, ""1, 2"");
            listTermOptionsPanel.add(virtIndexCombo, ""2, 2"");
            listTermOptionsPanel.add(listContentButton, ""4, 1"");
        }
        gbc = new GridBagConstraints();
        textArea = new JTextArea(20, 66);
        JScrollPane listTermsScrollPane = new JScrollPane(textArea);
        textArea.setEditable(false);
        JPanel listTerms = new JPanel();
        TableLayout listTermsLayout = new TableLayout(new double[][] { { 10, TableLayout.FILL, 10 }, { 10, 80, TableLayout.FILL, 10 } });
        listTermsLayout.setHGap(5);
        listTermsLayout.setVGap(5);
        listTerms.setLayout(listTermsLayout);
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.NORTHWEST;
        listTerms.add(listTermOptionsPanel, ""1, 1"");
        gbc.ipady = 20;
        gbc.gridx = 0;
        gbc.gridy = 1;
        listTerms.add(listTermsScrollPane, ""1, 2"");
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.addTab(""List Terms"", null, listTerms, ""Lists all index entries of a field"");
        tabbedPane.setMnemonicAt(0, KeyEvent.VK_1);
        tabbedPane.setEnabledAt(0, true);
        JPanel searchIndex = new JPanel();
        {
            searchIndex.setLayout(new GridLayout());
            JPanel freeSearch = new JPanel();
            {
                freeSearch.setLayout(new GridBagLayout());
                freeSearchInputTextArea = new JTextArea(5, 40);
                JScrollPane scrollPane = new JScrollPane(freeSearchInputTextArea);
                freeSearchInputTextArea.setEditable(true);
                gbc = new GridBagConstraints();
                gbc.gridx = 0;
                gbc.gridy = 0;
                freeSearch.add(scrollPane, gbc);
                freeSearchButton = new JButton(""start search"");
                freeSearchButton.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        SearchHandler searchHandler = new SearchHandler(PanFmpGui.this.searchService, ""dataportal-c3grid"", PanFmpGui.this.fieldsCombo.getSelectedItem().toString(), PanFmpGui.this.freeSearchInputTextArea.getText(), Integer.parseInt(prop.get(""numberOfResults"").toString()));
                        try {
                            SearchResponse searchResponse = searchHandler.freeSearch();
                            SearchResponseItem[] searchResponseItems = searchResponse.getResults();
                            StringBuffer buffer = new StringBuffer("""");
                            buffer.append(searchResponse.getTotalCount() + ""\n"");
                            for (SearchResponseItem sResItem : searchResponseItems) {
                                buffer.append(sResItem.getIdentifier() + ""\n"");
                            }
                            PanFmpGui.this.freeSearchOutputTextArea.setText(buffer.toString());
                        } catch (Exception ex) {
                            System.out.println(ex);
                        }
                    }
                });
                gbc = new GridBagConstraints();
                gbc.gridx = 1;
                gbc.gridy = 0;
                gbc.gridwidth = GridBagConstraints.REMAINDER;
                freeSearch.add(freeSearchButton, new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
                freeSearchOutputTextArea = new JTextArea(20, 60);
                scrollPane = new JScrollPane(freeSearchOutputTextArea);
                freeSearchOutputTextArea.setEditable(false);
                gbc = new GridBagConstraints();
                gbc.ipady = 20;
                gbc.gridx = 0;
                gbc.gridy = 1;
                gbc.gridwidth = GridBagConstraints.REMAINDER;
                freeSearch.add(scrollPane, gbc);
            }
            JTabbedPane searchIndexTabbedPane = new JTabbedPane();
            searchIndexTabbedPane.addTab(""Field Search"", new JLabel());
            searchIndexTabbedPane.setEnabledAt(0, true);
            searchIndexTabbedPane.addTab(""Free Search"", freeSearch);
            searchIndexTabbedPane.setEnabledAt(1, true);
            gbc = new GridBagConstraints();
            gbc.anchor = GridBagConstraints.FIRST_LINE_START;
            searchIndex.add(searchIndexTabbedPane, gbc);
        }
        tabbedPane.addTab(""Search in Index"", null, searchIndex, ""Does twice as much nothing"");
        tabbedPane.setMnemonicAt(1, KeyEvent.VK_2);
        tabbedPane.setEnabledAt(1, true);
        JPanel panel3 = new JPanel();
        tabbedPane.addTab(""Edit Config File"", null, panel3, ""Still does nothing"");
        {
            jPanel1 = new JPanel();
            panel3.add(jPanel1);
            TableLayout jPanel1Layout = new TableLayout(new double[][] { { TableLayout.FILL, TableLayout.FILL, TableLayout.FILL, TableLayout.FILL }, { 126.0, TableLayout.FILL, TableLayout.FILL, TableLayout.FILL } });
            jPanel1Layout.setHGap(5);
            jPanel1Layout.setVGap(5);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1.setPreferredSize(new java.awt.Dimension(447, 141));
            jPanel1.setSize(PanFmpGui.this.getWidth() - 20, 141);
        }
        tabbedPane.setMnemonicAt(2, KeyEvent.VK_3);
        tabbedPane.setEnabledAt(2, true);
        this.add(tabbedPane);
        this.add(new JSeparator(), BorderLayout.SOUTH);
        this.status = new JLabel(""Status"");
        this.add(this.status, BorderLayout.SOUTH);
    }","    protected void processRequest(ChannelMap fwdData, PlugInChannelMap out) throws SAPIException {
        String[] chanList = out.GetChannelList();
        String requestChanStr = chanList[0];
        if (requestChanStr.endsWith(""/"")) {
            requestChanStr = requestChanStr.substring(0, requestChanStr.length() - 1);
        }
        System.err.println((new Date()).toString() + ""  Source: "" + requestChanStr);
        ChannelMap reqMap = new ChannelMap();
        reqMap.Add(requestChanStr + ""/Altitude"");
        reqMap.Add(requestChanStr + ""/Latitude"");
        reqMap.Add(requestChanStr + ""/Longitude"");
        reqMap.Add(requestChanStr + ""/GroundSpeed"");
        reqMap.Add(requestChanStr + ""/Heading"");
        sink.Request(reqMap, 0, 0, ""newest"");
        ChannelMap dataMap = sink.Fetch(60000);
        int altIndex = dataMap.GetIndex(requestChanStr + ""/Altitude"");
        double alt = 0.0;
        if (dataMap.GetType(altIndex) == ChannelMap.TYPE_FLOAT64) {
            alt = dataMap.GetDataAsFloat64(altIndex)[0];
        } else if (dataMap.GetType(altIndex) == ChannelMap.TYPE_FLOAT32) {
            alt = (double) dataMap.GetDataAsFloat32(altIndex)[0];
        }
        int latIndex = dataMap.GetIndex(requestChanStr + ""/Latitude"");
        double lat = 0.0;
        if (dataMap.GetType(latIndex) == ChannelMap.TYPE_FLOAT64) {
            lat = dataMap.GetDataAsFloat64(latIndex)[0];
        } else if (dataMap.GetType(latIndex) == ChannelMap.TYPE_FLOAT32) {
            lat = (double) dataMap.GetDataAsFloat32(latIndex)[0];
        }
        int lonIndex = dataMap.GetIndex(requestChanStr + ""/Longitude"");
        double lon = 0.0;
        if (dataMap.GetType(lonIndex) == ChannelMap.TYPE_FLOAT64) {
            lon = dataMap.GetDataAsFloat64(lonIndex)[0];
        } else if (dataMap.GetType(lonIndex) == ChannelMap.TYPE_FLOAT32) {
            lon = (double) dataMap.GetDataAsFloat32(lonIndex)[0];
        }
        int gsIndex = dataMap.GetIndex(requestChanStr + ""/GroundSpeed"");
        double gs = 0.0;
        if (dataMap.GetType(gsIndex) == ChannelMap.TYPE_FLOAT64) {
            gs = dataMap.GetDataAsFloat64(gsIndex)[0];
        } else if (dataMap.GetType(gsIndex) == ChannelMap.TYPE_FLOAT32) {
            gs = (double) dataMap.GetDataAsFloat32(gsIndex)[0];
        }
        int headIndex = dataMap.GetIndex(requestChanStr + ""/Heading"");
        double heading = 0.0;
        if (dataMap.GetType(headIndex) == ChannelMap.TYPE_FLOAT64) {
            heading = dataMap.GetDataAsFloat64(headIndex)[0];
        } else if (dataMap.GetType(headIndex) == ChannelMap.TYPE_FLOAT32) {
            heading = (double) dataMap.GetDataAsFloat32(headIndex)[0];
        }
        double dataTime = dataMap.GetTimes(altIndex)[0];
        double currTime = System.currentTimeMillis() / 1000.0;
        double latency = currTime - dataTime;
        boolean bMaxLatencyExceeded = false;
        if (latency > maxLatency) {
            latency = maxLatency;
            bMaxLatencyExceeded = true;
        }
        double radius = latency * gs;
        String kmlStr = createDRCircle(lat, lon, alt, radius, heading, bMaxLatencyExceeded);
        out.PutTime(System.currentTimeMillis() / 1000.0, out.GetRequestDuration());
        if (!bKMZ) {
            out.PutDataAsString(0, kmlStr);
            out.PutMime(0, ""application/vnd.google-earth.kml+xml"");
        } else {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            try {
                ZipOutputStream zos = new ZipOutputStream(baos);
                ZipEntry ze = new ZipEntry(""doc.kml"");
                zos.setMethod(ZipOutputStream.DEFLATED);
                zos.setLevel(Deflater.DEFAULT_COMPRESSION);
                zos.putNextEntry(ze);
                byte[] kmlBytes = kmlStr.getBytes();
                zos.write(kmlBytes, 0, kmlBytes.length);
                zos.close();
                out.PutDataAsByteArray(0, baos.toByteArray());
                out.PutMime(0, ""application/vnd.google-earth.kmz"");
            } catch (Exception ex) {
                System.err.println(""Exception generating KMZ: "" + ex.getMessage());
                throw new SAPIException(""Exception generating KMZ"");
            }
        }
    }",0,0
"    public static final Object[] changeSize(Object[] o, int newSize) {
        if (o.length == newSize) return o;
        Object[] temp = (Object[]) java.lang.reflect.Array.newInstance(o.getClass().getComponentType(), newSize);
        if (o.length < newSize) System.arraycopy(o, 0, temp, 0, o.length); else System.arraycopy(o, 0, temp, 0, temp.length);
        return temp;
    }","    private void extractLocation(String _loc, int _end) {
        String get_u = _loc.substring(_end, _loc.length()).trim();
        if (get_u.length() > 0) {
            System.out.print(""."");
            System.out.flush();
            Pattern _p = Pattern.compile(""^http://"", Pattern.CASE_INSENSITIVE);
            Matcher _m = _p.matcher(get_u);
            boolean _b = false;
            int _iend = -1;
            while (_m.find()) {
                _b = true;
                _iend = _m.end();
            }
            if (_iend > 0) {
                String pars02 = get_u.substring(_iend, get_u.length());
                _p = Pattern.compile(""/"");
                _m = _p.matcher(pars02.trim());
                String[] tok = _p.split(pars02.trim());
                String hst = tok[0].trim();
                int _s = -1;
                while (_m.find()) {
                    _s = _m.start();
                    if (_s > 0) break;
                }
                String rest = pars02.substring(_s, pars02.length()).trim();
                _host = hst;
                StringBuffer _buf = new StringBuffer();
                _buf.append(""GET "" + rest);
                _buf.append("" HTTP/1.1\r\n"");
                _buf.append(""Accept: text/html\r\n"");
                _buf.append(""Referer: "" + _refer + ""\r\n"");
                _buf.append(""Accept-Language: en-us\r\n"");
                _buf.append(""User-Agent: Mozilla/4.0 (compatible; "");
                _buf.append(""MSIE 6.0; Windows NT 5.1; "");
                _buf.append(""Avant Browser [avantbrowser.com]; "");
                _buf.append("".NET CLR 1.1.4322)\r\n"");
                _buf.append(""Host: "" + _host + ""\r\n"" + ""Connection: close\r\n\r\n"");
                String httpPost = _buf.toString();
                System.out.print(""."");
                System.out.flush();
                try {
                    Thread.sleep(100);
                    closeConnection();
                    _socket = new Socket(_host, _port);
                    if (_socket == null) throw new RuntimeException(""Invalid Host Connection""); else System.out.print("".."");
                    _socket.setSoTimeout(2 * 60 * 1000);
                    PrintWriter writer = new PrintWriter(_socket.getOutputStream(), true);
                    writer.print(httpPost);
                    writer.flush();
                    StringBuffer resultBuffer = new StringBuffer();
                    String line = null;
                    BufferedReader bufferedReader = null;
                    bufferedReader = new BufferedReader(new InputStreamReader(_socket.getInputStream()));
                    do {
                        try {
                            line = bufferedReader.readLine();
                        } catch (IOException exception) {
                            throw new RuntimeException(exception);
                        }
                        if (line != null) resultBuffer.append(line + ""\r\n"");
                    } while (line != null);
                    try {
                        _socket.close();
                        _socket = null;
                    } catch (Exception exception) {
                        exception.printStackTrace();
                    }
                    String result = resultBuffer.toString();
                    _passResults = result.trim();
                    redirectPassedFlag = true;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                throw new RuntimeException(""Invalid URL"");
            }
        }
    }",0,0
"        public void actionPerformed(ActionEvent e) {
            JFileChooser chooser = new JFileChooser();
            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) m_viewer.setGMNFile(chooser.getSelectedFile());
        }","    public DefaultDataFile(String fullName, int blockSize, int initialCapacity, boolean useDataChecksum, DataIO dataIO, BlockFileFactory blockFileFactory, BlockAllocatorFactory blockAllocatorFactory) throws IOException {
        this.fullName = fullName;
        this.fileName = dataIO.getName();
        this.readOnlyMode = dataIO.isReadOnly();
        if (blockSize <= (BLOCK_HEADER_SIZE + BLOCK_FOOTER_SIZE)) blockSize = 1024;
        if (initialCapacity < 0) initialCapacity = 100;
        this.initialCapacity = initialCapacity;
        boolean newFile = false;
        if (!dataIO.isNew() && (dataIO.length() >= DATA_FILE_HEADER_SIZE)) {
            dataIO.setFilePointer(0L);
            this.version = dataIO.readShort();
            this.allocationUnitSize = dataIO.readInt();
            this.useDataChecksum = dataIO.readBoolean();
            long checkSum = dataIO.readLong();
            byte[] headerBuf = dataFileHeaderFieldsToBytes();
            CRC32 crc32 = new CRC32();
            crc32.update(headerBuf);
            if (crc32.getValue() != checkSum) {
                throw new IOException(""Headers of "" + fullName + "" corrupted! Calculated checksum: "" + crc32.getValue() + "", checksum read from file: "" + checkSum + ""."");
            }
            this.blockSize = (allocationUnitSize + BLOCK_HEADER_SIZE + BLOCK_FOOTER_SIZE);
            newFile = false;
        } else {
            if (this.readOnlyMode) {
                if (!dataIO.isNew()) throw new IOException(""Insufficient headers found in '"" + this.fileName + ""'!""); else throw new FileNotFoundException(""'"" + this.fileName + ""' not found!"");
            }
            this.version = 1;
            this.allocationUnitSize = blockSize - (BLOCK_HEADER_SIZE + BLOCK_FOOTER_SIZE);
            this.useDataChecksum = useDataChecksum;
            byte[] headerBuf = dataFileHeaderFieldsToBytes();
            CRC32 crc32 = new CRC32();
            crc32.update(headerBuf);
            dataIO.setFilePointer(0L);
            dataIO.writeShort(version);
            dataIO.writeInt(allocationUnitSize);
            dataIO.writeBoolean(useDataChecksum);
            dataIO.writeLong(crc32.getValue());
            this.blockSize = blockSize;
            newFile = true;
        }
        this.blockFile = blockFileFactory.createBlockFile(dataIO, this.blockSize, DATA_FILE_HEADER_SIZE);
        this.deallocatedBlockHeaderBuffer = new byte[BLOCK_HEADER_SIZE];
        formatBlockHeader(false, false, -1, NULL_LINK, this.deallocatedBlockHeaderBuffer, 0);
        if (newFile) {
            this.dataChainsArray = new ArrayList(this.initialCapacity);
            final int listSize = this.initialCapacity / 5 + 10;
            this.dataStartBlocks = new IntList(listSize, listSize);
            this.itemDataSizes = new IntList(listSize, listSize);
            this.initNewFile();
            this.blockAllocator = blockAllocatorFactory.createBlockAllocator(this.initialCapacity, new int[0]);
        } else {
            int blockCapacity = this.blockFile.getBlockCapacity();
            if (!this.readOnlyMode) {
                if (blockCapacity < this.initialCapacity) {
                    blockCapacity = this.initialCapacity;
                    this.blockFile.setBlockCapacity(blockCapacity);
                }
            }
            this.dataChainsArray = new ArrayList(blockCapacity);
            final int listSize = blockCapacity / 5 + 10;
            this.dataStartBlocks = new IntList(listSize, listSize);
            this.itemDataSizes = new IntList(listSize, listSize);
            int[] occupiedIndices = this.initExistingFile();
            if (!this.readOnlyMode) this.blockAllocator = blockAllocatorFactory.createBlockAllocator(blockCapacity, occupiedIndices); else this.blockAllocator = null;
        }
        if (this.initialCapacity < 10) this.initialCapacityIncrementFactor = 1; else this.initialCapacityIncrementFactor = Math.min((int) Math.ceil(this.initialCapacity / 10), 1000);
    }",0,0
"    public static String[] separate(String str, String reg) {
        List<String> list = new ArrayList<String>();
        Pattern pattern = Pattern.compile(reg);
        Matcher matcher = pattern.matcher(str);
        while (matcher.find()) list.add(str.substring(matcher.start(), matcher.end()));
        return list.toArray(new String[list.size()]);
    }","    boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }",0,0
"    public GIMatrix transpose() throws BadMatrixFormatException {
        if (m != n) throw new BadMatrixFormatException();
        double[][] transpose = new double[array.length][array[0].length];
        for (int i = 0; i < m; i++) for (int j = 0; j < n; j++) transpose[i][j] = array[j][i];
        return new GIMatrix(transpose);
    }","    private static int executeCommand(final String commandName, final List<String> arguments) {
        System.out.println(""executing ["" + commandName.toString() + ""] with arguments: "" + Arrays.toString(arguments.toArray()));
        try {
            final List<String> pbArgs = new LinkedList<String>(arguments);
            pbArgs.add(0, commandName);
            final ProcessBuilder pb = new ProcessBuilder(pbArgs);
            System.out.println(""starting ..."");
            final Process process = pb.start();
            InputStream inputStream = process.getInputStream();
            InputStream errorStream = process.getErrorStream();
            ThreadedStreamHandler outputStreamHandler = ThreadedStreamHandler.newSimple(""OUT"", inputStream);
            ThreadedStreamHandler errorStreamHandler = ThreadedStreamHandler.newSimple(""ERR"", errorStream);
            outputStreamHandler.start();
            errorStreamHandler.start();
            System.out.println(""command running"");
            final int exitValue = process.waitFor();
            outputStreamHandler.interrupt();
            errorStreamHandler.interrupt();
            outputStreamHandler.join();
            errorStreamHandler.join();
            System.out.println(""finished. exitValue: "" + exitValue);
            return exitValue;
        } catch (final Exception e) {
            throw new RuntimeException(""executing command failed"", e);
        }
    }",0,0
"    public ImageDisplay(ImageDisplayApplet applet, GraphicsConfiguration gc) {
        this.applet = applet;
        if (applet == null) {
            frame = new JFrame(gc);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(PREFERRED_WIDTH, PREFERRED_HEIGHT));
        Action openAction = new AbstractAction(""Open File"", new ImageIcon(getClass().getResource(""/open.gif""))) {

            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }
        };
        JToolBar bar = new JToolBar();
        bar.add(new ToolBarButton(openAction));
        add(bar, BorderLayout.NORTH);
        if (applet == null) {
            frame.setTitle(""Image Display - Control Panel"");
            frame.getContentPane().add(this, BorderLayout.CENTER);
            frame.pack();
            frame.show();
        }
    }","    public Boolean connect() throws Exception {
        try {
            _ftpClient = new FTPClient();
            _ftpClient.connect(_url);
            _ftpClient.login(_username, _password);
            _rootPath = _ftpClient.printWorkingDirectory();
            return true;
        } catch (Exception ex) {
            throw new Exception(""Cannot connect to server."");
        }
    }",0,0
"    public Object[] getAll(Object key, Object[] array) {
        if (key == null) {
            Class t = (array == null) ? Object.class : array.getClass().getComponentType();
            int sz = size();
            if (array.length < sz) array = (Object[]) java.lang.reflect.Array.newInstance(t, sz);
            for (int x = 0, i = 0; i < collectionList.size(); i++) {
                ArrayList list = (ArrayList) collectionList.get(i);
                copyList = list.toArray(copyList);
                int z = list.size();
                System.arraycopy(copyList, 0, array, x, z);
                x += z;
            }
            if (array.length > sz) java.util.Arrays.fill(array, sz, array.length, null);
            java.util.Arrays.fill(copyList, null);
            return array;
        }
        ArrayList list = (ArrayList) keyMap.get(key);
        return list.toArray(array);
    }","            public void run() {
                GameSession.getInstance().setAdvancedMode(advancedMode);
                final JFrame frame = new JFrame(""Reversi Contender"");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                getGameContentPanel(frame);
                JMenuBar menuBar = new JMenuBar();
                JMenu gameMenu = new JMenu(""Game"");
                JMenuItem newGameMenuItem = new JMenuItem(""New Game"");
                newGameMenuItem.addActionListener(new NewGameActionListener(frame));
                gameMenu.add(newGameMenuItem);
                JMenuItem exitGameMenuItem = new JMenuItem(""Exit"");
                exitGameMenuItem.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        System.exit(0);
                    }
                });
                gameMenu.add(exitGameMenuItem);
                menuBar.add(gameMenu);
                JMenu editMenu = new JMenu(""Edit"");
                JMenuItem prefsItemMenu = new JMenuItem(""Preferences"");
                prefsItemMenu.addActionListener(new PreferencesActionListener(frame));
                editMenu.add(prefsItemMenu);
                menuBar.add(editMenu);
                JMenu helpMenu = new JMenu(""Help"");
                JMenuItem homePageMenuItem = new JMenuItem(""Visit Homepage"");
                homePageMenuItem.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        Desktop desktop = Desktop.getDesktop();
                        try {
                            desktop.browse(new URI(""http://code.google.com/p/reversi-contender""));
                        } catch (URISyntaxException ex) {
                            throw new RuntimeException();
                        } catch (IOException ex) {
                            JOptionPane.showMessageDialog(frame, ""We can't seem to open your browser, sorry!"", ""Browser Error"", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                });
                if (!Desktop.isDesktopSupported()) {
                    homePageMenuItem.setEnabled(false);
                }
                helpMenu.add(homePageMenuItem);
                JMenuItem versionCheckItem = new JMenuItem(""Check for new version"");
                versionCheckItem.addActionListener(new CheckVersionActionListener(frame));
                helpMenu.add(versionCheckItem);
                JMenuItem aboutMenuItem = new JMenuItem(""About"");
                aboutMenuItem.addActionListener(new AboutActionListener(frame));
                helpMenu.add(aboutMenuItem);
                menuBar.add(helpMenu);
                frame.setJMenuBar(menuBar);
                frame.pack();
                frame.setResizable(false);
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }",0,0
"    private void send(HttpServletRequest req, HttpServletResponse res, ServletOutputStream out, HttpSession ssn) throws IOException {
        String to = req.getParameter(""to"");
        String cc = req.getParameter(""cc"");
        String subj = req.getParameter(""subject"");
        String text = req.getParameter(""text"");
        try {
            MailUserData mud = getMUD(ssn);
            if (mud == null) throw new Exception(""trying to send, but not logged in"");
            Message msg = new MimeMessage(mud.getSession());
            InternetAddress[] toAddrs = null, ccAddrs = null;
            if (to != null) {
                toAddrs = InternetAddress.parse(to, false);
                msg.setRecipients(Message.RecipientType.TO, toAddrs);
            } else throw new MessagingException(""No \""To\"" address specified"");
            if (cc != null) {
                ccAddrs = InternetAddress.parse(cc, false);
                msg.setRecipients(Message.RecipientType.CC, ccAddrs);
            }
            if (subj != null) msg.setSubject(subj);
            URLName u = mud.getURLName();
            msg.setFrom(new InternetAddress(u.getUsername() + ""@"" + u.getHost()));
            if (text != null) msg.setText(text);
            Transport.send(msg);
            out.println(""<h1>Message sent successfully</h1></body></html>"");
            out.close();
        } catch (Exception mex) {
            out.println(""<h1>Error sending message.</h1>"");
            out.println(mex.toString());
            out.println(""<br></body></html>"");
        }
    }","            public void mouseClicked(MouseEvent e) {
                long delay = System.currentTimeMillis() - lastClicked;
                if (e.getButton() == MouseEvent.BUTTON1 && delay > 1000) {
                    e.consume();
                    lastClicked = System.currentTimeMillis();
                    if (Desktop.isDesktopSupported()) {
                        Desktop desktop = Desktop.getDesktop();
                        if (desktop.isSupported(Desktop.Action.BROWSE)) {
                            try {
                                desktop.browse(new URI(""http://everquest2.com/Valor/"" + URLEncoder.encode(label.getText(), ""UTF-8"") + ""/""));
                            } catch (Exception ex) {
                                System.err.println(ex.getMessage());
                            }
                        }
                    }
                }
            }",0,0
"    public static void symmetrizeComponents(double[][] components) {
        for (int i = 0; i < components.length; i++) {
            for (int j = i + 1; j < components.length; j++) {
                components[i][j] += components[j][i];
                components[i][j] *= 0.5;
                components[j][i] = components[i][j];
            }
        }
    }","    private byte[] getIHDRBytes(BufferedImage image) {
        byte bitDepth;
        byte colorType;
        int imageType = image.getType();
        switch(imageType) {
            case BufferedImage.TYPE_3BYTE_BGR:
            case BufferedImage.TYPE_INT_BGR:
            case BufferedImage.TYPE_INT_RGB:
            case BufferedImage.TYPE_USHORT_555_RGB:
            case BufferedImage.TYPE_USHORT_565_RGB:
                bitDepth = 8;
                colorType = 2;
                break;
            case BufferedImage.TYPE_4BYTE_ABGR:
            case BufferedImage.TYPE_INT_ARGB:
                bitDepth = 8;
                colorType = 6;
                break;
            case BufferedImage.TYPE_BYTE_INDEXED:
                bitDepth = 8;
                colorType = 3;
                break;
            case BufferedImage.TYPE_BYTE_GRAY:
                bitDepth = 8;
                colorType = 0;
                break;
            case BufferedImage.TYPE_USHORT_GRAY:
                bitDepth = 16;
                colorType = 0;
                break;
            case BufferedImage.TYPE_BYTE_BINARY:
            case BufferedImage.TYPE_4BYTE_ABGR_PRE:
            case BufferedImage.TYPE_INT_ARGB_PRE:
            case BufferedImage.TYPE_CUSTOM:
            default:
                throw new RuntimeException(""Unsupported image type"");
        }
        byte compressionMethod = 0;
        byte filterMethod = 0;
        byte interlaceMethod = 0;
        byte[] array = new byte[25];
        ByteBuffer buffer = ByteBuffer.wrap(array);
        buffer.putInt(13);
        buffer.put(getISO8859_1Bytes(CHUNK_TYPE_IHDR));
        buffer.putInt(image.getWidth());
        buffer.putInt(image.getHeight());
        buffer.put(bitDepth);
        buffer.put(colorType);
        buffer.put(compressionMethod);
        buffer.put(filterMethod);
        buffer.put(interlaceMethod);
        CRC32 crc = new CRC32();
        crc.update(array, 4, 17);
        buffer.putInt((int) crc.getValue());
        return array;
    }",0,0
"    public static long getCheckSum(String chaine) {
        CRC32 crc32 = new CRC32();
        crc32.update(chaine.getBytes());
        return crc32.getValue();
    }","    public static Object setLength(Object array, int newLength) {
        if (array == null) {
            return null;
        }
        Object t = Array.newInstance(array.getClass().getComponentType(), newLength);
        int oldLength = Array.getLength(array);
        System.arraycopy(array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
        return t;
    }",0,0
"    public static double[][] transpose(final double[][] m) {
        final double[][] mt = new double[m[0].length][m.length];
        for (int i = 0; i < mt.length; i++) {
            for (int j = 0; j < mt[i].length; j++) {
                mt[i][j] = m[j][i];
            }
        }
        return mt;
    }","    public static String update(String e1) {
        String s = """";
        String ex = """";
        String var = """";
        String t = e1;
        int i = 0;
        while (i < e1.length()) {
            if (t.indexOf('#') < 0) {
                if (i < 1) {
                    s = e1;
                }
                if (s.indexOf('#') > -1) {
                    s = update(s.replaceAll(""@"", ""@;""));
                    s = s.replaceAll("";"", """");
                }
                break;
            } else {
                if (e1.charAt(i) == '#') {
                    String s1 = e1.substring(i);
                    int j = s1.indexOf('@');
                    if (j > -1) {
                        if (s1.charAt(j + 1) == '(') {
                            ex = s1.substring(j + 1, s1.indexOf(')'));
                        } else {
                            if (s1.charAt(j + 1) == '#' || s1.charAt(j + 1) == ';') {
                                String ss = s1.substring(j + 1);
                                if (ss.indexOf(')') > 0) {
                                    ex = ss.substring(0, ss.indexOf("")""));
                                } else {
                                    ex = s1.substring(j + 1, s1.length());
                                }
                            } else {
                                ex = s1.substring(j + 1, j + 2);
                            }
                        }
                    }
                    int k = s1.indexOf('.');
                    if (k > -1) {
                        var = s1.substring(1, k);
                    }
                    if (t.charAt(0) != '#') {
                        s = s + t.substring(0, t.indexOf(""#""));
                    }
                    if (t.indexOf(""@"" + ex) + ex.length() + 1 < t.length()) {
                        t = t.substring(t.indexOf(""@"" + ex) + ex.length() + 1);
                    } else {
                        t = """";
                    }
                    if (j > -1) {
                        s1 = s1.substring(k + 1, j);
                    } else s1 = s1.substring(k + 1);
                    if (s.indexOf(""."") > 0) {
                        s = s.substring(0, s.indexOf(""#""));
                        s = s + s1.replaceAll(var, ex);
                    } else {
                        s = s + s1.replaceAll(var, ex);
                    }
                    int l = e1.length();
                    e1 = s + t;
                    i -= l - e1.length();
                    if (i < 0) {
                        i = 0;
                    }
                }
            }
            i++;
        }
        String mul = s + t;
        Pattern p = Pattern.compile(""[-?[\\d]+\\*]+-?[\\d]+"");
        Matcher m = p.matcher(e1);
        while (m.find()) {
            String occur = m.group();
            int start = m.start();
            int end = m.end();
            String[] muls = occur.split(""\\*"");
            int result = 1;
            for (int j = 0; j < muls.length; j++) {
                try {
                    int cur = Integer.parseInt(muls[j]);
                    result = result * cur;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            mul = mul.substring(0, start) + Integer.toString(result) + mul.substring(end, mul.length());
        }
        return mul;
    }",0,0
"    public static long getFileCRC32(File f) throws IOException {
        if (f.exists() && f.isFile()) {
            FileInputStream fis = new FileInputStream(f);
            CRC32 check = new CRC32();
            int b = fis.read();
            while (b != -1) {
                b = fis.read();
                check.update(b);
            }
            fis.close();
            return check.getValue();
        } else {
            return 0;
        }
    }","    public static void main(String[] args) {
        System.out.println(""Input any text with Unicode symbols: \\u**** (or &#****; if the program started with &#; parameter). Type 'stop' to exit"");
        System.out.println(""If you want to read from and save to file, use < and > command line syntax"");
        String unicode = ""\\u"";
        if (args.length > 0) unicode = args[0];
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            Writer writer = new OutputStreamWriter(System.out);
            String delim = "" "";
            Pattern pattern = Pattern.compile(delim);
            while (true) {
                String ss = reader.readLine();
                if (ss == null || ""stop"".equalsIgnoreCase(ss)) break;
                Matcher m = pattern.matcher(ss);
                int i = 0;
                while (m.find()) {
                    String s = ss.substring(i, m.start());
                    i = m.end();
                    decode(writer, s, unicode);
                    writer.write(delim);
                }
                if (i < ss.length()) decode(writer, ss.substring(i), unicode);
                writer.write(""\r\n"");
                writer.flush();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }",0,0
"    public ImageDisplay(ImageDisplayApplet applet, GraphicsConfiguration gc) {
        this.applet = applet;
        if (applet == null) {
            frame = new JFrame(gc);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(PREFERRED_WIDTH, PREFERRED_HEIGHT));
        Action openAction = new AbstractAction(""Open File"", new ImageIcon(getClass().getResource(""/open.gif""))) {

            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }
        };
        JToolBar bar = new JToolBar();
        bar.add(new ToolBarButton(openAction));
        add(bar, BorderLayout.NORTH);
        if (applet == null) {
            frame.setTitle(""Image Display - Control Panel"");
            frame.getContentPane().add(this, BorderLayout.CENTER);
            frame.pack();
            frame.setVisible(true);
        }
    }","    public static Object[] concat(Object[][] lsts) {
        int totLength = 0;
        Class<?> componentType = null;
        for (int i = 0; i < lsts.length; i++) {
            Object[] lst = lsts[i];
            if (lst == null) continue;
            if (componentType == null) componentType = lst.getClass().getComponentType(); else {
                Class<?> newComponentType = lst.getClass().getComponentType();
                if (newComponentType != componentType) {
                    if (!componentType.isAssignableFrom(newComponentType)) {
                        if (newComponentType.isAssignableFrom(componentType)) {
                            componentType = newComponentType;
                        } else {
                            componentType = Object.class;
                        }
                    }
                }
            }
            totLength += lst.length;
        }
        if (componentType == null) {
            return new Object[0];
        }
        Object[] l = (Object[]) Array.newInstance(componentType, totLength);
        int offset = 0;
        for (int i = 0; i < lsts.length; i++) {
            Object[] lst = lsts[i];
            if (lst == null) continue;
            System.arraycopy(lst, 0, l, offset, lst.length);
            offset += lst.length;
        }
        return l;
    }",0,0
"    public static String getAlbumName(String author, String track) {
        String url = ""http://musicbrainz.org/ws/1/track/?type=xml&title="" + track.replace(' ', '+') + ""&artist="" + author.replace(' ', '+');
        String ret = HTTP.get(url);
        System.out.println(url);
        String regexp = ""<title>[^<]*</title>"";
        Pattern p = Pattern.compile(regexp);
        Matcher m = p.matcher(ret);
        while (m.find()) {
            String s = ret.substring(m.start() + 7, m.end() - 8);
            if (!s.toUpperCase().equals(track.toUpperCase())) return s;
        }
        return """";
    }","    public static Object setLength(Object array, int newLength) {
        if (array == null) {
            return null;
        }
        Object t = Array.newInstance(array.getClass().getComponentType(), newLength);
        int oldLength = Array.getLength(array);
        System.arraycopy(array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
        return t;
    }",0,0
"    public void run() {
        try {
            charsExpected = 10000 * (testData[0].length() + testData[1].length());
            String fileName = ""/tmp/out"" + myNumber;
            final Process tac = Runtime.getRuntime().exec(new String[] { PROGRAM, fileName }, null, new File(""/tmp""));
            Thread writer = new Thread() {

                public void run() {
                    DataOutputStream stdin = new DataOutputStream(tac.getOutputStream());
                    try {
                        for (int x = 0; x < 10000; x++) {
                            for (int i = 0; i < testData.length; i++) {
                                charsWritten += testData[i].length();
                                stdin.writeUTF(testData[i]);
                            }
                        }
                        stdin.flush();
                        stdin.close();
                    } catch (IOException e) {
                        throw new Error(""TestRuntimeExec FAILED"");
                    }
                }
            };
            Thread reader = new Thread() {

                public void run() {
                    DataInputStream stdout = new DataInputStream(tac.getInputStream());
                    try {
                        for (int x = 0; x < 10000; x++) {
                            for (int i = 0; i < testData.length; i++) {
                                String in = stdout.readUTF();
                                charsRead += in.length();
                                if (!in.equals(testData[i])) throw new Error(""TestRuntimeExec FAILED: bad input "" + in);
                            }
                        }
                        int exitCode = tac.waitFor();
                        if (exitCode == 0 && charsRead == charsExpected && charsWritten == charsExpected) System.err.println(""TestRuntimeExec SUCCESS""); else System.err.println(""TestRuntimeExec FAILED"");
                    } catch (Throwable e) {
                        e.printStackTrace();
                        throw new Error(""TestRuntimeExec FAILED"");
                    }
                }
            };
            writer.start();
            reader.start();
            final Thread waiter = new Thread() {

                public void run() {
                    try {
                        int exitCode = tac.waitFor();
                        System.out.println(""waitFor(): Process exited with code "" + exitCode);
                    } catch (InterruptedException e) {
                        if (!interruptWait) {
                            System.out.println(""Waiting thread uninterrupted unexpectedly!!!"");
                            System.out.println(""TestRuntimeExec FAILED"");
                            System.exit(1);
                        }
                        System.out.println(""Waiting thread interrupted! (THIS IS GOOD)"");
                        e.printStackTrace();
                    }
                }
            };
            waiter.start();
            if (interruptWait) {
                new Thread() {

                    public void run() {
                        try {
                            Thread.sleep(2000);
                        } catch (Exception e) {
                        }
                        waiter.interrupt();
                    }
                }.start();
            }
            Thread poller = new Thread() {

                public void run() {
                    int exitCode = -99;
                    boolean exited = false;
                    do {
                        try {
                            exitCode = tac.exitValue();
                            exited = true;
                        } catch (IllegalThreadStateException e) {
                            System.out.println(""still alive!"");
                            try {
                                Thread.sleep(1000);
                            } catch (Exception ee) {
                            }
                        }
                    } while (!exited);
                    System.out.println(""exitValue(): Process exited with code "" + exitCode);
                }
            };
            poller.start();
            try {
                reader.join();
                writer.join();
                waiter.join();
                poller.join();
            } catch (InterruptedException eee) {
                eee.printStackTrace();
            }
        } catch (Throwable e) {
            System.err.println(""TestRuntimeExec FAILED with"");
            e.printStackTrace();
            System.exit(-1);
        }
    }","    public void doSplash() {
        final JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new FileFilter() {

            public boolean accept(final File f) {
                final String name = f.getName().toLowerCase();
                final int dotPos = name.lastIndexOf('.');
                final String ext = -1 == dotPos ? """" : name.substring(dotPos + 1);
                return f.isDirectory() || ext.equals(""gif"") || ext.equals(""png"") || ext.equals(""jpg"") || ext.equals(""jpeg"");
            }

            public String getDescription() {
                return ""Image files"";
            }
        });
        if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(x_main_extraParams)) addOption(""\""-splash:"" + chooser.getSelectedFile().getAbsolutePath() + '""');
    }",0,0
"    private void colorizeEdit(StyledText edit) {
        String findResult = edit.getText();
        final Color COLOR_BLUE = dialog.getDisplay().getSystemColor(SWT.COLOR_BLUE);
        int start = 0;
        int index = findResult.indexOf(""\n"");
        while (index != -1) {
            String subString = findResult.substring(start, index);
            if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.underline = true;
                ((StyledText) editResult).setStyleRange(style);
            } else {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.foreground = COLOR_BLUE;
                ((StyledText) editResult).setStyleRange(style);
            }
            start = index + 1;
            index = findResult.indexOf(""\n"", index + 1);
        }
        String subString = findResult.substring(start).replace(""\n"", """");
        if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.underline = true;
            ((StyledText) editResult).setStyleRange(style);
        } else {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.foreground = COLOR_BLUE;
            ((StyledText) editResult).setStyleRange(style);
        }
        if (!WorkspaceSaveContainerGlobal.findCurrent.equals("""")) {
            final Color COLOR_RED = dialog.getDisplay().getSystemColor(SWT.COLOR_RED);
            if (WorkspaceSaveContainerGlobal.regularExpression) {
                Pattern pattern = null;
                try {
                    if (WorkspaceSaveContainerGlobal.caseSensitive) pattern = Pattern.compile(WorkspaceSaveContainerGlobal.findCurrent); else pattern = Pattern.compile(WorkspaceSaveContainerGlobal.findCurrent, Pattern.CASE_INSENSITIVE);
                } catch (PatternSyntaxException e) {
                    return;
                }
                String[] findResultList = findResult.split(""\n"");
                int findResultListCount = findResultList.length;
                int findResultListIndex;
                int offset = 0;
                for (findResultListIndex = 0; findResultListIndex < findResultListCount; findResultListIndex++) {
                    Matcher matcher = pattern.matcher(findResultList[findResultListIndex]);
                    while (matcher.find()) {
                        int startIndex = matcher.start();
                        int endIndex = matcher.end();
                        StyleRange style = new StyleRange();
                        style.start = startIndex + offset;
                        style.length = endIndex - startIndex;
                        style.fontStyle = SWT.BOLD;
                        style.foreground = COLOR_RED;
                        ((StyledText) editResult).setStyleRange(style);
                    }
                    offset += findResultList[findResultListIndex].length() + 1;
                }
            } else {
                String findCurrentLowerCase = WorkspaceSaveContainerGlobal.findCurrent.toLowerCase();
                String findResultLowerCase = findResult.toLowerCase();
                if (WorkspaceSaveContainerGlobal.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainerGlobal.findCurrent); else index = findResultLowerCase.indexOf(findCurrentLowerCase);
                while (index != -1) {
                    StyleRange style = new StyleRange();
                    style.start = index;
                    style.length = WorkspaceSaveContainerGlobal.findCurrent.length();
                    style.fontStyle = SWT.BOLD;
                    style.foreground = COLOR_RED;
                    ((StyledText) editResult).setStyleRange(style);
                    if (WorkspaceSaveContainerGlobal.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainerGlobal.findCurrent, index + 1); else index = findResultLowerCase.indexOf(findCurrentLowerCase, index + 1);
                }
            }
        }
    }","    private void openFastaFileActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == openFastaFile) {
            int returnVal = fc.showOpenDialog(ParameterSolutions.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                inputFile = fc.getSelectedFile();
                log.append(""Opening: "" + inputFile.getName() + ""\n"");
                if (!inputFile.canRead() || !BinningFasta.verifyInputFile(inputFile)) {
                    log.append(""That is not a valid fasta file, please choose  a properly formatted fasta file.\n"");
                    inputFile = null;
                    return;
                }
                narr.println(""Opening: "" + inputFile.getName());
            } else {
                log.append(""Dialog Cancelled by User.\n"");
            }
        }
    }",0,0
"    public static Object resize(final Object[] ary, final int length) {
        final Object newary = Array.newInstance(ary.getClass().getComponentType(), length);
        final int copysize = length > ary.length ? length : ary.length;
        System.arraycopy(ary, 0, newary, 0, copysize);
        return newary;
    }","    public static double[][] transpose(double[][] M) {
        double[][] tM = new double[M[0].length][M.length];
        for (int i = 0; i < tM.length; i++) {
            for (int j = 0; j < tM[0].length; j++) {
                tM[i][j] = M[j][i];
            }
        }
        return tM;
    }",0,0
"    public static double[][] transpose(double[][] matrix) {
        double[][] transposed = new double[matrix[0].length][matrix.length];
        int mLength = matrix.length, m0Length = matrix[0].length;
        for (int i = 0; i < mLength; i++) {
            for (int j = 0; j < m0Length; j++) {
                transposed[j][i] = matrix[i][j];
            }
        }
        return transposed;
    }","    public String compile(String code, String name, boolean only) {
        if (only) {
            displayWait();
        }
        String output = """";
        String error = """";
        FileOutputStream out;
        PrintStream p;
        try {
            out = new FileOutputStream(name + "".java"");
            p = new PrintStream(out);
            p.println(code);
            p.close();
            out.close();
            Process p1 = Runtime.getRuntime().exec(""javac "" + name + "".java"");
            InputStream in = p1.getInputStream();
            InputStream err = p1.getErrorStream();
            int c = 0;
            int d = 0;
            c = in.read();
            d = err.read();
            while (c != -1) {
                output = output + (char) c;
                c = in.read();
            }
            while (d != -1) {
                error = error + (char) d;
                d = err.read();
            }
            in.close();
            err.close();
        } catch (Exception e) {
            System.out.println(""error"");
        }
        if (only) {
            if (error.equals("""")) {
                displayResult(""Compilation result"", ""Compilation sucessful"");
            } else {
                displayResult(""Compilation result"", error);
            }
        }
        return error;
    }",0,0
"    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }","    private String ParseInput(String Input) throws Exception {
        String tmp = Input.trim();
        int which = 0;
        if (tmp.equals("""")) return null;
        String tmps[] = tmp.split(""[\t ]+"");
        if (tmps != null) which = LookupCommands(tmps[0]); else which = LookupCommands(tmp);
        switch(which) {
            case 0:
            case 1:
                {
                    switch(CountArgs(tmp)) {
                        case 1:
                            ShowHelp("""");
                            break;
                        case 2:
                            String[] cmds = tmp.split(""[\t ]+"");
                            ShowHelp(cmds[1]);
                            break;
                        default:
                            throw new XylFTPException(""help"", ""Too many arguments."");
                    }
                    return null;
                }
            case 2:
                {
                    if (GetStatus() != 2) throw new XylFTPException(""ls"", ""Can't execute it now. Try again later."");
                    switch(CountArgs(tmp)) {
                        case 1:
                            SetLocalFile("""");
                            if (IsPassive()) return ""PASV\r\nLIST\r\n""; else return ""PORT "" + GetSelfIP() + GetSelfPort() + ""\r\nLIST\r\n"";
                        default:
                            String[] cmds = tmp.split(""[\t ]+"");
                            String substr = """";
                            for (int i = 1; i < cmds.length; i++) substr = substr + cmds[i] + "" "";
                            SetLocalFile("""");
                            substr = substr.trim();
                            if (IsPassive()) return ""PASV\r\nLIST "" + substr + ""\r\n""; else return ""PORT "" + GetSelfIP() + GetSelfPort() + ""\r\nLIST "" + substr + ""\r\n"";
                    }
                }
            case 3:
                {
                    switch(CountArgs(tmp)) {
                        case 1:
                            String[] list = CurrentDir.list();
                            for (int i = 0; i < list.length; i++) {
                                System.out.println(list[i]);
                            }
                            break;
                        default:
                            String[] cmds = tmp.split(""[\t ]+"");
                            File f2;
                            for (int i = 1; i < cmds.length; i++) {
                                f2 = new File(CurrentDir.getCanonicalPath() + File.separator + cmds[i]);
                                if (!f2.exists()) {
                                    System.out.println(cmds[i] + "" doesn't exist."");
                                    break;
                                } else {
                                    if (f2.isFile()) System.out.println(cmds[i]);
                                    if (f2.isDirectory()) {
                                        System.out.println(cmds[i] + "":"");
                                        String[] lst = f2.list();
                                        for (int j = 0; j < lst.length; j++) System.out.println(""\t"" + lst[j]);
                                    }
                                }
                            }
                    }
                    return null;
                }
            case 4:
                {
                    if (GetStatus() != 2) throw new XylFTPException(""dir"", ""Can't execute it now. Try again later."");
                    switch(CountArgs(tmp)) {
                        case 1:
                            SetLocalFile("""");
                            if (IsPassive()) return ""PASV\r\nNLST\r\n""; else return ""PORT "" + GetSelfIP() + GetSelfPort() + ""\r\nNLST\r\n"";
                        default:
                            String[] cmds = tmp.split(""[\t ]+"");
                            String substr = """";
                            for (int i = 1; i < cmds.length; i++) substr = substr + cmds[i] + "" "";
                            SetLocalFile("""");
                            substr = substr.trim();
                            if (IsPassive()) return ""PASV\r\nNLST "" + substr + ""\r\n""; else return ""PORT "" + GetSelfIP() + GetSelfPort() + ""\r\nNLST "" + substr + ""\r\n"";
                    }
                }
            case 5:
                {
                    if (GetStatus() != 2) throw new XylFTPException(""get"", ""You can't excute it now. Try again later."");
                    switch(CountArgs(tmp)) {
                        case 1:
                            throw new XylFTPException(""get"", ""Missed arguments."");
                        case 2:
                            String[] cmds = tmp.split(""[\t ]+"");
                            String tmp3 = cmds[1];
                            if (cmds[1].charAt(0) != '/') tmp3 = CurrentDir.getCanonicalPath() + File.separator + cmds[1];
                            int p = tmp3.lastIndexOf(""/"");
                            if (p != -1) {
                                File d = new File(tmp3.substring(0, p));
                                if (!d.exists()) throw new XylFTPException(""get"", ""Directory doesn't exist."");
                            }
                            SetLocalFile(tmp3);
                            File f = new File(tmp3);
                            if (f.isDirectory()) throw new XylFTPException(""get"", ""can't gets to a directory."");
                            if (IsPassive()) return ""PASV\r\nRETR "" + cmds[1] + ""\r\n""; else return ""PORT "" + GetSelfIP() + GetSelfPort() + ""\r\nRETR "" + cmds[1] + ""\r\n"";
                        case 3:
                            String[] cmds2 = tmp.split(""[\t ]+"");
                            String tmp4 = cmds2[2];
                            if (cmds2[2].charAt(0) != '/') tmp4 = CurrentDir.getCanonicalPath() + File.separator + cmds2[2];
                            int q = tmp4.lastIndexOf(""/"");
                            if (q != -1) {
                                File d2 = new File(tmp4.substring(0, q));
                                if (!d2.exists()) throw new XylFTPException(""get"", ""Directory doesn't exist."");
                            }
                            SetLocalFile(tmp4);
                            File f2 = new File(tmp4);
                            if (f2.isDirectory()) throw new XylFTPException(""get"", ""can't gets to a directory."");
                            if (IsPassive()) return ""PASV\r\nRETR "" + cmds2[1] + ""\r\n""; else return ""PORT "" + GetSelfIP() + GetSelfPort() + ""\r\nRETR "" + cmds2[1] + ""\r\n"";
                        default:
                            throw new XylFTPException(""get"", ""Too many arguments."");
                    }
                }
            case 6:
                {
                    if (GetStatus() != 2) throw new XylFTPException(""put"", ""You can't excute it now. Try again later."");
                    switch(CountArgs(tmp)) {
                        case 1:
                            throw new XylFTPException(""put"", ""Missed arguments."");
                        case 2:
                            String[] cmds = tmp.split(""[\t ]+"");
                            String tmp1 = cmds[1];
                            if (cmds[1].charAt(0) != '/') tmp1 = CurrentDir.getCanonicalPath() + File.separator + cmds[1];
                            SetLocalFile(tmp1);
                            File f = new File(tmp1);
                            if (!f.exists()) throw new XylFTPException(""put"", ""file doesn't exist."");
                            if (f.isDirectory()) throw new XylFTPException(""put"", ""can't puts from a directory."");
                            if (IsPassive()) return ""PASV\r\nSTOR "" + cmds[1] + ""\r\n""; else return ""PORT "" + GetSelfIP() + GetSelfPort() + ""\r\nSTOR "" + cmds[1] + ""\r\n"";
                        case 3:
                            String[] cmds2 = tmp.split(""[\t ]+"");
                            String tmp2 = cmds2[1];
                            if (cmds2[1].charAt(0) != '/') tmp2 = CurrentDir.getCanonicalPath() + File.separator + cmds2[1];
                            SetLocalFile(tmp2);
                            File f2 = new File(tmp2);
                            if (!f2.exists()) throw new XylFTPException(""put"", ""file doesn't exist."");
                            if (f2.isDirectory()) throw new XylFTPException(""put"", ""can't puts from a directory."");
                            if (IsPassive()) return ""PASV\r\nSTOR "" + cmds2[2] + ""\r\n""; else return ""PORT "" + GetSelfIP() + GetSelfPort() + ""\r\nSTOR "" + cmds2[2] + ""\r\n"";
                        default:
                            throw new XylFTPException(""put"", ""Too many arguments."");
                    }
                }
            case 7:
            case 8:
                {
                    if (GetStatus() != 2) throw new XylFTPException(""cd"", ""You can't execute it now. Try again later."");
                    switch(CountArgs(tmp)) {
                        case 1:
                            return null;
                        case 2:
                            String[] cmds = tmp.split(""[\t ]+"");
                            return ""CWD "" + cmds[1] + ""\r\n"";
                        default:
                            throw new XylFTPException(""cd"", ""Too many arguments."");
                    }
                }
            case 9:
            case 10:
                {
                    switch(CountArgs(tmp)) {
                        case 1:
                            break;
                        case 2:
                            String[] cmds = tmp.split(""[\t ]+"");
                            if (cmds[1].equals(""."")) break; else if (cmds[1].equals("".."")) {
                                String parent = CurrentDir.getAbsoluteFile().getParent();
                                if (parent == null) {
                                    break;
                                } else {
                                    System.out.println(""cd into: "" + parent);
                                    CurrentDir = new File(parent);
                                }
                            } else if (cmds[1].charAt(0) == '/') {
                                File ff = new File(cmds[1]);
                                if (!ff.exists() || !ff.isDirectory()) System.out.println(cmds[1] + "": No such dir.""); else {
                                    CurrentDir = ff;
                                    System.out.println(""cd into: "" + CurrentDir.getCanonicalPath());
                                }
                            } else {
                                File fl = new File(CurrentDir.getCanonicalPath() + File.separator + cmds[1]);
                                if (!fl.exists() || !fl.isDirectory()) System.out.println(cmds[1] + "": No such dir.""); else {
                                    CurrentDir = fl;
                                    System.out.println(""cd into: "" + CurrentDir.getCanonicalPath());
                                }
                            }
                            break;
                        default:
                            throw new XylFTPException(""cd"", ""Too many arguments."");
                    }
                    return null;
                }
            case 11:
                {
                    if (GetStatus() != 2) throw new XylFTPException(""pwd"", ""You can't execute it now. Try again later."");
                    switch(CountArgs(tmp)) {
                        case 1:
                            return ""PWD\r\n"";
                        default:
                            throw new XylFTPException(""pwd"", ""It doesn't accept any arguments."");
                    }
                }
            case 12:
                {
                    switch(CountArgs(tmp)) {
                        case 1:
                            System.out.println(CurrentDir.getCanonicalPath());
                            break;
                        default:
                            throw new XylFTPException(""lpwd"", ""It doesn't accept any arguments."");
                    }
                    return null;
                }
            case 13:
                {
                    switch(CountArgs(tmp)) {
                        case 2:
                            String[] cmds = tmp.split(""[\t ]+"");
                            if (!cmds[1].equals(""on"") && !cmds[1].equals(""off"")) throw new XylFTPException(""passive"", ""Wrong arugment.""); else {
                                if (cmds[1].equals(""on"")) {
                                    System.out.println(""Passive mode on."");
                                    SetPassive();
                                } else {
                                    System.out.println(""Passive mode off."");
                                    SetActive();
                                }
                            }
                            break;
                        case 1:
                            throw new XylFTPException(""passive"", ""It must have an argument."");
                        default:
                            throw new XylFTPException(""passive"", ""Too many arguments."");
                    }
                    return null;
                }
            case 14:
                {
                    if (GetStatus() != 2) throw new XylFTPException(""cdup"", ""Can't execute it now. Try again later."");
                    switch(CountArgs(tmp)) {
                        case 1:
                            return ""CDUP\r\n"";
                        default:
                            throw new XylFTPException(""cdup"", ""It doesn't accept any arguments."");
                    }
                }
            case 15:
                {
                    switch(CountArgs(tmp)) {
                        case 1:
                            String parent = CurrentDir.getAbsoluteFile().getParent();
                            if (parent == null) {
                                break;
                            } else {
                                System.out.println(""cd into: "" + parent);
                                CurrentDir = new File(parent);
                            }
                            break;
                        default:
                            throw new XylFTPException(""lcdup"", ""It doesn't accept any arguments."");
                    }
                    return null;
                }
            case 16:
            case 17:
                {
                    if (CountArgs(tmp) > 1) {
                        throw new XylFTPException(""quit"", ""It doesn't accept any arguments."");
                    }
                    switch(GetStatus()) {
                        case 0:
                            System.exit(0);
                        case 1:
                        case 2:
                            return ""QUIT\r\nQUIT\r\n"";
                        case 3:
                        case 4:
                            return ""ABOR\r\nQUIT\r\nQUIT\r\n"";
                        default:
                            throw new XylFTPException(""Unknown status!"");
                    }
                }
            case 18:
                {
                    int n = CountArgs(tmp);
                    if (n < 2) {
                        throw new XylFTPException(""open"", ""It must be followed by at least one argument."");
                    }
                    if (n > 3) {
                        throw new XylFTPException(""open"", ""Too many arguments."");
                    }
                    switch(GetStatus()) {
                        case 0:
                        case 1:
                            int portNum;
                            String[] cmds = tmp.split(""[\t ]+"");
                            if (cmds.length == 2) {
                                portNum = 21;
                            } else {
                                try {
                                    portNum = Integer.parseInt(cmds[2]);
                                } catch (NumberFormatException e) {
                                    ShowHelp(""open"");
                                    return null;
                                }
                            }
                            SetHost(cmds[1]);
                            SetPort(portNum);
                            OpenConnection();
                            String s = GetEcho();
                            if (s == null) throw new XylFTPException(""xylftp"", 0, ""Cann't get an echo.""); else System.out.println(s);
                            while (s.charAt(3) == '-') {
                                s = GetEcho();
                                if (s == null) throw new XylFTPException(""xylftp"", 0, ""Can't get an echo."");
                                if (XylFTPMain.GetEnableDebug()) System.out.println(""<---"" + s);
                                System.out.println(s);
                            }
                            SetStatus(1);
                            return ""USER "" + UserName + ""\r\n"" + ""PASS "" + PassWord + ""\r\n"";
                        case 2:
                        case 3:
                        case 4:
                            throw new XylFTPException(""Connection already existed."");
                        default:
                            throw new XylFTPException(""panic"", ""Unknown status!"");
                    }
                }
            case 19:
                {
                    if (CountArgs(tmp) > 1) {
                        throw new XylFTPException(""close"", ""Too many arguments."");
                    }
                    switch(GetStatus()) {
                        case 0:
                            throw new XylFTPException(""Not connected yet."");
                        case 1:
                        case 2:
                            return ""QUIT\r\n"";
                        case 3:
                        case 4:
                            return ""ABOR\r\nQUIT\r\n"";
                        default:
                            throw new XylFTPException(""Unknown status!"");
                    }
                }
            case 20:
                {
                    switch(GetStatus()) {
                        case 0:
                            String[] cmds = tmp.split(""[\t ]+"");
                            if (cmds.length == 2) {
                                UserName = cmds[1];
                            } else if (cmds.length == 3) {
                                UserName = cmds[1];
                                PassWord = cmds[2];
                            } else if (cmds.length == 1) {
                                throw new XylFTPException(""user"", ""It must be followed by at least one argument."");
                            } else {
                                throw new XylFTPException(""user"", ""Too many arguments."");
                            }
                            SetUserName(UserName);
                            SetPassWord(PassWord);
                            return null;
                        case 1:
                        case 2:
                            String[] cmds2 = tmp.split(""[\t ]+"");
                            if (cmds2.length == 2) {
                                UserName = cmds2[1];
                            } else if (cmds2.length == 3) {
                                UserName = cmds2[1];
                                PassWord = cmds2[2];
                            } else if (cmds2.length == 1) {
                                throw new XylFTPException(""user"", ""It must be followed by at least one argument."");
                            } else {
                                throw new XylFTPException(""user"", ""Too many arguments."");
                            }
                            return ""USER "" + UserName + ""\r\n"" + ""PASS "" + PassWord + ""\r\n"";
                        case 3:
                        case 4:
                            throw new XylFTPException(""user"", ""Can't execute it now. Try again later."");
                        default:
                            throw new XylFTPException(""panic"", ""Unknown status!"");
                    }
                }
            case 21:
                {
                    if (CountArgs(tmp) > 1) {
                        throw new XylFTPException(""!!"", ""It doesn't accept any arguments."");
                    } else {
                        System.out.println(""=====Enter shell mode====="");
                        String cmd = GetInput();
                        System.out.println(""cmd :"" + cmd);
                        while (!cmd.equals(""exit"")) {
                            Runtime run = Runtime.getRuntime();
                            Process pp = run.exec(cmd);
                            pp.waitFor();
                            BufferedReader in = new BufferedReader(new InputStreamReader(pp.getInputStream()));
                            String line;
                            while ((line = in.readLine()) != null) {
                                System.out.println(line);
                            }
                            cmd = GetInput();
                        }
                        System.out.println(""=====Exit shell mode====="");
                        return null;
                    }
                }
            case 22:
                {
                    if (GetStatus() != 2) throw new XylFTPException(""delete"", ""Can't execute it now. Try again later."");
                    switch(CountArgs(tmp)) {
                        case 1:
                            throw new XylFTPException(""delete"", ""Missed arguments."");
                        case 2:
                            String[] cmds = tmp.split(""[\t ]+"");
                            return ""DELE "" + cmds[1] + ""\r\n"";
                        default:
                            throw new XylFTPException(""delete"", ""Too many arguments."");
                    }
                }
            case 23:
                {
                    if (GetStatus() != 2) throw new XylFTPException(""rmdir"", ""Can't execute it now. Try again later."");
                    switch(CountArgs(tmp)) {
                        case 1:
                            throw new XylFTPException(""rmdir"", ""Missed arguments."");
                        case 2:
                            String[] cmds = tmp.split(""[\t ]+"");
                            return ""RMD "" + cmds[1] + ""\r\n"";
                        default:
                            throw new XylFTPException(""rmdir"", ""Too many arguments."");
                    }
                }
            case 24:
                {
                    if (GetStatus() != 2) throw new XylFTPException(""mkdir"", ""Can't execute it now. Try again later."");
                    switch(CountArgs(tmp)) {
                        case 1:
                            throw new XylFTPException(""mkdir"", ""Missed arguments."");
                        case 2:
                            String[] cmds = tmp.split(""[\t ]+"");
                            return ""MKD "" + cmds[1] + ""\r\n"";
                        default:
                            throw new XylFTPException(""mkdir"", ""Too many arguments."");
                    }
                }
            case 25:
                {
                    if (GetStatus() != 2) throw new XylFTPException(""chmod"", ""Can't execute it now. Try again later."");
                    switch(CountArgs(tmp)) {
                        case 1:
                        case 2:
                            throw new XylFTPException(""chmod"", ""Missed arguments."");
                        case 3:
                            String[] cmds = tmp.split(""[\t ]+"");
                            return ""SITE CHMOD "" + cmds[1] + "" "" + cmds[2] + ""\r\n"";
                        default:
                            throw new XylFTPException(""chmod"", ""Too many arguments."");
                    }
                }
            case 26:
                {
                    if (GetStatus() != 2) throw new XylFTPException(""size"", ""Can't execute it now. Try again later."");
                    switch(CountArgs(tmp)) {
                        case 1:
                            throw new XylFTPException(""size"", ""Missed arguments."");
                        case 2:
                            String[] cmds = tmp.split(""[\t ]+"");
                            return ""SIZE "" + cmds[1] + ""\r\n"";
                        default:
                            throw new XylFTPException(""size"", ""Too many arguments."");
                    }
                }
            case 27:
                {
                    if (GetStatus() != 2) throw new XylFTPException(""rename"", ""Can't execute it now. Try again later."");
                    switch(CountArgs(tmp)) {
                        case 1:
                        case 2:
                            throw new XylFTPException(""rename"", ""Missed arguments."");
                        case 3:
                            String[] cmds = tmp.split(""[\t ]+"");
                            return ""RNFR "" + cmds[1] + ""\r\nRNTO "" + cmds[2] + ""\r\n"";
                        default:
                            throw new XylFTPException(""rename"", ""Too many arguments."");
                    }
                }
            case 28:
                {
                    switch(CountArgs(tmp)) {
                        case 1:
                            if (GetTransferMode() == 0) System.out.println(""Using binary mode to transfer files.""); else System.out.println(""Using ascii mode to transfer files."");
                            return null;
                        case 2:
                            String[] cmds = tmp.split(""[\t ]+"");
                            if (cmds[1].equalsIgnoreCase(""ascii"")) return ""TYPE A\r\n""; else if (cmds[1].equalsIgnoreCase(""binary"")) return ""TYPE I\r\n""; else throw new XylFTPException(""type"", ""Wrong arguments."");
                        default:
                            throw new XylFTPException(""type"", ""Too many arguments."");
                    }
                }
            case 29:
                {
                    switch(GetStatus()) {
                        case 0:
                            System.out.println(""Not connected."");
                            break;
                        case 1:
                            System.out.println(""Connected to "" + GetHost() + "",but not login."");
                            break;
                        case 2:
                            System.out.println(""Login ("" + GetHost() + "") and no data transfer."");
                            break;
                        case 3:
                            System.out.println(""Login ("" + GetHost() + "") and getting data down."");
                            break;
                        case 4:
                            System.out.println(""Login ("" + GetHost() + "") and putting data up."");
                            break;
                        default:
                            throw new XylFTPException(""status"", ""Wrong status."");
                    }
                    if (IsPassive()) {
                        System.out.println(""Passive: on"");
                    } else System.out.println(""Passive: off"");
                    if (GetTransferMode() == 0) System.out.println(""Type: binary""); else System.out.println(""Type: ascii"");
                    if (XylFTPMain.GetEnableVerbose()) {
                        System.out.println(""Verbose: on"");
                    } else System.out.println(""Verbose: off"");
                    if (XylFTPMain.GetEnableDebug()) {
                        System.out.println(""Debug: on"");
                    } else System.out.println(""Debug: off"");
                    return null;
                }
            case 30:
                {
                    String in, echo;
                    int ret;
                    if (GetStatus() == 0) throw new XylFTPException(""quote"", ""Not connection."");
                    switch(CountArgs(tmp)) {
                        case 1:
                            System.out.print(""Enter the command to send:"");
                            in = GetInput();
                            break;
                        default:
                            in = tmp.substring(5, tmp.length()).trim();
                    }
                    SendCommand(in);
                    if (XylFTPMain.GetEnableDebug()) System.out.println(""--->"" + in);
                    do {
                        echo = GetEcho();
                        if (echo == null || !IsValidEcho(echo)) throw new XylFTPException(""Can't get an echo."");
                        if (XylFTPMain.GetEnableDebug()) System.out.println(""<---"" + echo);
                        ret = ProcessEcho(echo);
                    } while (ret == 6);
                    return null;
                }
            case 31:
                {
                    switch(CountArgs(tmp)) {
                        case 1:
                            if (XylFTPMain.GetEnableVerbose()) {
                                XylFTPMain.SetEnableVerbose(false);
                                System.out.println(""Verbose off."");
                            } else {
                                XylFTPMain.SetEnableVerbose(true);
                                System.out.println(""Verbose on."");
                            }
                            break;
                        default:
                            throw new XylFTPException(""verbose"", ""Too many arguments."");
                    }
                    return null;
                }
            case 32:
                {
                    switch(CountArgs(tmp)) {
                        case 1:
                            if (XylFTPMain.GetEnableDebug()) {
                                XylFTPMain.SetEnableDebug(false);
                                System.out.println(""Debugging off."");
                            } else {
                                XylFTPMain.SetEnableDebug(true);
                                System.out.println(""Debugging on."");
                            }
                            break;
                        default:
                            throw new XylFTPException(""debug"", ""Too many arguments."");
                    }
                    return null;
                }
            default:
                throw new XylFTPException(""xylftp"", GetStatus(), ""Unknown command!"");
        }
    }",0,0
"    public void printContained() {
        BufferedWriter outputChart;
        outputChart = null;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.CANCEL_OPTION) return;
        File fileName = fileChooser.getSelectedFile();
        if (fileName == null || fileName.getName().equals("""")) {
            JOptionPane.showMessageDialog(this, ""Invalid File Name"", ""Invalid File Name"", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                outputChart = new BufferedWriter(new FileWriter(fileName));
                System.out.println(""I SHOULD work"");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, ""Error Saving File"", ""Error"", JOptionPane.ERROR_MESSAGE);
            }
        }
        Object[] cells = graph.getDescendants(graph.getRoots());
        for (int i = 0; i < cells.length; i++) {
            if (isGroup(cells[i])) {
                System.out.println(""I found a group Cell, do something please"");
            }
        }
        allStates = new Hashtable<String, Object>();
        allTransitions = new Hashtable<String, Object>();
        for (int i = 0; i < cells.length; i++) {
            if (cells[i] instanceof DefaultEdge) {
                allTransitions.put(cells[i].toString(), cells[i]);
            } else if (cells[i] instanceof basicCell) {
                allStates.put(cells[i].toString(), cells[i]);
            } else if (cells[i] instanceof SwimLaneCell) {
                allStates.put(cells[i].toString(), cells[i]);
            } else if (cells[i] instanceof AndStateCell) {
                allStates.put(cells[i].toString(), cells[i]);
            } else if (cells[i] instanceof orthogonalCell) {
                allStates.put(cells[i].toString(), cells[i]);
            } else if (cells[i] instanceof circle) {
                allStates.put(cells[i].toString(), cells[i]);
            }
        }
        stateChart output = new stateChart(allStates, allTransitions, graph, condCount, groupCount);
        if (output.getValid()) {
            output.printChart(outputChart);
        }
        try {
            outputChart.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }","    public static double[][] rotation(final double[][] pos, final double[][] refPos) {
        if (pos.length != refPos.length) throw new IllegalArgumentException(""All arguments must have the same length."");
        double R_m[] = new double[3];
        double R_p[] = new double[3];
        double matrix[][] = new double[4][4];
        for (int k = 0; k < pos.length; ++k) {
            R_m = BLA.subtract(pos[k], refPos[k]);
            R_p = BLA.add(refPos[k], pos[k]);
            matrix[0][0] += (R_m[0] * R_m[0] + R_m[1] * R_m[1] + R_m[2] * R_m[2]);
            matrix[1][1] += (R_m[0] * R_m[0] + R_p[1] * R_p[1] + R_p[2] * R_p[2]);
            matrix[2][2] += (R_p[0] * R_p[0] + R_m[1] * R_m[1] + R_p[2] * R_p[2]);
            matrix[3][3] += (R_p[0] * R_p[0] + R_p[1] * R_p[1] + R_m[2] * R_m[2]);
            matrix[1][0] += (R_m[2] * R_p[1] - R_m[1] * R_p[2]);
            matrix[2][0] += (R_p[2] * R_m[0] - R_p[0] * R_m[2]);
            matrix[2][1] += (R_m[0] * R_m[1] - R_p[1] * R_p[0]);
            matrix[3][0] += (R_m[1] * R_p[0] - R_p[1] * R_m[0]);
            matrix[3][1] += (R_m[2] * R_m[0] - R_p[0] * R_p[2]);
            matrix[3][2] += (R_m[2] * R_m[1] - R_p[1] * R_p[2]);
        }
        for (int i = 0; i < 4; ++i) {
            for (int j = i + 1; j < 4; ++j) {
                matrix[i][j] = matrix[j][i];
            }
        }
        double eigenvals[] = new double[4];
        BLA.diagonalizeSymmetric(matrix, eigenvals);
        double q[] = new double[4];
        for (int i = 0; i < 4; ++i) q[i] = matrix[i][3];
        double operator[][] = BLA.zeroes(4, 4);
        operator[0][0] = q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
        operator[1][1] = q[0] * q[0] + q[2] * q[2] - q[1] * q[1] - q[3] * q[3];
        operator[2][2] = q[0] * q[0] + q[3] * q[3] - q[1] * q[1] - q[2] * q[2];
        operator[1][0] = 2 * (q[1] * q[2] - q[0] * q[3]);
        operator[2][0] = 2 * (q[1] * q[3] + q[0] * q[2]);
        operator[2][1] = 2 * (q[2] * q[3] - q[0] * q[1]);
        operator[0][1] = 2 * (q[1] * q[2] + q[0] * q[3]);
        operator[0][2] = 2 * (q[1] * q[3] - q[0] * q[2]);
        operator[1][2] = 2 * (q[2] * q[3] + q[0] * q[1]);
        operator[3] = eigenvals;
        return operator;
    }",0,0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                ripperPathField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    private AboutDialog(Window owner) {
        super(owner, Messages.getString(""dialog.about.title""), ModalityType.APPLICATION_MODAL);
        this.setIconImage(Icons.ABOUT.getImage());
        this.setPreferredSize(new Dimension(450, 500));
        Container container = this.getContentPane();
        container.setLayout(new BoxLayout(container, BoxLayout.Y_AXIS));
        JLabel icon = new JLabel();
        icon.setIcon(Icons.SANDBOX_128);
        icon.setText(MessageFormat.format(Messages.getString(""dialog.about.text""), Sandbox.VERSION, Version.getVersion()));
        JTextPane text = new JTextPane();
        text.setEditable(false);
        try {
            text.setPage(this.getClass().getResource(Messages.getString(""dialog.about.html"")));
        } catch (IOException e) {
            text.setText(Messages.getString(""dialog.about.html.error""));
        }
        text.addHyperlinkListener(new HyperlinkListener() {

            @Override
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    if (Desktop.isDesktopSupported()) {
                        Desktop desktop = Desktop.getDesktop();
                        if (desktop.isSupported(Desktop.Action.BROWSE)) {
                            try {
                                URI uri = e.getURL().toURI();
                                desktop.browse(uri);
                            } catch (URISyntaxException ex) {
                                System.err.println(MessageFormat.format(Messages.getString(""dialog.about.uri.error""), e.getURL()));
                            } catch (IOException ex) {
                                System.err.println(Messages.getString(""dialog.about.navigate.error""));
                            }
                        }
                    }
                }
            }
        });
        JScrollPane scroller = new JScrollPane(text);
        container.add(icon);
        container.add(scroller);
        this.pack();
    }",0,0
"    public boolean connect(String host, String userName, String password) throws IOException, UnknownHostException {
        try {
            if (ftpClient != null) {
                if (ftpClient.isConnected()) {
                    ftpClient.disconnect();
                }
            }
            ftpClient = new FTPClient();
            boolean success = false;
            ftpClient.connect(host);
            int reply = ftpClient.getReplyCode();
            if (FTPReply.isPositiveCompletion(reply)) {
                success = ftpClient.login(userName, password);
            }
            if (!success) {
                ftpClient.disconnect();
            }
            return success;
        } catch (Exception ex) {
            throw new IOException(ex.getMessage());
        }
    }","    private float[][] findDistances() {
        float[][] distance = new float[noseqs][noseqs];
        if (pwtype.equals(""PID"")) {
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    if (j == i) {
                        distance[i][i] = 0;
                    } else {
                        distance[i][j] = 100 - Comparison.compare(sequence[i], sequence[j], start, end);
                        distance[j][i] = distance[i][j];
                    }
                }
            }
        } else if (pwtype.equals(""BL"")) {
            int maxscore = 0;
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    int score = 0;
                    for (int k = 0; k < sequence[i].getLength(); k++) {
                        score += ResidueProperties.getBLOSUM62(sequence[i].getSequence(k, k + 1), sequence[j].getSequence(k, k + 1));
                    }
                    distance[i][j] = (float) score;
                    if (score > maxscore) {
                        maxscore = score;
                    }
                }
            }
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    distance[i][j] = (float) maxscore - distance[i][j];
                    distance[j][i] = distance[i][j];
                }
            }
        } else if (pwtype.equals(""SW"")) {
            float max = -1;
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    AlignSeq as = new AlignSeq(sequence[i], sequence[j], ""pep"");
                    as.calcScoreMatrix();
                    as.traceAlignment();
                    as.printAlignment();
                    distance[i][j] = (float) as.maxscore;
                    if (max < distance[i][j]) {
                        max = distance[i][j];
                    }
                }
            }
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    distance[i][j] = max - distance[i][j];
                    distance[j][i] = distance[i][j];
                }
            }
        }
        return distance;
    }",0,0
"    private static <T> T[] concat(T[] a, T[] b) {
        final int alen = a.length;
        final int blen = b.length;
        if (alen == 0) {
            return b;
        }
        if (blen == 0) {
            return a;
        }
        final T[] result = (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), alen + blen);
        System.arraycopy(a, 0, result, 0, alen);
        System.arraycopy(b, 0, result, alen, blen);
        return result;
    }","    public LinkedList<SearchResult> search(String strRequest) {
        LinkedList<SearchResult> ret = new LinkedList<SearchResult>();
        HttpClient h = new HttpClient();
        try {
            String strRequestUrl = ""http://www.youporn.com/search"";
            if (strRequest.toLowerCase().contains(""straight!"")) {
                strRequestUrl += ""?type=straight"";
                strRequest = strRequest.replaceAll(""straight!"", """");
            }
            if (strRequest.toLowerCase().contains(""gay!"")) {
                strRequestUrl += ""?type=gay"";
                strRequest = strRequest.replaceAll(""gay!"", """");
            }
            if (strRequest.toLowerCase().contains(""cocks!"")) {
                strRequestUrl += ""?type=cocks"";
                strRequest = strRequest.replaceAll(""cocks!"", """");
            }
            if (!strRequestUrl.endsWith(""search"")) strRequestUrl += ""&""; else strRequestUrl += ""?"";
            strRequestUrl += ""query="" + URLEncoder.encode(strRequest, ""UTF-8"");
            if (NoMuleRuntime.DEBUG) System.out.println(strRequestUrl);
            GetMethod get = new GetMethod(strRequestUrl);
            Date d = new Date((new Date()).getTime() + (1 * 24 * 3600 * 1000));
            h.getState().addCookie(new Cookie("".youporn.com"", ""age_check"", ""1"", ""/"", d, false));
            h.executeMethod(get);
            BufferedReader in = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream()));
            String s = """";
            String res = """";
            while ((s = in.readLine()) != null) {
                res += s;
            }
            get.releaseConnection();
            if (NoMuleRuntime.DEBUG) System.out.println(res);
            String regexp = ""\\<a href\\=\""\\/watch\\/[^\""]+\""\\>[^\\<]+"";
            Pattern p = Pattern.compile(regexp);
            Matcher m = p.matcher(res);
            while (m.find()) {
                int startPos = m.start() + ""<a href=\"""".length();
                String strUrl = ""http://www.youporn.com"";
                int pos = 0;
                for (pos = startPos; pos < m.end() && (res.charAt(pos) != '\""'); pos++) {
                    strUrl += res.charAt(pos);
                }
                String strTitle = res.substring(pos + 2, m.end());
                if (strTitle.trim().length() > 0) ret.add(new SearchResult(strTitle + "" at YouPorn"", strUrl));
            }
            return ret;
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (HttpException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }",0,0
"    public void setGrid(AccumulatorDefinition ad) {
        int measure_metric_column_count = 0;
        Vector<MeasureDefinition> measures_list = null;
        if (ad != null) {
            measure_metric_column_count = ad.getMeasureMetricColumnCount();
            measures_list = ad.getMeasureDefinitions();
        }
        if (measures_on_this_axis) {
            if (ad.isMultiMetric() && ad.isMultiMeasure()) axis_grid = new String[slices.size() + 2][getColumnCount(measure_metric_column_count)]; else if (ad.isMultiMeasure() || ad.isMultiMetric()) axis_grid = new String[slices.size() + 1][getColumnCount(measure_metric_column_count)]; else axis_grid = new String[slices.size()][getColumnCount(measure_metric_column_count)];
        } else axis_grid = new String[slices.size()][getColumnCount(1)];
        int current_slice = 0;
        for (int i = 0; i < first_slice.sub_slice.size(); i++) {
            Slice slice = first_slice.sub_slice.get(i);
            Vector<String> grid_slice_values = new Vector<String>();
            if ((measures_on_this_axis) && (ad.isMultiMeasure() || ad.isMultiMetric())) current_slice = slice.getGridSlice(grid_slice_values, current_slice, axis_grid, ad); else current_slice = slice.getGridSlice(grid_slice_values, current_slice, axis_grid, null);
        }
        if (!is_horizontal) {
            String[][] rotated_grid;
            if (measures_on_this_axis) {
                if (ad.isMultiMeasure() && ad.isMultiMetric()) rotated_grid = new String[getColumnCount(measure_metric_column_count)][slices.size() + 2]; else rotated_grid = new String[getColumnCount(measure_metric_column_count)][slices.size() + 1];
            } else rotated_grid = new String[getColumnCount(1)][slices.size()];
            for (int i = 0; i < axis_grid.length; i++) {
                for (int j = 0; j < axis_grid[i].length; j++) {
                    rotated_grid[j][i] = axis_grid[i][j];
                }
            }
            axis_grid = rotated_grid;
        }
    }","    public static String convertLocationRun(String sequence, String symbol) {
        String regex = symbol + ""+"";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(sequence);
        List<String> ranges = new ArrayList<String>();
        while (matcher.find()) {
            int start = matcher.start() + 1;
            int end = matcher.end();
            ranges.add(start + DELIMITER + end);
        }
        return CStringHelper.join(ranges, "","");
    }",0,0
"    public static JEditorPane createURLLabel(String htmlMessage) {
        Font font = UIManager.getFont(""Label.font"");
        String rgb = Integer.toHexString(new JPanel().getBackground().getRGB());
        rgb = rgb.substring(2, rgb.length());
        String bodyRule = ""body { background: #"" + rgb + ""; font-family: "" + font.getFamily() + ""; font-size: "" + font.getSize() + ""pt; }"";
        JEditorPane jEditorPane = new JEditorPane(new HTMLEditorKit().getContentType(), htmlMessage);
        ((HTMLDocument) jEditorPane.getDocument()).getStyleSheet().addRule(bodyRule);
        jEditorPane.setEditable(false);
        jEditorPane.setBorder(null);
        jEditorPane.setOpaque(false);
        jEditorPane.addHyperlinkListener(new HyperlinkListener() {

            @Override
            public void hyperlinkUpdate(HyperlinkEvent hyperlinkEvent) {
                if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                    HyperlinkEvent.EventType eventType = hyperlinkEvent.getEventType();
                    if (eventType == HyperlinkEvent.EventType.ACTIVATED) {
                        try {
                            Desktop.getDesktop().browse(hyperlinkEvent.getURL().toURI());
                        } catch (URISyntaxException uriSyntaxException) {
                            showMessageDialog(null, new MessageFormat(Messages.getString(""MessageDialog.6"")).format(new Object[] { hyperlinkEvent.getURL() }), JOptionPane.ERROR_MESSAGE, JOptionPane.DEFAULT_OPTION);
                        } catch (IOException ioException) {
                            showMessageDialog(null, Messages.getString(""MessageDialog.8""), JOptionPane.ERROR_MESSAGE, JOptionPane.DEFAULT_OPTION);
                        }
                    }
                } else {
                    showMessageDialog(null, Messages.getString(""MessageDialog.7""), JOptionPane.ERROR_MESSAGE, JOptionPane.DEFAULT_OPTION);
                }
            }
        });
        return jEditorPane;
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""', 999, 999, 999 )"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0,0
"    void sort(int a[]) throws Exception {
        for (int i = a.length; --i >= 0; ) {
            boolean flipped = false;
            for (int j = 0; j < i; j++) {
                if (stopRequested) {
                    return;
                }
                if (a[j] > a[j + 1]) {
                    int T = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = T;
                    flipped = true;
                }
                pause(i, j);
            }
            if (!flipped) {
                return;
            }
        }
    }","        private Object[] toArray(Object[] dest, boolean copied) {
            int destIndex = 0;
            for (final Segment<K, V> segment : ConcurrentWeakKeyHashMap.this.segments) {
                for (HashEntry<K, V> e : segment.table) {
                    while (e != null) {
                        final V value = e.value;
                        if (value != null) {
                            if (destIndex == dest.length) {
                                final Object[] newDest = (Object[]) Array.newInstance(dest.getClass().getComponentType(), (destIndex == 0) ? 16 : (destIndex << 1));
                                System.arraycopy(dest, 0, newDest, 0, destIndex);
                                dest = newDest;
                                copied = true;
                            }
                            dest[destIndex++] = value;
                        }
                        e = e.next;
                    }
                }
            }
            if (destIndex < dest.length) {
                if (copied) {
                    final Object[] newDest = new Object[destIndex];
                    System.arraycopy(dest, 0, newDest, 0, destIndex);
                    dest = newDest;
                } else {
                    dest[destIndex] = null;
                }
            }
            return dest;
        }",0,0
"    public static int binarySearch(long[] a, long key) {
        int low = 0;
        int high = a.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            long midVal = a[mid];
            if (midVal < key) low = mid + 1; else if (midVal > key) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }","    private void symmetrizeMatrix() {
        for (int i = 0; i < systemConstants.length; i++) {
            for (int j = 0; j < i; j++) systemMatrix[j][i] = systemMatrix[i][j];
        }
    }",0,0
"    private double[][] calcAdjoint(double[][] values, int size, GlobalValues globals) {
        FunctionToken token = null;
        Function function = null;
        try {
            token = new FunctionToken(""Determinant"");
            function = globals.getFunctionManager().findFunction(token);
        } catch (java.lang.Exception e) {
        }
        double[][] result = new double[size][size];
        for (int rowNumber = 0; rowNumber < size; rowNumber++) {
            for (int colNumber = 0; colNumber < size; colNumber++) {
                DoubleNumberToken subMatrix = new DoubleNumberToken(constructMatrix(values, size, rowNumber, colNumber));
                OperandToken[] operands = new OperandToken[1];
                operands[0] = subMatrix;
                double minor = ((DoubleNumberToken) function.evaluate(operands, globals)).getValueRe();
                int modifier = -1;
                if ((rowNumber + colNumber) % 2 == 0) modifier = 1;
                result[rowNumber][colNumber] = modifier * minor;
            }
        }
        double[][] transResult = new double[size][size];
        for (int colno = 0; colno < size; colno++) {
            for (int rowno = 0; rowno < size; rowno++) {
                transResult[colno][rowno] = result[rowno][colno];
            }
        }
        return transResult;
    }","    private boolean createFTPConnection() {
        client = new FTPClient();
        System.out.println(""Client created"");
        try {
            client.connect(this.hostname, this.port);
            System.out.println(""Connected: "" + this.hostname + "", "" + this.port);
            client.login(username, password);
            System.out.println(""Logged in: "" + this.username + "", "" + this.password);
            this.setupActiveFolder();
            return true;
        } catch (IllegalStateException ex) {
            Logger.getLogger(FTPProject.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FTPProject.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPIllegalReplyException ex) {
            Logger.getLogger(FTPProject.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPException ex) {
            Logger.getLogger(FTPProject.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }",0,0
"    public void saveImage() {
        String title = makeTitle();
        if (title == null) {
            cancelSaveOperations();
            return;
        }
        Rectangle screenRect = this.getBounds();
        int topAdjust = 23;
        int y = screenRect.y;
        screenRect.y += topAdjust;
        int height = screenRect.height;
        screenRect.height -= topAdjust;
        Robot robot = null;
        BufferedImage image = null;
        if (iUseRobot) {
            try {
                robot = new Robot();
            } catch (AWTException e) {
                println(""EXCEPTION -- NO ROBOT -- NOT SAVING"");
                iSaveInProcess = false;
                iSaveImage = false;
                iAceTree.iAceMenuBar.resetSaveState();
                return;
            }
            image = robot.createScreenCapture(screenRect);
        } else {
            image = BufferedImageCreator.create((ColorProcessor) iImgPlus.getProcessor());
        }
        try {
            ImageIO.write(image, ""jpeg"", new File(title));
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println(""file: "" + title + "" written"");
        iSaveInProcess = false;
    }","            public void actionPerformed(ActionEvent e) {
                if (Desktop.isDesktopSupported()) {
                    try {
                        Desktop.getDesktop().browse(new URI(""http://www.circuitsmith.com""));
                    } catch (Exception ioe) {
                    }
                }
            }",0,0
"    protected static final int getNextIdentifier(int table[], long value) throws SnmpStatusException {
        final int[] a = table;
        final int val = (int) value;
        if (a == null) throw noSuchObjectException;
        int low = 0;
        int max = a.length;
        int curr = low + (max - low) / 2;
        int elmt = 0;
        if (max < 1) throw noSuchObjectException;
        if (a[max - 1] <= val) throw noSuchObjectException;
        while (low <= max) {
            elmt = a[curr];
            if (val == elmt) {
                curr++;
                return a[curr];
            }
            if (elmt < val) {
                low = curr + 1;
            } else {
                max = curr - 1;
            }
            curr = low + (max - low) / 2;
        }
        return a[curr];
    }","    private ZipEntry createZipEntry(String name, byte bytes[], int method) {
        ZipEntry ze = new ZipEntry(name);
        ze.setMethod(method);
        ze.setSize(bytes.length);
        CRC32 crc = new CRC32();
        crc.reset();
        crc.update(bytes);
        ze.setCrc(crc.getValue());
        ze.setTime(System.currentTimeMillis());
        return ze;
    }",0,0
"            public void actionPerformed(final ActionEvent e) {
                if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.OPEN)) {
                    try {
                        java.awt.Desktop.getDesktop().open(new File(""auftraege/test.pdf""));
                    } catch (final IOException ex) {
                        System.err.println(""Der Auftrag konnte nicht angezeigt werden."");
                    }
                }
            }","    public static boolean insert(final Departamento ObjDepartamento) {
        int result = 0;
        final Connection c = DBConnection.getConnection();
        PreparedStatement pst = null;
        if (c == null) {
            return false;
        }
        try {
            c.setAutoCommit(false);
            final String sql = ""insert into departamento "" + ""(nome, sala, telefone, id_orgao)"" + "" values (?, ?, ?, ?)"";
            pst = c.prepareStatement(sql);
            pst.setString(1, ObjDepartamento.getNome());
            pst.setString(2, ObjDepartamento.getSala());
            pst.setString(3, ObjDepartamento.getTelefone());
            pst.setInt(4, (ObjDepartamento.getOrgao()).getCodigo());
            result = pst.executeUpdate();
            c.commit();
        } catch (final SQLException e) {
            try {
                c.rollback();
            } catch (final SQLException e1) {
                e1.printStackTrace();
            }
            System.out.println(""[DepartamentoDAO.insert] Erro ao inserir -> "" + e.getMessage());
        } finally {
            DBConnection.closePreparedStatement(pst);
            DBConnection.closeConnection(c);
        }
        if (result > 0) {
            return true;
        } else {
            return false;
        }
    }",0,0
"    @SuppressWarnings(""unchecked"")
    public static <T> T[] copy(T[] array) {
        Class<?> type = array.getClass().getComponentType();
        T[] newArray = (T[]) Array.newInstance(type, array.length);
        System.arraycopy(array, 0, newArray, 0, array.length);
        return newArray;
    }","    public static void main(String[] args) {
        Connection con = null;
        String url = ""jdbc:mysql://192.168.15.110:3306/"";
        String dbName = ""os"";
        String driver = ""com.mysql.jdbc.Driver"";
        String userName = ""root"";
        String password = ""vkmohan123"";
        try {
            Class.forName(driver).newInstance();
            con = DriverManager.getConnection(url + dbName, userName, password);
            Statement st = con.createStatement();
            String sql123 = ""update os.LoadRequestResponse set processId="" + args[0] + "" where requestId="" + args[1];
            int update = st.executeUpdate(sql123);
            System.out.println(""after update"" + args[0] + "" req:"" + args[1]);
            st.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }",0,0
"    private String escape(String content) {
        if (content == null || content.length() == 0) {
            return """";
        }
        Pattern p = Pattern.compile(ESCAPE_START_TAG + "".+?"" + ESCAPE_END_TAG, Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
        Matcher m = p.matcher(content);
        while (m.find()) {
            int start = m.start();
            int end = m.end();
            String textToEscape = content.substring(start, end);
            textToEscape = textToEscape.substring(ESCAPE_START_TAG.length(), textToEscape.length() - ESCAPE_END_TAG.length());
            textToEscape = StringUtils.transformHTML(textToEscape);
            content = content.substring(0, start) + textToEscape + content.substring(end, content.length());
            m = p.matcher(content);
        }
        return content;
    }","    public static void main(String[] args) throws Throwable {
        Class.forName(""oracle.jdbc.driver.OracleDriver"");
        Connection con1 = DriverManager.getConnection(""jdbc:oracle:thin:@cumberland:1521:csuite"", ""belair40"", ""password"");
        DatabaseMetaData metaData1 = con1.getMetaData();
        Thread[] threads = new Thread[5];
        for (int i = 0; i < threads.length; i++) {
            threads[i] = new Thread(new MetaDataTestCase(metaData1));
        }
        for (int i = 0; i < threads.length; i++) {
            threads[i].start();
        }
        for (int i = 0; i < threads.length; i++) {
            threads[i].join();
        }
    }",0,0
"            @Override
            public void actionPerformed(ActionEvent e) {
                if (!Desktop.isDesktopSupported()) {
                    JOptionPane.showMessageDialog(WebsiteButton.this, ""OpenGroove can't open the URL \"""" + WebsiteButton.this.uri + ""\"" in your default browser. Try typing "" + ""in the uri yourself."");
                    return;
                }
                try {
                    Desktop.getDesktop().browse(WebsiteButton.this.uri);
                } catch (IOException e1) {
                    e1.printStackTrace();
                    JOptionPane.showMessageDialog(WebsiteButton.this, ""OpenGroove can't open the URL \"""" + WebsiteButton.this.uri + ""\"" in your default browser. Try typing "" + ""in the uri yourself."");
                    return;
                }
            }","    private String fixUnicode(String s) {
        String s2 = """";
        String patron = ""(\\\\[U][+])([0-9A-Fa-f]{4})"";
        Pattern compiledPatron = Pattern.compile(patron);
        Matcher matcher = compiledPatron.matcher(s);
        int lastEnd = 0;
        while (matcher.find()) {
            int start = matcher.start();
            int end = matcher.end();
            String code = matcher.group(2);
            String hexa = ""0x"" + code;
            int caracter = Integer.decode(hexa).intValue();
            s2 = s2 + s.substring(lastEnd, start) + (char) caracter;
            lastEnd = end;
        }
        s2 = s2 + s.substring(lastEnd);
        return s2;
    }",0,0
"    public ImageDisplay(ImageDisplayApplet applet, GraphicsConfiguration gc) {
        this.applet = applet;
        if (applet == null) {
            frame = new JFrame(gc);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(PREFERRED_WIDTH, PREFERRED_HEIGHT));
        Action openAction = new AbstractAction(""Open File"", new ImageIcon(getClass().getResource(""/open.gif""))) {

            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }
        };
        JToolBar bar = new JToolBar();
        bar.add(new ToolBarButton(openAction));
        add(bar, BorderLayout.NORTH);
        if (applet == null) {
            frame.setTitle(""Image Display - Control Panel"");
            frame.getContentPane().add(this, BorderLayout.CENTER);
            frame.pack();
            frame.setVisible(true);
        }
    }","    protected static final int getNextIdentifier(int table[], long value) throws SnmpStatusException {
        final int[] a = table;
        final int val = (int) value;
        if (a == null) throw noSuchObjectException;
        int low = 0;
        int max = a.length;
        int curr = low + (max - low) / 2;
        int elmt = 0;
        if (max < 1) throw noSuchObjectException;
        if (a[max - 1] <= val) throw noSuchObjectException;
        while (low <= max) {
            elmt = a[curr];
            if (val == elmt) {
                curr++;
                return a[curr];
            }
            if (elmt < val) {
                low = curr + 1;
            } else {
                max = curr - 1;
            }
            curr = low + (max - low) / 2;
        }
        return a[curr];
    }",0,0
"    public static double[][] square(double[][] mat) {
        int m = Matrix.getNumOfRows(mat);
        int n = Matrix.getNumOfColumns(mat);
        double[][] res = Matrix.newMatrix(m, m);
        for (int i = 0; i < m; ++i) {
            res[i][i] = 0.0;
            for (int k = 0; k < n; ++k) res[i][i] += mat[i][k] * mat[i][k];
            for (int j = 0; j < i; ++j) {
                res[i][j] = 0.0;
                for (int k = 0; k < n; ++k) res[i][j] += mat[i][k] * mat[j][k];
                res[j][i] = res[i][j];
            }
        }
        return (res);
    }","    private void openFastaFileActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == openFastaFile) {
            int returnVal = fc.showOpenDialog(ParameterSolutions.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                inputFile = fc.getSelectedFile();
                log.append(""Opening: "" + inputFile.getName() + ""\n"");
                if (!inputFile.canRead() || !BinningFasta.verifyInputFile(inputFile)) {
                    log.append(""That is not a valid fasta file, please choose"" + "" a properly formatted fasta file.\n"");
                    inputFile = null;
                    return;
                }
                narr.println(""Opening: "" + inputFile.getName());
            } else {
                log.append(""Dialog Cancelled by User.\n"");
            }
        }
    }",0,0
"            public void run() {
                if (!initialized) {
                    if (Desktop.isDesktopSupported()) {
                        Desktop d = Desktop.getDesktop();
                        if (d.isSupported(Desktop.Action.BROWSE)) {
                            TextView.this.desktop = d;
                        }
                    }
                    initialized = true;
                }
                if (desktop != null) {
                    try {
                        desktop.browse(url.toURI());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }","    public static Object expandCollection(Object collection, int size) {
        if (collection == null) {
            return null;
        }
        if (size < getLength(collection)) {
            throw new JXPathException(""adjustment of "" + collection + "" to size "" + size + "" is not an expansion"");
        }
        if (collection.getClass().isArray()) {
            Object bigger = Array.newInstance(collection.getClass().getComponentType(), size);
            System.arraycopy(collection, 0, bigger, 0, Array.getLength(collection));
            return bigger;
        }
        if (collection instanceof Collection) {
            while (((Collection) collection).size() < size) {
                ((Collection) collection).add(null);
            }
            return collection;
        }
        throw new JXPathException(""Cannot turn "" + collection.getClass().getName() + "" into a collection of size "" + size);
    }",0,0
"    public ArrayList<ReferenceEntity> extractSpot(String regex, char rcoat) {
        spotCount = 0;
        Pattern p = Pattern.compile(regex);
        Matcher m = p.matcher(fullText);
        int openIdx = 0;
        int closeIdx;
        int fullTextLength = fullText.length();
        ArrayList<Integer> idList = new ArrayList<Integer>();
        suplList = new ArrayList<ReferenceEntity>();
        while (m.find(openIdx) && m.start() < fullTextLength) {
            closeIdx = fullText.indexOf(rcoat, m.start() + 1);
            if (closeIdx == -1 || m.start() == -1 || m.start() + 1 > closeIdx) break;
            String fieldCand = fullText.substring(m.start() + 1, closeIdx);
            if (!fieldCand.equals("""")) idList = checkField(fieldCand, m.start(), m.end(), fullText);
            String context = StringUtil.getContext(fullText, m.start(), m.end(), 15);
            if (idList.size() != 0) {
                spotCount += idList.size();
                for (Integer num : idList) {
                    boolean flag = false;
                    for (ReferenceEntity entity : rEntList) {
                        if (entity.getIdInRef().equals(String.valueOf(num))) {
                            entity.getContextList().add(context);
                            flag = true;
                            break;
                        }
                    }
                    if (!flag) addToSuplList(num, context);
                }
            } else System.err.println(""No referece for the field : "" + fieldCand);
            openIdx = closeIdx;
        }
        System.out.println(""\nspotCount="" + spotCount);
        return rEntList;
    }","    static final Object[] resizeArray(Object[] src, int new_size) {
        Class compClass = src.getClass().getComponentType();
        Object tmp[] = (Object[]) Array.newInstance(compClass, new_size);
        System.arraycopy(src, 0, tmp, 0, (src.length < new_size ? src.length : new_size));
        return tmp;
    }",0,0
"    public static void symmetrizeComponents(double[][] components) {
        for (int i = 0; i < components.length; i++) {
            for (int j = i + 1; j < components.length; j++) {
                components[i][j] += components[j][i];
                components[i][j] *= 0.5;
                components[j][i] = components[i][j];
            }
        }
    }","    private void updatePointFromModel(RGBA rgba, int ind) throws ParseException {
        String text = jTextArea1.getText();
        String pts = numeric;
        if (this.colSpacePanel1.getColorSpace().getDimension() == 2) pts = numeric + ""\\s*,\\s*"" + numeric;
        Pattern pattern = Pattern.compile(String.format(""(point\\s*\\(\\s*)%s(\\s*\\)\\s*\\{)"", pts));
        Matcher m = pattern.matcher(text);
        int ind0 = 0;
        while (m.find()) {
            if (ind0++ != ind) {
                continue;
            }
            if (colSpacePanel1.getColorSpace().getDimension() == 1) {
                text = String.format(""%s%s%s"", text.substring(0, m.start()), m.group(0).replaceFirst(pattern.pattern(), String.format(Locale.ENGLISH, ""$1%.3f$3"", rgba.point.get(0).evaluate())), text.substring(m.end()));
                jTextArea1.setText(text);
                return;
            } else if (colSpacePanel1.getColorSpace().getDimension() == 2) {
                text = String.format(""%s%s%s"", text.substring(0, m.start()), m.group(0).replaceFirst(pattern.pattern(), String.format(Locale.ENGLISH, ""$1%.3f, %.3f$4"", rgba.point.get(0).evaluate(), rgba.point.get(1).evaluate())), text.substring(m.end()));
                jTextArea1.setText(text);
                return;
            }
            break;
        }
    }",0,0
"    private Object doAction(final Context cx, final Scriptable scope, final Scriptable thisObj, final Object[] args, final int actionType) {
        if (RA_REPLACE == actionType && args.length == 2 && (args[1] instanceof String)) {
            final String thisString = Context.toString(thisObj);
            String replacement = (String) args[1];
            final Object arg0 = args[0];
            if (arg0 instanceof String) {
                replacement = REPLACE_PATTERN.matcher(replacement).replaceAll(""\\$"");
                return StringUtils.replaceOnce(thisString, (String) arg0, replacement);
            } else if (arg0 instanceof NativeRegExp) {
                try {
                    final NativeRegExp regexp = (NativeRegExp) arg0;
                    final RegExpData reData = new RegExpData(regexp);
                    final String regex = reData.getJavaPattern();
                    final int flags = reData.getJavaFlags();
                    final Pattern pattern = Pattern.compile(regex, flags);
                    final Matcher matcher = pattern.matcher(thisString);
                    return doReplacement(thisString, replacement, matcher, reData.hasFlag('g'));
                } catch (final PatternSyntaxException e) {
                    LOG.warn(e.getMessage(), e);
                }
            }
        } else if (RA_MATCH == actionType || RA_SEARCH == actionType) {
            if (args.length == 0) {
                return null;
            }
            final Object arg0 = args[0];
            final String thisString = Context.toString(thisObj);
            final RegExpData reData;
            if (arg0 instanceof NativeRegExp) {
                reData = new RegExpData((NativeRegExp) arg0);
            } else {
                reData = new RegExpData(Context.toString(arg0));
            }
            final Pattern pattern = Pattern.compile(reData.getJavaPattern(), reData.getJavaFlags());
            final Matcher matcher = pattern.matcher(thisString);
            final boolean found = matcher.find();
            if (RA_SEARCH == actionType) {
                if (found) {
                    setProperties(matcher, thisString, matcher.start(), matcher.end());
                    return matcher.start();
                }
                return -1;
            }
            if (!found) {
                return null;
            }
            final int index = matcher.start(0);
            final List<Object> groups = new ArrayList<Object>();
            if (reData.hasFlag('g')) {
                groups.add(matcher.group(0));
                setProperties(matcher, thisString, matcher.start(0), matcher.end(0));
                while (matcher.find()) {
                    groups.add(matcher.group(0));
                    setProperties(matcher, thisString, matcher.start(0), matcher.end(0));
                }
            } else {
                for (int i = 0; i <= matcher.groupCount(); ++i) {
                    Object group = matcher.group(i);
                    if (group == null) {
                        group = Context.getUndefinedValue();
                    }
                    groups.add(group);
                }
                setProperties(matcher, thisString, matcher.start(), matcher.end());
            }
            final Scriptable response = cx.newArray(scope, groups.toArray());
            response.put(""index"", response, Integer.valueOf(index));
            response.put(""input"", response, thisString);
            return response;
        }
        return wrappedAction(cx, scope, thisObj, args, actionType);
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                fileBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0,0
"    public static Object setLength(Object array, int newLength) {
        if (array == null) {
            return null;
        }
        Object t = Array.newInstance(array.getClass().getComponentType(), newLength);
        int oldLength = Array.getLength(array);
        System.arraycopy(array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
        return t;
    }","    int old_javah(List<String> options, File outDir, File bootclasspath, String className) throws IOException, InterruptedException {
        List<String> cmd = new ArrayList<String>();
        cmd.add(old_javah_cmd.getPath());
        cmd.addAll(options);
        cmd.add(""-d"");
        cmd.add(outDir.getPath());
        cmd.add(""-bootclasspath"");
        cmd.add(bootclasspath.getPath());
        cmd.add(className);
        System.err.println(""old_javah: "" + cmd);
        ProcessBuilder pb = new ProcessBuilder(cmd);
        pb.redirectErrorStream(true);
        Process p = pb.start();
        BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
        String line;
        StringBuilder sb = new StringBuilder();
        while ((line = in.readLine()) != null) {
            sb.append(line);
            sb.append(""\n"");
        }
        System.err.println(""old javah out: "" + sb.toString());
        return p.waitFor();
    }",0,0
"    public static void openUrlInBrowser(URI uri) throws IOException {
        if (Desktop.isDesktopSupported()) {
            if (desktop == null) {
                desktop = Desktop.getDesktop();
            }
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                desktop.browse(uri);
            }
        }
    }","    public static double[][] Spearman(double[][] X) {
        double[][] output = new double[X.length][X.length];
        try {
            for (int i = 0; i < X.length; i++) {
                output[i][i] = 1.0;
                for (int j = 0; j < i; j++) {
                    output[i][j] = GeneUtils.spearmanrho(X[i], X[j]);
                    output[j][i] = output[i][j];
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Statistic.class.getName()).log(Level.SEVERE, null, ex);
        }
        return output;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static Object[] addObjectToArray(Object[] array, Object obj) {
        Class<?> compType = Object.class;
        if (array != null) {
            compType = array.getClass().getComponentType();
        } else if (obj != null) {
            compType = obj.getClass();
        }
        int newArrLength = (array != null ? array.length + 1 : 1);
        Object[] newArr = (Object[]) Array.newInstance(compType, newArrLength);
        if (array != null) {
            System.arraycopy(array, 0, newArr, 0, array.length);
        }
        newArr[newArr.length - 1] = obj;
        return newArr;
    }",0,0
"    File createJar(String name, String... entries) throws IOException {
        File jar = new File(name);
        OutputStream out = new FileOutputStream(jar);
        try {
            JarOutputStream jos = new JarOutputStream(out);
            for (String e : entries) {
                jos.putNextEntry(new ZipEntry(e));
                jos.write(e.getBytes());
            }
            jos.close();
        } finally {
            out.close();
        }
        return jar;
    }","    public static String replaceTemplateVariables(String text, Map<String, String> replacements) {
        StringBuilder output = new StringBuilder();
        Pattern tokenPattern = Pattern.compile(""\\{([^}]+)\\}"");
        Matcher tokenMatcher = tokenPattern.matcher(text);
        int cursor = 0;
        while (tokenMatcher.find()) {
            int tokenStart = tokenMatcher.start();
            int tokenEnd = tokenMatcher.end();
            int keyStart = tokenMatcher.start(1);
            int keyEnd = tokenMatcher.end(1);
            output.append(text.substring(cursor, tokenStart));
            String token = text.substring(tokenStart, tokenEnd);
            String key = text.substring(keyStart, keyEnd);
            if (replacements.containsKey(key)) {
                String value = replacements.get(key);
                output.append(value);
            } else {
                output.append(token);
            }
            cursor = tokenEnd;
        }
        output.append(text.substring(cursor));
        return output.toString();
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public InvariantsMatrix transpose() throws Exception {
        int[][] tmpData = new int[width()][height()];
        for (int i = 0; i < width(); i++) {
            for (int j = 0; j < height(); j++) {
                tmpData[i][j] = data[j][i];
            }
        }
        return new InvariantsMatrix(tmpData);
    }",0,0
"    public static void openDefaultPDFViewer(String path) {
        if (Desktop.isDesktopSupported()) {
            File file = new File(path);
            if (file.exists()) {
                try {
                    Desktop.getDesktop().open(file);
                } catch (IOException e) {
                    logger.log(Level.SEVERE, LanguageResource.getLanguage().getString(""error.no_pdf_viewer_installed""), e);
                    LoggingDesktopController.printError(LanguageResource.getLanguage().getString(""error.no_pdf_viewer_installed""));
                }
            } else {
                logger.severe(LanguageResource.getLanguage().getString(""error.no_file.exists""));
                LoggingDesktopController.printError(LanguageResource.getLanguage().getString(""error.no_file.exists""));
            }
        } else {
            logger.severe(LanguageResource.getLanguage().getString(""error.no_desktop_support""));
            LoggingDesktopController.printError(LanguageResource.getLanguage().getString(""error.no_desktop_support""));
        }
    }","    @SuppressWarnings(""unchecked"")
    public static final <T> T[] add(final T[] a1, final T... a2) {
        if (a1 == null) return a2 == null ? null : a2.clone();
        if (a2 == null) return a1.clone();
        final T[] a = (T[]) Array.newInstance(a1.getClass().getComponentType(), a1.length + a2.length);
        System.arraycopy(a1, 0, a, 0, a1.length);
        System.arraycopy(a2, 0, a, a1.length, a2.length);
        return a;
    }",0,0
"    @SuppressWarnings(""unchecked"")
    public <T> T[] toArray(T[] a) {
        a = (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size());
        E[] elementData = (E[]) toArray();
        System.arraycopy(elementData, 0, a, 0, size());
        if (a.length > size()) a[size()] = null;
        return a;
    }","    public void processEvent(final EventData d) throws RemoteException, Exception {
        TextualEventData se = (TextualEventData) d;
        StringBuffer result = new StringBuffer();
        String parameters = se.getData();
        StringTokenizer st = new StringTokenizer(parameters, "" "", false);
        String[] cmd = new String[st.countTokens()];
        int pos = 0;
        while (st.hasMoreTokens()) cmd[pos++] = st.nextToken();
        if (cmd.length == 0) throw new RemoteException(""No command given"");
        String[] env = new String[] {};
        String defaultPath = se.getFlags().getProperty(""PATH"", this.api.getDirectory());
        File workDir = new File(defaultPath);
        if (workDir.exists() == false) workDir = new File(this.api.getDirectory());
        String outLine;
        Process p = Runtime.getRuntime().exec(cmd, env, workDir);
        BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
        while ((outLine = input.readLine()) != null) {
            result.append(outLine).append(""\n"");
        }
        input.close();
        int index = -1;
        if ((index = parameters.indexOf("" "")) != -1) parameters = parameters.substring(0, index);
        parameters = parameters.replaceAll(""/"", ""_"");
        this.results.insertResult(parameters, ""Parameters were: "" + se.getData(), result.toString());
    }",0,0
"    private void openItemActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == openItem) {
            int returnVal = fc.showOpenDialog(Demarcations.this);
            treeFile = null;
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                inputFile = fc.getSelectedFile();
                if (!BinningFasta.verifyInputFile(inputFile)) {
                    log.append(""That is not a valid fasta file, please choose"" + "" a properly formatted fasta file.\n"");
                    return;
                }
                (new Thread() {

                    public void run() {
                        runTree();
                    }
                }).start();
            } else {
                log.append(""Dialog Cancelled by User.\n"");
            }
        }
    }","            @Override
            public void mouseClicked(MouseEvent arg0) {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    if (desktop.isSupported(Desktop.Action.BROWSE)) {
                        try {
                            desktop.browse(new URI(""http://sourceforge.net/projects/jcohorte/""));
                        } catch (IOException e) {
                            e.printStackTrace();
                        } catch (URISyntaxException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }",0,0
"    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == this.close) this.dispose(); else if (e.getSource() == this.openFile) {
            JFileChooser open = new JFileChooser();
            int option = open.showOpenDialog(this);
            if (option == JFileChooser.APPROVE_OPTION) {
                this.textArea.setText("""");
                try {
                    Scanner scan = new Scanner(new FileReader(open.getSelectedFile().getPath()));
                    while (scan.hasNext()) this.textArea.append(scan.nextLine() + ""\n"");
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                }
            }
        } else if (e.getSource() == this.saveFile) {
            JFileChooser save = new JFileChooser();
            int option = save.showSaveDialog(this);
            if (option == JFileChooser.APPROVE_OPTION) {
                try {
                    BufferedWriter out = new BufferedWriter(new FileWriter(save.getSelectedFile().getPath()));
                    out.write(this.textArea.getText());
                    out.close();
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                }
            }
        }
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"        private String processValue(String pre) {
            StringBuilder post = new StringBuilder();
            Pattern pat = Pattern.compile(""("" + PATTERN_KEY + ""|"" + TOKEN_KEY + "")"");
            Matcher matcher = pat.matcher(pre);
            int from = 0;
            while (matcher.find()) {
                post.append(pre.substring(from, matcher.start()));
                String s = matcher.group(1);
                if (s.matches(PATTERN_KEY)) {
                    post.append(""\"""" + lookupPattern(s) + ""\"""");
                } else {
                    post.append(""\"""" + lookupToken(s) + ""\"""");
                }
                from = matcher.end();
            }
            post.append(pre.substring(from));
            return catAndRemoveQuotes(post.toString());
        }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    public static double[][] transpose(double[][] matrix) {
        double[][] transposed = new double[matrix[0].length][matrix.length];
        int mLength = matrix.length, m0Length = matrix[0].length;
        for (int i = 0; i < mLength; i++) {
            for (int j = 0; j < m0Length; j++) {
                transposed[j][i] = matrix[i][j];
            }
        }
        return transposed;
    }","        public ClassesJoueur(FenetreSimple p) {
            setLayout(null);
            parent = p;
            Classemodel = new DefaultListModel();
            ClasseList = new JList(Classemodel);
            ClasseList.addMouseListener(new MouseAdapter() {

                public void mousePressed(MouseEvent e) {
                    if (ClasseList.getSelectedIndex() >= 0) {
                        paneuneclasse.setVisible(true);
                        Ed_Nom.setText(parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).Name);
                        Ed_FormuleAtt.setText(parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).FormuleAttaque);
                        Ed_FormuleEsq.setText(parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).FormuleEsquive);
                        Ed_FormuleDeg.setText(parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).FormuleDegat);
                        Ed_FormuleDef.setText(parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).FormuleDefense);
                        Ed_FormuleXP.setText(parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).FormuleXP);
                        Ed_FormuleGold.setText(parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).FormuleGold);
                        Ed_FormuleVieMax.setText(parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).FormuleVieMax);
                        Ed_FormuleMagMax.setText(parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).FormuleMagMax);
                        Ed_SonAttaque.setText(parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).SoundAttaque);
                        Ed_SonBlesse.setText(parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).SoundWound);
                        Ed_SonMagie.setText(parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).SoundConcentration);
                        Ed_LvlUpPoint.setText(Integer.toString(parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).LvlupPoint));
                        Ed_LvlMax.setText(Integer.toString(parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).LvlMax));
                        StdGridModel std = new StdGridModel(""Stats Min"", parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).StatsMin);
                        StatsMinGrid.setModel(std);
                        StatsMinGrid.updateUI();
                        std = new StdGridModel(""Stats Max"", parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).StatsMax);
                        StatsMaxGrid.setModel(std);
                        StatsMaxGrid.updateUI();
                    }
                }
            });
            scrollpaneclasslist = new JScrollPane(ClasseList);
            scrollpaneclasslist.setBounds(new Rectangle(10, 10, 190, 470));
            add(scrollpaneclasslist);
            JButton Bt_AjouteClasse = new JButton(""Ajouter une classe"");
            Bt_AjouteClasse.setBounds(new Rectangle(205, 10, 180, 20));
            add(Bt_AjouteClasse);
            Bt_AjouteClasse.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    String NomClasse = JOptionPane.showInputDialog(null, ""Entrez le nom de la nouvelle classe"", """", 1);
                    if (NomClasse != null) {
                        if (NomClasse.compareTo("""") != 0) {
                            Classemodel.add(ClasseList.getModel().getSize(), NomClasse);
                            parent.general.getClassesJoueur().add(parent.general.new ClasseJoueur(NomClasse));
                            ArrayList<Integer> statsmin = parent.general.getClassesJoueur().get(parent.general.getClassesJoueur().size() - 1).StatsMin;
                            ArrayList<Integer> statsmax = parent.general.getClassesJoueur().get(parent.general.getClassesJoueur().size() - 1).StatsMax;
                            for (int i = 0; i < parent.general.getStatsBase().size(); i++) {
                                statsmin.add(0);
                                statsmax.add(0);
                            }
                            parent.objets.StatsBaseChange();
                            parent.magies.StatsBaseChange();
                        }
                    }
                }
            });
            JButton Bt_RetireClasse = new JButton(""Retirer une classe"");
            Bt_RetireClasse.setBounds(new Rectangle(400, 10, 180, 20));
            Bt_RetireClasse.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    if (ClasseList.getSelectedIndex() >= 0) {
                        if (JOptionPane.showConfirmDialog(null, ""Etes vous sûr de vouloir effacer cette classe?"", ""Effacer"", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                            parent.general.getClassesJoueur().remove(ClasseList.getSelectedIndex());
                            Classemodel.remove(ClasseList.getSelectedIndex());
                            paneuneclasse.setVisible(false);
                            parent.objets.StatsBaseChange();
                            parent.magies.StatsBaseChange();
                        }
                    }
                }
            });
            add(Bt_RetireClasse);
            paneuneclasse = new JPanel();
            paneuneclasse.setLayout(null);
            paneuneclasse.setBounds(new Rectangle(205, 35, 550, 550));
            paneuneclasse.setVisible(false);
            add(paneuneclasse);
            JLabel NomClasse = new JLabel(""Nom : "");
            NomClasse.setBounds(new Rectangle(0, 0, 200, 20));
            paneuneclasse.add(NomClasse);
            JLabel FormuleAtt = new JLabel(""Formule d'attaque : "");
            FormuleAtt.setBounds(new Rectangle(0, 20, 200, 20));
            paneuneclasse.add(FormuleAtt);
            JLabel FormuleEsq = new JLabel(""Formule d'esquive : "");
            FormuleEsq.setBounds(new Rectangle(0, 40, 200, 20));
            paneuneclasse.add(FormuleEsq);
            JLabel FormuleDeg = new JLabel(""Formule de dégat : "");
            FormuleDeg.setBounds(new Rectangle(0, 60, 200, 20));
            paneuneclasse.add(FormuleDeg);
            JLabel FormuleDef = new JLabel(""Formule de défense : "");
            FormuleDef.setBounds(new Rectangle(0, 80, 200, 20));
            paneuneclasse.add(FormuleDef);
            JLabel FormuleXP = new JLabel(""Formule gain XP : "");
            FormuleXP.setBounds(new Rectangle(0, 100, 200, 20));
            paneuneclasse.add(FormuleXP);
            JLabel FormuleGold = new JLabel(""Formule gain or : "");
            FormuleGold.setBounds(new Rectangle(0, 120, 200, 20));
            paneuneclasse.add(FormuleGold);
            JLabel FormuleVieMax = new JLabel(""Formule vie max : "");
            FormuleVieMax.setBounds(new Rectangle(0, 140, 200, 20));
            paneuneclasse.add(FormuleVieMax);
            JLabel FormuleMagMax = new JLabel(""Formule magie max : "");
            FormuleMagMax.setBounds(new Rectangle(0, 160, 200, 20));
            paneuneclasse.add(FormuleMagMax);
            JLabel SoundAttaque = new JLabel(""Son d'attaque : "");
            SoundAttaque.setBounds(new Rectangle(0, 180, 200, 20));
            paneuneclasse.add(SoundAttaque);
            JLabel LvlUpPoint = new JLabel(""Point Lvl Up : "");
            LvlUpPoint.setBounds(new Rectangle(410, 180, 200, 20));
            paneuneclasse.add(LvlUpPoint);
            JLabel SoundWound = new JLabel(""Son blessure : "");
            SoundWound.setBounds(new Rectangle(0, 200, 200, 20));
            paneuneclasse.add(SoundWound);
            JLabel LvlMax = new JLabel(""Lvl Max : "");
            LvlMax.setBounds(new Rectangle(410, 200, 200, 20));
            paneuneclasse.add(LvlMax);
            JLabel SoundConcentration = new JLabel(""Son magie : "");
            SoundConcentration.setBounds(new Rectangle(0, 220, 200, 20));
            paneuneclasse.add(SoundConcentration);
            KeyListener keyListener = new KeyListener() {

                public void keyTyped(KeyEvent keyEvent) {
                }

                public void keyPressed(KeyEvent keyEvent) {
                }

                public void keyReleased(KeyEvent keyEvent) {
                    SaveClasses();
                }
            };
            Ed_Nom = new JTextField();
            Ed_Nom.setBounds(new Rectangle(170, 0, 360, 20));
            Ed_Nom.addKeyListener(new KeyListener() {

                public void keyTyped(KeyEvent keyEvent) {
                }

                public void keyPressed(KeyEvent keyEvent) {
                }

                public void keyReleased(KeyEvent e) {
                    parent.general.getClassesJoueur().get(ClasseList.getSelectedIndex()).Name = Ed_Nom.getText();
                    Classemodel.set(ClasseList.getSelectedIndex(), Ed_Nom.getText());
                }
            });
            paneuneclasse.add(Ed_Nom);
            ActionListener stwizard = new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    StatWizard sw;
                    String s = """";
                    if (e.getSource() == Bt_FormuleAtt) s = Ed_FormuleAtt.getText();
                    if (e.getSource() == Bt_FormuleEsq) s = Ed_FormuleEsq.getText();
                    if (e.getSource() == Bt_FormuleDeg) s = Ed_FormuleDeg.getText();
                    if (e.getSource() == Bt_FormuleDef) s = Ed_FormuleDef.getText();
                    if (e.getSource() == Bt_FormuleXP) s = Ed_FormuleXP.getText();
                    if (e.getSource() == Bt_FormuleGold) s = Ed_FormuleGold.getText();
                    if (e.getSource() == Bt_FormuleVieMax) s = Ed_FormuleVieMax.getText();
                    if (e.getSource() == Bt_FormuleMagMax) s = Ed_FormuleMagMax.getText();
                    int compte;
                    compte = 33 + parent.general.getStatsBase().size();
                    String[] values = new String[compte];
                    for (int i = 0; i < parent.general.getStatsBase().size(); i++) values[i] = ""%"" + parent.general.getStatsBase().get(i) + ""%"";
                    compte = parent.general.getStatsBase().size();
                    values[compte] = ""%Vie%"";
                    values[compte + 1] = ""%VieMax%"";
                    values[compte + 2] = ""%CurrentMag%"";
                    values[compte + 3] = ""%MagMax%"";
                    values[compte + 4] = ""%Gold%"";
                    values[compte + 5] = ""%Lvl%"";
                    values[compte + 6] = ""%LvlPoint%"";
                    values[compte + 7] = ""%CurrentXP%"";
                    values[compte + 8] = ""%NextXP%"";
                    values[compte + 9] = ""%rand(100)%"";
                    values[compte + 10] = ""%max(valeur1,valeur2)%"";
                    values[compte + 11] = ""%min(valeur1,valeur2)%"";
                    values[compte + 12] = ""%Arme.Prix%"";
                    values[compte + 13] = ""%Arme.Attaque%"";
                    values[compte + 14] = ""%Arme.Defense%"";
                    values[compte + 15] = ""%Arme.Vie%"";
                    values[compte + 16] = ""%Arme.Magie%"";
                    values[compte + 17] = ""%Armure.Prix%"";
                    values[compte + 18] = ""%Armure.Attaque%"";
                    values[compte + 19] = ""%Armure.Defense%"";
                    values[compte + 20] = ""%Armure.Vie%"";
                    values[compte + 21] = ""%Armure.Magie%"";
                    values[compte + 22] = ""%Bouclier.Prix%"";
                    values[compte + 23] = ""%Bouclier.Attaque%"";
                    values[compte + 24] = ""%Bouclier.Defense%"";
                    values[compte + 25] = ""%Bouclier.Vie%"";
                    values[compte + 26] = ""%Bouclier.Magie%"";
                    values[compte + 27] = ""%Casque.Prix%"";
                    values[compte + 28] = ""%Casque.Attaque%"";
                    values[compte + 29] = ""%Casque.Defense%"";
                    values[compte + 30] = ""%Casque.Vie%"";
                    values[compte + 31] = ""%Casque.Magie%"";
                    values[compte + 32] = ""Variable[nomvar]"";
                    String[] cible = new String[] { ""%Monstre.Attaque%"", ""%Monstre.Esquive%"", ""%Monstre.Vie%"", ""%Monstre.Lvl%"", ""%Monstre.VieMax%"", ""%Monstre.Degat%"", ""%Monstre.Defense%"", ""%Monstre.XPMin%"", ""%Monstre.XPMax%"", ""%Monstre.GoldMin%"", ""%Monstre.GoldMax%"" };
                    sw = new StatWizard(parent.general, s, ""Variables relatives au joueur : "", ""Variables relatives aux monstres : "", """", values, cible, null, null, true);
                    if (sw.status == 1) {
                        if (e.getSource() == Bt_FormuleAtt) Ed_FormuleAtt.setText(sw.Ed_Commande.getText());
                        if (e.getSource() == Bt_FormuleEsq) Ed_FormuleEsq.setText(sw.Ed_Commande.getText());
                        if (e.getSource() == Bt_FormuleDeg) Ed_FormuleDeg.setText(sw.Ed_Commande.getText());
                        if (e.getSource() == Bt_FormuleDef) Ed_FormuleDef.setText(sw.Ed_Commande.getText());
                        if (e.getSource() == Bt_FormuleXP) Ed_FormuleXP.setText(sw.Ed_Commande.getText());
                        if (e.getSource() == Bt_FormuleGold) Ed_FormuleGold.setText(sw.Ed_Commande.getText());
                        if (e.getSource() == Bt_FormuleVieMax) Ed_FormuleVieMax.setText(sw.Ed_Commande.getText());
                        if (e.getSource() == Bt_FormuleMagMax) Ed_FormuleMagMax.setText(sw.Ed_Commande.getText());
                    }
                    SaveClasses();
                    sw.dispose();
                }
            };
            Ed_FormuleAtt = new JTextField();
            Ed_FormuleAtt.setBounds(new Rectangle(170, 20, 360, 20));
            Ed_FormuleAtt.addKeyListener(keyListener);
            paneuneclasse.add(Ed_FormuleAtt);
            Bt_FormuleAtt = new JButton(""..."");
            Bt_FormuleAtt.setBounds(new Rectangle(531, 20, 18, 20));
            Bt_FormuleAtt.addActionListener(stwizard);
            paneuneclasse.add(Bt_FormuleAtt);
            Ed_FormuleEsq = new JTextField();
            Ed_FormuleEsq.setBounds(new Rectangle(170, 40, 360, 20));
            Ed_FormuleEsq.addKeyListener(keyListener);
            paneuneclasse.add(Ed_FormuleEsq);
            Bt_FormuleEsq = new JButton(""..."");
            Bt_FormuleEsq.setBounds(new Rectangle(531, 40, 18, 20));
            Bt_FormuleEsq.addActionListener(stwizard);
            paneuneclasse.add(Bt_FormuleEsq);
            Ed_FormuleDeg = new JTextField();
            Ed_FormuleDeg.setBounds(new Rectangle(170, 60, 360, 20));
            Ed_FormuleDeg.addKeyListener(keyListener);
            paneuneclasse.add(Ed_FormuleDeg);
            Bt_FormuleDeg = new JButton(""..."");
            Bt_FormuleDeg.setBounds(new Rectangle(531, 60, 18, 20));
            Bt_FormuleDeg.addActionListener(stwizard);
            paneuneclasse.add(Bt_FormuleDeg);
            Ed_FormuleDef = new JTextField();
            Ed_FormuleDef.setBounds(new Rectangle(170, 80, 360, 20));
            Ed_FormuleDef.addKeyListener(keyListener);
            paneuneclasse.add(Ed_FormuleDef);
            Bt_FormuleDef = new JButton(""..."");
            Bt_FormuleDef.setBounds(new Rectangle(531, 80, 18, 20));
            Bt_FormuleDef.addActionListener(stwizard);
            paneuneclasse.add(Bt_FormuleDef);
            Ed_FormuleXP = new JTextField();
            Ed_FormuleXP.setBounds(new Rectangle(170, 100, 360, 20));
            Ed_FormuleXP.addKeyListener(keyListener);
            paneuneclasse.add(Ed_FormuleXP);
            Bt_FormuleXP = new JButton(""..."");
            Bt_FormuleXP.setBounds(new Rectangle(531, 100, 18, 20));
            Bt_FormuleXP.addActionListener(stwizard);
            paneuneclasse.add(Bt_FormuleXP);
            Ed_FormuleGold = new JTextField();
            Ed_FormuleGold.setBounds(new Rectangle(170, 120, 360, 20));
            Ed_FormuleGold.addKeyListener(keyListener);
            paneuneclasse.add(Ed_FormuleGold);
            Bt_FormuleGold = new JButton(""..."");
            Bt_FormuleGold.setBounds(new Rectangle(531, 120, 18, 20));
            Bt_FormuleGold.addActionListener(stwizard);
            paneuneclasse.add(Bt_FormuleGold);
            Ed_FormuleVieMax = new JTextField();
            Ed_FormuleVieMax.setBounds(new Rectangle(170, 140, 360, 20));
            Ed_FormuleVieMax.addKeyListener(keyListener);
            paneuneclasse.add(Ed_FormuleVieMax);
            Bt_FormuleVieMax = new JButton(""..."");
            Bt_FormuleVieMax.setBounds(new Rectangle(531, 140, 18, 20));
            Bt_FormuleVieMax.addActionListener(stwizard);
            paneuneclasse.add(Bt_FormuleVieMax);
            Ed_FormuleMagMax = new JTextField();
            Ed_FormuleMagMax.setBounds(new Rectangle(170, 160, 360, 20));
            Ed_FormuleMagMax.addKeyListener(keyListener);
            paneuneclasse.add(Ed_FormuleMagMax);
            Bt_FormuleMagMax = new JButton(""..."");
            Bt_FormuleMagMax.setBounds(new Rectangle(531, 160, 18, 20));
            Bt_FormuleMagMax.addActionListener(stwizard);
            paneuneclasse.add(Bt_FormuleMagMax);
            Ed_SonAttaque = new JTextField();
            Ed_SonAttaque.setBounds(new Rectangle(170, 180, 215, 20));
            Ed_SonAttaque.addKeyListener(keyListener);
            paneuneclasse.add(Ed_SonAttaque);
            ActionListener ChooseSound = new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    JFileChooser choix = new JFileChooser();
                    choix.addChoosableFileFilter(parent.new FilterSound());
                    choix.setCurrentDirectory(new java.io.File(parent.NomCarte + ""/Sound""));
                    int retour = choix.showOpenDialog(null);
                    if (retour == JFileChooser.APPROVE_OPTION) {
                        if (!new File(parent.NomCarte + ""/Sound/"" + choix.getSelectedFile().getName()).exists()) parent.copyfile(choix.getSelectedFile().getAbsolutePath(), parent.NomCarte + ""/Sound/"" + choix.getSelectedFile().getName());
                        JTextField Edit = null;
                        if (e.getSource().equals(Bt_ChooseSonAttaque)) Edit = Ed_SonAttaque; else if (e.getSource().equals(Bt_ChooseSonBlesse)) Edit = Ed_SonBlesse; else if (e.getSource().equals(Bt_ChooseSonMagie)) Edit = Ed_SonMagie;
                        if (Edit != null) Edit.setText(""Sound\\"" + choix.getSelectedFile().getName());
                        SaveClasses();
                    }
                }
            };
            Bt_ChooseSonAttaque = new JButton(""..."");
            Bt_ChooseSonAttaque.setBounds(new Rectangle(386, 180, 18, 20));
            Bt_ChooseSonAttaque.addActionListener(ChooseSound);
            paneuneclasse.add(Bt_ChooseSonAttaque);
            Ed_LvlUpPoint = new JTextField();
            Ed_LvlUpPoint.setBounds(new Rectangle(490, 180, 40, 20));
            Ed_LvlUpPoint.addKeyListener(keyListener);
            paneuneclasse.add(Ed_LvlUpPoint);
            Ed_SonBlesse = new JTextField();
            Ed_SonBlesse.setBounds(new Rectangle(170, 200, 215, 20));
            Ed_SonBlesse.addKeyListener(keyListener);
            paneuneclasse.add(Ed_SonBlesse);
            Bt_ChooseSonBlesse = new JButton(""..."");
            Bt_ChooseSonBlesse.setBounds(new Rectangle(386, 200, 18, 20));
            Bt_ChooseSonBlesse.addActionListener(ChooseSound);
            paneuneclasse.add(Bt_ChooseSonBlesse);
            Ed_LvlMax = new JTextField();
            Ed_LvlMax.setBounds(new Rectangle(490, 200, 40, 20));
            Ed_LvlMax.addKeyListener(keyListener);
            paneuneclasse.add(Ed_LvlMax);
            Bt_ChooseSonMagie = new JButton(""..."");
            Bt_ChooseSonMagie.setBounds(new Rectangle(386, 220, 18, 20));
            Bt_ChooseSonMagie.addActionListener(ChooseSound);
            paneuneclasse.add(Bt_ChooseSonMagie);
            Ed_SonMagie = new JTextField();
            Ed_SonMagie.setBounds(new Rectangle(170, 220, 215, 20));
            Ed_SonMagie.addKeyListener(keyListener);
            paneuneclasse.add(Ed_SonMagie);
            StdGridModel std = new StdGridModel(""Stats Min"", null);
            StatsMinGrid = new JTable(std);
            StatsMinGrid.setRowSelectionAllowed(false);
            StatsMinGrid.setColumnSelectionAllowed(false);
            JScrollPane scrollpaneSMG = new JScrollPane(StatsMinGrid);
            StatsMinGrid.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            StatsMinGrid.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            StatsMinGrid.setRowHeight(16);
            for (int i = 0; i < StatsMinGrid.getColumnCount(); i++) {
                TableColumn col = StatsMinGrid.getColumnModel().getColumn(i);
                col.setPreferredWidth(50);
            }
            scrollpaneSMG.setBounds(new Rectangle(0, 245, 153, 200));
            paneuneclasse.add(scrollpaneSMG);
            std = new StdGridModel(""Stats Max"", null);
            StatsMaxGrid = new JTable(std);
            StatsMaxGrid.setRowSelectionAllowed(false);
            StatsMaxGrid.setColumnSelectionAllowed(false);
            JScrollPane scrollpaneSMaG = new JScrollPane(StatsMaxGrid);
            StatsMaxGrid.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            StatsMaxGrid.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            StatsMaxGrid.setRowHeight(16);
            for (int i = 0; i < StatsMaxGrid.getColumnCount(); i++) {
                TableColumn col = StatsMaxGrid.getColumnModel().getColumn(i);
                col.setPreferredWidth(50);
            }
            scrollpaneSMaG.setBounds(new Rectangle(300, 245, 153, 200));
            paneuneclasse.add(scrollpaneSMaG);
            ComponentAdapter listener = new ComponentAdapter() {

                public void componentResized(ComponentEvent evt) {
                    Component c = (Component) evt.getSource();
                    Dimension newSize = c.getSize();
                    scrollpaneclasslist.setBounds(new Rectangle(10, 10, 190, newSize.height - 125));
                }
            };
            parent.addComponentListener(listener);
        }",0,0
"    public static void synchronizeConnectionTable(int[][] contab) {
        int N = contab.length;
        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                contab[j][i] = contab[i][j];
            }
        }
    }","    public void exportTreeImage(String path, int dims[]) {
        float oldLineWidth = getLineWidthScale();
        int oldWidth = getWidth();
        int oldHeight = getHeight();
        double oldXScale = xscale;
        double oldYScale = yscale;
        double oldXStart = xstart;
        double oldYStart = ystart;
        try {
            setLineWidthScale(oldLineWidth * (float) .2);
            xstart = 0;
            ystart = 0;
            width = dims[0];
            height = dims[1];
            TREEMARGIN = 0;
            if (drawExternalNodeLabels && zoomDrawNodeLabels) TREEMARGIN = textWidth(root.getLongestLabel());
            float usableWidth = 0;
            float usableHeight = 0;
            if (treeLayout.equals(""Rectangular"") || treeLayout.equals(""Triangular"")) {
                usableWidth = dims[0] - TREEMARGIN - 5;
                usableHeight = dims[1] - (float) MARGIN * 2 - 5;
                xscale = usableWidth / root.depth();
                xstart = MARGIN;
                yscale = usableHeight / root.getNumberOfLeaves();
                ystart = MARGIN;
            } else if (treeLayout.equals(""Radial"") || treeLayout.equals(""Polar"")) {
                usableWidth = dims[0] - 2 * TREEMARGIN - 5;
                usableHeight = dims[1] - 2 * TREEMARGIN - 5;
                xscale = (Math.min(usableWidth, usableHeight) * 0.5) / root.depth();
                xstart = dims[0] * 0.5;
                yscale = (Math.min(usableWidth, usableHeight) * 0.5) / root.depth();
                ystart = dims[1] * 0.5;
            }
            PGraphics canvas = createGraphics((int) (dims[0]), (int) (dims[1]), PDF, path);
            canvas.beginDraw();
            canvas.background(backgroundColor.getRed(), backgroundColor.getGreen(), backgroundColor.getBlue());
            canvas.pushMatrix();
            canvas.translate((float) xstart, (float) ystart);
            canvas.rotate((float) (treerotation * Math.PI / 180.0));
            canvas.translate((float) -xstart, (float) -ystart);
            canvas.textFont(nodeFont);
            drawTree(root, canvas);
            canvas.popMatrix();
            canvas.dispose();
            canvas.endDraw();
            if (Desktop.isDesktopSupported()) {
                try {
                    File myFile = new File(path);
                    Desktop.getDesktop().open(myFile);
                } catch (IOException ex) {
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, ""Unable to export pdf.\n"" + e.getMessage(), ""Error"", JOptionPane.ERROR_MESSAGE);
        }
        setLineWidthScale(oldLineWidth);
        xscale = oldXScale;
        yscale = oldYScale;
        xstart = oldXStart;
        ystart = oldYStart;
        width = oldWidth;
        height = oldHeight;
        redraw();
    }",0,0
"    public TabelaVerdade(String tipoDeExercicio, String ordem, String ordem2, String[][] valores, String preposicao) {
        super(Usuario.statusDoExercicio(tipoDeExercicio, InterfaceDados.obtemNumeroDoExercicioCorrente()));
        pSuperior = new JPanel(new GridLayout(2, 1));
        pTitulo = new JPanel(new FlowLayout(FlowLayout.CENTER));
        titulo = new JLabel(tipoDeExercicio);
        titulo.setFont(new Font(""Arial"", 0, 25));
        titulo.setForeground(new Color(0, 0, 128));
        pTitulo.add(titulo);
        pSuperior.add(pTitulo);
        preposicao = alteraString(preposicao);
        valores = alteraMatrizDeStrings(valores);
        pEnun = new JPanel(new GridLayout(2, 1));
        enunciado1 = new JLabel(this.retornaEspacoAjustado(""    "") + ordem);
        enunciado1.setFont(new Font(""Arial"", 1, 14));
        enunciado1.setForeground(new Color(0, 0, 128));
        pEnun.add(enunciado1);
        pEnun2 = new JPanel(new FlowLayout(FlowLayout.LEFT));
        enunciado2 = new JLabel(this.retornaEspacoAjustado(""    "") + ordem2);
        enunciado2.setFont(new Font(""Arial"", 1, 14));
        enunciado2.setForeground(new Color(0, 0, 128));
        pEnun2.add(enunciado2);
        enunciado2 = new JLabel(preposicao);
        enunciado2.setFont(new Font(""Times"", 1, 16));
        enunciado2.setForeground(new Color(0, 0, 128));
        pEnun2.add(enunciado2);
        pEnun.add(pEnun2);
        pSuperior.add(pEnun);
        getContentPane().add(""North"", pSuperior);
        pOeste = new JPanel(new FlowLayout(FlowLayout.LEFT));
        pOeste.add(new JLabel(this.retornaEspacoAjustado(""  "")));
        getContentPane().add(""East"", pOeste);
        pOeste.add(new JLabel(this.retornaEspacoAjustado(""    "")));
        getContentPane().add(""West"", pOeste);
        pCentral = new JPanel(new GridLayout(1, valores[0].length + 1));
        pColuna = new JPanel(new GridLayout(valores.length, 1));
        String[][] valor = new String[valores[1].length][valores.length];
        for (int i = 0; i < valor.length; i++) for (int j = 0; j < valor[i].length; j++) {
            valor[i][j] = valores[j][i];
        }
        int total = 0;
        for (int i = 0; i < valor.length; i++) {
            if (valor[i][1].equals(""nada"")) total++;
        }
        preencher = new JTextField[total + 1][valor[1].length - 1];
        resposta = new String[total + 1][valor[1].length - 1];
        int aux = 0;
        for (int i = 0; i <= valor.length; i++) {
            pColuna = new JPanel(new GridLayout(valor[1].length, 1));
            for (int j = 0; j < valor[1].length; j++) {
                if (i == valor.length) {
                    if (j == 0) {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        JLabel prep = new JLabel(preposicao);
                        prep.setFont(new Font(""Times"", 0, 11));
                        prep.setForeground(new Color(0, 0, 128));
                        pAux.add(prep);
                    } else {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        preencher[total][j - 1] = new JTextField("""", 3);
                        preencher[total][j - 1].setDocument(new DefinePadraoDoTexto(1));
                        preencher[total][j - 1].addKeyListener(this);
                        pAux.add(preencher[total][j - 1]);
                    }
                } else {
                    if ((valor[i][j]).equals(""nada"")) {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        preencher[aux][j - 1] = new JTextField("""", 3);
                        preencher[aux][j - 1].setDocument(new DefinePadraoDoTexto(1));
                        preencher[aux][j - 1].addKeyListener(this);
                        pAux.add(preencher[aux][j - 1]);
                        if (j == valor[i].length - 1) aux++;
                    } else {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        JLabel vals = new JLabel(valor[i][j]);
                        if (j == 0) {
                            vals.setFont(new Font(""Times"", 0, 14));
                            vals.setForeground(new Color(0, 0, 128));
                        }
                        pAux.add(vals);
                    }
                }
                pColuna.add(pAux);
            }
            pCentral.add(pColuna);
        }
        getContentPane().add(""Center"", pCentral);
    }","    public static void createScreenShot(File a_file, Rectangle a_rectangle) throws Exception {
        Robot l_robot = new Robot();
        BufferedImage l_img = l_robot.createScreenCapture(a_rectangle);
        a_file.getParentFile().mkdirs();
        String l_extension = FTools.getExtension(a_file);
        ImageIO.write(l_img, l_extension, a_file);
    }",0,0
"    public static Object[] addToArray(Object[] array, Object member) {
        Object[] newArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = member;
        return newArray;
    }","    private Integer slowFib(int i) {
        if (i <= 0) return 0;
        if (i == 1) return 1;
        return slowFib(i - 1) + slowFib(i - 2);
    }",0,0
"    public SOCTradeOffer makeOffer(SOCPossiblePiece targetPiece) {
        D.ebugPrintln(""***** MAKE OFFER *****"");
        if (targetPiece == null) {
            return null;
        }
        SOCTradeOffer offer = null;
        SOCResourceSet targetResources = null;
        switch(targetPiece.getType()) {
            case SOCPossiblePiece.CARD:
                targetResources = SOCGame.CARD_SET;
                break;
            case SOCPossiblePiece.ROAD:
                targetResources = SOCGame.ROAD_SET;
                break;
            case SOCPossiblePiece.SETTLEMENT:
                targetResources = SOCGame.SETTLEMENT_SET;
                break;
            case SOCPossiblePiece.CITY:
                targetResources = SOCGame.CITY_SET;
                break;
        }
        SOCResourceSet ourResources = ourPlayerData.getResources();
        D.ebugPrintln(""*** targetResources = "" + targetResources);
        D.ebugPrintln(""*** ourResources = "" + ourResources);
        if (ourResources.contains(targetResources)) {
            return offer;
        }
        if (ourResources.getAmount(SOCResourceConstants.UNKNOWN) > 0) {
            D.ebugPrintln(""AGG WE HAVE UNKNOWN RESOURCES !!!! %%%%%%%%%%%%%%%%%%%%%%%%%%%%"");
            return offer;
        }
        SOCTradeOffer batna = getOfferToBank(targetResources);
        D.ebugPrintln(""*** BATNA = "" + batna);
        SOCBuildingSpeedEstimate estimate = new SOCBuildingSpeedEstimate(ourPlayerData.getNumbers());
        SOCResourceSet giveResourceSet = new SOCResourceSet();
        SOCResourceSet getResourceSet = new SOCResourceSet();
        int batnaBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
        D.ebugPrintln(""*** batnaBuildingTime = "" + batnaBuildingTime);
        if (batna != null) {
            batnaBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, batna.getGiveSet(), batna.getGetSet(), estimate);
        }
        D.ebugPrintln(""*** batnaBuildingTime = "" + batnaBuildingTime);
        int[] rollsPerResource = estimate.getRollsPerResource();
        int[] neededRsrc = new int[5];
        int[] notNeededRsrc = new int[5];
        int neededRsrcCount = 0;
        int notNeededRsrcCount = 0;
        for (int rsrcType = SOCResourceConstants.CLAY; rsrcType <= SOCResourceConstants.WOOD; rsrcType++) {
            if (targetResources.getAmount(rsrcType) > 0) {
                neededRsrc[neededRsrcCount] = rsrcType;
                neededRsrcCount++;
            } else {
                notNeededRsrc[notNeededRsrcCount] = rsrcType;
                notNeededRsrcCount++;
            }
        }
        for (int j = neededRsrcCount - 1; j >= 0; j--) {
            for (int i = 0; i < j; i++) {
                if (rollsPerResource[neededRsrc[i]] > rollsPerResource[neededRsrc[i + 1]]) {
                    int tmp = neededRsrc[i];
                    neededRsrc[i] = neededRsrc[i + 1];
                    neededRsrc[i + 1] = tmp;
                }
            }
        }
        if (D.ebugOn) {
            for (int i = 0; i < neededRsrcCount; i++) {
                D.ebugPrintln(""NEEDED RSRC: "" + neededRsrc[i] + "" : "" + rollsPerResource[neededRsrc[i]]);
            }
        }
        for (int j = notNeededRsrcCount - 1; j >= 0; j--) {
            for (int i = 0; i < j; i++) {
                if (rollsPerResource[notNeededRsrc[i]] > rollsPerResource[notNeededRsrc[i + 1]]) {
                    int tmp = notNeededRsrc[i];
                    notNeededRsrc[i] = notNeededRsrc[i + 1];
                    notNeededRsrc[i + 1] = tmp;
                }
            }
        }
        if (D.ebugOn) {
            for (int i = 0; i < notNeededRsrcCount; i++) {
                D.ebugPrintln(""NOT-NEEDED RSRC: "" + notNeededRsrc[i] + "" : "" + rollsPerResource[notNeededRsrc[i]]);
            }
        }
        boolean[] someoneIsSellingResource = new boolean[SOCResourceConstants.MAXPLUSONE];
        for (int rsrcType = SOCResourceConstants.CLAY; rsrcType <= SOCResourceConstants.WOOD; rsrcType++) {
            someoneIsSellingResource[rsrcType] = false;
            for (int pn = 0; pn < SOCGame.MAXPLAYERS; pn++) {
                if ((pn != ourPlayerData.getPlayerNumber()) && (isSellingResource[pn][rsrcType])) {
                    someoneIsSellingResource[rsrcType] = true;
                    D.ebugPrintln(""*** player "" + pn + "" is selling "" + rsrcType);
                    break;
                }
            }
        }
        int getRsrcIdx = neededRsrcCount - 1;
        while ((getRsrcIdx >= 0) && ((ourResources.getAmount(neededRsrc[getRsrcIdx]) >= targetResources.getAmount(neededRsrc[getRsrcIdx])) || (!someoneIsSellingResource[neededRsrc[getRsrcIdx]]))) {
            getRsrcIdx--;
        }
        if (getRsrcIdx >= 0) {
            D.ebugPrintln(""*** getRsrc = "" + neededRsrc[getRsrcIdx]);
            getResourceSet.add(1, neededRsrc[getRsrcIdx]);
            D.ebugPrintln(""*** offer should be null : offer = "" + offer);
            int giveRsrcIdx = 0;
            while ((giveRsrcIdx < notNeededRsrcCount) && (offer == null)) {
                D.ebugPrintln(""*** ourResources.getAmount("" + notNeededRsrc[giveRsrcIdx] + "") = "" + ourResources.getAmount(notNeededRsrc[giveRsrcIdx]));
                if (ourResources.getAmount(notNeededRsrc[giveRsrcIdx]) > 0) {
                    giveResourceSet.clear();
                    giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx]);
                    offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                    D.ebugPrintln(""*** offer = "" + offer);
                    int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                }
                giveRsrcIdx++;
            }
            D.ebugPrintln(""*** ourResources = "" + ourResources);
            if (offer == null) {
                int giveRsrcIdx1 = 0;
                while ((giveRsrcIdx1 < neededRsrcCount) && (offer == null)) {
                    D.ebugPrintln(""*** ourResources.getAmount("" + neededRsrc[giveRsrcIdx1] + "") = "" + ourResources.getAmount(neededRsrc[giveRsrcIdx1]));
                    D.ebugPrintln(""*** targetResources.getAmount("" + neededRsrc[giveRsrcIdx1] + "") = "" + targetResources.getAmount(neededRsrc[giveRsrcIdx1]));
                    if ((ourResources.getAmount(neededRsrc[giveRsrcIdx1]) > targetResources.getAmount(neededRsrc[giveRsrcIdx1])) && (neededRsrc[giveRsrcIdx1] != neededRsrc[getRsrcIdx])) {
                        giveResourceSet.clear();
                        giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                        int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                        if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                            offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                            D.ebugPrintln(""*** offer = "" + offer);
                            D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                        }
                    }
                    giveRsrcIdx1++;
                }
            }
            D.ebugPrintln(""*** ourResources = "" + ourResources);
            SOCResourceSet leftovers = ourResources.copy();
            leftovers.subtract(targetResources);
            D.ebugPrintln(""*** leftovers = "" + leftovers);
            if (offer == null) {
                int giveRsrcIdx1 = 0;
                int giveRsrcIdx2 = 0;
                while ((giveRsrcIdx1 < notNeededRsrcCount) && (offer == null)) {
                    if (ourResources.getAmount(notNeededRsrc[giveRsrcIdx1]) > 0) {
                        while ((giveRsrcIdx2 < notNeededRsrcCount) && (offer == null)) {
                            giveResourceSet.clear();
                            giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx1]);
                            giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx2]);
                            if (ourResources.contains(giveResourceSet)) {
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            giveRsrcIdx2++;
                        }
                        giveRsrcIdx2 = 0;
                        while ((giveRsrcIdx2 < neededRsrcCount) && (offer == null)) {
                            if (neededRsrc[giveRsrcIdx2] != neededRsrc[getRsrcIdx]) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx1]);
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx2]);
                                if (leftovers.contains(giveResourceSet)) {
                                    int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                    if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                        offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                        D.ebugPrintln(""*** offer = "" + offer);
                                        D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                    }
                                }
                            }
                            giveRsrcIdx2++;
                        }
                    }
                    giveRsrcIdx1++;
                }
                giveRsrcIdx1 = 0;
                giveRsrcIdx2 = 0;
                while ((giveRsrcIdx1 < neededRsrcCount) && (offer == null)) {
                    if ((leftovers.getAmount(neededRsrc[giveRsrcIdx1]) > 0) && (neededRsrc[giveRsrcIdx1] != neededRsrc[getRsrcIdx])) {
                        while ((giveRsrcIdx2 < notNeededRsrcCount) && (offer == null)) {
                            giveResourceSet.clear();
                            giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                            giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx2]);
                            if (leftovers.contains(giveResourceSet)) {
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            giveRsrcIdx2++;
                        }
                        giveRsrcIdx2 = 0;
                        while ((giveRsrcIdx2 < neededRsrcCount) && (offer == null)) {
                            if (neededRsrc[giveRsrcIdx2] != neededRsrc[getRsrcIdx]) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx2]);
                                if (leftovers.contains(giveResourceSet)) {
                                    int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                    if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                        offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                        D.ebugPrintln(""*** offer = "" + offer);
                                        D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                    }
                                }
                            }
                            giveRsrcIdx2++;
                        }
                    }
                    giveRsrcIdx1++;
                }
            }
        }
        if (offer == null) {
            SOCResourceSet leftovers = ourResources.copy();
            leftovers.subtract(targetResources);
            D.ebugPrintln(""*** leftovers = "" + leftovers);
            int getRsrcIdx2 = notNeededRsrcCount - 1;
            while ((getRsrcIdx2 >= 0) && (!someoneIsSellingResource[neededRsrc[getRsrcIdx2]])) {
                getRsrcIdx2--;
            }
            while ((getRsrcIdx2 >= 0) && (offer == null)) {
                getResourceSet.clear();
                getResourceSet.add(1, notNeededRsrc[getRsrcIdx2]);
                leftovers.add(1, notNeededRsrc[getRsrcIdx2]);
                if (offer == null) {
                    int giveRsrcIdx1 = 0;
                    while ((giveRsrcIdx1 < notNeededRsrcCount) && (offer == null)) {
                        if ((leftovers.getAmount(notNeededRsrc[giveRsrcIdx1]) > 0) && (notNeededRsrc[giveRsrcIdx1] != notNeededRsrc[getRsrcIdx2])) {
                            leftovers.subtract(1, notNeededRsrc[giveRsrcIdx1]);
                            if (getOfferToBank(targetResources, leftovers) != null) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx1]);
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if (offerBuildingTime < batnaBuildingTime) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, notNeededRsrc[getRsrcIdx2]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            leftovers.add(1, notNeededRsrc[giveRsrcIdx1]);
                        }
                        giveRsrcIdx1++;
                    }
                }
                if (offer == null) {
                    int giveRsrcIdx1 = 0;
                    while ((giveRsrcIdx1 < neededRsrcCount) && (offer == null)) {
                        if (leftovers.getAmount(neededRsrc[giveRsrcIdx1]) > 0) {
                            leftovers.subtract(1, neededRsrc[giveRsrcIdx1]);
                            if (getOfferToBank(targetResources, leftovers) != null) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if (offerBuildingTime < batnaBuildingTime) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, notNeededRsrc[getRsrcIdx2]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            leftovers.add(1, neededRsrc[giveRsrcIdx1]);
                        }
                        giveRsrcIdx1++;
                    }
                }
                leftovers.subtract(1, notNeededRsrc[getRsrcIdx2]);
                getRsrcIdx2--;
            }
        }
        return offer;
    }","    private float[][] transpose(float[][] m) {
        float[][] toReturn = new float[m[0].length][m.length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++) {
                toReturn[j][i] = m[i][j];
            }
        }
        return toReturn;
    }",0,0
"    public RealSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }","    private void openFastaFileActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == openFastaFile) {
            int returnVal = fc.showOpenDialog(ParameterSolutions.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                inputFile = fc.getSelectedFile();
                log.append(""Opening: "" + inputFile.getName() + ""\n"");
                if (!inputFile.canRead() || !BinningFasta.verifyInputFile(inputFile)) {
                    log.append(""That is not a valid fasta file, please choose"" + "" a properly formatted fasta file.\n"");
                    inputFile = null;
                    return;
                }
                narr.println(""Opening: "" + inputFile.getName());
            } else {
                log.append(""Dialog Cancelled by User.\n"");
            }
        }
    }",0,0
"    private static <T> T[] concat(T[] a, T[] b) {
        final int alen = a.length;
        final int blen = b.length;
        if (alen == 0) {
            return b;
        }
        if (blen == 0) {
            return a;
        }
        final T[] result = (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), alen + blen);
        System.arraycopy(a, 0, result, 0, alen);
        System.arraycopy(b, 0, result, alen, blen);
        return result;
    }","    void run() throws Exception {
        List<String> cmd = new ArrayList<String>();
        File java_home = new File(System.getProperty(""java.home""));
        if (java_home.getName().equals(""jre"")) java_home = java_home.getParentFile();
        cmd.add(new File(new File(java_home, ""bin""), ""java"").getPath());
        cmd.add(""-Xbootclasspath:"" + System.getProperty(""sun.boot.class.path""));
        cmd.add(""-classpath"");
        cmd.add(System.getProperty(""java.class.path""));
        cmd.add(""-da"");
        cmd.add(""-dsa"");
        cmd.add(""EarlyAssert"");
        System.err.println(""Running command: "" + cmd);
        ProcessBuilder pb = new ProcessBuilder(cmd);
        pb.redirectErrorStream(true);
        Process p = pb.start();
        p.getOutputStream().close();
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        String line;
        DataInputStream in = new DataInputStream(p.getInputStream());
        try {
            while ((line = in.readLine()) != null) pw.println(line);
        } finally {
            in.close();
        }
        pw.close();
        String out = sw.toString();
        int rc = p.waitFor();
        if (rc != 0 || out.length() > 0) throw new Error(""failed: rc="" + rc + (out.length() > 0 ? "": "" + out : """"));
    }",0,0
"    private static String execCmd(String cmd) {
        String msg = new String("""");
        boolean cmdOK = true;
        Process proc = null;
        Runtime runtime = Runtime.getRuntime();
        try {
            proc = runtime.exec(cmd);
            InputStreamReader isrError = new InputStreamReader(proc.getErrorStream());
            BufferedReader brError = new BufferedReader(isrError);
            String line = null;
            while ((line = brError.readLine()) != null) {
                System.out.println(""ERROR MSG>"" + line);
            }
            InputStreamReader isrOutput = new InputStreamReader(proc.getInputStream());
            BufferedReader brOutput = new BufferedReader(isrOutput);
            line = null;
            while ((line = brOutput.readLine()) != null) {
                System.out.println(""OUTPUT>"" + line);
            }
            int exitVal = proc.waitFor();
            System.out.println(""ExitValue: "" + exitVal);
        } catch (Exception e) {
            cmdOK = false;
            msg += ""Problem executing command: "" + cmd + ""  DAMN. Exception "" + e.toString();
            System.err.println(msg);
        }
        if (cmdOK) {
            msg += ""Command: "" + cmd + "" OK."";
        }
        return msg;
    }","    public static double[][] transpose(double[][] in) {
        assert in != null;
        int h = in.length;
        int w = in[0].length;
        double[][] out = new double[w][h];
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                out[x][y] = in[y][x];
            }
        }
        return out;
    }",0,0
"    public static int[][] reversalXandY(final int[][] array) {
        int col = array[0].length;
        int row = array.length;
        int[][] result = new int[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","    private String matchPattern(String string, String regex, String tag) {
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(string);
        int lastend = 0;
        String output = """";
        while (matcher.find()) {
            output += string.substring(lastend, matcher.start(1));
            output += colorize(matcher, tag);
            lastend = matcher.end(1);
        }
        output += string.substring(lastend);
        return output;
    }",0,0
"    public CSolver(int maxR, int minR, int maxS, int minS, boolean u, ClusterManager cm, SolutionFactory f) {
        this.model = new CPModel();
        this.solver = null;
        this.nFound = 0;
        this.maxRosters = maxR;
        this.minRosters = minR;
        this.maxSize = maxS;
        this.minSize = minS;
        this.useAll = u;
        this.mgr = cm;
        this.nClusters = cm.getClusterCount();
        this.capacity = cm.getCapacities();
        this.singletons = cm.getSingletons();
        this.factory = f;
        this.result = Result.UNSOLVED;
        if (useAll) {
            int all = 0;
            for (int c : capacity) {
                all += c;
            }
            int m = (int) Math.round(Math.ceil(((double) all) / maxSize));
            minRosters = Math.max(minRosters, m);
        }
        assign = new IntegerVariable[nClusters][maxRosters + 1];
        transpose = new IntegerVariable[maxRosters + 1][nClusters];
        for (int c = 0; c < nClusters; c++) {
            int x = capacity[c];
            for (int r = 1; r <= maxRosters; r++) {
                assign[c][r] = Choco.makeIntVar(""assign_"" + c + ""_"" + r, 0, x);
                model.addVariable(assign[c][r]);
                transpose[r][c] = assign[c][r];
            }
            assign[c][0] = Choco.makeIntVar(""unassigned_"" + c, 0, (useAll) ? 0 : x);
            model.addVariable(assign[c][0]);
            transpose[0][c] = assign[c][0];
        }
        size = new IntegerVariable[maxRosters + 1];
        used = new IntegerVariable[maxRosters + 1];
        int[] temp = new int[maxSize - minSize + 2];
        temp[0] = 0;
        for (int i = 0; i <= maxSize - minSize; i++) {
            temp[i + 1] = minSize + i;
        }
        for (int r = 1; r <= minRosters; r++) {
            size[r] = Choco.makeIntVar(""size_"" + r, minSize, maxSize);
            used[r] = Choco.makeIntVar(""used_"" + r, 1, 1);
        }
        for (int r = minRosters + 1; r <= maxRosters; r++) {
            size[r] = Choco.makeIntVar(""size_"" + r, temp);
            used[r] = Choco.makeIntVar(""used_"" + r, 0, 1);
        }
        int h = (useAll) ? 1 : 0;
        used[0] = Choco.makeIntVar(""used_0"", 0, 0);
        assignTo = new IntegerVariable[nClusters];
        for (int i : singletons) {
            assignTo[i] = Choco.makeIntVar(""assign_"" + i + ""_to"", h, maxRosters);
        }
        nUsed = Choco.makeIntVar(""nRosters"", minRosters, maxRosters);
        model.addVariable(nUsed);
        for (int c = 0; c < nClusters; c++) {
            model.addConstraint(Choco.eq(Choco.sum(assign[c]), capacity[c]));
        }
        for (int r = 1; r <= maxRosters; r++) {
            model.addConstraint(Choco.eq(Choco.sum(transpose[r]), size[r]));
        }
        for (int r = 1; r <= maxRosters; r++) {
            model.addConstraint(Choco.reifiedIntConstraint(used[r], Choco.gt(size[r], 0)));
        }
        model.addConstraint(Choco.eq(Choco.sum(used), nUsed));
        for (int i : singletons) {
            model.addConstraint(Choco.domainConstraint(assignTo[i], assign[i]));
        }
        Set<HashSet<Integer>> cliques = mgr.getCliques();
        for (Set<Integer> c : cliques) {
            if (c.size() < 2) {
                continue;
            }
            Integer[] clist = c.toArray(new Integer[1]);
            for (int i = 1; i < clist.length; i++) {
                model.addConstraint(Choco.eq(assignTo[clist[0]], assignTo[clist[i]]));
            }
        }
        Map<Integer, ArrayList<Integer>> incompatible = mgr.getIncompatible();
        if (incompatible != null) {
            for (int i0 : incompatible.keySet()) {
                for (int i1 : incompatible.get(i0)) {
                    if (i0 < i1) {
                        model.addConstraint(Choco.or(Choco.eq(assignTo[i0], 0), Choco.neq(assignTo[i0], assignTo[i1])));
                    }
                }
            }
        }
        for (int r = 1; r < maxRosters; r++) {
            model.addConstraint(Choco.lexeq(transpose[r + 1], transpose[r]));
        }
        for (int r = minRosters; r < maxRosters; r++) {
            model.addConstraint(Choco.leq(used[r + 1], used[r]));
        }
    }","    public static File takeAPictureAndSaveIt(int wait, String dir) {
        try {
            Thread.sleep(wait);
            boolean wasVisible = false;
            if (dir == null && Context.wind != null) {
                if (Context.wind.isVisible()) {
                    Context.wind.setVisible(false);
                    wasVisible = true;
                }
            }
            Robot robot = new Robot();
            BufferedImage image = robot.createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
            String imagefile = ""img"" + ORDER++ + "".gif"";
            if (dir != null) {
                imagefile = dir + ""/snd"" + ORDER + "".nk"";
            }
            File file = new File(imagefile);
            ImageIO.write(image, ""gif"", file);
            if (dir == null && wasVisible && Context.wind != null) {
                Context.wind.setVisible(true);
            }
            return file;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }",0,0
"    public ImageDisplay(ImageDisplayApplet applet, GraphicsConfiguration gc) {
        this.applet = applet;
        if (applet == null) {
            frame = new JFrame(gc);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(PREFERRED_WIDTH, PREFERRED_HEIGHT));
        Action openAction = new AbstractAction(""Open File"", new ImageIcon(getClass().getResource(""/open.gif""))) {

            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }
        };
        JToolBar bar = new JToolBar();
        bar.add(new ToolBarButton(openAction));
        add(bar, BorderLayout.NORTH);
        if (applet == null) {
            frame.setTitle(""Image Display - Control Panel"");
            frame.getContentPane().add(this, BorderLayout.CENTER);
            frame.pack();
            frame.show();
        }
    }","    public static void main(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""msgsend"";
        String file = null;
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-a"")) {
                file = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: msgsend [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-a attach-file] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            String text = collect(in);
            if (file != null) {
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setText(text);
                MimeBodyPart mbp2 = new MimeBodyPart();
                mbp2.attachFile(file);
                MimeMultipart mp = new MimeMultipart();
                mp.addBodyPart(mbp1);
                mp.addBodyPart(mbp2);
                msg.setContent(mp);
            } else {
                msg.setText(text);
            }
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"    public void actionPerformed(ActionEvent telleAction) {
        JMenuItem laSource = (JMenuItem) (telleAction.getSource());
        String leChoix = laSource.getText();
        if (leChoix == ""Nouveau"") {
            UneCarte laCarte = new UneCarte(this, this);
            if (!laCarte.getsonNom().equals("""")) {
                saCarte = laCarte;
                afficheLaCarte();
                afficheEnContexte(new JPanel());
                sonTypeSelectionne = saCarte.getsonType();
                getJMenuBar().getMenu(2).setEnabled(true);
                getJMenuBar().getMenu(1).setEnabled(true);
                getJMenuBar().updateUI();
            }
        }
        if (leChoix == ""Ouvrir"") {
            int leRetour = sonSelectionneurDeFichier.showOpenDialog(UnEditeurDonjon.this);
            if (leRetour == JFileChooser.APPROVE_OPTION) {
                File leFichier = sonSelectionneurDeFichier.getSelectedFile();
                UneCarte laCarte = new UneCarte(leFichier, this);
                if (!laCarte.getsonNom().equals("""")) {
                    saCarte = laCarte;
                    afficheLaCarte();
                    afficheEnContexte(new JPanel());
                    sonTypeSelectionne = saCarte.getsonType();
                    getJMenuBar().getMenu(2).setEnabled(true);
                    getJMenuBar().getMenu(1).setEnabled(true);
                    getJMenuBar().updateUI();
                }
            }
        }
        if (leChoix == ""Enregistrer"") {
            int leRetour = sonSelectionneurDeFichier.showSaveDialog(UnEditeurDonjon.this);
            if (leRetour == JFileChooser.APPROVE_OPTION) {
                File leFichier = sonSelectionneurDeFichier.getSelectedFile();
                saCarte.enregistreToi(leFichier);
            }
        }
        if (leChoix == ""Quitter"") {
            int laDecision = JOptionPane.showConfirmDialog(this, ""D�sirez-vous sauvegarder avant de quitter?\n"", ""Quitter"", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (laDecision == JOptionPane.YES_OPTION) {
                int leRetour = sonSelectionneurDeFichier.showSaveDialog(UnEditeurDonjon.this);
                if (leRetour == JFileChooser.APPROVE_OPTION) {
                    File leFichier = sonSelectionneurDeFichier.getSelectedFile();
                    saCarte.enregistreToi(leFichier);
                }
                System.exit(0);
            }
            if (laDecision == JOptionPane.NO_OPTION) {
                System.exit(0);
            }
        }
        if (leChoix == ""Cr�er un personnage joueur"") {
            afficheEnContexte(new UnJoueur(this).afficheToi());
        }
        if (leChoix == ""Cr�er un personnage non-joueur"") {
            afficheEnContexte(new UnNonJoueur(this).afficheToi());
        }
        if (leChoix == ""Cr�er un objet simple"") {
            afficheEnContexte(new UnObjet().afficheToi());
        }
        if (leChoix == ""Cr�er une armure"") {
            afficheEnContexte(new UneArmure().afficheToi());
        }
        if (leChoix == ""Cr�er une arme"") {
            afficheEnContexte(new UneArme().afficheToi());
        }
        if (leChoix == ""Cr�er un consommable"") {
            afficheEnContexte(new UnConsommable().afficheToi());
        }
        if (leChoix == ""Cr�er un type de case"") {
            afficheEnContexte(new UnType());
        }
        if (leChoix == ""Cr�er une classe"") {
            afficheEnContexte(new UneClasse().afficheToi());
        }
        if (leChoix == ""Cr�er un sort"") {
            afficheEnContexte(new UnSort().afficheToi());
        }
        if (leChoix == ""Cr�er une race"") {
            afficheEnContexte(new UneRace().creeToi());
        }
        if (leChoix == ""Cr�er une capacit�"") {
            afficheEnContexte(new UneCapacite().afficheToi());
        }
        if ((leChoix == ""Editer un personnage"") || (leChoix == ""Editer des stats"")) {
            Vector<UneCreature> lesCreatures = saCarte.getsesCreatures();
            String[] lesChoixPossibles = new String[lesCreatures.size()];
            for (int i = 0; i < lesCreatures.size(); i++) {
                lesChoixPossibles[i] = lesCreatures.get(i).getsonNom();
            }
            try {
                String leChoixCrea = (String) JOptionPane.showInputDialog(null, ""Quel personnage modifie-t-on?"", ""Edition Personnage"", JOptionPane.QUESTION_MESSAGE, null, lesChoixPossibles, lesChoixPossibles[0]);
                if (leChoixCrea != null) {
                    int i = 0;
                    while (!leChoixCrea.equals(lesChoixPossibles[i])) i++;
                    if (leChoix == ""Editer un personnage"") afficheEnContexte(lesCreatures.get(i).afficheToi()); else afficheEnContexte(lesCreatures.get(i).editeTesStats());
                }
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(null, ""Il n'y a aucun personnage sur la carte."", ""Edition Personnage"", JOptionPane.WARNING_MESSAGE);
            }
        }
        if (leChoix == ""Editer un objet simple"") {
            String choix = JOptionPane.showInputDialog(null, ""Un objet nomm�?"", ""Editer objet"", JOptionPane.QUESTION_MESSAGE);
            if (choix != null) afficheEnContexte(new UnObjet(choix).afficheToi());
        }
        if (leChoix == ""Editer une armure"") {
            String choix = JOptionPane.showInputDialog(null, ""Un armure nomm�?"", ""Editer objet"", JOptionPane.QUESTION_MESSAGE);
            if (choix != null) try {
                afficheEnContexte(new UneArmure(choix).afficheToi());
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(null, ""Ceci n'est pas une armure."", ""Erreur"", JOptionPane.WARNING_MESSAGE);
            }
        }
        if (leChoix == ""Editer une arme"") {
            String choix = JOptionPane.showInputDialog(null, ""Un arme nomm�?"", ""Editer objet"", JOptionPane.QUESTION_MESSAGE);
            if (choix != null) try {
                afficheEnContexte(new UneArme(choix).afficheToi());
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(null, ""Ceci n'est pas une arme"", ""Erreur"", JOptionPane.WARNING_MESSAGE);
            }
        }
        if (leChoix == ""Editer un consommable"") {
            String choix = JOptionPane.showInputDialog(null, ""Un consommable nomm�?"", ""Editer objet"", JOptionPane.QUESTION_MESSAGE);
            if (choix != null) try {
                afficheEnContexte(new UnConsommable(choix).afficheToi());
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(null, ""Ceci n'est pas un consommable"", ""Erreur"", JOptionPane.WARNING_MESSAGE);
            }
        }
        if (leChoix == ""Poser un objet simple"") {
            String laChaine = JOptionPane.showInputDialog(null, ""Quel objet pose-t-on et o�?\nDonnez les informations au format suivant : nom,X,Y"", ""Poser un objet"", JOptionPane.QUESTION_MESSAGE);
            if (laChaine != null) try {
                int X = Integer.parseInt(laChaine.split("","")[1]);
                int Y = Integer.parseInt(laChaine.split("","")[2]);
                saCarte.getsesCases()[Y][X].addUnObjet(new UnObjet(laChaine.split("","")[0]));
                afficheLaCarte();
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(null, ""Format de donn�e non reconnu ou case inexistante"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (leChoix == ""Poser une armure"") {
            String laChaine = JOptionPane.showInputDialog(null, ""Quelle armure pose-t-on et o�?\nDonnez les informations au format suivant : nom,X,Y"", ""Poser un objet"", JOptionPane.QUESTION_MESSAGE);
            if (laChaine != null) try {
                int X = Integer.parseInt(laChaine.split("","")[1]);
                int Y = Integer.parseInt(laChaine.split("","")[2]);
                saCarte.getsesCases()[Y][X].addUnObjet(new UneArmure(laChaine.split("","")[0]));
                afficheLaCarte();
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(null, ""Format de donn�e non reconnu ou case inexistante"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (leChoix == ""Poser une arme"") {
            String laChaine = JOptionPane.showInputDialog(null, ""Quelle arme pose-t-on et o�?\nDonnez les informations au format suivant : nom,X,Y"", ""Poser un objet"", JOptionPane.QUESTION_MESSAGE);
            if (laChaine != null) try {
                int X = Integer.parseInt(laChaine.split("","")[1]);
                int Y = Integer.parseInt(laChaine.split("","")[2]);
                saCarte.getsesCases()[Y][X].addUnObjet(new UneArme(laChaine.split("","")[0]));
                afficheLaCarte();
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(null, ""Format de donn�e non reconnu ou case inexistante"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (leChoix == ""Poser un consommable"") {
            String laChaine = JOptionPane.showInputDialog(null, ""Quel consommable pose-t-on et o�?\nDonnez les informations au format suivant : nom,X,Y"", ""Poser un objet"", JOptionPane.QUESTION_MESSAGE);
            if (laChaine != null) try {
                int X = Integer.parseInt(laChaine.split("","")[1]);
                int Y = Integer.parseInt(laChaine.split("","")[2]);
                saCarte.getsesCases()[Y][X].addUnObjet(new UnConsommable(laChaine.split("","")[0]));
                afficheLaCarte();
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(null, ""Format de donn�e non reconnu ou case inexistante"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (leChoix == ""D�placer un personnage"") {
            Vector<UnJoueur> lesJoueurs = saCarte.getsesJoueurs();
            String[] lesChoixPossibles = new String[lesJoueurs.size() + 1];
            lesChoixPossibles[0] = ""Tous les joueurs"";
            for (int i = 1; i <= lesJoueurs.size(); i++) {
                lesChoixPossibles[i] = lesJoueurs.get(i - 1).getsonNom();
            }
            try {
                String leChoixCrea = (String) JOptionPane.showInputDialog(this, ""Qui d�place-t-on?"", ""Deplacement Personnage"", JOptionPane.QUESTION_MESSAGE, null, lesChoixPossibles, lesChoixPossibles[0]);
                if (leChoixCrea != null) {
                    String laDest = JOptionPane.showInputDialog(this, ""Veuillez indiquer la destination de "" + leChoixCrea + "".\nUtilisez le format suivant : direction,distance.\nDirections possibles : N,S,E,O,NE,NO,SE,SO.\nLa distance est en case (rappel : 1 case = 1,5m)"", ""Deplacement"", JOptionPane.QUESTION_MESSAGE);
                    if (leChoixCrea.equals(lesChoixPossibles[0])) {
                        sonMode = ETAT_INTER;
                        for (int i = 0; i < lesJoueurs.size(); i++) {
                            deplaceLePerso(lesJoueurs.get(i), laDest);
                        }
                        sonMode = JOUER;
                        afficheLaCarte();
                    } else {
                        int i = 1;
                        while (!leChoixCrea.equals(lesChoixPossibles[i])) i++;
                        deplaceLePerso(lesJoueurs.get(i - 1), laDest);
                    }
                }
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(this, ""Il n'y a aucun joueur sur la carte."", ""Edition Personnage"", JOptionPane.WARNING_MESSAGE);
            }
        }
        if (leChoix == ""Lancer des d�s"") {
            String lesDes = JOptionPane.showInputDialog(this, ""Vous �tes sur le point de lancer des d�s.\nUtilisez la syntaxe suivante : xdy, o� x est le nombre de d�s, et y leur valeur."", ""Lancer de d�s"", JOptionPane.QUESTION_MESSAGE);
            if (lesDes != null) {
                if (lesDes.split(""[dD]"").length != 2) JOptionPane.showMessageDialog(null, ""Erreur : vous n'avez pas respect� le format."", ""Erreur : mauvaise saisie!"", JOptionPane.ERROR_MESSAGE); else {
                    try {
                        int[] leResultat = lanceLesDes(lesDes);
                        int total = 0;
                        String laChaine = ""R�sultat : \n"";
                        for (int i = 0; i < leResultat.length; i++) {
                            laChaine += ""D� "" + (i + 1) + "" : "" + leResultat[i] + ""\n"";
                            total += leResultat[i];
                        }
                        laChaine += ""total : "" + total;
                        JOptionPane.showMessageDialog(null, laChaine);
                    } catch (Exception lException) {
                        JOptionPane.showMessageDialog(null, ""Erreur : vous n'avez pas respect� le format."", ""Erreur : mauvaise saisie!"", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
        if (leChoix == ""des �v�nements"") {
            Vector<UnEvenement> lesEvenements = saCarte.getsesEvenements();
            String laChaine = ""<HTML>Liste des �v�nements : <br>"";
            if (lesEvenements.size() == 0) laChaine += ""Il n'y a pas d'�v�nements sur la carte""; else for (int i = 0; i < lesEvenements.size(); i++) {
                laChaine += lesEvenements.get(i).sonNom + "" ("" + lesEvenements.get(i).saCase.getsonX() + "","" + lesEvenements.get(i).saCase.getsonY() + "")<br>"";
            }
            laChaine += ""</HTML>"";
            JPanel lePanneau = new JPanel();
            lePanneau.add(new JLabel(laChaine));
            afficheEnContexte(lePanneau);
        }
        if (leChoix == ""des personnages"") {
            Vector<UneCreature> lesCreatures = saCarte.getsesCreatures();
            String laChaine = ""<HTML>Liste des personnages : <br>"";
            if (lesCreatures.size() == 0) laChaine += ""Il n'y a pas de personnages sur la carte""; else for (int i = 0; i < lesCreatures.size(); i++) {
                laChaine += lesCreatures.get(i).getsonNom() + "" ("" + lesCreatures.get(i).getsaPosX() + "","" + lesCreatures.get(i).getsaPosY() + "")<br>"";
            }
            laChaine += ""</HTML>"";
            JPanel lePanneau = new JPanel();
            lePanneau.add(new JLabel(laChaine));
            afficheEnContexte(lePanneau);
        }
        if (leChoix == ""A propos..."") JOptionPane.showMessageDialog(this, ""<html><table border='0'><tr><td><img src='http://wankin.net/perso_coffre_evt_exemple.jpg' width='60' height='60'></td><th><div align='left'><p>L'&eacute;diteur Donjons et Dragons - version beta 0.7<br>Copyright &copy; 2007, Aur&eacute;lien P&ecirc;cheur, Jonathan Mondon, Yannick Balla<br>L'&eacute;diteur Donjons et Dragons est un logiciel d'aide &agrave; la gestion de campagne pour le jeu &quot;Donjons et Dragons&quot;.<br>Merci &agrave; Jean-Philippe Farrugia l'ensemble du corps enseignant de l'IUT A - Lyon 1 pour leur aide et formation.</p></div></th></tr></table><p><br>This program is free software: you can redistribute it and/or modify it under the terms of the GNU General<br>Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option)<br>any later version.</p><p><br>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without <br>even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br>GNU General Public License for more details.</p><p><br>You should have received a copy of the GNU General Public License along with this program. <br></p><p>If not, see <a href='http://www.gnu.org/licenses/'>http://www.gnu.org/licenses/</a>.</p></html>"", ""A propos..."", JOptionPane.PLAIN_MESSAGE);
        if (leChoix == ""Aide"") JOptionPane.showMessageDialog(this, ""Vous trouverez les fichiers d'aide et tutoriaux dans le r�pertoire \""Aide\"" l� o� vous avez install� l'Editeur Donjon et Dragon."", ""A propos..."", JOptionPane.INFORMATION_MESSAGE);
        if (leChoix == ""Modifier la description"") saCarte.changeSaDescription();
    }","    private void colorizeEdit(StyledText edit) {
        String findResult = edit.getText();
        final Color COLOR_BLUE = dialog.getDisplay().getSystemColor(SWT.COLOR_BLUE);
        int start = 0;
        int index = findResult.indexOf(""\n"");
        while (index != -1) {
            String subString = findResult.substring(start, index);
            if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.underline = true;
                ((StyledText) editResult).setStyleRange(style);
            } else {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.foreground = COLOR_BLUE;
                ((StyledText) editResult).setStyleRange(style);
            }
            start = index + 1;
            index = findResult.indexOf(""\n"", index + 1);
        }
        String subString = findResult.substring(start).replace(""\n"", """");
        if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.underline = true;
            ((StyledText) editResult).setStyleRange(style);
        } else {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.foreground = COLOR_BLUE;
            ((StyledText) editResult).setStyleRange(style);
        }
        if (!state.findCurrent.equals("""")) {
            final Color COLOR_RED = dialog.getDisplay().getSystemColor(SWT.COLOR_RED);
            if (state.regularExpression) {
                Pattern pattern = null;
                try {
                    if (state.caseSensitive) pattern = Pattern.compile(state.findCurrent); else pattern = Pattern.compile(state.findCurrent, Pattern.CASE_INSENSITIVE);
                } catch (PatternSyntaxException e) {
                    return;
                }
                String[] findResultList = findResult.split(""\n"");
                int findResultListCount = findResultList.length;
                int findResultListIndex;
                int offset = 0;
                for (findResultListIndex = 0; findResultListIndex < findResultListCount; findResultListIndex++) {
                    Matcher matcher = pattern.matcher(findResultList[findResultListIndex]);
                    while (matcher.find()) {
                        int startIndex = matcher.start();
                        int endIndex = matcher.end();
                        StyleRange style = new StyleRange();
                        style.start = startIndex + offset;
                        style.length = endIndex - startIndex;
                        style.fontStyle = SWT.BOLD;
                        style.foreground = COLOR_RED;
                        ((StyledText) editResult).setStyleRange(style);
                    }
                    offset += findResultList[findResultListIndex].length() + 1;
                }
            } else {
                String findCurrentLowerCase = state.findCurrent.toLowerCase();
                String findResultLowerCase = findResult.toLowerCase();
                if (state.caseSensitive) index = findResult.indexOf(state.findCurrent); else index = findResultLowerCase.indexOf(findCurrentLowerCase);
                while (index != -1) {
                    StyleRange style = new StyleRange();
                    style.start = index;
                    style.length = state.findCurrent.length();
                    style.fontStyle = SWT.BOLD;
                    style.foreground = COLOR_RED;
                    ((StyledText) editResult).setStyleRange(style);
                    if (state.caseSensitive) index = findResult.indexOf(state.findCurrent, index + 1); else index = findResultLowerCase.indexOf(findCurrentLowerCase, index + 1);
                }
            }
        }
    }",0,0
"        synchronized double[][] getDistances(Alignment alignment, ProgressListener progress) {
            this.alignment = alignment;
            final int stateCount = alignment.getSequenceType().getCanonicalStateCount();
            if (stateCount != 4) {
                throw new IllegalArgumentException(""F84DistanceMatrix must have nucleotide patterns"");
            }
            int dimension = alignment.getTaxa().size();
            double[][] distances = new double[dimension][dimension];
            float tot = (dimension * (dimension - 1)) / 2;
            int done = 0;
            for (int i = 0; i < dimension; ++i) {
                for (int j = i + 1; j < dimension; ++j) {
                    distances[i][j] = calculatePairwiseDistance(i, j);
                    distances[j][i] = distances[i][j];
                    if (progress != null) progress.setProgress(++done / tot);
                }
            }
            return distances;
        }","            public List<Code> getProperties() {
                if (value == null) {
                    return Collections.emptyList();
                }
                String value = org.apache.commons.lang.StringUtils.strip(this.value, ""\"" \n\r\f\t"");
                Pattern p = Pattern.compile(""(memo|date|desc|summary|milestone|def|value|vdef|quote|ref|title|cause)\\s*:\\s*"");
                Matcher m = p.matcher(value);
                List<Code> result = new LinkedList<Code>();
                String lastKey = ""desc"";
                StringBuilder currentValue = new StringBuilder();
                int pos = 0;
                while (m.find()) {
                    int start = m.start();
                    String key = m.group(1);
                    if (pos < start) {
                        currentValue.append(value.substring(pos, start));
                    }
                    pos = m.end();
                    if (currentValue.length() > 0) {
                        result.add(new TagCodedCode(lastKey + ""=\"""" + org.apache.commons.lang.StringUtils.strip(currentValue.toString(), "", \n\r\f\t"") + ""\""""));
                        currentValue = new StringBuilder();
                    }
                    lastKey = key;
                }
                if (pos < value.length()) {
                    currentValue.append(value.substring(pos));
                }
                if (currentValue.length() > 0) {
                    result.add(new TagCodedCode(lastKey + ""=\"""" + org.apache.commons.lang.StringUtils.strip(currentValue.toString(), "", \n\r\f\t"") + ""\""""));
                }
                return result;
            }",0,0
"    public static <T> T[] appendToArrayBegining(T[] array, T element, T... elements) {
        Class<?> componentType = array.getClass().getComponentType();
        Object newArray = Array.newInstance(componentType, array.length + 1 + elements.length);
        Array.set(newArray, 0, element);
        if (elements.length > 0) {
            System.arraycopy(elements, 0, newArray, 1, elements.length);
            System.arraycopy(array, 0, newArray, elements.length, array.length);
        } else {
            System.arraycopy(array, 0, newArray, 1, array.length);
        }
        return (T[]) newArray;
    }","    public ForkJavaProject(String projectName, Class<?> activatorClass) {
        this.activatorClass = activatorClass;
        try {
            IWorkspaceRoot rootWorkspace = ResourcesPlugin.getWorkspace().getRoot();
            this.prj = rootWorkspace.getProject(projectName);
            if (this.prj.exists()) {
                this.prj.delete(true, true, new NullProgressMonitor());
            }
            this.prj.create(new NullProgressMonitor());
            this.prj.open(new NullProgressMonitor());
            IProjectDescription description = this.prj.getDescription();
            description.setNatureIds(new String[] { ""org.eclipse.jdt.core.javanature"" });
            this.prj.setDescription(description, new NullProgressMonitor());
            createProjectDir(Constants.Dirs.DIR_MAIN_JAVA);
            createProjectDir(Constants.Dirs.DIR_CONFIG);
            createProjectDir(Constants.Dirs.DIR_MAIN_RESOURCES);
            createProjectDir(Constants.Dirs.DIR_MODELS);
            createProjectDir(Constants.Dirs.DIR_TESTS_JAVA);
            createProjectDir(Constants.Dirs.DIR_TESTS_RESOURCES);
            createProjectDir(Constants.Dirs.DIR_CLASSES);
            createProjectDir(Constants.Dirs.DIR_LIB);
            this.prj.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
            this.javaProject = JavaCore.create(this.prj);
            if (this.javaProject.exists() && !this.javaProject.isOpen()) {
                this.javaProject.open(new NullProgressMonitor());
            }
            File javaHome = new File(System.getProperty(""java.home""));
            IPath jreLibPath = new Path(javaHome.getPath()).append(""lib"").append(""rt.jar"");
            this.javaProject.setOutputLocation(prj.getFolder(Constants.Dirs.DIR_CLASSES).getFullPath(), new NullProgressMonitor());
            JavaCore.setClasspathVariable(""JRE_LIB"", jreLibPath, new NullProgressMonitor());
            this.javaProject.setRawClasspath(getProjectClassPath(), new NullProgressMonitor());
        } catch (CoreException e) {
            Activator.getDefault().logError(""An exception has been thrown while creating Project"", e);
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static Object[] setLength(Object[] source, int length) {
        Object[] copy = (Object[]) Array.newInstance(source.getClass().getComponentType(), length);
        System.arraycopy(source, 0, copy, 0, Math.min(source.length, length));
        return copy;
    }",0,0
"    public static void takeScreenCap(Rectangle rv, String filename) {
        try {
            Robot robot = new Robot();
            BufferedImage bi = robot.createScreenCapture(rv);
            new CFile(""caps"").mkdir();
            File file = new CFile(""caps/"" + filename + "".jpg"");
            ImageIO.write(bi, ""jpg"", file);
        } catch (Throwable e) {
            log.warn("""", e);
        }
    }","    private void createActions() {
        newAction = new NBTAction(""New"", ""New"", ""New"", KeyEvent.VK_N) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('N', Event.CTRL_MASK));
            }

            @Override
            public void actionPerformed(ActionEvent e) {
                updateTreeTable(new CompoundTag(""""));
            }
        };
        browseAction = new NBTAction(""Browse..."", ""Open"", ""Browse..."", KeyEvent.VK_O) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('O', Event.CTRL_MASK));
            }

            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fc = createFileChooser();
                switch(fc.showOpenDialog(TreeFrame.this)) {
                    case JFileChooser.APPROVE_OPTION:
                        File file = fc.getSelectedFile();
                        Preferences prefs = getPreferences();
                        prefs.put(KEY_FILE, file.getAbsolutePath());
                        doImport(file);
                        break;
                }
            }
        };
        saveAction = new NBTAction(""Save"", ""Save"", ""Save"", KeyEvent.VK_S) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('S', Event.CTRL_MASK));
            }

            @Override
            public void actionPerformed(ActionEvent e) {
                String path = textFile.getText();
                File file = new File(path);
                if (file.canWrite()) {
                    doExport(file);
                } else {
                    saveAsAction.actionPerformed(e);
                }
            }
        };
        saveAsAction = new NBTAction(""Save As..."", ""SaveAs"", ""Save As..."", KeyEvent.VK_UNDEFINED) {

            public void actionPerformed(ActionEvent e) {
                JFileChooser fc = createFileChooser();
                switch(fc.showSaveDialog(TreeFrame.this)) {
                    case JFileChooser.APPROVE_OPTION:
                        File file = fc.getSelectedFile();
                        Preferences prefs = getPreferences();
                        prefs.put(KEY_FILE, file.getAbsolutePath());
                        doExport(file);
                        break;
                }
            }
        };
        refreshAction = new NBTAction(""Refresh"", ""Refresh"", ""Refresh"", KeyEvent.VK_F5) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(""F5""));
            }

            public void actionPerformed(ActionEvent e) {
                String path = textFile.getText();
                File file = new File(path);
                if (file.canRead()) doImport(file); else showErrorDialog(""The file could not be read."");
            }
        };
        exitAction = new NBTAction(""Exit"", ""Exit"", KeyEvent.VK_ESCAPE) {

            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        };
        cutAction = new DefaultEditorKit.CutAction() {

            {
                String name = ""Cut"";
                putValue(NAME, name);
                putValue(SHORT_DESCRIPTION, name);
                putValue(MNEMONIC_KEY, KeyEvent.VK_X);
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('X', Event.CTRL_MASK));
                ImageFactory factory = new ImageFactory();
                try {
                    putValue(SMALL_ICON, new ImageIcon(factory.readGeneralImage(name, NBTAction.smallIconSize)));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                try {
                    putValue(LARGE_ICON_KEY, new ImageIcon(factory.readGeneralImage(name, NBTAction.largeIconSize)));
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        };
        copyAction = new DefaultEditorKit.CopyAction() {

            {
                String name = ""Copy"";
                putValue(NAME, name);
                putValue(SHORT_DESCRIPTION, name);
                putValue(MNEMONIC_KEY, KeyEvent.VK_C);
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('C', Event.CTRL_MASK));
                ImageFactory factory = new ImageFactory();
                try {
                    putValue(SMALL_ICON, new ImageIcon(factory.readGeneralImage(name, NBTAction.smallIconSize)));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                try {
                    putValue(LARGE_ICON_KEY, new ImageIcon(factory.readGeneralImage(name, NBTAction.largeIconSize)));
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        };
        pasteAction = new DefaultEditorKit.CutAction() {

            {
                String name = ""Paste"";
                putValue(NAME, name);
                putValue(SHORT_DESCRIPTION, name);
                putValue(MNEMONIC_KEY, KeyEvent.VK_V);
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('V', Event.CTRL_MASK));
                ImageFactory factory = new ImageFactory();
                try {
                    putValue(SMALL_ICON, new ImageIcon(factory.readGeneralImage(name, NBTAction.smallIconSize)));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                try {
                    putValue(LARGE_ICON_KEY, new ImageIcon(factory.readGeneralImage(name, NBTAction.largeIconSize)));
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        };
        deleteAction = new NBTAction(""Delete"", ""Delete"", ""Delete"", KeyEvent.VK_DELETE) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(""DELETE""));
            }

            public void actionPerformed(ActionEvent e) {
                int row = treeTable.getSelectedRow();
                TreePath path = treeTable.getPathForRow(row);
                Object last = path.getLastPathComponent();
                if (last instanceof NBTFileBranch) {
                    NBTFileBranch branch = (NBTFileBranch) last;
                    File file = branch.getFile();
                    String name = file.getName();
                    String message = ""Are you sure you want to delete "" + name + ""?"";
                    String title = ""Continue?"";
                    int option = JOptionPane.showConfirmDialog(TreeFrame.this, message, title, JOptionPane.OK_CANCEL_OPTION);
                    switch(option) {
                        case JOptionPane.CANCEL_OPTION:
                            return;
                    }
                    if (!FileUtils.deleteQuietly(file)) {
                        showErrorDialog(name + "" could not be deleted."");
                        return;
                    }
                }
                TreePath parentPath = path.getParentPath();
                Object parentLast = parentPath.getLastPathComponent();
                NBTTreeTableModel model = treeTable.getTreeTableModel();
                int index = model.getIndexOfChild(parentLast, last);
                if (parentLast instanceof Mutable<?>) {
                    Mutable<?> mutable = (Mutable<?>) parentLast;
                    if (last instanceof ByteWrapper) {
                        ByteWrapper wrapper = (ByteWrapper) last;
                        index = wrapper.getIndex();
                    }
                    mutable.remove(index);
                } else {
                    System.err.println(last.getClass());
                    return;
                }
                updateTreeTable();
                treeTable.expandPath(parentPath);
                scrollTo(parentLast);
                treeTable.setRowSelectionInterval(row, row);
            }
        };
        openAction = new NBTAction(""Open..."", ""Open..."", KeyEvent.VK_T) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('T', Event.CTRL_MASK));
                final int diamondPickaxe = 278;
                SpriteRecord record = NBTTreeTable.register.getRecord(diamondPickaxe);
                BufferedImage image = record.getImage();
                setSmallIcon(image);
                int width = 24, height = 24;
                Dimension size = new Dimension(width, height);
                Map<RenderingHints.Key, ?> hints = Thumbnail.createRenderingHints(Thumbnail.QUALITY);
                BufferedImage largeImage = Thumbnail.createThumbnail(image, size, hints);
                setLargeIcon(largeImage);
            }

            public void actionPerformed(ActionEvent e) {
                TreePath path = treeTable.getPath();
                if (path == null) return;
                Object last = path.getLastPathComponent();
                if (last instanceof Region) {
                    Region region = (Region) last;
                    createAndShowTileCanvas(new TileCanvas.TileWorld(region));
                    return;
                } else if (last instanceof World) {
                    World world = (World) last;
                    createAndShowTileCanvas(world);
                    return;
                }
                if (last instanceof NBTFileBranch) {
                    NBTFileBranch fileBranch = (NBTFileBranch) last;
                    File file = fileBranch.getFile();
                    try {
                        open(file);
                    } catch (IOException ex) {
                        ex.printStackTrace();
                        showErrorDialog(ex.getMessage());
                    }
                }
            }

            private void open(File file) throws IOException {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    if (desktop.isSupported(Desktop.Action.OPEN)) {
                        desktop.open(file);
                    }
                }
            }
        };
        addByteAction = new NBTAction(""Add Byte"", NBTConstants.TYPE_BYTE, ""Add Byte"", KeyEvent.VK_1) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('1', Event.CTRL_MASK));
            }

            public void actionPerformed(ActionEvent e) {
                addTag(new ByteTag(""new byte"", (byte) 0));
            }
        };
        addShortAction = new NBTAction(""Add Short"", NBTConstants.TYPE_SHORT, ""Add Short"", KeyEvent.VK_2) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('2', Event.CTRL_MASK));
            }

            public void actionPerformed(ActionEvent e) {
                addTag(new ShortTag(""new short"", (short) 0));
            }
        };
        addIntAction = new NBTAction(""Add Integer"", NBTConstants.TYPE_INT, ""Add Integer"", KeyEvent.VK_3) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('3', Event.CTRL_MASK));
            }

            public void actionPerformed(ActionEvent e) {
                addTag(new IntTag(""new int"", 0));
            }
        };
        addLongAction = new NBTAction(""Add Long"", NBTConstants.TYPE_LONG, ""Add Long"", KeyEvent.VK_4) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('4', Event.CTRL_MASK));
            }

            public void actionPerformed(ActionEvent e) {
                addTag(new LongTag(""new long"", 0));
            }
        };
        addFloatAction = new NBTAction(""Add Float"", NBTConstants.TYPE_FLOAT, ""Add Float"", KeyEvent.VK_5) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('5', Event.CTRL_MASK));
            }

            public void actionPerformed(ActionEvent e) {
                addTag(new FloatTag(""new float"", 0));
            }
        };
        addDoubleAction = new NBTAction(""Add Double"", NBTConstants.TYPE_DOUBLE, ""Add Double"", KeyEvent.VK_6) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('6', Event.CTRL_MASK));
            }

            public void actionPerformed(ActionEvent e) {
                addTag(new DoubleTag(""new double"", 0));
            }
        };
        addByteArrayAction = new NBTAction(""Add Byte Array"", NBTConstants.TYPE_BYTE_ARRAY, ""Add Byte Array"", KeyEvent.VK_7) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('7', Event.CTRL_MASK));
            }

            public void actionPerformed(ActionEvent e) {
                addTag(new ByteArrayTag(""new byte array""));
            }
        };
        addStringAction = new NBTAction(""Add String"", NBTConstants.TYPE_STRING, ""Add String"", KeyEvent.VK_8) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('8', Event.CTRL_MASK));
            }

            public void actionPerformed(ActionEvent e) {
                addTag(new StringTag(""new string"", ""...""));
            }
        };
        addListAction = new NBTAction(""Add List Tag"", NBTConstants.TYPE_LIST, ""Add List Tag"", KeyEvent.VK_9) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('9', Event.CTRL_MASK));
            }

            public void actionPerformed(ActionEvent e) {
                Class<? extends Tag> type = queryType();
                if (type != null) addTag(new ListTag(""new list"", null, type));
            }

            private Class<? extends Tag> queryType() {
                Object[] items = { NBTConstants.TYPE_BYTE, NBTConstants.TYPE_SHORT, NBTConstants.TYPE_INT, NBTConstants.TYPE_LONG, NBTConstants.TYPE_FLOAT, NBTConstants.TYPE_DOUBLE, NBTConstants.TYPE_BYTE_ARRAY, NBTConstants.TYPE_STRING, NBTConstants.TYPE_LIST, NBTConstants.TYPE_COMPOUND };
                JComboBox comboBox = new JComboBox(new DefaultComboBoxModel(items));
                comboBox.setRenderer(new DefaultListCellRenderer() {

                    @Override
                    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                        super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                        if (value instanceof Integer) {
                            Integer i = (Integer) value;
                            Class<? extends Tag> c = NBTUtils.getTypeClass(i);
                            String name = NBTUtils.getTypeName(c);
                            setText(name);
                        }
                        return this;
                    }
                });
                Object[] message = { new JLabel(""Please select a type.""), comboBox };
                String title = ""Title goes here"";
                int result = JOptionPane.showOptionDialog(TreeFrame.this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
                switch(result) {
                    case JOptionPane.OK_OPTION:
                        ComboBoxModel model = comboBox.getModel();
                        Object item = model.getSelectedItem();
                        if (item instanceof Integer) {
                            Integer i = (Integer) item;
                            return NBTUtils.getTypeClass(i);
                        }
                }
                return null;
            }
        };
        addCompoundAction = new NBTAction(""Add Compound Tag"", NBTConstants.TYPE_COMPOUND, ""Add Compound Tag"", KeyEvent.VK_0) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('0', Event.CTRL_MASK));
            }

            public void actionPerformed(ActionEvent e) {
                addTag(new CompoundTag());
            }
        };
        String name = ""About "" + TITLE;
        helpAction = new NBTAction(name, ""Help"", name, KeyEvent.VK_F1) {

            {
                putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(""F1""));
            }

            public void actionPerformed(ActionEvent e) {
                Object[] message = { new JLabel(TITLE + "" "" + VERSION), new JLabel(""© Copyright Taggart Spilman 2011.  All rights reserved.""), new Hyperlink(""<html><a href=\""#\"">NamedBinaryTag.com</a></html>"", ""http://www.namedbinarytag.com""), new Hyperlink(""<html><a href=\""#\"">Contact</a></html>"", ""mailto:tagadvance@gmail.com""), new JLabel("" ""), new Hyperlink(""<html><a href=\""#\"">JNBT was written by Graham Edgecombe</a></html>"", ""http://jnbt.sf.net""), new Hyperlink(""<html><a href=\""#\"">Available open-source under the BSD license</a></html>"", ""http://jnbt.sourceforge.net/LICENSE.TXT""), new JLabel("" ""), new JLabel(""This product includes software developed by""), new Hyperlink(""<html><a href=\""#\"">The Apache Software Foundation</a>.</html>"", ""http://www.apache.org""), new JLabel("" ""), new JLabel(""Default texture pack:""), new Hyperlink(""<html><a href=\""#\"">SOLID COLOUR. SOLID STYLE.</a></html>"", ""http://www.minecraftforum.net/topic/72253-solid-colour-solid-style/""), new JLabel(""Bundled with the permission of Trigger_Proximity."") };
                String title = ""About"";
                JOptionPane.showMessageDialog(TreeFrame.this, message, title, JOptionPane.INFORMATION_MESSAGE);
            }
        };
    }",0,0
"    private static Object setIndexInList(Object bean, int idx, Object child) {
        if (bean instanceof List) {
            List l = (List) bean;
            while (l.size() <= idx) {
                l.add(null);
            }
            l.set(idx, child);
            return l;
        } else if (bean.getClass().isArray()) {
            int length = Array.getLength(bean);
            if (length <= idx) {
                Object newArray = Array.newInstance(bean.getClass().getComponentType(), idx + 1);
                System.arraycopy(bean, 0, newArray, 0, length);
                bean = newArray;
            }
            Array.set(bean, idx, child);
            return bean;
        } else {
            return null;
        }
    }","    private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fileChooser = new JFileChooser();
        ExampleFileFilter filter = new ExampleFileFilter(new String[] { ""qc"" }, ""quantum circuits"");
        fileChooser.addChoosableFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            ObjectInputStream input = null;
            try {
                input = new ObjectInputStream(new FileInputStream(file));
                try {
                    int[] size = (int[]) input.readObject();
                    circuitPanel.setWires(size[0], size[1]);
                    circuitPanel.gates = (ArrayList) input.readObject();
                    initialQubits = ((QuantumGate) circuitPanel.gates.get(0)).qubits;
                    xRegisterSize = size[0];
                    yRegisterSize = size[1];
                    xRegister = new Register(xRegisterSize);
                    yRegister = new Register(yRegisterSize);
                    int initialState = 0;
                    for (int i = 0; i < xRegisterSize; i++) {
                        int k = xRegisterSize - i - 1;
                        initialState += initialQubits[k] * (1 << i);
                    }
                    double[] tmp = new double[1 << xRegisterSize];
                    tmp[initialState] = 1;
                    xRegister.real = tmp;
                    initialState = 0;
                    for (int i = 0; i < yRegisterSize; i++) {
                        int k = xRegisterSize + yRegisterSize - i - 1;
                        initialState += initialQubits[k] * (1 << i);
                    }
                    tmp = new double[1 << yRegisterSize];
                    tmp[initialState] = 1;
                    yRegister.real = tmp;
                    circuitPanel.repaint();
                    xPanel.setLengthColoring(lengthColoring);
                    yPanel.setLengthColoring(lengthColoring);
                    xPanel.setQubitStates(xRegister.real, xRegister.imaginary);
                    yPanel.setQubitStates(yRegister.real, yRegister.imaginary);
                } catch (ClassNotFoundException cnf) {
                    String title = ""File Error"";
                    String message = ""The file "" + file.getName() + "" does not contain a circuit!"";
                    JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
                } catch (ClassCastException cce) {
                    String title = ""File Error"";
                    String message = ""The file "" + file.getName() + "" does not contain a circuit or has the wrong format!"";
                    JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
                } catch (EOFException eof) {
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                try {
                    if (input != null) input.close();
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            }
        }
    }",0,0
"    public static void browseFile(File f) {
        if (Desktop.isDesktopSupported()) {
            Desktop d = Desktop.getDesktop();
            if (d.isSupported(Desktop.Action.BROWSE)) {
                try {
                    d.browse(f.getCanonicalFile().toURI());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            } else {
                try {
                    openNative(f);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        } else {
            try {
                openNative(f);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }","    public static String update(String e1) {
        String s = """";
        String ex = """";
        String var = """";
        String t = e1;
        int i = 0;
        while (i < e1.length()) {
            if (t.indexOf('#') < 0) {
                if (i < 1) {
                    s = e1;
                }
                if (s.indexOf('#') > -1) {
                    s = update(s.replaceAll(""@"", ""@;""));
                    s = s.replaceAll("";"", """");
                }
                break;
            } else {
                if (e1.charAt(i) == '#') {
                    String s1 = e1.substring(i);
                    int j = s1.indexOf('@');
                    if (j > -1) {
                        if (s1.charAt(j + 1) == '(') {
                            ex = s1.substring(j + 1, s1.indexOf(')'));
                        } else {
                            if (s1.charAt(j + 1) == '#' || s1.charAt(j + 1) == ';') {
                                String ss = s1.substring(j + 1);
                                if (ss.indexOf(')') > 0) {
                                    ex = ss.substring(0, ss.indexOf("")""));
                                } else {
                                    ex = s1.substring(j + 1, s1.length());
                                }
                            } else {
                                ex = s1.substring(j + 1, j + 2);
                            }
                        }
                    }
                    int k = s1.indexOf('.');
                    if (k > -1) {
                        var = s1.substring(1, k);
                    }
                    if (t.charAt(0) != '#') {
                        s = s + t.substring(0, t.indexOf(""#""));
                    }
                    if (t.indexOf(""@"" + ex) + ex.length() + 1 < t.length()) {
                        t = t.substring(t.indexOf(""@"" + ex) + ex.length() + 1);
                    } else {
                        t = """";
                    }
                    if (j > -1) {
                        s1 = s1.substring(k + 1, j);
                    } else s1 = s1.substring(k + 1);
                    if (s.indexOf(""."") > 0) {
                        s = s.substring(0, s.indexOf(""#""));
                        s = s + s1.replaceAll(var, ex);
                    } else {
                        s = s + s1.replaceAll(var, ex);
                    }
                    int l = e1.length();
                    e1 = s + t;
                    i -= l - e1.length();
                    if (i < 0) {
                        i = 0;
                    }
                }
            }
            i++;
        }
        String mul = s + t;
        Pattern p = Pattern.compile(""[-?[\\d]+\\*]+-?[\\d]+"");
        Matcher m = p.matcher(e1);
        while (m.find()) {
            String occur = m.group();
            int start = m.start();
            int end = m.end();
            String[] muls = occur.split(""\\*"");
            int result = 1;
            for (int j = 0; j < muls.length; j++) {
                try {
                    int cur = Integer.parseInt(muls[j]);
                    result = result * cur;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            mul = mul.substring(0, start) + Integer.toString(result) + mul.substring(end, mul.length());
        }
        return mul;
    }",0,0
"        @Override
        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
            if (args == null) args = new Object[0];
            if (method.isAnnotationPresent(Ignore.class)) return null;
            synchronized (lock) {
                if (method.isAnnotationPresent(Filter.class)) {
                    Filter annotation = method.getAnnotation(Filter.class);
                    if (annotation.parameterFilter() != ParameterFilter.class) {
                        ParameterFilter filter = parameterFilterSingletons.get(annotation.parameterFilter());
                        if (filter == null) {
                            filter = annotation.parameterFilter().newInstance();
                            parameterFilterSingletons.put(annotation.parameterFilter(), filter);
                        }
                        args = filter.filter(instance, args);
                    }
                }
                if (method.getName().equalsIgnoreCase(""addChangeListener"") || method.getName().equalsIgnoreCase(""removeChangeListener"")) {
                    String property = (String) args[0];
                    PropertyChangeListener listener = (PropertyChangeListener) args[1];
                    HashMap<String, ArrayList<PropertyChangeListener>> beanMap = beanListeners.get(targetId);
                    if (beanMap == null) {
                        beanMap = new HashMap<String, ArrayList<PropertyChangeListener>>();
                        beanListeners.put(targetId, beanMap);
                    }
                    ArrayList listenerList = beanMap.get(property);
                    if (listenerList == null) {
                        listenerList = new ArrayList<PropertyChangeListener>();
                        beanMap.put(property, listenerList);
                    }
                    if (method.getName().equalsIgnoreCase(""addChangeListener"") && !listenerList.contains(listener)) listenerList.add(listener);
                    if (method.getName().equalsIgnoreCase(""removeChangeListener"") && listenerList.contains(listener)) listenerList.remove(listener);
                    return null;
                }
                if (method.getName().equalsIgnoreCase(""getProxyStorageId"") && method.getReturnType() == Long.TYPE) return targetId;
                if (method.getName().equalsIgnoreCase(""getProxyStorageClass"") && method.getReturnType() == Class.class) return targetClass;
                if (method.getName().equalsIgnoreCase(""finalize"")) {
                    System.out.println(""proxystorage object "" + targetId + "" finalized."");
                    return null;
                }
                if (method.getName().equalsIgnoreCase(""isProxyStoragePresent"") && method.getReturnType() == Boolean.TYPE) return isTargetIdPresent(targetId, targetClass);
                if (method.getName().equalsIgnoreCase(""equals"") && args.length == 1) {
                    Object compare = args[0];
                    if (!(compare instanceof ProxyObject)) return false;
                    ProxyObject object = (ProxyObject) compare;
                    long objectId = object.getProxyStorageId();
                    return objectId == targetId;
                }
                if (method.isAnnotationPresent(Search.class)) {
                    Search annotation = method.getAnnotation(Search.class);
                    String listProperty = annotation.listProperty();
                    String searchProperty = annotation.searchProperty();
                    PreparedStatement lst = connection.prepareStatement(""select "" + listProperty + "" from "" + getTargetTableName(targetClass) + "" where proxystorage_id = ?"");
                    opcount++;
                    lst.setLong(1, targetId);
                    ResultSet lrs = lst.executeQuery();
                    if (!lrs.next()) throw new RuntimeException(""mismatched object with id "" + targetId + "" and class "" + targetClass.getName());
                    long listId = lrs.getLong(1);
                    if (lrs.wasNull()) {
                        lrs.close();
                        lst.close();
                        if (method.getReturnType().isArray()) return Array.newInstance(method.getReturnType().getComponentType(), 0); else return null;
                    }
                    lrs.close();
                    lst.close();
                    String capitalizedListProperty = listProperty.substring(0, 1).toUpperCase() + listProperty.substring(1);
                    String capitalizedSearchProperty = searchProperty.substring(0, 1).toUpperCase() + searchProperty.substring(1);
                    Method listGetterMethod = method.getDeclaringClass().getMethod(""get"" + capitalizedListProperty, new Class[0]);
                    ListType listTypeAnnotation = listGetterMethod.getAnnotation(ListType.class);
                    if (listTypeAnnotation == null) throw new RuntimeException(""@ListType annotation is not present on stored list getter "" + listGetterMethod.getName() + "" for class "" + listGetterMethod.getDeclaringClass().getName());
                    Class listType = listTypeAnnotation.value();
                    Method searchGetterMethod;
                    try {
                        searchGetterMethod = listType.getMethod(""get"" + capitalizedSearchProperty, new Class[0]);
                    } catch (NoSuchMethodException ex) {
                        searchGetterMethod = listType.getMethod(""is"" + capitalizedSearchProperty, new Class[0]);
                    }
                    PreparedStatement st = connection.prepareStatement(""select value from proxystorage_collections "" + ""where id = ? and value in (select proxystorage_id from "" + getTargetTableName(listType) + "" where "" + searchProperty + "" "" + (annotation.exact() ? ""="" : ""like"") + "" ?) order by index asc"");
                    st.setLong(1, listId);
                    Object searchValue = args[0];
                    if (!annotation.exact()) {
                        searchValue = (annotation.anywhere() ? ""%"" : """") + ((String) searchValue).replace(""*"", ""%"") + (annotation.anywhere() ? ""%"" : """");
                    }
                    st.setObject(2, searchValue);
                    opcount++;
                    ResultSet rs = st.executeQuery();
                    ArrayList<Long> resultIds = new ArrayList<Long>();
                    while (rs.next()) {
                        resultIds.add(rs.getLong(1));
                    }
                    rs.close();
                    st.close();
                    Object[] results = new Object[resultIds.size()];
                    int index = 0;
                    for (long resultId : resultIds) {
                        results[index++] = getById(resultId, listType);
                    }
                    if (method.getReturnType().isArray()) {
                        Object resultArray = Array.newInstance(method.getReturnType().getComponentType(), results.length);
                        System.arraycopy(results, 0, resultArray, 0, results.length);
                        return resultArray;
                    } else {
                        if (results.length == 0) return null; else return results[0];
                    }
                }
                if (method.isAnnotationPresent(CompoundSearch.class)) {
                    CompoundSearch annotation = method.getAnnotation(CompoundSearch.class);
                    String listProperty = annotation.listProperty();
                    String[] searchProperties = annotation.searchProperties();
                    PreparedStatement lst = connection.prepareStatement(""select "" + listProperty + "" from "" + getTargetTableName(targetClass) + "" where proxystorage_id = ?"");
                    lst.setLong(1, targetId);
                    opcount++;
                    ResultSet lrs = lst.executeQuery();
                    if (!lrs.next()) throw new RuntimeException(""mismatched object with id "" + targetId + "" and class "" + targetClass.getName());
                    long listId = lrs.getLong(1);
                    if (lrs.wasNull()) {
                        lrs.close();
                        lst.close();
                        if (method.getReturnType().isArray()) return Array.newInstance(method.getReturnType().getComponentType(), 0); else return null;
                    }
                    lrs.close();
                    lst.close();
                    String capitalizedListProperty = listProperty.substring(0, 1).toUpperCase() + listProperty.substring(1);
                    Method listGetterMethod = method.getDeclaringClass().getMethod(""get"" + capitalizedListProperty, new Class[0]);
                    ListType listTypeAnnotation = listGetterMethod.getAnnotation(ListType.class);
                    if (listTypeAnnotation == null) throw new RuntimeException(""@ListType annotation is not present on stored list getter "" + listGetterMethod.getName() + "" for class "" + listGetterMethod.getDeclaringClass().getName());
                    Class listType = listTypeAnnotation.value();
                    String[] searchQueryStrings = new String[searchProperties.length];
                    Method[] searchQueryMethods = new Method[searchProperties.length];
                    for (int i = 0; i < searchProperties.length; i++) {
                        String capitalizedSearchProperty = searchProperties[i].substring(0, 1).toUpperCase() + searchProperties[i].substring(1);
                        Method searchGetterMethod;
                        try {
                            searchGetterMethod = listType.getMethod(""get"" + capitalizedSearchProperty, new Class[0]);
                        } catch (NoSuchMethodException ex) {
                            searchGetterMethod = listType.getMethod(""is"" + capitalizedSearchProperty, new Class[0]);
                        }
                        searchQueryMethods[i] = searchGetterMethod;
                        searchQueryStrings[i] = searchProperties[i] + "" "" + (annotation.exact()[i] ? ""="" : ""like"") + "" ?"";
                    }
                    String searchQuery = StringUtils.delimited(searchQueryStrings, "" and "");
                    String searchSql = ""select value from proxystorage_collections "" + ""where id = ? and value in (select proxystorage_id from "" + getTargetTableName(listType) + "" where "" + searchQuery + "") order by index asc"";
                    PreparedStatement st = connection.prepareStatement(searchSql);
                    opcount++;
                    st.setLong(1, listId);
                    for (int i = 0; i < searchProperties.length; i++) {
                        Object searchValue = args[i];
                        if (!annotation.exact()[i]) {
                            searchValue = (annotation.anywhere()[i] ? ""%"" : """") + ((String) searchValue).replace(""*"", ""%"") + (annotation.anywhere()[i] ? ""%"" : """");
                        }
                        st.setObject(i + 2, searchValue);
                    }
                    ResultSet rs = st.executeQuery();
                    ArrayList<Long> resultIds = new ArrayList<Long>();
                    while (rs.next()) {
                        resultIds.add(rs.getLong(1));
                    }
                    rs.close();
                    st.close();
                    Object[] results = new Object[resultIds.size()];
                    int index = 0;
                    for (long resultId : resultIds) {
                        results[index++] = getById(resultId, listType);
                    }
                    if (method.getReturnType().isArray()) {
                        Object resultArray = Array.newInstance(method.getReturnType().getComponentType(), results.length);
                        System.arraycopy(results, 0, resultArray, 0, results.length);
                        return resultArray;
                    } else {
                        if (results.length == 0) return null; else return results[0];
                    }
                }
                if (method.getName().equalsIgnoreCase(""hashCode"") && args.length == 0) {
                    return (int) targetId * 31;
                }
                if (method.isAnnotationPresent(Constructor.class)) {
                    return ProxyStorage.this.create(method.getReturnType());
                }
                if (method.isAnnotationPresent(CustomProperty.class)) {
                    CustomProperty annotation = method.getAnnotation(CustomProperty.class);
                    Class<? extends Delegate> delegateClass = annotation.value();
                    Delegate delegate = delegateSingletons.get(delegateClass);
                    if (delegate == null) {
                        delegate = delegateClass.newInstance();
                        delegateSingletons.put(delegateClass, delegate);
                    }
                    return delegate.get(instance, method.getReturnType(), propertyNameFromAccessor(method.getName()));
                }
                if (method.getName().equals(""toString"")) {
                    return ""ProxyStorage-id"" + targetId;
                }
                if (isPropertyMethod(method)) {
                    if (method.getName().startsWith(""get"") || method.getName().startsWith(""is"")) {
                        String propertyName = propertyNameFromAccessor(method.getName());
                        BeanPropertyKey cacheKey = new BeanPropertyKey();
                        cacheKey.id = targetId;
                        cacheKey.property = propertyName;
                        Map cacheMap;
                        if (method.getReturnType().equals(String.class)) cacheMap = stringCache; else cacheMap = propertyCache;
                        Object cachedObject = cacheMap.get(cacheKey);
                        Object result;
                        if (cachedObject != null) result = cachedObject; else {
                            PreparedStatement st = connection.prepareStatement(""select "" + propertyName + "" from "" + getTargetTableName(targetClass) + "" where proxystorage_id = ?"");
                            opcount++;
                            st.setLong(1, targetId);
                            ResultSet rs = st.executeQuery();
                            boolean isPresent = rs.next();
                            if (!isPresent) {
                                rs.close();
                                st.close();
                                throw new IllegalStateException(""The object that was queried has been deleted "" + ""from the database."");
                            }
                            result = rs.getObject(propertyName);
                            if (result != null) cacheMap.put(cacheKey, result);
                            rs.close();
                            st.close();
                        }
                        if (method.getReturnType() == Integer.TYPE || method.getReturnType() == Integer.class || method.getReturnType() == Long.TYPE || method.getReturnType() == Long.class || method.getReturnType() == Double.TYPE || method.getReturnType() == Double.class || method.getReturnType() == Boolean.TYPE || method.getReturnType() == Boolean.class || method.getReturnType() == String.class) {
                            if (result == null) {
                                if (method.isAnnotationPresent(Default.class)) {
                                    Default values = method.getAnnotation(Default.class);
                                    if (method.getReturnType() == Integer.TYPE) result = values.intValue();
                                    if (method.getReturnType() == Long.TYPE) result = values.longValue();
                                    if (method.getReturnType() == Double.TYPE) result = values.doubleValue();
                                    if (method.getReturnType() == Boolean.TYPE) result = values.booleanValue();
                                    if (method.getReturnType() == String.class) result = values.stringValue();
                                } else {
                                    if (method.getReturnType() == Integer.TYPE) result = (int) 0;
                                    if (method.getReturnType() == Long.TYPE) result = (long) 0;
                                    if (method.getReturnType() == Double.TYPE) result = (double) 0;
                                    if (method.getReturnType() == Boolean.TYPE) result = false;
                                }
                            }
                            return result;
                        }
                        if (method.getReturnType() == BigInteger.class) {
                            if (result == null) return null;
                            return new BigInteger(((String) result), 16);
                        }
                        if (method.getReturnType() == StoredList.class) {
                            if (result == null) {
                                result = new Long(nextId());
                                PreparedStatement ist = connection.prepareStatement(""update "" + getTargetTableName(targetClass) + "" set "" + propertyName + "" = ? where proxystorage_id = ?"");
                                opcount++;
                                ist.setLong(1, (Long) result);
                                ist.setLong(2, targetId);
                                ist.execute();
                                ist.close();
                            }
                            return new StoredList(ProxyStorage.this, ((ListType) method.getAnnotation(ListType.class)).value(), (Long) result);
                        }
                        if (method.getReturnType().isAnnotationPresent(ProxyBean.class)) {
                            boolean isRequired = method.isAnnotationPresent(Required.class);
                            if (result == null) {
                                if (!isRequired) return null;
                                ProxyObject newObject = (ProxyObject) create(method.getReturnType());
                                long newId = newObject.getProxyStorageId();
                                PreparedStatement ust = connection.prepareStatement(""update "" + getTargetTableName(targetClass) + "" set "" + propertyName + "" = ? where proxystorage_id = ?"");
                                opcount++;
                                ust.setLong(1, newId);
                                ust.setLong(2, targetId);
                                ust.executeUpdate();
                                ust.close();
                                result = newId;
                            }
                            return getById((Long) result, method.getReturnType());
                        }
                        throw new IllegalArgumentException(""The method is a getter, but it's return "" + ""type is not a proper type."");
                    } else {
                        String propertyName = propertyNameFromAccessor(method.getName());
                        PreparedStatement st = connection.prepareStatement(""update "" + getTargetTableName(targetClass) + "" set "" + propertyName + "" = ? where proxystorage_id = ?"");
                        st.setLong(2, targetId);
                        Object inputObject = args[0];
                        if (inputObject != null) {
                            if (inputObject.getClass() == StoredList.class) {
                                throw new IllegalArgumentException(""Setters for stored lists are not allowed."");
                            }
                            if (inputObject.getClass() == BigInteger.class) {
                                inputObject = ((BigInteger) inputObject).toString(16);
                            }
                            if (inputObject instanceof ProxyObject) {
                                inputObject = new Long(((ProxyObject) inputObject).getProxyStorageId());
                            }
                        }
                        st.setObject(1, inputObject);
                        opcount++;
                        st.execute();
                        st.close();
                        BeanPropertyKey key = new BeanPropertyKey();
                        key.id = targetId;
                        key.property = propertyName;
                        if (inputObject == null) {
                            stringCache.remove(key);
                            propertyCache.remove(key);
                        } else {
                            if (inputObject instanceof String) stringCache.put(key, inputObject); else propertyCache.put(key, inputObject);
                        }
                        HashMap<String, ArrayList<PropertyChangeListener>> beanMap = beanListeners.get(targetId);
                        if (beanMap != null) {
                            ArrayList<PropertyChangeListener> listenerList = beanMap.get(propertyName);
                            if (listenerList != null) {
                                PropertyChangeEvent event = new PropertyChangeEvent(instance, propertyName, null, null);
                                for (PropertyChangeListener listener : listenerList) {
                                    listenerExecutor.execute(new PropertyChanged(listener, event));
                                }
                            }
                        }
                        return null;
                    }
                }
                throw new UnsupportedOperationException(""The method "" + method.getName() + "" is not supported for the proxy type "" + targetClass.getName());
            }
        }","    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == this.close) this.dispose(); else if (e.getSource() == this.openFile) {
            JFileChooser open = new JFileChooser();
            int option = open.showOpenDialog(this);
            if (option == JFileChooser.APPROVE_OPTION) {
                this.textArea.setText("""");
                try {
                    Scanner scan = new Scanner(new FileReader(open.getSelectedFile().getPath()));
                    while (scan.hasNext()) this.textArea.append(scan.nextLine() + ""\n"");
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                }
            }
        } else if (e.getSource() == this.saveFile) {
            JFileChooser save = new JFileChooser();
            int option = save.showSaveDialog(this);
            if (option == JFileChooser.APPROVE_OPTION) {
                try {
                    BufferedWriter out = new BufferedWriter(new FileWriter(save.getSelectedFile().getPath()));
                    out.write(this.textArea.getText());
                    out.close();
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                }
            }
        }
    }",0,0
"    public LinkedList<SearchResult> search(String strRequest) {
        LinkedList<SearchResult> ret = new LinkedList<SearchResult>();
        HttpClient h = new HttpClient();
        try {
            String strRequestUrl = ""http://www.youporn.com/search"";
            if (strRequest.toLowerCase().contains(""straight!"")) {
                strRequestUrl += ""?type=straight"";
                strRequest = strRequest.replaceAll(""straight!"", """");
            }
            if (strRequest.toLowerCase().contains(""gay!"")) {
                strRequestUrl += ""?type=gay"";
                strRequest = strRequest.replaceAll(""gay!"", """");
            }
            if (strRequest.toLowerCase().contains(""cocks!"")) {
                strRequestUrl += ""?type=cocks"";
                strRequest = strRequest.replaceAll(""cocks!"", """");
            }
            if (!strRequestUrl.endsWith(""search"")) strRequestUrl += ""&""; else strRequestUrl += ""?"";
            strRequestUrl += ""query="" + URLEncoder.encode(strRequest, ""UTF-8"");
            if (NoMuleRuntime.DEBUG) System.out.println(strRequestUrl);
            GetMethod get = new GetMethod(strRequestUrl);
            Date d = new Date((new Date()).getTime() + (1 * 24 * 3600 * 1000));
            h.getState().addCookie(new Cookie("".youporn.com"", ""age_check"", ""1"", ""/"", d, false));
            h.executeMethod(get);
            BufferedReader in = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream()));
            String s = """";
            String res = """";
            while ((s = in.readLine()) != null) {
                res += s;
            }
            get.releaseConnection();
            if (NoMuleRuntime.DEBUG) System.out.println(res);
            String regexp = ""\\<a href\\=\""\\/watch\\/[^\""]+\""\\>[^\\<]+"";
            Pattern p = Pattern.compile(regexp);
            Matcher m = p.matcher(res);
            while (m.find()) {
                int startPos = m.start() + ""<a href=\"""".length();
                String strUrl = ""http://www.youporn.com"";
                int pos = 0;
                for (pos = startPos; pos < m.end() && (res.charAt(pos) != '\""'); pos++) {
                    strUrl += res.charAt(pos);
                }
                String strTitle = res.substring(pos + 2, m.end());
                if (strTitle.trim().length() > 0) ret.add(new SearchResult(strTitle + "" at YouPorn"", strUrl));
            }
            return ret;
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (HttpException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }","    public static void main(String args[]) {
        String url = ""jdbc:mySubprotocol:myDataSource"";
        Connection con = null;
        Statement stmt;
        PreparedStatement updateSales;
        PreparedStatement updateTotal;
        String updateString = ""update COFFEES "" + ""set SALES = ? where COF_NAME = ?"";
        String updateStatement = ""update COFFEES "" + ""set TOTAL = TOTAL + ? where COF_NAME = ?"";
        String query = ""select COF_NAME, SALES, TOTAL from COFFEES"";
        try {
            Class.forName(""myDriver.ClassName"");
        } catch (java.lang.ClassNotFoundException e) {
            System.err.print(""ClassNotFoundException: "");
            System.err.println(e.getMessage());
        }
        try {
            con = DriverManager.getConnection(url, ""myLogin"", ""myPassword"");
            updateSales = con.prepareStatement(updateString);
            updateTotal = con.prepareStatement(updateStatement);
            int[] salesForWeek = { 175, 150, 60, 155, 90 };
            String[] coffees = { ""Colombian"", ""French_Roast"", ""Espresso"", ""Colombian_Decaf"", ""French_Roast_Decaf"" };
            int len = coffees.length;
            con.setAutoCommit(false);
            for (int i = 0; i < len; i++) {
                updateSales.setInt(1, salesForWeek[i]);
                updateSales.setString(2, coffees[i]);
                updateSales.executeUpdate();
                updateTotal.setInt(1, salesForWeek[i]);
                updateTotal.setString(2, coffees[i]);
                updateTotal.executeUpdate();
                con.commit();
            }
            con.setAutoCommit(true);
            updateSales.close();
            updateTotal.close();
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                String c = rs.getString(""COF_NAME"");
                int s = rs.getInt(""SALES"");
                int t = rs.getInt(""TOTAL"");
                System.out.println(c + ""     "" + s + ""    "" + t);
            }
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println(""SQLException: "" + ex.getMessage());
            if (con != null) {
                try {
                    System.err.print(""Transaction is being "");
                    System.err.println(""rolled back"");
                    con.rollback();
                } catch (SQLException excep) {
                    System.err.print(""SQLException: "");
                    System.err.println(excep.getMessage());
                }
            }
        }
    }",0,0
"    private String[] execSingleLineOutputCmd(String cmdWithParams) {
        String result = """";
        try {
            Process p = Runtime.getRuntime().exec(cmdWithParams.split("" ""));
            BufferedReader sin = new BufferedReader(new InputStreamReader(p.getInputStream()));
            result = sin.readLine();
            sin.close();
            return result.split("" "");
        } catch (Exception ex) {
            System.out.println(""ERROR: "" + ex.getMessage());
            return null;
        }
    }","    public SOCTradeOffer makeOffer(SOCPossiblePiece targetPiece) {
        D.ebugPrintln(""***** MAKE OFFER *****"");
        if (targetPiece == null) {
            return null;
        }
        SOCTradeOffer offer = null;
        SOCResourceSet targetResources = null;
        switch(targetPiece.getType()) {
            case SOCPossiblePiece.CARD:
                targetResources = SOCGame.CARD_SET;
                break;
            case SOCPossiblePiece.ROAD:
                targetResources = SOCGame.ROAD_SET;
                break;
            case SOCPossiblePiece.SETTLEMENT:
                targetResources = SOCGame.SETTLEMENT_SET;
                break;
            case SOCPossiblePiece.CITY:
                targetResources = SOCGame.CITY_SET;
                break;
        }
        SOCResourceSet ourResources = ourPlayerData.getResources();
        D.ebugPrintln(""*** targetResources = "" + targetResources);
        D.ebugPrintln(""*** ourResources = "" + ourResources);
        if (ourResources.contains(targetResources)) {
            return offer;
        }
        if (ourResources.getAmount(SOCResourceConstants.UNKNOWN) > 0) {
            D.ebugPrintln(""AGG WE HAVE UNKNOWN RESOURCES !!!! %%%%%%%%%%%%%%%%%%%%%%%%%%%%"");
            return offer;
        }
        SOCTradeOffer batna = getOfferToBank(targetResources);
        D.ebugPrintln(""*** BATNA = "" + batna);
        SOCBuildingSpeedEstimate estimate = new SOCBuildingSpeedEstimate(ourPlayerData.getNumbers());
        SOCResourceSet giveResourceSet = new SOCResourceSet();
        SOCResourceSet getResourceSet = new SOCResourceSet();
        int batnaBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
        D.ebugPrintln(""*** batnaBuildingTime = "" + batnaBuildingTime);
        if (batna != null) {
            batnaBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, batna.getGiveSet(), batna.getGetSet(), estimate);
        }
        D.ebugPrintln(""*** batnaBuildingTime = "" + batnaBuildingTime);
        int[] rollsPerResource = estimate.getRollsPerResource();
        int[] neededRsrc = new int[5];
        int[] notNeededRsrc = new int[5];
        int neededRsrcCount = 0;
        int notNeededRsrcCount = 0;
        for (int rsrcType = SOCResourceConstants.CLAY; rsrcType <= SOCResourceConstants.WOOD; rsrcType++) {
            if (targetResources.getAmount(rsrcType) > 0) {
                neededRsrc[neededRsrcCount] = rsrcType;
                neededRsrcCount++;
            } else {
                notNeededRsrc[notNeededRsrcCount] = rsrcType;
                notNeededRsrcCount++;
            }
        }
        for (int j = neededRsrcCount - 1; j >= 0; j--) {
            for (int i = 0; i < j; i++) {
                if (rollsPerResource[neededRsrc[i]] > rollsPerResource[neededRsrc[i + 1]]) {
                    int tmp = neededRsrc[i];
                    neededRsrc[i] = neededRsrc[i + 1];
                    neededRsrc[i + 1] = tmp;
                }
            }
        }
        if (D.ebugOn) {
            for (int i = 0; i < neededRsrcCount; i++) {
                D.ebugPrintln(""NEEDED RSRC: "" + neededRsrc[i] + "" : "" + rollsPerResource[neededRsrc[i]]);
            }
        }
        for (int j = notNeededRsrcCount - 1; j >= 0; j--) {
            for (int i = 0; i < j; i++) {
                if (rollsPerResource[notNeededRsrc[i]] > rollsPerResource[notNeededRsrc[i + 1]]) {
                    int tmp = notNeededRsrc[i];
                    notNeededRsrc[i] = notNeededRsrc[i + 1];
                    notNeededRsrc[i + 1] = tmp;
                }
            }
        }
        if (D.ebugOn) {
            for (int i = 0; i < notNeededRsrcCount; i++) {
                D.ebugPrintln(""NOT-NEEDED RSRC: "" + notNeededRsrc[i] + "" : "" + rollsPerResource[notNeededRsrc[i]]);
            }
        }
        boolean[] someoneIsSellingResource = new boolean[SOCResourceConstants.MAXPLUSONE];
        for (int rsrcType = SOCResourceConstants.CLAY; rsrcType <= SOCResourceConstants.WOOD; rsrcType++) {
            someoneIsSellingResource[rsrcType] = false;
            for (int pn = 0; pn < SOCGame.MAXPLAYERS; pn++) {
                if ((pn != ourPlayerData.getPlayerNumber()) && (isSellingResource[pn][rsrcType])) {
                    someoneIsSellingResource[rsrcType] = true;
                    D.ebugPrintln(""*** player "" + pn + "" is selling "" + rsrcType);
                    break;
                }
            }
        }
        int getRsrcIdx = neededRsrcCount - 1;
        while ((getRsrcIdx >= 0) && ((ourResources.getAmount(neededRsrc[getRsrcIdx]) >= targetResources.getAmount(neededRsrc[getRsrcIdx])) || (!someoneIsSellingResource[neededRsrc[getRsrcIdx]]))) {
            getRsrcIdx--;
        }
        if (getRsrcIdx >= 0) {
            D.ebugPrintln(""*** getRsrc = "" + neededRsrc[getRsrcIdx]);
            getResourceSet.add(1, neededRsrc[getRsrcIdx]);
            D.ebugPrintln(""*** offer should be null : offer = "" + offer);
            int giveRsrcIdx = 0;
            while ((giveRsrcIdx < notNeededRsrcCount) && (offer == null)) {
                D.ebugPrintln(""*** ourResources.getAmount("" + notNeededRsrc[giveRsrcIdx] + "") = "" + ourResources.getAmount(notNeededRsrc[giveRsrcIdx]));
                if (ourResources.getAmount(notNeededRsrc[giveRsrcIdx]) > 0) {
                    giveResourceSet.clear();
                    giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx]);
                    offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                    D.ebugPrintln(""*** offer = "" + offer);
                    int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                }
                giveRsrcIdx++;
            }
            D.ebugPrintln(""*** ourResources = "" + ourResources);
            if (offer == null) {
                int giveRsrcIdx1 = 0;
                while ((giveRsrcIdx1 < neededRsrcCount) && (offer == null)) {
                    D.ebugPrintln(""*** ourResources.getAmount("" + neededRsrc[giveRsrcIdx1] + "") = "" + ourResources.getAmount(neededRsrc[giveRsrcIdx1]));
                    D.ebugPrintln(""*** targetResources.getAmount("" + neededRsrc[giveRsrcIdx1] + "") = "" + targetResources.getAmount(neededRsrc[giveRsrcIdx1]));
                    if ((ourResources.getAmount(neededRsrc[giveRsrcIdx1]) > targetResources.getAmount(neededRsrc[giveRsrcIdx1])) && (neededRsrc[giveRsrcIdx1] != neededRsrc[getRsrcIdx])) {
                        giveResourceSet.clear();
                        giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                        int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                        if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                            offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                            D.ebugPrintln(""*** offer = "" + offer);
                            D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                        }
                    }
                    giveRsrcIdx1++;
                }
            }
            D.ebugPrintln(""*** ourResources = "" + ourResources);
            SOCResourceSet leftovers = ourResources.copy();
            leftovers.subtract(targetResources);
            D.ebugPrintln(""*** leftovers = "" + leftovers);
            if (offer == null) {
                int giveRsrcIdx1 = 0;
                int giveRsrcIdx2 = 0;
                while ((giveRsrcIdx1 < notNeededRsrcCount) && (offer == null)) {
                    if (ourResources.getAmount(notNeededRsrc[giveRsrcIdx1]) > 0) {
                        while ((giveRsrcIdx2 < notNeededRsrcCount) && (offer == null)) {
                            giveResourceSet.clear();
                            giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx1]);
                            giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx2]);
                            if (ourResources.contains(giveResourceSet)) {
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            giveRsrcIdx2++;
                        }
                        giveRsrcIdx2 = 0;
                        while ((giveRsrcIdx2 < neededRsrcCount) && (offer == null)) {
                            if (neededRsrc[giveRsrcIdx2] != neededRsrc[getRsrcIdx]) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx1]);
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx2]);
                                if (leftovers.contains(giveResourceSet)) {
                                    int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                    if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                        offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                        D.ebugPrintln(""*** offer = "" + offer);
                                        D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                    }
                                }
                            }
                            giveRsrcIdx2++;
                        }
                    }
                    giveRsrcIdx1++;
                }
                giveRsrcIdx1 = 0;
                giveRsrcIdx2 = 0;
                while ((giveRsrcIdx1 < neededRsrcCount) && (offer == null)) {
                    if ((leftovers.getAmount(neededRsrc[giveRsrcIdx1]) > 0) && (neededRsrc[giveRsrcIdx1] != neededRsrc[getRsrcIdx])) {
                        while ((giveRsrcIdx2 < notNeededRsrcCount) && (offer == null)) {
                            giveResourceSet.clear();
                            giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                            giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx2]);
                            if (leftovers.contains(giveResourceSet)) {
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            giveRsrcIdx2++;
                        }
                        giveRsrcIdx2 = 0;
                        while ((giveRsrcIdx2 < neededRsrcCount) && (offer == null)) {
                            if (neededRsrc[giveRsrcIdx2] != neededRsrc[getRsrcIdx]) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx2]);
                                if (leftovers.contains(giveResourceSet)) {
                                    int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                    if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                        offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                        D.ebugPrintln(""*** offer = "" + offer);
                                        D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                    }
                                }
                            }
                            giveRsrcIdx2++;
                        }
                    }
                    giveRsrcIdx1++;
                }
            }
        }
        if (offer == null) {
            SOCResourceSet leftovers = ourResources.copy();
            leftovers.subtract(targetResources);
            D.ebugPrintln(""*** leftovers = "" + leftovers);
            int getRsrcIdx2 = notNeededRsrcCount - 1;
            while ((getRsrcIdx2 >= 0) && (!someoneIsSellingResource[neededRsrc[getRsrcIdx2]])) {
                getRsrcIdx2--;
            }
            while ((getRsrcIdx2 >= 0) && (offer == null)) {
                getResourceSet.clear();
                getResourceSet.add(1, notNeededRsrc[getRsrcIdx2]);
                leftovers.add(1, notNeededRsrc[getRsrcIdx2]);
                if (offer == null) {
                    int giveRsrcIdx1 = 0;
                    while ((giveRsrcIdx1 < notNeededRsrcCount) && (offer == null)) {
                        if ((leftovers.getAmount(notNeededRsrc[giveRsrcIdx1]) > 0) && (notNeededRsrc[giveRsrcIdx1] != notNeededRsrc[getRsrcIdx2])) {
                            leftovers.subtract(1, notNeededRsrc[giveRsrcIdx1]);
                            if (getOfferToBank(targetResources, leftovers) != null) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx1]);
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if (offerBuildingTime < batnaBuildingTime) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, notNeededRsrc[getRsrcIdx2]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            leftovers.add(1, notNeededRsrc[giveRsrcIdx1]);
                        }
                        giveRsrcIdx1++;
                    }
                }
                if (offer == null) {
                    int giveRsrcIdx1 = 0;
                    while ((giveRsrcIdx1 < neededRsrcCount) && (offer == null)) {
                        if (leftovers.getAmount(neededRsrc[giveRsrcIdx1]) > 0) {
                            leftovers.subtract(1, neededRsrc[giveRsrcIdx1]);
                            if (getOfferToBank(targetResources, leftovers) != null) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if (offerBuildingTime < batnaBuildingTime) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, notNeededRsrc[getRsrcIdx2]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            leftovers.add(1, neededRsrc[giveRsrcIdx1]);
                        }
                        giveRsrcIdx1++;
                    }
                }
                leftovers.subtract(1, notNeededRsrc[getRsrcIdx2]);
                getRsrcIdx2--;
            }
        }
        return offer;
    }",0,0
"    public static void help(String s) {
        String url = ""http://www.jcpsim.org/"" + s + "".html"";
        logger.info(""HELP: "" + url);
        BasicService basicService = null;
        try {
            basicService = (BasicService) ServiceManager.lookup(""javax.jnlp.BasicService"");
        } catch (UnavailableServiceException use) {
            logger.info(""Java Web Start Services are unavailable."");
        }
        if (basicService != null) {
            logger.info(basicService.getCodeBase().toString());
            try {
                basicService.showDocument(new java.net.URL(url));
            } catch (java.net.MalformedURLException e) {
                logger.info(""Malformed URL: "" + e.toString());
            }
        } else {
            if ((System.getProperty(""java.version"").startsWith(""1.6""))) {
                if (Desktop.isDesktopSupported()) {
                    if (Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                        try {
                            Desktop.getDesktop().browse(new java.net.URI(url));
                        } catch (IOException ioe) {
                            ioe.printStackTrace();
                        } catch (URISyntaxException use) {
                            use.printStackTrace();
                        }
                    }
                }
            }
        }
    }","    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }",0,0
"    public long fib(long n) {
        if (n <= 1) return n; else return fib(n - 1) + fib(n - 2);
    }","    public void createPartControl(Composite parent) {
        viewer = new TreeViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
        viewer.setContentProvider(new FileContentProvider());
        viewer.setLabelProvider(new FileLabelProvider());
        viewer.setInput(File.listRoots());
        viewer.addOpenListener(new IOpenListener() {

            @Override
            public void open(OpenEvent event) {
                IStructuredSelection selection = (IStructuredSelection) event.getSelection();
                File file = (File) selection.getFirstElement();
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    if (desktop.isSupported(Desktop.Action.OPEN)) {
                        try {
                            desktop.open(file);
                        } catch (IOException e) {
                        }
                    }
                }
            }
        });
    }",0,0
"    public MultiDimensionalScaling(float[][] data, int anpcs) {
        n = data.length;
        npcs = anpcs;
        if (npcs > n) {
            npcs = n;
        }
        out = new float[n][npcs];
        double[][] d = new double[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                d[i][j] = data[i][j];
                d[j][i] = data[i][j];
            }
        }
        double max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                for (int k = 0; k < j; k++) {
                    max = Math.max(max, d[j][k] - d[i][j] - d[i][k]);
                }
            }
        }
        if (max > 0) {
            max *= 10;
        } else {
            max = 0;
        }
        System.out.println(""Triangle inequality constant: "" + max);
        float d_col[] = new float[n];
        float d_row[] = new float[n];
        float d_tot = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    d[i][j] += max;
                    d[i][j] = -0.5f * (d[i][j] * d[i][j]);
                    d_col[i] += d[i][j];
                    d_row[j] += d[i][j];
                    d_tot += d[i][j];
                }
            }
        }
        for (int i = 0; i < n; i++) {
            d_col[i] /= n + 0f;
            d_row[i] /= n + 0f;
            d_col[i] *= d_col[i];
            d_row[i] *= d_row[i];
        }
        d_tot /= n * n + 0f;
        d_tot *= d_tot;
        float d_tot2 = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                d[i][j] = d[i][j] - d_col[i] - d_row[j] + d_tot;
            }
        }
        long st = System.currentTimeMillis();
        EigenValueDecomposition evd = new EigenValueDecomposition(d);
        long et = System.currentTimeMillis();
        double[] eig = evd.d;
        double[] eigs = new double[npcs];
        for (int i = 0; i < npcs; i++) {
            eigs[i] = eig[n - 1 - i];
            System.out.println(eigs[i]);
        }
        eigenValues = eigs;
        st = System.currentTimeMillis();
        double[][] d2 = solveEigenvectors(d, eigs);
        System.out.println(d2.length + "" "" + d2[0].length + "" "" + eigs.length);
        double[][] d3 = scaleEigenvectors(d2, eigs);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < npcs; j++) {
                int jj = eig.length - j - 1;
                out[i][j] = (float) (d3[j][i]);
            }
        }
    }","    public void doPerform() {
        if (!java.awt.Desktop.isDesktopSupported()) {
            log.error(""Desktop is not supported (fatal)"");
        } else {
            final java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
            Action actionType = Action.BROWSE;
            if (file != null) {
                actionType = Action.OPEN;
            }
            if (!desktop.isSupported(actionType)) {
                log.error(""Desktop doesn't support the "" + actionType.name() + "" action (fatal)"");
            } else {
                try {
                    if (uri != null) {
                        desktop.browse(uri);
                    } else if (file != null) {
                        desktop.open(file);
                    }
                } catch (Exception e1) {
                    log.error(e1.getMessage());
                }
            }
        }
    }",0,0
"    public static void main(String[] args) throws Exception {
        ServerSocket serverSocket = new ServerSocket(1949);
        while (true) {
            final Socket listener = serverSocket.accept();
            new Thread(new Runnable() {

                public void run() {
                    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                    System.out.printf(""width=%f, height=%f%n"", d.getWidth(), d.getHeight());
                    Robot robot = null;
                    try {
                        robot = new Robot();
                    } catch (AWTException e1) {
                        e1.printStackTrace();
                    }
                    while (true) {
                        try {
                            BufferedImage img = robot.createScreenCapture(new Rectangle(0, 0, (int) d.getWidth(), (int) d.getHeight()));
                            ImageIO.write(img, ""PNG"", listener.getOutputStream());
                            Thread.sleep(1000);
                        } catch (Exception e) {
                            e.printStackTrace();
                            break;
                        }
                    }
                    try {
                        System.out.println(""close:"" + listener);
                        listener.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }).start();
        }
    }","    public void removeValue(int index) {
        if (index >= 0 && index < values.length) {
            C[] newValues = (C[]) Array.newInstance(values.getClass().getComponentType(), values.length - 1);
            if (index >= 1) System.arraycopy(values, 0, newValues, 0, index);
            if (index <= values.length - 2) System.arraycopy(values, index + 1, newValues, index, values.length - index - 1);
            values = newValues;
            fireStateChanged();
        }
    }",0,0
"    public static void launchWebBrowser(String address) {
        if (Desktop.isDesktopSupported()) {
            final Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                URL url = null;
                String string = address;
                try {
                    url = new URL(string);
                } catch (MalformedURLException ex) {
                    return;
                }
                try {
                    desktop.browse(url.toURI());
                } catch (URISyntaxException ex) {
                } catch (IOException ex) {
                }
            }
        }
    }","    private String parseTags(String string) {
        string = string.replaceAll(""</(.+?)>"", ""\\\\textag $0"");
        Pattern pattern = Pattern.compile(""(?s)(?i)(<\\w.*?)(~(?:.*?))?(/?>)"");
        Matcher matcher = pattern.matcher(string);
        String output = """";
        int lastend = 0;
        while (matcher.find()) {
            output += string.substring(lastend, matcher.start(1));
            output += ""\\textag "";
            output += matcher.group(1);
            if (matcher.group(2) != null) {
                output += parseAttribs(matcher.group(2));
                output += ""\\textag "";
            }
            output += matcher.group(3);
            lastend = matcher.end(3);
        }
        output += string.substring(lastend);
        return output;
    }",0,0
"    private void highlightWordToBeAnonymized(String patternText) {
        if (highlightSuggested) {
            removeSuggestedHighlights();
        }
        try {
            Document document = transcript.getDocument();
            Pattern pattern = Pattern.compile(patternText, Pattern.MULTILINE);
            Matcher textMatcher = pattern.matcher(document.getText(0, document.getLength()));
            while (textMatcher.find()) {
                transcript.getHighlighter().addHighlight(textMatcher.start(), textMatcher.end() - 1, markedForAnonHighlighter);
            }
        } catch (BadLocationException error) {
            ErrorLog.instance().addEntry(error);
        }
        if (highlightSuggested) {
            highlightSuggestedWords();
        }
    }","    public GCGCDatum[][] toArray() {
        GCGCDatum tempArray[][] = new GCGCDatum[getNumberRows()][];
        GCGCDatum returnedArray[][] = new GCGCDatum[getNumberCols()][getNumberRows()];
        for (int i = 0; i < getNumberRows(); i++) {
            tempArray[i] = ((List<GCGCDatum>) peakList.get(i).getVar(""getDatumArray"")).toArray(new GCGCDatum[0]);
        }
        for (int i = 0; i < getNumberRows(); i++) {
            for (int j = 0; j < getNumberCols(); j++) {
                returnedArray[j][i] = tempArray[i][j];
            }
        }
        return returnedArray;
    }",0,0
"    static boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }","    public static int[][] getPixels2D(int[] pixels, int w, int h, int size) {
        int[][] npixels = new int[w][h];
        for (int i = 0; i < npixels.length; i++) {
            for (int j = 0; j < npixels[i].length; j++) {
                npixels[i][j] = pixels[i + j * size];
            }
        }
        int pixel[][] = new int[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                pixel[i][j] = npixels[j][i];
            }
        }
        return pixel;
    }",0,0
"    private void rescanAll(HTTPurl urlData, OutputStream outStream) throws Exception {
        PageTemplate template = new PageTemplate(store.getProperty(""path.template"") + File.separator + ""channelrescan.html"");
        outStream.write(template.getPageBytes());
        CaptureDeviceList devList = CaptureDeviceList.getInstance();
        if (devList.getActiveDeviceCount() > 0) {
            outStream.write(""Can not scan channels, Captures Running!"".getBytes());
            return;
        }
        if (devList.getDeviceCount() == 0) {
            outStream.write(""No Devices Available!"".getBytes());
            return;
        }
        HashMap<String, Channel> channelMap = store.getChannels();
        Vector<Channel> stationList = new Vector<Channel>();
        HashMap<String, String> scanResult = new HashMap<String, String>();
        String[] keys = (String[]) channelMap.keySet().toArray(new String[0]);
        int numUpdated = 0;
        String resultText = """";
        try {
            for (int x = 0; x < keys.length; x++) {
                Channel ch = (Channel) channelMap.get(keys[x]);
                boolean found = false;
                for (int y = 0; y < stationList.size(); y++) {
                    Channel stCh = (Channel) stationList.get(y);
                    if (stCh.getFrequency() == ch.getFrequency() && stCh.getBandWidth() == ch.getBandWidth()) {
                        found = true;
                    }
                }
                if (found == false && ch.getProgramID() != 0) {
                    stationList.add(new Channel(ch.getName(), ch.getFrequency(), ch.getBandWidth(), ch.getProgramID(), 0, 0));
                }
            }
            for (int x = 0; x < stationList.size(); x++) {
                Channel ch = (Channel) stationList.get(x);
                CaptureDevice cap = (CaptureDevice) devList.getDevice(0);
                String scanCommand = ""scan.exe "" + ch.getFrequency() + "" "" + ch.getBandWidth() + "" \"""" + cap.getID() + ""\"""";
                System.out.println(""Running channel scan command: "" + scanCommand);
                Runtime runner = Runtime.getRuntime();
                String[] com = new String[4];
                com[0] = ""scan.exe"";
                com[1] = new Integer(ch.getFrequency()).toString();
                com[2] = new Integer(ch.getBandWidth()).toString();
                com[3] = ""\"""" + cap.getID() + ""\"""";
                Process scan = runner.exec(com);
                ScanResult result = new ScanResult(ch.getFrequency(), ch.getBandWidth());
                result.readInput(scan.getInputStream());
                result.parseXML();
                Vector channels = result.getResult();
                for (int y = 0; y < keys.length; y++) {
                    Channel storedChannel = (Channel) channelMap.get(keys[y]);
                    for (int q = 0; q < channels.size(); q++) {
                        Channel scannedChannel = (Channel) channels.get(q);
                        if (storedChannel.getFrequency() == scannedChannel.getFrequency() && storedChannel.getBandWidth() == scannedChannel.getBandWidth() && storedChannel.getProgramID() == scannedChannel.getProgramID()) {
                            Vector streams = scannedChannel.getStreams();
                            int videoCheckFlag = 0;
                            int oldVideoPid = storedChannel.getVideoPid();
                            for (int stID = 0; stID < streams.size(); stID++) {
                                int[] streamData = (int[]) streams.get(stID);
                                if (storedChannel.getVideoPid() == streamData[0] && streamData[1] == Channel.TYPE_VIDEO) {
                                    videoCheckFlag = 1;
                                }
                            }
                            if (videoCheckFlag == 0) {
                                for (int stID = 0; stID < streams.size(); stID++) {
                                    int[] streamData = (int[]) streams.get(stID);
                                    if (streamData[1] == Channel.TYPE_VIDEO) {
                                        storedChannel.setVideoPid(streamData[0]);
                                        videoCheckFlag = 2;
                                    }
                                }
                            }
                            if (videoCheckFlag == 0) {
                                resultText = ""Video pid ("" + storedChannel.getVideoPid() + "") was "" + ""not found and a replacment could not be located.<br>"";
                            } else if (videoCheckFlag == 1) {
                                resultText = ""Video pid ("" + storedChannel.getVideoPid() + "") has "" + ""not changed.<br>"";
                            } else if (videoCheckFlag == 2) {
                                resultText = ""Video pid ("" + oldVideoPid + "") has "" + ""changed and was replaced with ("" + storedChannel.getVideoPid() + "")<br>"";
                            }
                            scanResult.put(storedChannel.getName(), resultText);
                            int audioCheckFlag = 0;
                            int oldAudioPid = storedChannel.getAudioPid();
                            for (int stID = 0; stID < streams.size(); stID++) {
                                int[] streamData = (int[]) streams.get(stID);
                                if (storedChannel.getAudioPid() == streamData[0] && streamData[1] == storedChannel.getAudioType()) {
                                    audioCheckFlag = 1;
                                }
                            }
                            if (audioCheckFlag == 0) {
                                for (int stID = 0; stID < streams.size(); stID++) {
                                    int[] streamData = (int[]) streams.get(stID);
                                    if (streamData[1] == storedChannel.getAudioType()) {
                                        storedChannel.setAudioPid(streamData[0]);
                                        audioCheckFlag = 2;
                                    }
                                }
                            }
                            if (audioCheckFlag == 0) {
                                resultText = ""Audio pid ("" + storedChannel.getAudioPid() + "") was "" + ""not found and a replacment could not be located.<br>"";
                            } else if (audioCheckFlag == 1) {
                                resultText = ""Audio pid ("" + storedChannel.getAudioPid() + "") has "" + ""not changed.<br>"";
                            } else if (audioCheckFlag == 2) {
                                resultText = ""Audio pid ("" + oldAudioPid + "") has "" + ""changed and was replaced with ("" + storedChannel.getAudioPid() + "")<br>"";
                            }
                            String errTXT = (String) scanResult.get(storedChannel.getName());
                            errTXT += resultText;
                            scanResult.put(storedChannel.getName(), errTXT);
                            if (audioCheckFlag == 2 || videoCheckFlag == 2) numUpdated++;
                        }
                    }
                }
            }
        } catch (Exception e) {
            throw e;
        }
        if (numUpdated > 0) store.saveChannels(null);
        outStream.write(""<br><span class='areaTitle'>Channel Rescan Results</span><br>\n"".getBytes());
        outStream.write(""<table class='rescanResult'>\n"".getBytes());
        keys = (String[]) scanResult.keySet().toArray(new String[0]);
        for (int x = 0; x < keys.length; x++) {
            String out = ""<tr><td class='rescanName'>"" + keys[x] + ""</td><td class='rescanResult'>"" + (String) scanResult.get(keys[x]) + ""</td></tr>\n"";
            outStream.write(out.getBytes());
        }
        outStream.write(""</table>\n"".getBytes());
        outStream.write(""</body></html>\n"".getBytes());
    }","    private double[][] getInputColumn(double[][] vectors) {
        double[][] columns = new double[vectors[0].length][vectors.length];
        for (int i = 0; i < columns.length; i++) {
            for (int j = 0; j < columns[0].length; j++) {
                columns[i][j] = vectors[j][i];
            }
        }
        return columns;
    }",0,0
"    protected Object growIndexedProperty(String name, Object indexedProperty, int index) {
        if (indexedProperty instanceof List) {
            List list = (List) indexedProperty;
            while (index >= list.size()) {
                list.add(null);
            }
        }
        if ((indexedProperty.getClass().isArray())) {
            int length = Array.getLength(indexedProperty);
            if (index >= length) {
                Class componentType = indexedProperty.getClass().getComponentType();
                Object newArray = Array.newInstance(componentType, (index + 1));
                System.arraycopy(indexedProperty, 0, newArray, 0, length);
                indexedProperty = newArray;
                set(name, indexedProperty);
                int newLength = Array.getLength(indexedProperty);
                for (int i = length; i < newLength; i++) {
                    Array.set(indexedProperty, i, createProperty(name + ""["" + i + ""]"", componentType));
                }
            }
        }
        return indexedProperty;
    }","        public TemplateCollectionModel getRedirectTargets() {
            if (this.redirectTargets == null) {
                HashMap<String, RedirectTarget> redirectTargets = new HashMap<String, RedirectTarget>();
                if (content != null && !""vexi.util.redirect"".equals(name)) {
                    String code = content.toString();
                    Pattern p = Pattern.compile(""addRedirect(.*)"", Pattern.MULTILINE);
                    Matcher m = p.matcher(code);
                    HashMap targets = new HashMap();
                    while (m.find()) {
                        int end = code.indexOf("")"", m.start() + 1);
                        String addRedirect = code.substring(m.start(), end + 1);
                        Pattern pid = Pattern.compile(""\\$[a-zA-Z]*"");
                        Matcher mid = pid.matcher(addRedirect);
                        if (!mid.find()) continue;
                        String id = mid.group(0).substring(1);
                        RedirectTarget target = redirectTargets.get(id);
                        if (target == null) {
                            target = new RedirectTarget(id);
                            redirectTargets.put(id, target);
                        }
                        Pattern pprop = Pattern.compile(""\""[^\""]*\"""", Pattern.MULTILINE);
                        Matcher mprop = pprop.matcher(addRedirect);
                        while (mprop.find()) {
                            String prop = addRedirect.substring(mprop.start() + 1, mprop.end() - 1);
                            target.add(prop);
                        }
                    }
                }
                this.redirectTargets = new SimpleCollection(redirectTargets.values());
            }
            return this.redirectTargets;
        }",0,0
"    public int findString(String search, int startPos, boolean downward, boolean loopSearch, boolean senseCaseSearch, boolean regexSearch, boolean wordUnitSearch) {
        StdStyledDocument ssd = getStdStyledDocument();
        if (ssd == null || search.length() == 0) {
            return -1;
        }
        StringBuilder target = ssd.getStringBuilder();
        if (!senseCaseSearch) {
            StringBuilder tsb = new StringBuilder(target.toString().toUpperCase());
            target = tsb;
            search = search.toUpperCase();
        }
        int result = -1;
        if (regexSearch) {
            int patternFlags;
            if (senseCaseSearch) {
                patternFlags = Pattern.MULTILINE;
            } else {
                patternFlags = Pattern.MULTILINE | Pattern.CASE_INSENSITIVE;
            }
            Pattern ptn = Pattern.compile(search, patternFlags);
            if (downward) {
                if (startPos == -1) {
                    startPos = getSelectionEnd();
                }
                Matcher matcher = ptn.matcher(target);
                int s = -1;
                int e = -1;
                if (matcher.find(startPos)) {
                    s = matcher.start();
                    e = matcher.end();
                }
                if (s == -1 && loopSearch) {
                    if (matcher.find(0)) {
                        s = matcher.start();
                        e = matcher.end();
                    }
                }
                if (s != -1) {
                    select(s, e);
                    result = s;
                }
            } else {
                if (startPos == -1) {
                    startPos = getSelectionStart();
                }
                Matcher matcher = ptn.matcher(target);
                int s = -1;
                int e = -1;
                if (matcher.find(0)) {
                    do {
                        if (matcher.end() < startPos) {
                            s = matcher.start();
                            e = matcher.end();
                        } else {
                            break;
                        }
                    } while (matcher.find());
                }
                if (s == -1 && loopSearch) {
                    if (matcher.find(startPos)) {
                        do {
                            s = matcher.start();
                            e = matcher.end();
                        } while (matcher.find());
                    }
                }
                if (s != -1) {
                    select(s, e);
                    result = s;
                }
            }
        } else if (wordUnitSearch) {
            if (downward) {
                if (startPos == -1) {
                    startPos = getSelectionEnd();
                }
                int s = -1;
                int r = startPos;
                while ((r = target.indexOf(search, r)) != -1) {
                    int e = r + search.length();
                    if (r > 0 && wordDelimiter.indexOf(target.charAt(r - 1)) == -1) {
                        r = r + 1;
                        continue;
                    }
                    if (e < target.length() && wordDelimiter.indexOf(target.charAt(e)) == -1) {
                        r = r + 1;
                        continue;
                    }
                    s = r;
                    break;
                }
                if (s == -1 && loopSearch) {
                    r = 0;
                    while ((r = target.indexOf(search, r)) != -1) {
                        int e = r + search.length();
                        if (r > 0 && wordDelimiter.indexOf(target.charAt(r - 1)) == -1) {
                            r = r + 1;
                            continue;
                        }
                        if (e < target.length() && wordDelimiter.indexOf(target.charAt(e)) == -1) {
                            r = r + 1;
                            continue;
                        }
                        s = r;
                        break;
                    }
                }
                if (s != -1) {
                    select(s, s + search.length());
                    result = s;
                }
            } else {
                if (startPos == -1) {
                    startPos = getSelectionStart();
                }
                int s = -1;
                int r = startPos - 1;
                if (r >= 0) {
                    while ((r = target.lastIndexOf(search, r)) != -1) {
                        int e = r + search.length();
                        if (r > 0 && wordDelimiter.lastIndexOf(target.charAt(r - 1)) == -1) {
                            r = r - 1;
                            continue;
                        }
                        if (e < target.length() && wordDelimiter.lastIndexOf(target.charAt(e)) == -1) {
                            r = r - 1;
                            continue;
                        }
                        r = s;
                        break;
                    }
                } else {
                    s = -1;
                }
                if (s == -1 && loopSearch) {
                    r = target.length();
                    while ((r = target.lastIndexOf(search, r)) != -1) {
                        int e = r + search.length();
                        if (r > 0 && wordDelimiter.lastIndexOf(target.charAt(r - 1)) == -1) {
                            r = r - 1;
                            continue;
                        }
                        if (e < target.length() && wordDelimiter.lastIndexOf(target.charAt(e)) == -1) {
                            r = r - 1;
                            continue;
                        }
                        s = r;
                        break;
                    }
                }
                if (s != -1) {
                    select(s, s + search.length());
                    result = s;
                }
            }
        } else {
            if (downward) {
                if (startPos == -1) {
                    startPos = getSelectionEnd();
                }
                int s = startPos;
                s = target.indexOf(search, s);
                if (s == -1 && loopSearch) {
                    s = target.indexOf(search, 0);
                }
                if (s != -1) {
                    select(s, s + search.length());
                    result = s;
                }
            } else {
                if (startPos == -1) {
                    startPos = getSelectionStart();
                }
                int s = startPos - 1;
                if (s >= 0) {
                    s = target.lastIndexOf(search, s);
                } else {
                    s = -1;
                }
                if (s == -1 && loopSearch) {
                    s = target.lastIndexOf(search, target.length());
                }
                if (s != -1) {
                    select(s, s + search.length());
                    result = s;
                }
            }
        }
        return result;
    }","    protected static void capturaPantalla(String path) {
        BufferedImage pantalla = obtenerCapturaPantalla();
        try {
            pantalla = new Robot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
            File file = new File(path);
            ImageIO.write(pantalla, ""jpg"", file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }","    public static String replacePlaceholders(String str, String placeholder, String replacement) {
        StringBuffer sb = new StringBuffer();
        Pattern pattern = Pattern.compile(""(\\$\\{"" + placeholder + ""\\})"");
        int lastIndex = 0;
        Matcher m = pattern.matcher(str);
        while (m.find()) {
            sb.append(str.substring(lastIndex, m.start()));
            sb.append(replacement);
            lastIndex = m.end();
        }
        sb.append(str.substring(lastIndex));
        return sb.toString();
    }",0,0
"    public void run() {
        try {
            charsExpected = 10000 * (testData[0].length() + testData[1].length());
            String fileName = ""/tmp/out"" + myNumber;
            final Process tac = Runtime.getRuntime().exec(new String[] { PROGRAM, fileName }, null, new File(""/tmp""));
            Thread writer = new Thread() {

                public void run() {
                    DataOutputStream stdin = new DataOutputStream(tac.getOutputStream());
                    try {
                        for (int x = 0; x < 10000; x++) {
                            for (int i = 0; i < testData.length; i++) {
                                charsWritten += testData[i].length();
                                stdin.writeUTF(testData[i]);
                            }
                        }
                        stdin.flush();
                        stdin.close();
                    } catch (IOException e) {
                        throw new Error(""TestRuntimeExec FAILED"");
                    }
                }
            };
            Thread reader = new Thread() {

                public void run() {
                    DataInputStream stdout = new DataInputStream(tac.getInputStream());
                    try {
                        for (int x = 0; x < 10000; x++) {
                            for (int i = 0; i < testData.length; i++) {
                                String in = stdout.readUTF();
                                charsRead += in.length();
                                if (!in.equals(testData[i])) throw new Error(""TestRuntimeExec FAILED: bad input "" + in);
                            }
                        }
                        int exitCode = tac.waitFor();
                        if (exitCode == 0 && charsRead == charsExpected && charsWritten == charsExpected) System.err.println(""TestRuntimeExec SUCCESS""); else System.err.println(""TestRuntimeExec FAILED"");
                    } catch (Throwable e) {
                        e.printStackTrace();
                        throw new Error(""TestRuntimeExec FAILED"");
                    }
                }
            };
            writer.start();
            reader.start();
            final Thread waiter = new Thread() {

                public void run() {
                    try {
                        int exitCode = tac.waitFor();
                        System.out.println(""waitFor(): Process exited with code "" + exitCode);
                    } catch (InterruptedException e) {
                        if (!interruptWait) {
                            System.out.println(""Waiting thread uninterrupted unexpectedly!!!"");
                            System.out.println(""TestRuntimeExec FAILED"");
                            System.exit(1);
                        }
                        System.out.println(""Waiting thread interrupted! (THIS IS GOOD)"");
                        e.printStackTrace();
                    }
                }
            };
            waiter.start();
            if (interruptWait) {
                new Thread() {

                    public void run() {
                        try {
                            Thread.sleep(2000);
                        } catch (Exception e) {
                        }
                        waiter.interrupt();
                    }
                }.start();
            }
            Thread poller = new Thread() {

                public void run() {
                    int exitCode = -99;
                    boolean exited = false;
                    do {
                        try {
                            exitCode = tac.exitValue();
                            exited = true;
                        } catch (IllegalThreadStateException e) {
                            System.out.println(""still alive!"");
                            try {
                                Thread.sleep(1000);
                            } catch (Exception ee) {
                            }
                        }
                    } while (!exited);
                    System.out.println(""exitValue(): Process exited with code "" + exitCode);
                }
            };
            poller.start();
            try {
                reader.join();
                writer.join();
                waiter.join();
                poller.join();
            } catch (InterruptedException eee) {
                eee.printStackTrace();
            }
        } catch (Throwable e) {
            System.err.println(""TestRuntimeExec FAILED with"");
            e.printStackTrace();
            System.exit(-1);
        }
    }","    public static final Object[][] transpose(Object[][] a) {
        int am = a.length;
        int an = a[0].length;
        Object[][] result = new Object[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                result[j][i] = a[i][j];
            }
        }
        return result;
    }",0,0
"    public void processChangedLines(int offset, int length) throws BadLocationException {
        String text = getText(0, getLength());
        highlightString(0, getLength(), defaultStyle);
        Set<String> keyw = keywords.keySet();
        for (String keyword : keyw) {
            Pattern p = Pattern.compile(keyword);
            Matcher m = p.matcher(text);
            while (m.find()) {
                highlightString(m.start(), m.end() - m.start(), keywords.get(keyword));
            }
        }
        Matcher mlcStart = multiCommentDelimStart.matcher(text);
        Matcher mlcEnd = multiCommentDelimEnd.matcher(text);
        while (mlcStart.find()) {
            if (mlcEnd.find(mlcStart.end())) {
                highlightString(mlcStart.start(), (mlcEnd.end() - mlcStart.start()), commentStyle);
            } else {
                highlightString(mlcStart.start(), getLength(), commentStyle);
            }
        }
        Matcher slc = singleCommentDelim.matcher(text);
        while (slc.find()) {
            int line = rootElement.getElementIndex(slc.start());
            int endOffset = rootElement.getElement(line).getEndOffset() - 1;
            highlightString(slc.start(), (endOffset - slc.start()), commentStyle);
        }
    }","    public static int binarySearch(long[] a, long key) {
        int low = 0;
        int high = a.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            long midVal = a[mid];
            if (midVal < key) low = mid + 1; else if (midVal > key) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }",0,0
"    private void scanAll(HTTPurl urlData, OutputStream outStream) throws Exception {
        int country = 0;
        int region = 0;
        try {
            country = Integer.parseInt(urlData.getParameter(""country""));
            region = Integer.parseInt(urlData.getParameter(""region""));
        } catch (Exception e) {
            throw new Exception(""country or region code not valid: "" + e.toString());
        }
        PageTemplate template = new PageTemplate(store.getProperty(""path.template"") + File.separator + ""channelscan.html"");
        outStream.write(template.getPageBytes());
        CaptureDeviceList devList = CaptureDeviceList.getInstance();
        if (devList.getActiveDeviceCount() > 0) {
            outStream.write(""Can not scan channels, Captures Running!"".getBytes());
            return;
        }
        if (devList.getDeviceCount() == 0) {
            outStream.write(""No Devices Available!"".getBytes());
            return;
        }
        String out = ""<form action=\""/servlet/"" + urlData.getServletClass() + ""\"" method=\""POST\"" accept-charset=\""UTF-8\"">\n"" + ""<input type=\""hidden\"" name=\""action\"" value='05'>\n"";
        outStream.write(out.getBytes());
        outStream.flush();
        ChannelList list = new ChannelList(store.getProperty(""path.data"") + File.separator + ""stationdata.list"");
        Channel[] channelList = list.getStations(country, region);
        list.close();
        try {
            boolean testMode = ""1"".equals(store.getProperty(""tools.testmode""));
            int channelCount = 0;
            Channel ch = null;
            for (int x = 0; x < channelList.length; x++) {
                int channelsFound = 0;
                ch = channelList[x];
                if (ch != null) {
                    StringBuffer buff = new StringBuffer(2048);
                    buff.append(""<table class='channelScanResult'>\n"");
                    buff.append(""<tr class=\""scanChannelHeading\"">\n"");
                    buff.append(""<td class=\""scanChannelHeadingDataName\"">"" + ch.getName() + ""</td>\n"");
                    buff.append(""<td class=\""scanChannelHeadingData\"">Program</td>\n"");
                    buff.append(""<td class=\""scanChannelHeadingData\"">Video</td>\n"");
                    buff.append(""<td class=\""scanChannelHeadingData\"">Audio</td>\n"");
                    buff.append(""<td class=\""scanChannelHeadingData\"">Add</td>\n"");
                    buff.append(""</tr>\n"");
                    if (x > 0) Thread.sleep(5000);
                    CaptureDevice cap = (CaptureDevice) devList.getDevice(0);
                    Runtime runner = Runtime.getRuntime();
                    String[] com = null;
                    if (testMode == true) {
                        String scanCommand = ""win32/scan.exe -test"";
                        System.out.println(""Running channel scan command: "" + scanCommand);
                        com = new String[2];
                        com[0] = ""win32/scan.exe"";
                        com[1] = ""-test"";
                    } else {
                        String scanCommand = ""win32/scan.exe "" + ch.getFrequency() + "" "" + ch.getBandWidth() + "" \"""" + cap.getID() + ""\"""";
                        System.out.println(""Running channel scan command: "" + scanCommand);
                        com = new String[4];
                        com[0] = ""win32/scan.exe"";
                        com[1] = new Integer(ch.getFrequency()).toString();
                        com[2] = new Integer(ch.getBandWidth()).toString();
                        com[3] = ""\"""" + cap.getID() + ""\"""";
                    }
                    Process scan = runner.exec(com);
                    ScanResult result = new ScanResult(ch.getFrequency(), ch.getBandWidth());
                    result.readInput(scan.getInputStream());
                    result.parseXML();
                    Vector<Channel> scanResult = result.getResult();
                    Channel chData = null;
                    for (int y = 0; y < scanResult.size(); y++) {
                        chData = (Channel) scanResult.get(y);
                        if (chData != null) {
                            buff.append(""<tr class='scanChannelResult'>"");
                            buff.append(""<td>\n<input type='text' name='name"" + channelCount + ""' value='"" + checkName(chData.getName()) + ""'>\n"");
                            buff.append(""<input type='hidden' name='freq"" + channelCount + ""' value='"" + chData.getFrequency() + ""'>\n"");
                            buff.append(""<input type='hidden' name='band"" + channelCount + ""' value='"" + chData.getBandWidth() + ""'>\n"");
                            buff.append(""</td>\n\n"");
                            buff.append(""<td align='center'>"" + chData.getProgramID());
                            buff.append(""<input type='hidden' name='programid"" + channelCount + ""' value='"" + chData.getProgramID() + ""'>\n"");
                            buff.append(""</td>\n"");
                            buff.append(""<td align='center'>"");
                            int count = getStreamTypeCount(chData, Channel.TYPE_VIDEO);
                            if (count == 0) {
                                buff.append(""-1"");
                                buff.append(""<input type='hidden' name='videoid"" + channelCount + ""' value='-1'>\n"");
                            }
                            if (count == 1) {
                                int[] data = getFirstOfType(chData, Channel.TYPE_VIDEO);
                                buff.append(data[0]);
                                buff.append(""<input type='hidden' name='videoid"" + channelCount + ""' value='"" + data[0] + ""'>\n"");
                            } else if (count > 1) {
                                buff.append(""<SELECT NAME='videoid"" + channelCount + ""'>\n"");
                                for (int st = 0; st < chData.getStreams().size(); st++) {
                                    int[] streamData = (int[]) chData.getStreams().get(st);
                                    if (streamData[1] == Channel.TYPE_VIDEO) {
                                        buff.append(""<OPTION value=\"""" + streamData[0] + ""\"">"");
                                        buff.append(streamData[0]);
                                        buff.append(""</OPTION>\n"");
                                    }
                                }
                                buff.append(""</SELECT>"");
                            }
                            buff.append(""</td>\n"");
                            buff.append(""<td align='center'>"");
                            count = getStreamTypeCount(chData, Channel.TYPE_AUDIO_AC3);
                            count += getStreamTypeCount(chData, Channel.TYPE_AUDIO_MPG);
                            if (count == 0) {
                                buff.append(""-1"");
                                buff.append(""<input type='hidden' name='audioid"" + channelCount + ""' value='-1'>\n"");
                            }
                            if (count == 1) {
                                int[] data = getFirstOfType(chData, Channel.TYPE_AUDIO_AC3);
                                if (data == null) data = getFirstOfType(chData, Channel.TYPE_AUDIO_MPG);
                                buff.append(data[0]);
                                if (data[1] == Channel.TYPE_AUDIO_AC3) buff.append("" AC3""); else buff.append("" MPG"");
                                buff.append(""<input type='hidden' name='audioid"" + channelCount + ""' value='"" + data[0] + "":"" + data[1] + ""'>\n"");
                            } else if (count > 1) {
                                buff.append(""<SELECT NAME='audioid"" + channelCount + ""'>\n"");
                                for (int st = 0; st < chData.getStreams().size(); st++) {
                                    int[] streamData = (int[]) chData.getStreams().get(st);
                                    if (streamData[1] == Channel.TYPE_AUDIO_MPG || streamData[1] == Channel.TYPE_AUDIO_AC3) {
                                        buff.append(""<OPTION value=\"""" + streamData[0] + "":"" + streamData[1] + ""\"">"");
                                        buff.append(streamData[0]);
                                        if (streamData[1] == Channel.TYPE_AUDIO_AC3) buff.append("" AC3""); else buff.append("" MPG"");
                                        buff.append(""</OPTION>\n"");
                                    }
                                }
                                buff.append(""</SELECT>"");
                            }
                            buff.append(""</td>\n"");
                            buff.append(""<td align='center'><input type='checkbox' name='add"" + channelCount + ""' value='add'></td>\n"");
                            buff.append(""</tr>\n\n"");
                            channelCount++;
                            channelsFound++;
                        } else {
                            break;
                        }
                    }
                    if (channelsFound == 0) {
                        buff.append(""<tr class='scanChannelResult'>"");
                        buff.append(""<td>No Programs Found</td>\n"");
                        buff.append(""<td align='center'>N/A</td>\n"");
                        buff.append(""<td align='center'>N/A</td>\n"");
                        buff.append(""<td align='center'>N/A</td>\n"");
                        buff.append(""<td align='center'>N/A</td>\n"");
                        buff.append(""</tr>\n\n"");
                    }
                    buff.append(""</table><br>\n"");
                    outStream.write(buff.toString().getBytes());
                    outStream.flush();
                    outStream.write(""\n\n\n\n\n           \n\n\n\n\n\n"".getBytes());
                    outStream.flush();
                }
            }
            if (channelCount > 0) out = ""<input type=\""submit\"" value=\""Add Selected\""></form></body></html><br><br>\n"";
            outStream.write(out.getBytes());
            outStream.flush();
        } catch (Exception e) {
            throw e;
        }
    }","    public static <A> A[] composeArray(A[] base, A postfix) {
        @SuppressWarnings(""unchecked"") final A[] result = (A[]) Array.newInstance(base.getClass().getComponentType(), base.length + 1);
        System.arraycopy(base, 0, result, 0, base.length);
        result[base.length] = postfix;
        return result;
    }",0,0
"    protected void doDel(File f) {
        if (f.isDirectory()) {
            File[] ls = f.listFiles();
            for (File element : ls) {
                doDel(element);
            }
            f.delete();
        } else {
            f.delete();
        }
    }","    public static SRPGAnimation makeObject(String fileName, int tileWidth, int tileHeight, LColor col) {
        String key = fileName.trim().toLowerCase();
        SRPGAnimation animation = (SRPGAnimation) animations.get(key);
        if (animation == null) {
            LImage image = GraphicsUtils.loadNotCacheImage(fileName);
            int c = col.getRGB();
            int wlength = image.getWidth() / tileWidth;
            int hlength = image.getHeight() / tileHeight;
            LImage[][] images = new LImage[wlength][hlength];
            Rect srcR = new Rect();
            Rect dstR = new Rect();
            Canvas canvas = GraphicsUtils.canvas;
            for (int y = 0; y < hlength; y++) {
                for (int x = 0; x < wlength; x++) {
                    Bitmap bitmap = Bitmap.createBitmap(tileWidth, tileHeight, Config.ARGB_4444);
                    srcR.set((x * tileWidth), (y * tileHeight), tileWidth + (x * tileWidth), tileHeight + (y * tileHeight));
                    dstR.set(0, 0, tileWidth, tileHeight);
                    canvas.setBitmap(bitmap);
                    canvas.drawBitmap(image.getBitmap(), srcR, dstR, null);
                    images[x][y] = new LImage(bitmap);
                    LImage tmp = images[x][y];
                    int[] pixels = tmp.getPixels();
                    int size = pixels.length;
                    for (int i = 0; i < size; i++) {
                        if (pixels[i] == c) {
                            pixels[i] = 0xffffff;
                        }
                    }
                    tmp.setPixels(pixels, tmp.getWidth(), tmp.getHeight());
                }
            }
            LImage[][] result = new LImage[hlength][wlength];
            for (int y = 0; y < wlength; y++) {
                for (int x = 0; x < hlength; x++) {
                    result[x][y] = images[y][x];
                }
            }
            images = null;
            animations.put(key, animation = makeObject(result[0], result[1], result[3], result[2]));
        }
        return animation;
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 4) {
            usage();
            System.exit(1);
        }
        System.out.println();
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        if (debug) props.put(""mail.debug"", args[3]);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            Message msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(args[0]) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Test"");
            msg.setSentDate(new Date());
            msg.setText(msgText);
            Transport.send(msg);
        } catch (MessagingException mex) {
            System.out.println(""\n--Exception handling in msgsendsample.java"");
            mex.printStackTrace();
            System.out.println();
            Exception ex = mex;
            do {
                if (ex instanceof SendFailedException) {
                    SendFailedException sfex = (SendFailedException) ex;
                    Address[] invalid = sfex.getInvalidAddresses();
                    if (invalid != null) {
                        System.out.println(""    ** Invalid Addresses"");
                        if (invalid != null) {
                            for (int i = 0; i < invalid.length; i++) System.out.println(""         "" + invalid[i]);
                        }
                    }
                    Address[] validUnsent = sfex.getValidUnsentAddresses();
                    if (validUnsent != null) {
                        System.out.println(""    ** ValidUnsent Addresses"");
                        if (validUnsent != null) {
                            for (int i = 0; i < validUnsent.length; i++) System.out.println(""         "" + validUnsent[i]);
                        }
                    }
                    Address[] validSent = sfex.getValidSentAddresses();
                    if (validSent != null) {
                        System.out.println(""    ** ValidSent Addresses"");
                        if (validSent != null) {
                            for (int i = 0; i < validSent.length; i++) System.out.println(""         "" + validSent[i]);
                        }
                    }
                }
                System.out.println();
                if (ex instanceof MessagingException) ex = ((MessagingException) ex).getNextException(); else ex = null;
            } while (ex != null);
        }
    }","    public void transpose() {
        for (int i = 0; i < ndims; i++) {
            for (int j = i + 1; j < ndims; j++) {
                g[j][i] = g[i][j];
            }
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    int[] slowSort() {
        int[] values = getValues();
        int n = values.length;
        for (int pass = 1; pass < n; pass++) {
            for (int i = 0; i < n - pass; i++) {
                if (values[i] > values[i + 1]) {
                    int temp = values[i];
                    values[i] = values[i + 1];
                    values[i + 1] = temp;
                }
            }
        }
        return values;
    }",0,0
"    public static final double[][] m3t(double A[][]) {
        double R[][] = new double[3][3];
        int i, j;
        for (i = 0; i < 3; i++) for (j = 0; j < 3; j++) R[i][j] = A[j][i];
        return (R);
    }","    private void openFile() {
        JFileChooser filech = new JFileChooser();
        String theLine = """";
        filech.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = filech.showOpenDialog(this);
        if (result == JFileChooser.CANCEL_OPTION) return;
        File filename = filech.getSelectedFile();
        if (filename == null || filename.getName().equals("""")) JOptionPane.showMessageDialog(this, ""Invalid File Name"", ""Error"", JOptionPane.ERROR_MESSAGE); else {
            tfield01.setText(filename.getPath());
        }
    }",0,0
"    public static void main(String[] p) {
        AAAJpg t = new AAAJpg();
        try {
            GB_Frame l_frame = new GB_Frame();
            GB_PanelRowsTitle l_panel = new GB_PanelRowsTitle();
            l_panel.addRow(""toto"", new JLabel(""abcd""));
            l_panel.addRowFill(""toto"", new JTextField(""abcd""));
            l_frame.setMainPanel(l_panel);
            l_frame.pack();
            l_frame.setVisible(true);
            Thread.sleep(2000);
            Robot r = new Robot();
            Dimension d = l_frame.getSize();
            BufferedImage l_img = r.createScreenCapture(new Rectangle(0, 0, d.width, d.height));
            File f = new File(""c:/aa/toto.png"");
            ImageIO.write(l_img, ""png"", f);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public static SplineMesh subdivideMesh(SplineMesh mesh, double tol) {
        SplineMesh newmesh = new SplineMesh();
        int usize = mesh.usize, vsize = mesh.vsize;
        MeshVertex v[][] = new MeshVertex[vsize][usize], newv[][], temp;
        int numParam = (mesh.texParam == null ? 0 : mesh.texParam.length);
        double param[][][] = new double[vsize][usize][numParam], newparam[][][];
        float newus[];
        Object output[];
        for (int i = 0; i < usize; i++) for (int j = 0; j < vsize; j++) v[j][i] = new MeshVertex(mesh.vertex[i + usize * j]);
        for (int k = 0; k < numParam; k++) if (mesh.paramValue[k] instanceof VertexParameterValue) {
            double val[] = ((VertexParameterValue) mesh.paramValue[k]).getValue();
            for (int i = 0; i < usize; i++) for (int j = 0; j < vsize; j++) param[j][i][k] = val[i + usize * j];
        }
        if (usize == 2) output = new Object[] { v, mesh.usmoothness, param }; else if (mesh.smoothingMethod == INTERPOLATING) output = interpOneAxis(v, mesh.usmoothness, param, mesh.uclosed, tol); else output = approxOneAxis(v, mesh.usmoothness, param, mesh.uclosed, tol);
        newv = (MeshVertex[][]) output[0];
        newus = (float[]) output[1];
        newparam = (double[][][]) output[2];
        v = new MeshVertex[newv[0].length][newv.length];
        for (int i = 0; i < newv.length; i++) for (int j = 0; j < newv[0].length; j++) v[j][i] = newv[i][j];
        param = new double[newparam[0].length][newparam.length][newparam[0][0].length];
        for (int i = 0; i < newparam.length; i++) for (int j = 0; j < newparam[0].length; j++) for (int k = 0; k < newparam[0][0].length; k++) param[j][i][k] = newparam[i][j][k];
        if (vsize == 2) output = new Object[] { v, mesh.vsmoothness, param }; else if (mesh.smoothingMethod == INTERPOLATING) output = interpOneAxis(v, mesh.vsmoothness, param, mesh.vclosed, tol); else output = approxOneAxis(v, mesh.vsmoothness, param, mesh.vclosed, tol);
        v = (MeshVertex[][]) output[0];
        newmesh.usize = v.length;
        newmesh.vsize = v[0].length;
        newmesh.vertex = new MeshVertex[newmesh.usize * newmesh.vsize];
        for (int i = 0; i < newmesh.usize; i++) for (int j = 0; j < newmesh.vsize; j++) newmesh.vertex[i + newmesh.usize * j] = v[i][j];
        newmesh.usmoothness = newus;
        newmesh.vsmoothness = (float[]) output[1];
        newmesh.uclosed = mesh.uclosed;
        newmesh.vclosed = mesh.vclosed;
        newmesh.smoothingMethod = mesh.smoothingMethod;
        newmesh.skeleton = mesh.skeleton.duplicate();
        newmesh.copyTextureAndMaterial(mesh);
        param = (double[][][]) output[2];
        for (int k = 0; k < numParam; k++) if (newmesh.paramValue[k] instanceof VertexParameterValue) {
            double val[] = new double[newmesh.usize * newmesh.vsize];
            for (int i = 0; i < newmesh.usize; i++) for (int j = 0; j < newmesh.vsize; j++) val[i + newmesh.usize * j] = param[i][j][k];
            newmesh.paramValue[k] = new VertexParameterValue(val);
        }
        return newmesh;
    }",0,0
"    public static Object[] append(Object[] oldArray, Object o) {
        NullArgumentException.check(oldArray);
        NullArgumentException.check(o);
        Object[] newArray = (Object[]) Array.newInstance(oldArray.getClass().getComponentType(), oldArray.length + 1);
        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);
        newArray[oldArray.length] = o;
        return newArray;
    }","    public static long getFileCRC32(File f) throws IOException {
        if (f.exists() && f.isFile()) {
            FileInputStream fis = new FileInputStream(f);
            CRC32 check = new CRC32();
            int b = fis.read();
            while (b != -1) {
                b = fis.read();
                check.update(b);
            }
            fis.close();
            return check.getValue();
        } else {
            return 0;
        }
    }",0,0
"    public static Double[][] transpor(Double[][] matriz) {
        validarMatriz(matriz);
        Double[][] transposta = new Double[matriz[0].length][matriz.length];
        for (int x = 0; x < matriz.length; x++) {
            Double[] linha = matriz[x];
            for (int y = 0; y < linha.length; y++) {
                transposta[y][x] = matriz[x][y];
            }
        }
        return transposta;
    }","    public void startFileConversion() {
        FileManagement.startTime = System.currentTimeMillis();
        FileManagement.fetchAllFiles(new File(sourceDir), javaFileList);
        Collections.sort(javaFileList);
        for (JavaFileBean javaFile : javaFileList) {
            performConversion(javaFile);
        }
        htmlManagementIndex = new HTMLManagementIndexFile();
        htmlManagementIndex.createIndexHtmlFile(javaFileList, destinationDir);
        Desktop desktop = null;
        if (Desktop.isDesktopSupported()) {
            desktop = Desktop.getDesktop();
            URI uri = null;
            try {
                uri = new URI(""file://"" + destinationDir.replace('\\', '/') + ""/index.html"");
                desktop.browse(uri);
            } catch (URISyntaxException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }",0,0
"    protected static void doCopy(String orig, String dest, boolean block, FeedBack feedBack) {
        if (logger.isDebugEnabled()) logger.debug(""copy("" + orig + "","" + dest + "")"");
        File origFile = new File(orig);
        if (feedBack != null) feedBack.nextStep(orig);
        if (!origFile.exists()) throw new RuntimeException(""copy: origin "" + orig + "" does not exists"");
        if (origFile.isDirectory()) {
            File destFile = new File(dest);
            destFile.mkdirs();
            if (!destFile.isDirectory()) throw new RuntimeException(""can't create :"" + destFile + "" . while copying from "" + orig + "" to "" + dest);
            String[] fileList = origFile.list();
            for (String entry : fileList) doCopy(orig + File.separator + entry, dest + File.separator + entry, block, feedBack);
        } else {
            try {
                FileInputStream in = new FileInputStream(orig);
                FileOutputStream out = new FileOutputStream(dest);
                copyStream(in, out, 0);
                in.close();
                if (block) closeAndWaitFileOutputStream(out);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }","    public File[] doFilesOpen() {
        JFileChooser chooser = new JFileChooser();
        ArchiveFilter filter = new ArchiveFilter();
        filter.addExtension(""jar"");
        filter.addExtension(""zip"");
        filter.setDescription(""Jar & Zip Files"");
        File root = new File(""/fuegotech3.1.3"");
        chooser.setCurrentDirectory(root);
        chooser.setMultiSelectionEnabled(true);
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(_getFrame(this));
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            return chooser.getSelectedFiles();
        } else {
            return null;
        }
    }",0,0
"    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }","    public void removeValue(int index) {
        if (index >= 0 && index < values.length) {
            C[] newValues = (C[]) Array.newInstance(values.getClass().getComponentType(), values.length - 1);
            if (index >= 1) System.arraycopy(values, 0, newValues, 0, index);
            if (index <= values.length - 2) System.arraycopy(values, index + 1, newValues, index, values.length - index - 1);
            values = newValues;
            fireStateChanged();
        }
    }",0,0
"    private String calculate(final String from, final Resources resources) {
        StringBuffer output = new StringBuffer();
        Pattern resourceRegexp = Pattern.compile(""\\$\\{[\\w\\.]+\\}"");
        Matcher matcher = resourceRegexp.matcher(from);
        while (matcher.find()) {
            String resourceKey = from.substring(matcher.start() + 2, matcher.end() - 1);
            matcher.appendReplacement(output, resources.getResourceValue(resourceKey));
        }
        matcher.appendTail(output);
        return output.toString();
    }","    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }",0,0
"    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }","    public static String[] guardedSplit(String str, String delim, char protect) {
        byte[] copy = str.getBytes(Charset.forName(""US-ASCII""));
        if (Pattern.compile(str).matcher(String.valueOf(delim)).matches()) {
            throw new IllegalArgumentException(""the delimiter cannot match the protect character"");
        }
        byte hide = '_';
        if (Pattern.compile(str).matcher(String.valueOf(hide)).matches()) {
            throw new IllegalArgumentException(""the delimiter cannot match _"");
        }
        boolean inside = false;
        boolean escape = false;
        for (int i = 0; i < copy.length; i++) {
            if (copy[i] == protect && !escape) {
                if (inside) {
                    inside = false;
                    copy[i] = hide;
                } else {
                    inside = true;
                }
            }
            escape = copy[i] == '\\';
            if (inside) copy[i] = hide;
        }
        String scopy = new String(copy);
        ArrayList<String> result = new ArrayList();
        Pattern spl = Pattern.compile(delim);
        Matcher m = spl.matcher(scopy);
        int i = 0;
        while (m.find()) {
            int i0 = i;
            int i1 = m.start();
            result.add(str.substring(i0, i1));
            i = m.end();
        }
        result.add(str.substring(i));
        return result.toArray(new String[result.size()]);
    }",0,0
"    public ImageDisplay(ImageDisplayApplet applet, GraphicsConfiguration gc) {
        this.applet = applet;
        if (applet == null) {
            frame = new JFrame(gc);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(PREFERRED_WIDTH, PREFERRED_HEIGHT));
        Action openAction = new AbstractAction(""Open File"", new ImageIcon(getClass().getResource(""/open.gif""))) {

            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }
        };
        JToolBar bar = new JToolBar();
        bar.add(new ToolBarButton(openAction));
        add(bar, BorderLayout.NORTH);
        if (applet == null) {
            frame.setTitle(""Image Display - Control Panel"");
            frame.getContentPane().add(this, BorderLayout.CENTER);
            frame.pack();
            frame.show();
        }
    }","    public static void reset() throws Exception {
        Session session = DataStaticService.getHibernateSessionFactory().openSession();
        try {
            Connection connection = session.connection();
            try {
                Statement statement = connection.createStatement();
                try {
                    statement.executeUpdate(""delete from Bundle"");
                    connection.commit();
                } finally {
                    statement.close();
                }
            } catch (HibernateException e) {
                connection.rollback();
                throw new Exception(e);
            } catch (SQLException e) {
                connection.rollback();
                throw new Exception(e);
            }
        } catch (SQLException e) {
            throw new Exception(e);
        } finally {
            session.close();
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public float[][] findDistances() {
        float[][] distance = new float[noseqs][noseqs];
        if (pwtype.equals(""PID"")) {
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    if (j == i) {
                        distance[i][i] = 0;
                    } else {
                        distance[i][j] = 100 - Comparison.compare(sequence[i], sequence[j]);
                        distance[j][i] = distance[i][j];
                    }
                }
            }
        } else {
            float max = -1;
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    AlignSeq as = new AlignSeq(sequence[i], sequence[j], ""pep"");
                    as.calcScoreMatrix();
                    as.traceAlignment();
                    as.printAlignment();
                    distance[i][j] = (float) as.maxscore;
                    if (max < distance[i][j]) {
                        max = distance[i][j];
                    }
                }
            }
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    distance[i][j] = max - distance[i][j];
                    distance[j][i] = distance[i][j];
                }
            }
        }
        return distance;
    }",0,0
"    public TabelaVerdade(String tipoDeExercicio, String ordem, String ordem2, String[][] valores, String preposicao) {
        super(Usuario.statusDoExercicio(tipoDeExercicio, InterfaceDados.obtemNumeroDoExercicioCorrente()));
        pSuperior = new JPanel(new GridLayout(2, 1));
        pTitulo = new JPanel(new FlowLayout(FlowLayout.CENTER));
        titulo = new JLabel(tipoDeExercicio);
        titulo.setFont(new Font(""Arial"", 0, 25));
        titulo.setForeground(new Color(0, 0, 128));
        pTitulo.add(titulo);
        pSuperior.add(pTitulo);
        preposicao = alteraString(preposicao);
        valores = alteraMatrizDeStrings(valores);
        pEnun = new JPanel(new GridLayout(2, 1));
        enunciado1 = new JLabel(this.retornaEspacoAjustado(""    "") + ordem);
        enunciado1.setFont(new Font(""Arial"", 1, 14));
        enunciado1.setForeground(new Color(0, 0, 128));
        pEnun.add(enunciado1);
        pEnun2 = new JPanel(new FlowLayout(FlowLayout.LEFT));
        enunciado2 = new JLabel(this.retornaEspacoAjustado(""    "") + ordem2);
        enunciado2.setFont(new Font(""Arial"", 1, 14));
        enunciado2.setForeground(new Color(0, 0, 128));
        pEnun2.add(enunciado2);
        enunciado2 = new JLabel(preposicao);
        enunciado2.setFont(new Font(""Times"", 1, 16));
        enunciado2.setForeground(new Color(0, 0, 128));
        pEnun2.add(enunciado2);
        pEnun.add(pEnun2);
        pSuperior.add(pEnun);
        getContentPane().add(""North"", pSuperior);
        pOeste = new JPanel(new FlowLayout(FlowLayout.LEFT));
        pOeste.add(new JLabel(this.retornaEspacoAjustado(""  "")));
        getContentPane().add(""East"", pOeste);
        pOeste.add(new JLabel(this.retornaEspacoAjustado(""    "")));
        getContentPane().add(""West"", pOeste);
        pCentral = new JPanel(new GridLayout(1, valores[0].length + 1));
        pColuna = new JPanel(new GridLayout(valores.length, 1));
        String[][] valor = new String[valores[1].length][valores.length];
        for (int i = 0; i < valor.length; i++) for (int j = 0; j < valor[i].length; j++) {
            valor[i][j] = valores[j][i];
        }
        int total = 0;
        for (int i = 0; i < valor.length; i++) {
            if (valor[i][1].equals(""nada"")) total++;
        }
        preencher = new JTextField[total + 1][valor[1].length - 1];
        resposta = new String[total + 1][valor[1].length - 1];
        int aux = 0;
        for (int i = 0; i <= valor.length; i++) {
            pColuna = new JPanel(new GridLayout(valor[1].length, 1));
            for (int j = 0; j < valor[1].length; j++) {
                if (i == valor.length) {
                    if (j == 0) {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        JLabel prep = new JLabel(preposicao);
                        prep.setFont(new Font(""Times"", 0, 11));
                        prep.setForeground(new Color(0, 0, 128));
                        pAux.add(prep);
                    } else {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        preencher[total][j - 1] = new JTextField("""", 3);
                        preencher[total][j - 1].setDocument(new DefinePadraoDoTexto(1));
                        preencher[total][j - 1].addKeyListener(this);
                        pAux.add(preencher[total][j - 1]);
                    }
                } else {
                    if ((valor[i][j]).equals(""nada"")) {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        preencher[aux][j - 1] = new JTextField("""", 3);
                        preencher[aux][j - 1].setDocument(new DefinePadraoDoTexto(1));
                        preencher[aux][j - 1].addKeyListener(this);
                        pAux.add(preencher[aux][j - 1]);
                        if (j == valor[i].length - 1) aux++;
                    } else {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        JLabel vals = new JLabel(valor[i][j]);
                        if (j == 0) {
                            vals.setFont(new Font(""Times"", 0, 14));
                            vals.setForeground(new Color(0, 0, 128));
                        }
                        pAux.add(vals);
                    }
                }
                pColuna.add(pAux);
            }
            pCentral.add(pColuna);
        }
        getContentPane().add(""Center"", pCentral);
    }","    private static String formatBookmark(String input) {
        Pattern p;
        Matcher m;
        StringBuilder buffer = new StringBuilder(1024);
        input = input.replaceAll(""\\s+"", "" "");
        p = Pattern.compile(""\\\\[\""\']{1}"");
        m = p.matcher(input);
        int offset = 0;
        buffer.append(input);
        while (m.find()) {
            buffer.delete(m.start() - offset, m.end() - offset);
            offset += (m.end() - m.start());
        }
        input = buffer.toString();
        input = input.replace('\'', '""');
        return input.replaceAll(""\\s*=\\s*"", ""="");
    }",0,0
"    boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }","    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        res.setContentType(""text/html"");
        PrintWriter out = res.getWriter();
        out.println(""<html><head><title>Student File</title></head><body bgcolor=\""turquoise\"">"");
        int err = 0;
        if (req.getParameter(""add"") != null) {
            out.println(""<center><h1>Student</h1></center><hr>"");
            out.println(""<b>Add Record</b><br><br><form method=\""POST\"">"");
            out.println(""Name: <input type=\""text\"" name=\""name\"">"");
            out.println(""Address: <input type=\""text\"" name=\""address\"">"");
            out.println(""Phone: <input type=\""text\"" name=\""phone\"">"");
            out.println(""<br><br><input type=\""submit\"" name=\""addrecord\"" value=\""Addrecord\"">"");
            out.println(""<input type=\""submit\"" name=\""cancel\"" value=\""Cancel\"">"");
            out.println(""</form>"");
        } else if (req.getParameter(""cancel"") != null) {
            res.sendRedirect(""http://localhost:8080/Jeff"");
        } else if (req.getParameter(""addrecord"") != null) {
            Connection con;
            String dbsource = ""jdbc:odbc:jdbctest"";
            String drv = ""sun.jdbc.odbc.JdbcOdbcDriver"";
            String duser = ""root"";
            String dpass = """";
            String defaultquery = ""insert into student values('"" + req.getParameter(""name"") + ""','"" + req.getParameter(""address"") + ""','"" + req.getParameter(""phone"") + ""')"";
            try {
                con = DriverManager.getConnection(dbsource, duser, dpass);
                Statement stm = con.createStatement();
                int a = stm.executeUpdate(defaultquery);
                con.close();
            } catch (SQLException ex) {
                System.out.println(""SQL EXCEPTION:"" + ex.getMessage());
                out.println(""ERROR"");
                err++;
            } finally {
                if (err == 0) {
                    JOptionPane.showMessageDialog(null, ""RECORD ADDED"");
                    res.sendRedirect(""http://localhost:8080/Exercise2/Student"");
                }
            }
        } else if (req.getParameter(""update"") != null) {
            out.println(""<center><h1>Student</h1></center><hr>"");
            out.println(""<b>Update Record</b><br><br><form method=\""POST\"">"");
            out.println(""Name: <input type=\""text\"" name=\""name\"" value=\"""" + req.getParameter(""name"") + ""\"">"");
            out.println(""<input type=\""hidden\"" name=\""pname\"" value=\"""" + req.getParameter(""name"") + ""\"">"");
            out.println(""Address: <input type=\""text\"" name=\""address\"" value=\"""" + req.getParameter(""address"") + ""\"">"");
            out.println(""<input type=\""hidden\"" name=\""paddress\"" value=\"""" + req.getParameter(""address"") + ""\"">"");
            out.println(""Phone: <input type=\""text\"" name=\""phone\""value=\"""" + req.getParameter(""phone"") + ""\"">"");
            out.println(""<input type=\""hidden\"" name=\""pphone\""value=\"""" + req.getParameter(""phone"") + ""\"">"");
            out.println(""<br><br><input type=\""submit\"" name=\""uprecord\"" value=\""Save Changes\"">"");
            out.println(""<input type=\""submit\"" name=\""cancel\"" value=\""Cancel\"">"");
            out.println(""</form>"");
        } else if (req.getParameter(""uprecord"") != null) {
            Connection con;
            String dbsource = ""jdbc:odbc:jdbctest"";
            String drv = ""sun.jdbc.odbc.JdbcOdbcDriver"";
            String duser = ""root"";
            String dpass = """";
            String defaultquery = ""update student set name='"" + req.getParameter(""name"") + ""', address='"" + req.getParameter(""address"") + ""', phone='"" + req.getParameter(""phone"") + ""'"" + "" where name='"" + req.getParameter(""pname"") + ""'and address='"" + req.getParameter(""paddress"") + ""'and phone='"" + req.getParameter(""pphone"") + ""'"";
            try {
                con = DriverManager.getConnection(dbsource, duser, dpass);
                Statement stm = con.createStatement();
                int a = stm.executeUpdate(defaultquery);
                con.close();
            } catch (SQLException ex) {
                System.out.println(""SQL EXCEPTION:"" + ex.getMessage());
                out.println(""ERROR"");
                err++;
            } finally {
                if (err == 0) {
                    JOptionPane.showMessageDialog(null, ""RECORD CHANGED"");
                    res.sendRedirect(""http://localhost:8080/Exercise2/Student"");
                }
            }
        } else if (req.getParameter(""delete"") != null) {
            int del = JOptionPane.showConfirmDialog(null, ""Do you want to delete this record?"");
            if (del == 0) {
                Connection con;
                String dbsource = ""jdbc:odbc:jdbctest"";
                String drv = ""sun.jdbc.odbc.JdbcOdbcDriver"";
                String duser = ""root"";
                String dpass = """";
                String defaultquery = ""delete from student  where name='"" + req.getParameter(""name"") + ""'and address='"" + req.getParameter(""address"") + ""'and phone='"" + req.getParameter(""phone"") + ""'"";
                try {
                    con = DriverManager.getConnection(dbsource, duser, dpass);
                    Statement stm = con.createStatement();
                    int a = stm.executeUpdate(defaultquery);
                    con.close();
                } catch (SQLException ex) {
                    System.out.println(""SQL EXCEPTION:"" + ex.getMessage());
                    out.println(""ERROR"");
                    err++;
                } finally {
                    if (err == 0) {
                        JOptionPane.showMessageDialog(null, ""RECORD DELETED"");
                        res.sendRedirect(""http://localhost:8080/Exercise2/Student"");
                    }
                }
            } else {
                res.sendRedirect(""http://localhost:8080/Exercise2/Student"");
            }
        }
        out.println(""</body></html>"");
    }",0,0
"    private FileInfo inspectFile(String filePath, boolean compress) throws XPIException {
        long length = 0;
        long crc = 0;
        byte[] md5 = new byte[0];
        byte[] sha1 = new byte[0];
        File tmp = new File(baseDir, filePath);
        try {
            tmp = tmp.getCanonicalFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (!tmp.exists()) throw new XPIException(""  File \'"" + tmp.getAbsolutePath() + ""\' does not exist."", Main.ERR_FILE_NOT_FOUND);
        try {
            length = tmp.length();
            BufferedInputStream bis = null;
            try {
                bis = new BufferedInputStream(new FileInputStream(tmp));
            } catch (FileNotFoundException e1) {
            }
            digestMD5.reset();
            digestSHA.reset();
            DigestInputStream md5Stream = new DigestInputStream(bis, digestMD5);
            DigestInputStream shaStream = new DigestInputStream(md5Stream, digestSHA);
            CRC32 crc32 = new CRC32();
            byte[] data = new byte[1024 * 2];
            int byteCount;
            while ((byteCount = shaStream.read(data)) > -1) {
                crc32.update(data, 0, byteCount);
            }
            crc = crc32.getValue();
            crc32.reset();
            md5 = md5Stream.getMessageDigest().digest();
            sha1 = shaStream.getMessageDigest().digest();
            bis.close();
        } catch (IOException e1) {
            throw new XPIException(""Error reading from \'"" + tmp + ""\'"", Main.ERR_ERROR_READING_FILE);
        }
        return new FileInfo(filePath, length, crc, md5, sha1, compress);
    }","    private String wikify(String content, RenderEngine renderEngine, InitialRenderContext renderContext) {
        if (content == null || content.length() == 0) {
            return """";
        }
        Pattern p = Pattern.compile(WIKI_START_TAG + "".+?"" + WIKI_END_TAG, Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
        Matcher m = p.matcher(content);
        while (m.find()) {
            int start = m.start();
            int end = m.end();
            String textToWikify = content.substring(start, end);
            textToWikify = textToWikify.substring(WIKI_START_TAG.length(), textToWikify.length() - WIKI_END_TAG.length());
            textToWikify = renderEngine.render(textToWikify, renderContext);
            content = content.substring(0, start) + textToWikify + content.substring(end, content.length());
            m = p.matcher(content);
        }
        return content;
    }",0,0
"    public static Object[][] dimTransform(Object[][] obj) {
        if ((obj == null) || (obj.length <= 0)) {
            return null;
        }
        Object[][] newArr = new Object[obj[0].length][obj.length];
        for (int i = 0; i < newArr.length; ++i) {
            for (int j = 0; j < obj.length; ++j) {
                newArr[i][j] = obj[j][i];
            }
        }
        return newArr;
    }","    public static String[] expandMacros(String string) {
        String expression = ""\\[([\\d]+)-([\\d]+)\\]"";
        Pattern pattern = Pattern.compile(expression);
        Matcher matcher = pattern.matcher(string);
        Vector vector = new Vector();
        int startPos = 0;
        while (matcher.find()) {
            try {
                Integer lowVal = new Integer(matcher.group(1));
                Integer highVal = new Integer(matcher.group(2));
                vector.add(new Object[] { string.substring(startPos, matcher.start(0)), lowVal, highVal });
                startPos = matcher.end(0);
            } catch (NumberFormatException exception) {
            }
        }
        String ending = string.substring(startPos);
        int dimSize = vector.size();
        String[] stringParts = new String[dimSize];
        int[] startVals = new int[dimSize];
        int[] endVals = new int[dimSize];
        for (int i = 0; i < vector.size(); i++) {
            stringParts[i] = (String) ((Object[]) vector.get(i))[0];
            startVals[i] = ((Integer) ((Object[]) vector.get(i))[1]).intValue();
            endVals[i] = ((Integer) ((Object[]) vector.get(i))[2]).intValue();
        }
        int count = 1;
        int[] dimensions = new int[dimSize];
        int[] positions = new int[dimSize];
        for (int d = 0; d < dimSize; d++) {
            dimensions[d] = Math.abs(startVals[d] - endVals[d]) + 1;
            count *= dimensions[d];
        }
        if (count > Constants.MAX_NAME_MACRO_EXPANSIONS) {
            return null;
        }
        String[] strings = new String[count];
        int pos = 0;
        for (int s = 0; s < count; s++) {
            string = """";
            pos = s;
            for (int d = dimSize - 1; d >= 0; d--) {
                positions[d] = pos % dimensions[d];
                pos /= dimensions[d];
            }
            for (int d = 0; d < dimSize; d++) {
                string += stringParts[d] + (startVals[d] + positions[d] * (endVals[d] - startVals[d] >= 0 ? 1 : -1));
            }
            strings[s] = string + ending;
        }
        return strings;
    }",0,0
"    private Collection<String> getVariants(String oldPatternText, String searchText, String replaceText) {
        Collection<String> variants = new HashSet<String>();
        java.util.regex.Pattern p = java.util.regex.Pattern.compile(searchText, java.util.regex.Pattern.LITERAL);
        Matcher m = p.matcher(oldPatternText);
        List<MatchResult> results = new ArrayList<MatchResult>();
        while (m.find()) {
            results.add(m.toMatchResult());
        }
        int n = results.size();
        for (int patNum = 1; patNum < twoToThe(n); patNum++) {
            String newPatternText = new String(oldPatternText);
            int offset = 0;
            for (int matchNum = 0; matchNum < n; matchNum++) {
                if (isBitSet(patNum, matchNum)) {
                    MatchResult hit = results.get(matchNum);
                    int realStart = hit.start() + offset;
                    int realEnd = hit.end() + offset;
                    Matcher replacer = p.matcher(newPatternText);
                    newPatternText = replaceFirst(replacer, realStart, realEnd, replaceText);
                    int hitLength = hit.end() - hit.start();
                    int growth = replaceText.length() - hitLength;
                    offset += growth;
                    variants.add(newPatternText);
                }
            }
        }
        return variants;
    }","    public static boolean update(Departamento objDepartamento) {
        int result = 0;
        Connection c = DBConnection.getConnection();
        PreparedStatement pst = null;
        if (c == null) {
            return false;
        }
        try {
            c.setAutoCommit(false);
            String sql = ""update departamento set nome = ?, sala = ?, telefone = ?, id_orgao = ? where id_departamento= ?"";
            pst = c.prepareStatement(sql);
            pst.setString(1, objDepartamento.getNome());
            pst.setString(2, objDepartamento.getSala());
            pst.setString(3, objDepartamento.getTelefone());
            pst.setLong(4, (objDepartamento.getOrgao()).getCodigo());
            pst.setInt(5, objDepartamento.getCodigo());
            result = pst.executeUpdate();
            c.commit();
        } catch (SQLException e) {
            try {
                c.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
            System.out.println(""[DepartamentoDAO.update] Erro ao atualizar -> "" + e.getMessage());
        } finally {
            DBConnection.closePreparedStatement(pst);
            DBConnection.closeConnection(c);
        }
        if (result > 0) {
            return true;
        } else {
            return false;
        }
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    private float[][] transpose(float[][] m) {
        float[][] toReturn = new float[m[0].length][m.length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++) {
                toReturn[j][i] = m[i][j];
            }
        }
        return toReturn;
    }",0,0
"    private static String execCmd(String cmd) {
        String msg = new String("""");
        boolean cmdOK = true;
        Process proc = null;
        Runtime runtime = Runtime.getRuntime();
        try {
            proc = runtime.exec(cmd);
            InputStreamReader isrError = new InputStreamReader(proc.getErrorStream());
            BufferedReader brError = new BufferedReader(isrError);
            String line = null;
            while ((line = brError.readLine()) != null) {
                System.out.println(""ERROR MSG>"" + line);
            }
            InputStreamReader isrOutput = new InputStreamReader(proc.getInputStream());
            BufferedReader brOutput = new BufferedReader(isrOutput);
            line = null;
            while ((line = brOutput.readLine()) != null) {
                System.out.println(""OUTPUT>"" + line);
            }
            int exitVal = proc.waitFor();
            System.out.println(""ExitValue: "" + exitVal);
        } catch (Exception e) {
            cmdOK = false;
            msg += ""Problem executing command: "" + cmd + ""  DAMN. Exception "" + e.toString();
            System.err.println(msg);
        }
        if (cmdOK) {
            msg += ""Command: "" + cmd + "" OK."";
        }
        return msg;
    }","    public static void send(TestType testType) {
        Session session = PerformanceAnalysis.session;
        MimeMessage msg = new MimeMessage(session);
        try {
            msg.setRecipient(Message.RecipientType.TO, new InternetAddress(PerformanceAnalysis.emailAddress));
            msg.setContent(testType.getData(), ""text/plain"");
        } catch (Exception ex) {
            ex.printStackTrace();
            return;
        }
        String id = String.format(""%03d"", (testno++)) + Util.md5String(System.currentTimeMillis());
        System.out.println(""Starting test #"" + id);
        for (int i = 0; i < testType.getAmount(); i++) {
            try {
                String addr = testType.name() + ""."" + id + ""@performanceanalysis.de"";
                msg.setFrom(new InternetAddress(addr));
                String subj = ""perform number "" + i + "" time "" + System.currentTimeMillis();
                msg.setSubject(subj);
                long time = System.currentTimeMillis();
                Transport.send(msg);
                System.out.print(System.currentTimeMillis() - time + "", "");
                Thread.sleep(testType.getInterval());
            } catch (AddressException e) {
                e.printStackTrace();
            } catch (MessagingException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println(""Sending finished!"");
    }",0,0
"    protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException {
        String cmd = ""mysqldump -u "" + Constants.dbUser + "" -p"" + Constants.dbPassword + "" "" + Constants.dbName + "" > "" + Constants.tmpDir + ""Backup.sql"";
        FileWriter fstream = new FileWriter(Constants.tmpDir + Constants.tmpScript);
        BufferedWriter out = new BufferedWriter(fstream);
        out.write(cmd);
        out.close();
        Process process = Runtime.getRuntime().exec(Constants.tmpDir + Constants.tmpScript);
        InputStream is = process.getInputStream();
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        while (br.readLine() != null) {
            ;
        }
        String fileName = now4backup();
        cmd = ""\""C:\\Archivos de programa\\WinRAR\\Rar.exe\"" a -m5 -ed "" + Constants.tmpDir + fileName + "" "" + Constants.tmpDir + ""Backup.sql"";
        process = Runtime.getRuntime().exec(cmd);
        is = process.getInputStream();
        isr = new InputStreamReader(is);
        br = new BufferedReader(isr);
        while (br.readLine() != null) {
            ;
        }
        FTPClient client = new FTPClient();
        client.connect(Constants.ftpBackupAddr);
        client.login(Constants.ftpBackupUser, Constants.ftpBackupPassword);
        client.changeDirectory(""/"" + Shared.getConfig(""storeName""));
        File f = new File(Constants.tmpDir + fileName);
        client.upload(f);
        client.disconnect(false);
    }","    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }",0,0
"    private String[] execSingleLineOutputCmd(String cmdWithParams) {
        String result = """";
        try {
            Process p = Runtime.getRuntime().exec(cmdWithParams.split("" ""));
            BufferedReader sin = new BufferedReader(new InputStreamReader(p.getInputStream()));
            result = sin.readLine();
            sin.close();
            return result.split("" "");
        } catch (Exception ex) {
            System.out.println(""ERROR: "" + ex.getMessage());
            return null;
        }
    }","    private void find() {
        this.expressions = null;
        Pattern p = Pattern.compile(regExpr);
        Matcher m = p.matcher(text);
        while (m.find()) {
            if (this.stopped) {
                System.out.println(""Finder was stopped."");
                this.expressions = null;
                return;
            }
            int start = m.start();
            int end = m.end();
            if (expressions == null) {
                expressions = new FoundExpressions();
            }
            Selection selection = new Selection();
            selection.setStart(start);
            selection.setEnd(end);
            expressions.add(selection);
        }
    }",0,0
"    public void exportTreeImage(String path, int dims[]) {
        float oldLineWidth = getLineWidthScale();
        int oldWidth = getWidth();
        int oldHeight = getHeight();
        double oldXScale = xscale;
        double oldYScale = yscale;
        double oldXStart = xstart;
        double oldYStart = ystart;
        try {
            setLineWidthScale(oldLineWidth * (float) .2);
            xstart = 0;
            ystart = 0;
            width = dims[0];
            height = dims[1];
            TREEMARGIN = 0;
            if (drawExternalNodeLabels && zoomDrawNodeLabels) TREEMARGIN = textWidth(root.getLongestLabel());
            float usableWidth = 0;
            float usableHeight = 0;
            if (treeLayout.equals(""Rectangular"") || treeLayout.equals(""Triangular"")) {
                usableWidth = dims[0] - TREEMARGIN - 5;
                usableHeight = dims[1] - (float) MARGIN * 2 - 5;
                xscale = usableWidth / root.depth();
                xstart = MARGIN;
                yscale = usableHeight / root.getNumberOfLeaves();
                ystart = MARGIN;
            } else if (treeLayout.equals(""Radial"") || treeLayout.equals(""Polar"")) {
                usableWidth = dims[0] - 2 * TREEMARGIN - 5;
                usableHeight = dims[1] - 2 * TREEMARGIN - 5;
                xscale = (Math.min(usableWidth, usableHeight) * 0.5) / root.depth();
                xstart = dims[0] * 0.5;
                yscale = (Math.min(usableWidth, usableHeight) * 0.5) / root.depth();
                ystart = dims[1] * 0.5;
            }
            PGraphics canvas = createGraphics((int) (dims[0]), (int) (dims[1]), PDF, path);
            canvas.beginDraw();
            canvas.background(backgroundColor.getRed(), backgroundColor.getGreen(), backgroundColor.getBlue());
            canvas.pushMatrix();
            canvas.translate((float) xstart, (float) ystart);
            canvas.rotate((float) (treerotation * Math.PI / 180.0));
            canvas.translate((float) -xstart, (float) -ystart);
            canvas.textFont(nodeFont);
            drawTree(root, canvas);
            canvas.popMatrix();
            canvas.dispose();
            canvas.endDraw();
            if (Desktop.isDesktopSupported()) {
                try {
                    File myFile = new File(path);
                    Desktop.getDesktop().open(myFile);
                } catch (IOException ex) {
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, ""Unable to export pdf.\n"" + e.getMessage(), ""Error"", JOptionPane.ERROR_MESSAGE);
        }
        setLineWidthScale(oldLineWidth);
        xscale = oldXScale;
        yscale = oldYScale;
        xstart = oldXStart;
        ystart = oldYStart;
        width = oldWidth;
        height = oldHeight;
        redraw();
    }","    private String parseLineOrientedString(String code) {
        Queue<String> tags = new LinkedList<String>();
        Queue<String> delimiters = new LinkedList<String>();
        Pattern pattern = Pattern.compile(LINE_ORIENTED_STRING_TAG);
        String[] parts = code.split(""\\\\\\\\\n"", 2);
        String firstLine = parts[0];
        String body = parts[1];
        Matcher matcher = pattern.matcher(firstLine);
        while (matcher.find()) {
            String currentDelimiter = matcher.group(1);
            tags.add(matcher.group(2));
            delimiters.add(currentDelimiter);
            if (currentDelimiter.equals(""`"")) {
                this.output += ""\\rubyexecution "";
            } else {
                this.output += ""\\rubystring "";
            }
            this.output += matcher.group();
        }
        this.output += ""\\rubynormal \\\\\n"";
        this.lastMode = ""normal"";
        while (!tags.equals("""")) {
            String currentTag = tags.poll();
            String currentDelimiter = delimiters.poll();
            Pattern endTagPattern = Pattern.compile(""(?m)^"" + currentTag + ""((\\\\\\\\\n)|(\\Z))"");
            Matcher endTagMatcher = endTagPattern.matcher(body);
            if (!endTagMatcher.find()) {
                break;
            }
            int endOfTag = endTagMatcher.start();
            String stringForCurrentTag = body.substring(0, endOfTag);
            if (currentDelimiter.equals(""`"")) {
                this.output += ""\\rubyexecution "";
            } else {
                this.output += ""\\rubystring "";
            }
            if (currentDelimiter.equals(""'"")) {
                this.output += stringForCurrentTag;
            } else {
                String mode;
                if (currentDelimiter.equals(""`"")) {
                    mode = ""execution"";
                } else {
                    mode = ""string"";
                }
                parseStringWithInterpolations(stringForCurrentTag, mode);
            }
            this.output += currentTag + ""\\rubynormal \\\\\n"";
            body = body.substring(endTagMatcher.end());
        }
        return body;
    }",0,0
"    private void exportAllSettings(HTTPurl urlData, OutputStream outStream) throws Exception {
        CaptureDeviceList devList = CaptureDeviceList.getInstance();
        if (devList.getActiveDeviceCount() > 0) {
            PageTemplate template = new PageTemplate(store.getProperty(""path.template"") + File.separator + ""SettingsLoad.html"");
            StringBuffer buff = new StringBuffer();
            buff.append(""<tr><td><img border=0 src='/images/stop.png' align='absmiddle' width='24' height='24'></td><td>Can not save settings while a capture is in progress.</td></tr>"");
            template.replaceAll(""$result"", buff.toString());
            outStream.write(template.getPageBytes());
            return;
        }
        boolean matchList = ""true"".equalsIgnoreCase(urlData.getParameter(""MatchList""));
        boolean autoAdd = ""true"".equalsIgnoreCase(urlData.getParameter(""AutoAdd""));
        boolean channelMapping = ""true"".equalsIgnoreCase(urlData.getParameter(""ChannelMapping""));
        boolean deviceSelection = ""true"".equalsIgnoreCase(urlData.getParameter(""DeviceSelection""));
        boolean agentMapping = ""true"".equalsIgnoreCase(urlData.getParameter(""AgentMapping""));
        boolean channels = ""true"".equalsIgnoreCase(urlData.getParameter(""Channels""));
        boolean tasks = ""true"".equalsIgnoreCase(urlData.getParameter(""Tasks""));
        boolean systemProp = ""true"".equalsIgnoreCase(urlData.getParameter(""SystemProp""));
        boolean schedules = ""true"".equalsIgnoreCase(urlData.getParameter(""Schedules""));
        boolean authSettings = ""true"".equalsIgnoreCase(urlData.getParameter(""AuthSettings""));
        ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
        ZipOutputStream out = new ZipOutputStream(bytesOut);
        out.setComment(""TV Scheduler Pro Settings file (Version: 1.0)"");
        if (channels) {
            out.putNextEntry(new ZipEntry(""Channels.xml""));
            StringBuffer channelData = new StringBuffer();
            store.saveChannels(channelData);
            byte[] channelBytes = channelData.toString().getBytes(""UTF-8"");
            out.write(channelBytes);
            out.closeEntry();
        }
        if (matchList) {
            out.putNextEntry(new ZipEntry(""MatchList.xml""));
            StringBuffer matchData = new StringBuffer();
            store.saveMatchList(matchData);
            byte[] matchBytes = matchData.toString().getBytes(""UTF-8"");
            out.write(matchBytes);
            out.closeEntry();
        }
        if (autoAdd) {
            out.putNextEntry(new ZipEntry(""EpgAutoAdd.xml""));
            StringBuffer addData = new StringBuffer();
            store.saveEpgAutoList(addData);
            byte[] addBytes = addData.toString().getBytes(""UTF-8"");
            out.write(addBytes);
            out.closeEntry();
        }
        if (tasks) {
            out.putNextEntry(new ZipEntry(""Tasks.xml""));
            StringBuffer taskData = new StringBuffer();
            store.saveTaskList(taskData);
            byte[] taskBytes = taskData.toString().getBytes(""UTF-8"");
            out.write(taskBytes);
            out.closeEntry();
        }
        if (channelMapping) {
            GuideStore guideStore = GuideStore.getInstance();
            out.putNextEntry(new ZipEntry(""ChannelMap.sof""));
            ByteArrayOutputStream chanMapBytes = new ByteArrayOutputStream();
            guideStore.saveChannelMap(chanMapBytes);
            out.write(chanMapBytes.toByteArray());
            out.closeEntry();
        }
        if (deviceSelection) {
            out.putNextEntry(new ZipEntry(""CaptureDevices.sof""));
            ByteArrayOutputStream deviceBytes = new ByteArrayOutputStream();
            devList.saveDeviceList(deviceBytes);
            out.write(deviceBytes.toByteArray());
            out.closeEntry();
        }
        if (agentMapping) {
            out.putNextEntry(new ZipEntry(""AgentMap.sof""));
            ByteArrayOutputStream agentMapBytes = new ByteArrayOutputStream();
            store.saveAgentToThemeMap(agentMapBytes);
            out.write(agentMapBytes.toByteArray());
            out.closeEntry();
        }
        if (schedules) {
            out.putNextEntry(new ZipEntry(""Times.sof""));
            ByteArrayOutputStream timesBytes = new ByteArrayOutputStream();
            store.saveSchedule(timesBytes);
            out.write(timesBytes.toByteArray());
            out.closeEntry();
        }
        if (systemProp) {
            HashMap<String, String> serverProp = new HashMap<String, String>();
            serverProp.put(""epg.showunlinked"", store.getProperty(""epg.showunlinked""));
            serverProp.put(""path.theme"", store.getProperty(""path.theme""));
            serverProp.put(""path.theme.epg"", store.getProperty(""path.theme.epg""));
            serverProp.put(""capture.path"", store.getProperty(""capture.path""));
            serverProp.put(""capture.averagedatarate"", store.getProperty(""capture.averagedatarate""));
            serverProp.put(""capture.autoselectmethod"", store.getProperty(""capture.autoselectmethod""));
            serverProp.put(""capture.minspacesoft"", store.getProperty(""capture.minspacesoft""));
            serverProp.put(""capture.includecalculatedusage"", store.getProperty(""capture.includecalculatedusage""));
            serverProp.put(""capture.deftype"", store.getProperty(""capture.deftype""));
            serverProp.put(""capture.filename.patterns"", store.getProperty(""capture.filename.patterns""));
            serverProp.put(""capture.path.details"", store.getProperty(""capture.path.details""));
            serverProp.put(""capture.capturefailedtimeout"", store.getProperty(""capture.capturefailedtimeout""));
            serverProp.put(""schedule.buffer.start"", store.getProperty(""schedule.buffer.start""));
            serverProp.put(""schedule.buffer.end"", store.getProperty(""schedule.buffer.end""));
            serverProp.put(""schedule.buffer.end.epg"", store.getProperty(""schedule.buffer.end.epg""));
            serverProp.put(""schedule.wake.system"", store.getProperty(""schedule.wake.system""));
            serverProp.put(""schedule.overlap"", store.getProperty(""schedule.overlap""));
            serverProp.put(""sch.autodel.action"", store.getProperty(""sch.autodel.action""));
            serverProp.put(""sch.autodel.time"", store.getProperty(""sch.autodel.time""));
            serverProp.put(""guide.source.http.pwd"", store.getProperty(""guide.source.http.pwd""));
            serverProp.put(""guide.source.xml.channelList"", store.getProperty(""guide.source.xml.channelList""));
            serverProp.put(""guide.source.type"", store.getProperty(""guide.source.type""));
            serverProp.put(""guide.source.http"", store.getProperty(""guide.source.http""));
            serverProp.put(""guide.source.file"", store.getProperty(""guide.source.file""));
            serverProp.put(""guide.action.name"", store.getProperty(""guide.action.name""));
            serverProp.put(""guide.source.http.usr"", store.getProperty(""guide.source.http.usr""));
            serverProp.put(""guide.source.schedule"", store.getProperty(""guide.source.schedule""));
            serverProp.put(""guide.warn.overlap"", store.getProperty(""guide.warn.overlap""));
            serverProp.put(""proxy.server"", store.getProperty(""proxy.server""));
            serverProp.put(""proxy.port"", store.getProperty(""proxy.port""));
            serverProp.put(""proxy.server.usr"", store.getProperty(""proxy.server.usr""));
            serverProp.put(""proxy.server.pwd"", store.getProperty(""proxy.server.pwd""));
            serverProp.put(""email.server"", store.getProperty(""email.server""));
            serverProp.put(""email.from.name"", store.getProperty(""email.from.name""));
            serverProp.put(""email.to"", store.getProperty(""email.to""));
            serverProp.put(""email.from"", store.getProperty(""email.from""));
            serverProp.put(""email.send.weeklyreport"", store.getProperty(""email.send.weeklyreport""));
            serverProp.put(""email.send.capfinished"", store.getProperty(""email.send.capfinished""));
            serverProp.put(""email.send.epgloaded"", store.getProperty(""email.send.epgloaded""));
            serverProp.put(""email.send.onwarning"", store.getProperty(""email.send.onwarning""));
            serverProp.put(""email.send.freespacelow"", store.getProperty(""email.send.freespacelow""));
            serverProp.put(""email.send.serverstarted"", store.getProperty(""email.send.serverstarted""));
            serverProp.put(""tasks.deftask"", store.getProperty(""tasks.deftask""));
            serverProp.put(""tasks.pretask"", store.getProperty(""tasks.pretask""));
            serverProp.put(""tasks.nodataerrortask"", store.getProperty(""tasks.nodataerrortask""));
            serverProp.put(""tasks.starterrortask"", store.getProperty(""tasks.starterrortask""));
            serverProp.put(""filebrowser.dirsattop"", store.getProperty(""filebrowser.dirsattop""));
            serverProp.put(""filebrowser.masks"", store.getProperty(""filebrowser.masks""));
            serverProp.put(""server.kbled"", store.getProperty(""server.kbled""));
            ByteArrayOutputStream serverpropBytes = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(serverpropBytes);
            oos.writeObject(serverProp);
            oos.close();
            out.putNextEntry(new ZipEntry(""ServerProperties.sof""));
            out.write(serverpropBytes.toByteArray());
            out.closeEntry();
        }
        if (authSettings) {
            File authFile = new File(store.getProperty(""path.data"") + File.separator + ""authentication.prop"");
            if (authFile.exists()) {
                out.putNextEntry(new ZipEntry(""authentication.prop""));
                FileInputStream is = new FileInputStream(authFile);
                byte[] buff = new byte[1024];
                int read = is.read(buff);
                while (read != -1) {
                    out.write(buff, 0, read);
                    read = is.read(buff);
                }
                out.closeEntry();
                is.close();
            }
        }
        out.flush();
        out.close();
        StringBuffer header = new StringBuffer();
        header.append(""HTTP/1.1 200 OK\n"");
        header.append(""Content-Type: application/zip\n"");
        header.append(""Content-Length: "" + bytesOut.size() + ""\n"");
        header.append(""Content-Disposition: attachment; filename=\""TV Scheduler Pro Settings.zip\""\n"");
        DateFormat df = new SimpleDateFormat(""EEE, dd MMM yyyy hh:mm:ss 'GMT'"", new Locale(""En"", ""Us"", ""Unix""));
        header.append(""Last-Modified: "" + df.format(new Date()) + ""\n"");
        header.append(""\n"");
        outStream.write(header.toString().getBytes());
        ByteArrayInputStream zipStream = new ByteArrayInputStream(bytesOut.toByteArray());
        byte[] bytes = new byte[4096];
        int read = zipStream.read(bytes);
        while (read > -1) {
            outStream.write(bytes, 0, read);
            outStream.flush();
            read = zipStream.read(bytes);
        }
    }","    private void captureDialog(AWTEvent trigger) {
        String pass = ""Pass F1 Keystroke for Replay"";
        String sAS = ""Save Application Window"";
        String cF = ""Copy File"";
        String rP = ""Run process"";
        String comm = ""Add a Comment"";
        String cmdstring;
        String savedfilename;
        int i;
        int rc;
        int x;
        int y;
        int w;
        int h;
        Robot robbie;
        BufferedImage newBufferedImage;
        Rectangle rect;
        String[] bgrp = new String[5];
        bgrp[0] = pass;
        bgrp[1] = sAS;
        bgrp[2] = cF;
        bgrp[3] = rP;
        bgrp[4] = comm;
        cmdstring = (String) JOptionPane.showInputDialog(this, ""Choose option required"", ""PGUI Capture Program Function Selection"", JOptionPane.PLAIN_MESSAGE, null, bgrp, bgrp[0]);
        if (cmdstring.equals(pass)) {
            sendPGUI(trigger.paramString());
        } else if (cmdstring.equals(sAS)) {
            try {
                robbie = new Robot();
                Point p = upThere.getLocation();
                Dimension d = upThere.getSize();
                x = p.x;
                y = p.y;
                w = (int) d.width;
                h = (int) d.height;
                rect = new Rectangle(x, y, w, h);
                newBufferedImage = robbie.createScreenCapture(rect);
                savedfilename = writeJPEG(newBufferedImage);
                sendPGUI(""SC "" + x + "" "" + y + "" "" + w + "" "" + h + "" "" + savedfilename);
            } catch (Exception e) {
                String s = new String(""System cannot save image; exception "" + e);
                log.println(s);
                JOptionPane.showMessageDialog(null, s, ""SevereError"", JOptionPane.WARNING_MESSAGE);
            }
        } else if (cmdstring.equals(comm)) {
            cmdstring = (String) JOptionPane.showInputDialog(this, ""Comment Text"", ""Add a Comment at current position in script"", JOptionPane.PLAIN_MESSAGE, null, null, """");
            if (cmdstring.length() != 0) {
                sendPGUI(""* "" + cmdstring);
            }
        } else if (cmdstring.equals(cF)) {
            cmdstring = getFileName(""File to be Saved"");
            savedfilename = getFileName(""Name to be saved as"");
            rc = JOptionPane.showConfirmDialog(null, ""Save "" + cmdstring + "" as file "" + savedfilename, ""Please Confirm File Copy Function"", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (rc == JOptionPane.YES_OPTION) {
                try {
                    BufferedReader bfr;
                    BufferedWriter bfw;
                    bfr = new BufferedReader(new FileReader(cmdstring));
                    bfw = new BufferedWriter(new FileWriter(savedfilename));
                    char[] cbuffer = new char[8192];
                    i = bfr.read(cbuffer, 0, 8192);
                    while (i != -1) {
                        bfw.write(cbuffer, 0, i);
                        i = bfr.read(cbuffer, 0, 8192);
                    }
                    bfr.close();
                    bfw.close();
                    sendPGUI(""FC "" + cmdstring + "" "" + savedfilename);
                } catch (Exception e) {
                    String s = new String(""System cannot copy "" + cmdstring + "" to "" + savedfilename + ""; exception "" + e);
                    log.println(s);
                    JOptionPane.showMessageDialog(null, s, ""SevereError"", JOptionPane.WARNING_MESSAGE);
                }
            }
        } else if (cmdstring.equals(rP)) {
            cmdstring = (String) JOptionPane.showInputDialog(null, ""Enter Process Invocation "", ""PGUI Capture Program - Run Process "", JOptionPane.PLAIN_MESSAGE, null, null, """");
            try {
                Runtime thisRT = Runtime.getRuntime();
                thisRT.exec(cmdstring);
                sendPGUI(""PI "" + cmdstring);
            } catch (Exception e) {
                String s = new String(""System cannot run application "" + cmdstring + ""; exception "" + e);
                log.println(s);
                JOptionPane.showMessageDialog(null, s, ""SevereError"", JOptionPane.WARNING_MESSAGE);
            }
        }
        return;
    }",0,0
"    public static double[][] transpose(double[][] M) {
        double[][] tM = new double[M[0].length][M.length];
        for (int i = 0; i < tM.length; i++) {
            for (int j = 0; j < tM[0].length; j++) {
                tM[i][j] = M[j][i];
            }
        }
        return tM;
    }","    public static Object[] join(Object[] arr1, Object[] arr2) {
        if (arr1 == null && arr2 != null) {
            return arr2;
        } else if (arr2 == null) {
            return arr1;
        } else {
            int size = arr1.length + arr2.length;
            Object[] arr = (Object[]) Array.newInstance(arr1.getClass().getComponentType(), size);
            System.arraycopy(arr1, 0, arr, 0, arr1.length);
            System.arraycopy(arr2, 0, arr, arr1.length, arr2.length);
            return arr;
        }
    }",0,0
"    public static void parseTextInlinedElement(StringBuilder strb, String text, int start, int end) {
        Pattern boldPattern = Pattern.compile(""(^|[\\. ,])([\\*\\+\\_])(.+)\\2($|[\\. ,])"");
        Matcher matcher = boldPattern.matcher(text);
        matcher.region(start, end);
        int i = start, j, k;
        while (matcher.find()) {
            j = matcher.start(2);
            k = matcher.end(2);
            strb.append(text, i, j - 1);
            renderTextInlinedElement(strb, text, j, k);
            i = k + 1;
        }
        if (i < text.length()) {
            strb.append(text, i, end);
        }
    }","    @Override
    public void actionPerformed(final ActionEvent ae) {
        final Object source = ae.getSource();
        if (menuBar.getNewItem() == source) {
            productsTableModel.add(String.valueOf(System.currentTimeMillis()), String.valueOf(System.currentTimeMillis()));
            return;
        }
        if (menuBar.getExitItem() == source) {
            System.exit(0);
            return;
        }
        if (menuBar.getHelpItem() == source) {
            if (Desktop.isDesktopSupported()) {
                final Desktop desktop = Desktop.getDesktop();
                try {
                    desktop.browse(new URI(HELP_URI));
                } catch (final IOException e) {
                    logger.error(""Could not launch the default browser for your system"", e);
                } catch (final URISyntaxException e) {
                    logger.error(""Invalid URI "" + HELP_URI, e);
                }
            } else {
                logger.inform(""Unfortunately your system doesn't support Java SE 6 Desktop API"");
            }
            return;
        }
    }",0,0
"    public static SRPGAnimation makeObject(String fileName, int tileWidth, int tileHeight, LColor col) {
        String key = fileName.trim().toLowerCase();
        SRPGAnimation animation = (SRPGAnimation) animations.get(key);
        if (animation == null) {
            LImage image = GraphicsUtils.loadNotCacheImage(fileName);
            int c = col.getRGB();
            int wlength = image.getWidth() / tileWidth;
            int hlength = image.getHeight() / tileHeight;
            LImage[][] images = new LImage[wlength][hlength];
            Rect srcR = new Rect();
            Rect dstR = new Rect();
            Canvas canvas = GraphicsUtils.canvas;
            for (int y = 0; y < hlength; y++) {
                for (int x = 0; x < wlength; x++) {
                    Bitmap bitmap = Bitmap.createBitmap(tileWidth, tileHeight, Config.ARGB_4444);
                    srcR.set((x * tileWidth), (y * tileHeight), tileWidth + (x * tileWidth), tileHeight + (y * tileHeight));
                    dstR.set(0, 0, tileWidth, tileHeight);
                    canvas.setBitmap(bitmap);
                    canvas.drawBitmap(image.getBitmap(), srcR, dstR, null);
                    images[x][y] = new LImage(bitmap);
                    LImage tmp = images[x][y];
                    int[] pixels = tmp.getPixels();
                    int size = pixels.length;
                    for (int i = 0; i < size; i++) {
                        if (pixels[i] == c) {
                            pixels[i] = 0xffffff;
                        }
                    }
                    tmp.setPixels(pixels, tmp.getWidth(), tmp.getHeight());
                }
            }
            LImage[][] result = new LImage[hlength][wlength];
            for (int y = 0; y < wlength; y++) {
                for (int x = 0; x < hlength; x++) {
                    result[x][y] = images[y][x];
                }
            }
            images = null;
            animations.put(key, animation = makeObject(result[0], result[1], result[3], result[2]));
        }
        return animation;
    }","    public FormatGetter(String format, List<String> colNames) {
        Pattern p = Pattern.compile(""%\\{([^}]+)\\}"");
        pieces = new ArrayList<ColumnGetter>();
        Matcher m = p.matcher(format);
        int end = 0;
        while (m.find()) {
            if (m.start() > end) pieces.add(new ConstantGetter(format.substring(end, m.start())));
            int mg1 = colNames.indexOf(m.group(1));
            if (mg1 < 0) throw new DataException(String.format(""Column not found: %s"", m.group(1)));
            pieces.add(new CleanGetter(mg1));
            end = m.end();
        }
        if (end < format.length()) pieces.add(new ConstantGetter(format.substring(end)));
    }",0,0
"    public void createZip(String baseDir, String objFileName) throws Exception {
        logger.info(""createZip: [ "" + baseDir + ""]   ["" + objFileName + ""]"");
        baseDir = baseDir + ""/"" + timesmpt;
        File folderObject = new File(baseDir);
        if (folderObject.exists()) {
            List<?> fileList = getSubFiles(new File(baseDir));
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(objFileName));
            ZipEntry ze = null;
            byte[] buf = new byte[1024];
            int readLen = 0;
            for (int i = 0; i < fileList.size(); i++) {
                File f = (File) fileList.get(i);
                ze = new ZipEntry(getAbsFileName(baseDir, f));
                ze.setSize(f.length());
                ze.setTime(f.lastModified());
                zos.putNextEntry(ze);
                InputStream is = new BufferedInputStream(new FileInputStream(f));
                while ((readLen = is.read(buf, 0, 1024)) != -1) {
                    zos.write(buf, 0, readLen);
                }
                is.close();
            }
            zos.close();
        } else {
            throw new Exception(""this folder isnot exist!"");
        }
    }","    public void testNonGreedyStrong() {
        String page = ""Stuff you say, it is<strong>Yea</strong>I find it interesting"";
        Pattern p = Pattern.compile(""<strong>.*?</strong>"");
        Matcher m = p.matcher(page);
        while (m.find()) {
            System.out.println("" ***** : "" + m.group());
            System.out.println("" ***** + at "" + m.start());
            System.out.println("" ***** - to "" + m.end());
        }
    }",0,0
"    public osid.shared.Id ingest(String fileName, String templateFileName, String fileType, File file, Properties properties) throws osid.repository.RepositoryException, java.net.SocketException, java.io.IOException, osid.shared.SharedException, javax.xml.rpc.ServiceException {
        long sTime = System.currentTimeMillis();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA:fileName ="" + fileName + ""fileType ="" + fileType + ""t = 0"");
        String host = FedoraUtils.getFedoraProperty(this, ""admin.ftp.address"");
        String url = FedoraUtils.getFedoraProperty(this, ""admin.ftp.url"");
        int port = Integer.parseInt(FedoraUtils.getFedoraProperty(this, ""admin.ftp.port""));
        String userName = FedoraUtils.getFedoraProperty(this, ""admin.ftp.username"");
        String password = FedoraUtils.getFedoraProperty(this, ""admin.ftp.password"");
        String directory = FedoraUtils.getFedoraProperty(this, ""admin.ftp.directory"");
        FTPClient client = new FTPClient();
        client.connect(host, port);
        client.login(userName, password);
        client.changeWorkingDirectory(directory);
        client.setFileType(FTP.BINARY_FILE_TYPE);
        client.storeFile(fileName, new FileInputStream(file));
        client.logout();
        client.disconnect();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Writting to FTP Server:"" + (System.currentTimeMillis() - sTime));
        fileName = url + fileName;
        int BUFFER_SIZE = 10240;
        StringBuffer sb = new StringBuffer();
        String s = new String();
        BufferedInputStream fis = new BufferedInputStream(new FileInputStream(new File(getResource(templateFileName).getFile().replaceAll(""%20"", "" ""))));
        byte[] buf = new byte[BUFFER_SIZE];
        int ch;
        int len;
        while ((len = fis.read(buf)) > 0) {
            s = s + new String(buf);
        }
        fis.close();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Read Mets File:"" + (System.currentTimeMillis() - sTime));
        String r = updateMetadata(s, fileName, file.getName(), fileType, properties);
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Resplaced Metadata:"" + (System.currentTimeMillis() - sTime));
        File METSfile = File.createTempFile(""vueMETSMap"", "".xml"");
        FileOutputStream fos = new FileOutputStream(METSfile);
        fos.write(r.getBytes());
        fos.close();
        AutoIngestor a = new AutoIngestor(address.getHost(), address.getPort(), FedoraUtils.getFedoraProperty(this, ""admin.fedora.username""), FedoraUtils.getFedoraProperty(this, ""admin.fedora.username""));
        String pid = a.ingestAndCommit(new FileInputStream(METSfile), ""Test Ingest"");
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Ingest complete:"" + (System.currentTimeMillis() - sTime));
        System.out.println("" METSfile= "" + METSfile.getPath() + "" PID = "" + pid);
        return new PID(pid);
    }","    public static GameRoleList load() {
        GameRoleList gameRoleList = new GameRoleList();
        Connection conn = null;
        try {
            String dbURL = ""jdbc:hsqldb:/tmp/yacht"";
            Class.forName(""org.hsqldb.jdbcDriver"");
            conn = DriverManager.getConnection(dbURL, ""sa"", """");
        } catch (Exception e) {
            System.out.println(""ERROR: Could not connect to database"");
            System.out.print(e);
        }
        try {
            String sql = ""select * from role"";
            Statement stmt = conn.createStatement();
            ResultSet res = stmt.executeQuery(sql);
            while (res.next()) {
                Role role = (Role) res.getObject(""role"");
                gameRoleList.addRole(role);
            }
            stmt.close();
            conn.close();
        } catch (Exception e) {
            System.out.println(e);
        }
        return gameRoleList;
    }",0,0
"    public void init(String[] args) throws Exception {
        prop = new Properties();
        prop.load(new FileInputStream(""PanFmpGui.properties""));
        if (args.length == 1) {
            searchService = new SearchService(args[0]);
        } else if (args.length > 1) {
            System.out.println(""Please specify path to panFMP config file, e.g."");
            System.out.println(""java -jar PanFmpGui ./config.xml"");
        }
        this.setSize(800, 600);
        this.setTitle(""panFMP GUI - alpha"");
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((dim.width - getSize().width) / 2, (dim.height - getSize().height) / 2);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JMenuBar menuBar = new JMenuBar();
        JMenu menuSystem = new JMenu(""System"");
        JMenuItem loadLocal = new JMenuItem();
        loadLocal.setText(""Load config file"");
        loadLocal.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser(""/"");
                fileChooser.addChoosableFileFilter(new XmlFilter());
                fileChooser.setAcceptAllFileFilterUsed(false);
                int returnVal = fileChooser.showOpenDialog(PanFmpGui.this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File pathToConfigFile = fileChooser.getSelectedFile();
                    try {
                        searchService = new SearchService(pathToConfigFile.toString());
                        Config conf = new Config(pathToConfigFile.toString(), ConfigMode.SEARCH);
                        Map<String, Config.Config_Field> fields = conf.fields;
                        fieldsCombo.removeAllItems();
                        Iterator<Map.Entry<String, Config.Config_Field>> itFields = fields.entrySet().iterator();
                        while (itFields.hasNext()) {
                            Map.Entry itPair = (Map.Entry) itFields.next();
                            Config_Field fc = (Config_Field) itPair.getValue();
                            if (fc.datatype.equals(DataType.STRING) || fc.datatype.equals(DataType.TOKENIZEDTEXT)) fieldsCombo.addItem(fc.name);
                        }
                        Collection<IndexConfig> indexList = conf.indices.values();
                        virtIndexCombo.removeAllItems();
                        for (IndexConfig iconf : indexList) {
                            if (iconf instanceof VirtualIndexConfig) {
                                VirtualIndexConfig viconf = (VirtualIndexConfig) iconf;
                                virtIndexCombo.addItem(viconf.id);
                            }
                        }
                        PanFmpGui.this.status.setText(""Config file successfully loaded"");
                    } catch (Exception ex) {
                    }
                    fieldsCombo.setEnabled(true);
                    virtIndexCombo.setEnabled(true);
                    listContentButton.setEnabled(true);
                }
            }
        });
        JMenuItem options = new JMenuItem();
        options.setText(""Options"");
        options.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                PanFmpGuiOptions pfgo = new PanFmpGuiOptions(PanFmpGui.this.prop);
                pfgo.init();
                pfgo.setVisible(true);
            }
        });
        JMenuItem close = new JMenuItem();
        close.setText(""Close"");
        close.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                PanFmpGui.this.setVisible(false);
                PanFmpGui.this.dispose();
            }
        });
        menuSystem.add(loadLocal);
        menuSystem.add(options);
        menuSystem.addSeparator();
        menuSystem.add(close);
        JMenu menuOperations = new JMenu(""Operations"");
        JMenuItem startHarvesting = new JMenuItem();
        startHarvesting.setText(""Start Harvesting"");
        startHarvesting.setEnabled(false);
        JMenuItem startRebuilding = new JMenuItem();
        startRebuilding.setText(""Rebuild Index"");
        startRebuilding.setEnabled(false);
        menuOperations.add(startHarvesting);
        menuOperations.add(startRebuilding);
        menuBar.add(menuSystem);
        menuBar.add(menuOperations);
        this.setJMenuBar(menuBar);
        JPanel listTermOptionsPanel = new JPanel();
        {
            TableLayout listTermOptionsPanelLayout = new TableLayout(new double[][] { { 10, 125, 150, 10, TableLayout.PREFERRED, 10 }, { 5, 25, 25 } });
            listTermOptionsPanel.setLayout(listTermOptionsPanelLayout);
            JLabel fieldsLabel = new JLabel(""Available Fields"");
            fieldsCombo = new JComboBox();
            if (searchService == null) {
                fieldsCombo.setEnabled(false);
            } else {
                fieldsCombo.setEnabled(true);
            }
            JLabel virtIndexLabel = new JLabel(""Virtual Index"");
            virtIndexCombo = new JComboBox();
            if (searchService == null) {
                virtIndexCombo.setEnabled(false);
            } else {
                virtIndexCombo.setEnabled(true);
            }
            listContentButton = new JButton(""list content"");
            listContentButton.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    SearchHandler searchHandler = new SearchHandler(PanFmpGui.this.searchService, PanFmpGui.this.virtIndexCombo.getSelectedItem().toString(), PanFmpGui.this.fieldsCombo.getSelectedItem().toString(), Integer.parseInt(prop.getProperty(""numberOfResults"")));
                    try {
                        String[] searchArray = searchHandler.listTerms();
                        PanFmpGui.this.status.setText(searchArray.length + "" entries found"");
                        StringBuffer resultBuffer = new StringBuffer();
                        for (String result : searchArray) {
                            resultBuffer.append(result + ""\n"");
                        }
                        PanFmpGui.this.textArea.setText(resultBuffer.toString());
                    } catch (Exception ex) {
                        System.out.println(ex);
                    }
                }
            });
            if (searchService == null) {
                listContentButton.setEnabled(false);
            } else {
                listContentButton.setEnabled(true);
            }
            listTermOptionsPanel.add(fieldsLabel, ""1, 1"");
            listTermOptionsPanel.add(fieldsCombo, ""2, 1"");
            listTermOptionsPanel.add(virtIndexLabel, ""1, 2"");
            listTermOptionsPanel.add(virtIndexCombo, ""2, 2"");
            listTermOptionsPanel.add(listContentButton, ""4, 1"");
        }
        gbc = new GridBagConstraints();
        textArea = new JTextArea(20, 66);
        JScrollPane listTermsScrollPane = new JScrollPane(textArea);
        textArea.setEditable(false);
        JPanel listTerms = new JPanel();
        TableLayout listTermsLayout = new TableLayout(new double[][] { { 10, TableLayout.FILL, 10 }, { 10, 80, TableLayout.FILL, 10 } });
        listTermsLayout.setHGap(5);
        listTermsLayout.setVGap(5);
        listTerms.setLayout(listTermsLayout);
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.NORTHWEST;
        listTerms.add(listTermOptionsPanel, ""1, 1"");
        gbc.ipady = 20;
        gbc.gridx = 0;
        gbc.gridy = 1;
        listTerms.add(listTermsScrollPane, ""1, 2"");
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.addTab(""List Terms"", null, listTerms, ""Lists all index entries of a field"");
        tabbedPane.setMnemonicAt(0, KeyEvent.VK_1);
        tabbedPane.setEnabledAt(0, true);
        JPanel searchIndex = new JPanel();
        {
            searchIndex.setLayout(new GridLayout());
            JPanel freeSearch = new JPanel();
            {
                freeSearch.setLayout(new GridBagLayout());
                freeSearchInputTextArea = new JTextArea(5, 40);
                JScrollPane scrollPane = new JScrollPane(freeSearchInputTextArea);
                freeSearchInputTextArea.setEditable(true);
                gbc = new GridBagConstraints();
                gbc.gridx = 0;
                gbc.gridy = 0;
                freeSearch.add(scrollPane, gbc);
                freeSearchButton = new JButton(""start search"");
                freeSearchButton.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        SearchHandler searchHandler = new SearchHandler(PanFmpGui.this.searchService, ""dataportal-c3grid"", PanFmpGui.this.fieldsCombo.getSelectedItem().toString(), PanFmpGui.this.freeSearchInputTextArea.getText(), Integer.parseInt(prop.get(""numberOfResults"").toString()));
                        try {
                            SearchResponse searchResponse = searchHandler.freeSearch();
                            SearchResponseItem[] searchResponseItems = searchResponse.getResults();
                            StringBuffer buffer = new StringBuffer("""");
                            buffer.append(searchResponse.getTotalCount() + ""\n"");
                            for (SearchResponseItem sResItem : searchResponseItems) {
                                buffer.append(sResItem.getIdentifier() + ""\n"");
                            }
                            PanFmpGui.this.freeSearchOutputTextArea.setText(buffer.toString());
                        } catch (Exception ex) {
                            System.out.println(ex);
                        }
                    }
                });
                gbc = new GridBagConstraints();
                gbc.gridx = 1;
                gbc.gridy = 0;
                gbc.gridwidth = GridBagConstraints.REMAINDER;
                freeSearch.add(freeSearchButton, new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
                freeSearchOutputTextArea = new JTextArea(20, 60);
                scrollPane = new JScrollPane(freeSearchOutputTextArea);
                freeSearchOutputTextArea.setEditable(false);
                gbc = new GridBagConstraints();
                gbc.ipady = 20;
                gbc.gridx = 0;
                gbc.gridy = 1;
                gbc.gridwidth = GridBagConstraints.REMAINDER;
                freeSearch.add(scrollPane, gbc);
            }
            JTabbedPane searchIndexTabbedPane = new JTabbedPane();
            searchIndexTabbedPane.addTab(""Field Search"", new JLabel());
            searchIndexTabbedPane.setEnabledAt(0, true);
            searchIndexTabbedPane.addTab(""Free Search"", freeSearch);
            searchIndexTabbedPane.setEnabledAt(1, true);
            gbc = new GridBagConstraints();
            gbc.anchor = GridBagConstraints.FIRST_LINE_START;
            searchIndex.add(searchIndexTabbedPane, gbc);
        }
        tabbedPane.addTab(""Search in Index"", null, searchIndex, ""Does twice as much nothing"");
        tabbedPane.setMnemonicAt(1, KeyEvent.VK_2);
        tabbedPane.setEnabledAt(1, true);
        JPanel panel3 = new JPanel();
        tabbedPane.addTab(""Edit Config File"", null, panel3, ""Still does nothing"");
        {
            jPanel1 = new JPanel();
            panel3.add(jPanel1);
            TableLayout jPanel1Layout = new TableLayout(new double[][] { { TableLayout.FILL, TableLayout.FILL, TableLayout.FILL, TableLayout.FILL }, { 126.0, TableLayout.FILL, TableLayout.FILL, TableLayout.FILL } });
            jPanel1Layout.setHGap(5);
            jPanel1Layout.setVGap(5);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1.setPreferredSize(new java.awt.Dimension(447, 141));
            jPanel1.setSize(PanFmpGui.this.getWidth() - 20, 141);
        }
        tabbedPane.setMnemonicAt(2, KeyEvent.VK_3);
        tabbedPane.setEnabledAt(2, true);
        this.add(tabbedPane);
        this.add(new JSeparator(), BorderLayout.SOUTH);
        this.status = new JLabel(""Status"");
        this.add(this.status, BorderLayout.SOUTH);
    }","    public String getTargetCompilationUnitContents() {
        String result = null;
        if (getControlModel().getFacadeHelper() != null && (!targetCompilationUnitExists || !targetCompilationChanged)) {
            result = getControlModel().getFacadeHelper().getOriginalContents(targetCompilationUnit);
        }
        if (result == null) {
            result = targetCompilationUnit.getContents();
        }
        if (fixInterfaceBrace) {
            if (interfaceBracePattern == null) {
                interfaceBracePattern = Pattern.compile(""(?:\\n\\r|\\r\\n|\\n|\\r)(\\s*)(?:public|private|protected|static|\\s)*(?:interface|class)\\s*[^\\{\\n\\r]*(\\{)(\\n\\r|\\r\\n|\\n|\\r)"", Pattern.MULTILINE);
            }
            Matcher matcher = interfaceBracePattern.matcher(result);
            int offset = 0;
            while (matcher.find()) {
                if (getControlModel().standardBraceStyle) {
                    if (result.charAt(matcher.start(2) - 1) != ' ') {
                        result = result.substring(0, offset + matcher.start(2)) + "" {"" + result.substring(offset + matcher.end(2), result.length());
                        offset += 1;
                    }
                } else {
                    result = result.substring(0, offset + matcher.start(2)) + matcher.group(3) + matcher.group(1) + ""{"" + result.substring(offset + matcher.end(2), result.length());
                    offset += matcher.group(1).length() + matcher.group(3).length();
                }
            }
        }
        return result;
    }",0,0
"    private void checkForUpdates() throws Exception {
        URL url = new URL(UIDefaults.LATEST_VERSION_URL);
        BufferedReader in = null;
        try {
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            int status = conn.getResponseCode();
            if (status == 200) {
                in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder str = new StringBuilder();
                while (true) {
                    String line = in.readLine();
                    if (line == null) break;
                    str.append(line);
                }
                net.mjrz.fm.Version v = net.mjrz.fm.Version.getVersion();
                if (v.isVersionGreater(str.toString())) {
                    int n = JOptionPane.showConfirmDialog(this, ""A updated version is available\nDo you want to download the latest version?"", ""Message"", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (n == JOptionPane.YES_OPTION) {
                        java.awt.Desktop d = Desktop.getDesktop();
                        if (Desktop.isDesktopSupported()) {
                            d.browse(new URI(""http://www.ifreebudget.com/dl.html""));
                        }
                    }
                } else {
                    SwingUtilities.invokeLater(new Runnable() {

                        public void run() {
                            JOptionPane.showMessageDialog(AboutDialog.this, ""There are no new updates"");
                        }
                    });
                }
            } else {
                SwingUtilities.invokeLater(new Runnable() {

                    public void run() {
                        JOptionPane.showMessageDialog(AboutDialog.this, ""Unable to get latest version, Please check network connection"", ""Error"", JOptionPane.ERROR_MESSAGE);
                    }
                });
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }","    protected void processRequest(ChannelMap fwdData, PlugInChannelMap out) throws SAPIException {
        String[] chanList = out.GetChannelList();
        String requestChanStr = chanList[0];
        if (requestChanStr.endsWith(""/"")) {
            requestChanStr = requestChanStr.substring(0, requestChanStr.length() - 1);
        }
        System.err.println((new Date()).toString() + ""  Source: "" + requestChanStr);
        ChannelMap reqMap = new ChannelMap();
        reqMap.Add(requestChanStr + ""/Altitude"");
        reqMap.Add(requestChanStr + ""/Latitude"");
        reqMap.Add(requestChanStr + ""/Longitude"");
        reqMap.Add(requestChanStr + ""/GroundSpeed"");
        reqMap.Add(requestChanStr + ""/Heading"");
        sink.Request(reqMap, 0, 0, ""newest"");
        ChannelMap dataMap = sink.Fetch(60000);
        int altIndex = dataMap.GetIndex(requestChanStr + ""/Altitude"");
        double alt = 0.0;
        if (dataMap.GetType(altIndex) == ChannelMap.TYPE_FLOAT64) {
            alt = dataMap.GetDataAsFloat64(altIndex)[0];
        } else if (dataMap.GetType(altIndex) == ChannelMap.TYPE_FLOAT32) {
            alt = (double) dataMap.GetDataAsFloat32(altIndex)[0];
        }
        int latIndex = dataMap.GetIndex(requestChanStr + ""/Latitude"");
        double lat = 0.0;
        if (dataMap.GetType(latIndex) == ChannelMap.TYPE_FLOAT64) {
            lat = dataMap.GetDataAsFloat64(latIndex)[0];
        } else if (dataMap.GetType(latIndex) == ChannelMap.TYPE_FLOAT32) {
            lat = (double) dataMap.GetDataAsFloat32(latIndex)[0];
        }
        int lonIndex = dataMap.GetIndex(requestChanStr + ""/Longitude"");
        double lon = 0.0;
        if (dataMap.GetType(lonIndex) == ChannelMap.TYPE_FLOAT64) {
            lon = dataMap.GetDataAsFloat64(lonIndex)[0];
        } else if (dataMap.GetType(lonIndex) == ChannelMap.TYPE_FLOAT32) {
            lon = (double) dataMap.GetDataAsFloat32(lonIndex)[0];
        }
        int gsIndex = dataMap.GetIndex(requestChanStr + ""/GroundSpeed"");
        double gs = 0.0;
        if (dataMap.GetType(gsIndex) == ChannelMap.TYPE_FLOAT64) {
            gs = dataMap.GetDataAsFloat64(gsIndex)[0];
        } else if (dataMap.GetType(gsIndex) == ChannelMap.TYPE_FLOAT32) {
            gs = (double) dataMap.GetDataAsFloat32(gsIndex)[0];
        }
        int headIndex = dataMap.GetIndex(requestChanStr + ""/Heading"");
        double heading = 0.0;
        if (dataMap.GetType(headIndex) == ChannelMap.TYPE_FLOAT64) {
            heading = dataMap.GetDataAsFloat64(headIndex)[0];
        } else if (dataMap.GetType(headIndex) == ChannelMap.TYPE_FLOAT32) {
            heading = (double) dataMap.GetDataAsFloat32(headIndex)[0];
        }
        double dataTime = dataMap.GetTimes(altIndex)[0];
        double currTime = System.currentTimeMillis() / 1000.0;
        double latency = currTime - dataTime;
        boolean bMaxLatencyExceeded = false;
        if (latency > maxLatency) {
            latency = maxLatency;
            bMaxLatencyExceeded = true;
        }
        double radius = latency * gs;
        String kmlStr = createDRCircle(lat, lon, alt, radius, heading, bMaxLatencyExceeded);
        out.PutTime(System.currentTimeMillis() / 1000.0, out.GetRequestDuration());
        if (!bKMZ) {
            out.PutDataAsString(0, kmlStr);
            out.PutMime(0, ""application/vnd.google-earth.kml+xml"");
        } else {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            try {
                ZipOutputStream zos = new ZipOutputStream(baos);
                ZipEntry ze = new ZipEntry(""doc.kml"");
                zos.setMethod(ZipOutputStream.DEFLATED);
                zos.setLevel(Deflater.DEFAULT_COMPRESSION);
                zos.putNextEntry(ze);
                byte[] kmlBytes = kmlStr.getBytes();
                zos.write(kmlBytes, 0, kmlBytes.length);
                zos.close();
                out.PutDataAsByteArray(0, baos.toByteArray());
                out.PutMime(0, ""application/vnd.google-earth.kmz"");
            } catch (Exception ex) {
                System.err.println(""Exception generating KMZ: "" + ex.getMessage());
                throw new SAPIException(""Exception generating KMZ"");
            }
        }
    }",0,0
"    public static String replacePlaceholders(String str, String placeholder, String replacement) {
        StringBuffer sb = new StringBuffer();
        Pattern pattern = Pattern.compile(""(\\$\\{"" + placeholder + ""\\})"");
        int lastIndex = 0;
        Matcher m = pattern.matcher(str);
        while (m.find()) {
            sb.append(str.substring(lastIndex, m.start()));
            sb.append(replacement);
            lastIndex = m.end();
        }
        sb.append(str.substring(lastIndex));
        return sb.toString();
    }","    protected final void showMsg(final String msg, final boolean quit) {
        final JPanel p = new JPanel();
        p.setLayout(new GridBagLayout());
        final GridBagConstraints c = new GridBagConstraints();
        c.insets = new Insets(10, 10, 10, 10);
        c.gridx = 0;
        c.gridy = 0;
        c.fill = GridBagConstraints.BOTH;
        final JImage im = new JImage(new ImageIcon(this.getClass().getResource(""error.png"")));
        final JLabel l = new JLabel(""Une erreur est survenue"");
        l.setFont(l.getFont().deriveFont(Font.BOLD));
        final JLabel lError = new JLabel(msg);
        final JTextArea textArea = new JTextArea();
        textArea.setFont(textArea.getFont().deriveFont(11f));
        c.gridheight = 3;
        p.add(im, c);
        c.insets = new Insets(2, 4, 2, 4);
        c.gridheight = 1;
        c.gridx++;
        c.weightx = 1;
        c.gridwidth = 2;
        p.add(l, c);
        c.gridy++;
        p.add(lError, c);
        c.gridy++;
        p.add(new JLabel(""Il s'agit probablement d'une mauvaise configuration ou installation du logiciel.""), c);
        c.gridx = 0;
        c.gridwidth = 3;
        c.gridy++;
        c.weighty = 0;
        c.gridwidth = 1;
        c.gridx = 1;
        c.gridy++;
        c.fill = GridBagConstraints.NONE;
        c.anchor = GridBagConstraints.EAST;
        final Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        final boolean browseSupported = desktop != null && desktop.isSupported(Action.BROWSE);
        if (ForumURL != null) {
            final javax.swing.Action communityAction;
            if (browseSupported) {
                communityAction = new AbstractAction(""Consulter le forum"") {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        try {
                            desktop.browse(new URI(ForumURL));
                        } catch (Exception e1) {
                            e1.printStackTrace();
                        }
                    }
                };
            } else {
                communityAction = new AbstractAction(""Copier l'adresse du forum"") {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        copyToClipboard(ForumURL);
                    }
                };
            }
            p.add(new JButton(communityAction), c);
        }
        c.weightx = 0;
        c.gridx++;
        final javax.swing.Action supportAction;
        if (browseSupported) supportAction = new AbstractAction(""Contacter l'assistance"") {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    desktop.browse(URI.create(ILM_CONTACT));
                } catch (Exception e1) {
                    e1.printStackTrace();
                }
            }
        }; else supportAction = new AbstractAction(""Copier l'adresse de l'assistance"") {

            @Override
            public void actionPerformed(ActionEvent e) {
                copyToClipboard(ILM_CONTACT);
            }
        };
        p.add(new JButton(supportAction), c);
        c.gridy++;
        c.gridx = 0;
        c.gridwidth = 3;
        c.fill = GridBagConstraints.BOTH;
        c.insets = new Insets(0, 0, 0, 0);
        p.add(new JSeparator(), c);
        c.gridx = 0;
        c.gridwidth = 3;
        c.gridy++;
        c.insets = new Insets(2, 4, 2, 4);
        p.add(new JLabel(""Détails de l'erreur:""), c);
        c.insets = new Insets(0, 0, 0, 0);
        c.gridy++;
        String message = this.getCause() == null ? null : this.getCause().getMessage();
        if (message == null) {
            message = msg;
        } else {
            message = msg + ""\n\n"" + message;
        }
        message += ""\n"";
        message += getTrace();
        textArea.setText(message);
        textArea.setEditable(false);
        JScrollPane scroll = new JScrollPane(textArea);
        scroll.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scroll.getViewport().setMinimumSize(new Dimension(200, 300));
        c.weighty = 1;
        c.gridwidth = 3;
        c.gridx = 0;
        c.gridy++;
        p.add(scroll, c);
        c.gridy++;
        c.fill = GridBagConstraints.NONE;
        c.weighty = 0;
        c.insets = new Insets(2, 4, 2, 4);
        final JButton buttonClose = new JButton(""Fermer"");
        p.add(buttonClose, c);
        final Window window = this.comp == null ? null : SwingUtilities.getWindowAncestor(this.comp);
        final JDialog f;
        if (window instanceof Frame) {
            f = new JDialog((Frame) window, ""Erreur"", true);
        } else {
            f = new JDialog((Dialog) window, ""Erreur"", true);
        }
        f.setContentPane(p);
        f.pack();
        f.setSize(580, 680);
        f.setMinimumSize(new Dimension(380, 380));
        f.setLocationRelativeTo(this.comp);
        final ActionListener al = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (quit) {
                    System.exit(1);
                } else {
                    f.dispose();
                }
            }
        };
        buttonClose.addActionListener(al);
        f.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                al.actionPerformed(null);
            }
        });
        f.setVisible(true);
    }",0,0
"    public static void main(String[] args) throws Exception {
        Class.forName(""com.mysql.jdbc.Driver"").newInstance();
        Connection conn = DriverManager.getConnection(""jdbc:mysql://127.0.0.1:3306/mysql"", ""root"", ""admin"");
        new DataStorm().show(conn, ""SELECT * FROM help_topic h;"");
    }","    public static Object[] remove(Object[] source, int begin, int end) {
        Object[] copy = (Object[]) Array.newInstance(source.getClass().getComponentType(), source.length - (end - begin));
        System.arraycopy(source, 0, copy, 0, begin);
        System.arraycopy(source, end + 1, copy, begin, source.length - (end - begin));
        return copy;
    }",0,0
"    public ArrayList<Tupla> desmembrar(String miCadena) {
        ArrayList<Tupla> miArrayList = new ArrayList<Tupla>();
        String palabraEncajada = new String();
        Boolean valorBooleano;
        Pattern patron = Pattern.compile(palabrasSeparadorasRegex);
        Matcher encaja = patron.matcher(miCadena);
        while (encaja.find()) {
            palabraEncajada = miCadena.substring(encaja.start(), encaja.end());
            if (palabrasSeparadoras.contains(String.valueOf(palabraEncajada.charAt(0)))) {
                valorBooleano = true;
            } else {
                valorBooleano = false;
            }
            miArrayList.add(new Tupla(palabraEncajada, valorBooleano));
        }
        return miArrayList;
    }","    void makePlots() throws IOException {
        Process proc = Runtime.getRuntime().exec(""GNUplot"");
        if (proc == null) {
            System.out.println(""Error opening GNUplot- it may not be installed or else path variable is not set"");
            System.out.println(""Cannot create sexy graphs"");
            return;
        }
        OutputStream os = proc.getOutputStream();
        PrintStream ps = new PrintStream(os);
        makeCutoffPlotFile(ps);
        ps.close();
    }",0,0
"    public String fetchSpecificText(String regularExpress, String contents) {
        String resultStr = """";
        try {
            Pattern p = Pattern.compile(regularExpress);
            Matcher matcher = p.matcher(contents);
            String startTag = regularExpress.substring(0, regularExpress.indexOf(""[""));
            String endTag = regularExpress.substring(regularExpress.indexOf(""]""), regularExpress.length());
            while (matcher.find()) {
                int start = matcher.start();
                int end = matcher.end();
                String match = contents.substring(start, end);
                resultStr = match.replaceAll(startTag, """").replaceAll(endTag, """");
            }
        } catch (Exception ex) {
            this.logAffectuException(ex, ""fetchSpecificText出错:"" + contents);
        }
        return resultStr;
    }","    protected double calculateLogLikelihood(double[][] X, double[] Y, Matrix jacobian, double[] deltas) {
        double LL = 0;
        double[][] Arr = new double[jacobian.rows][jacobian.rows];
        for (int j = 0; j < Arr.length; j++) {
            for (int k = 0; k < Arr.length; k++) {
                Arr[j][k] = 0;
            }
            deltas[j] = 0;
        }
        for (int i = 0; i < X.length; i++) {
            double p = evaluateProbability(X[i]);
            if (Y[i] == 1) {
                LL = LL - 2 * Math.log(p);
            } else {
                LL = LL - 2 * Math.log(1 - p);
            }
            double w = p * (1 - p);
            double z = (Y[i] - p);
            for (int j = 0; j < Arr.length; j++) {
                double xij = X[i][j];
                deltas[j] += xij * z;
                for (int k = j; k < Arr.length; k++) {
                    Arr[j][k] += xij * X[i][k] * w;
                }
            }
        }
        for (int j = 0; j < m_Par.length; j++) {
            deltas[j] -= 2 * m_Ridge * m_Par[j];
        }
        for (int j = 0; j < Arr.length; j++) {
            Arr[j][j] += 2 * m_Ridge;
        }
        for (int j = 1; j < Arr.length; j++) {
            for (int k = 0; k < j; k++) {
                Arr[j][k] = Arr[k][j];
            }
        }
        for (int j = 0; j < Arr.length; j++) {
            jacobian.setRow(j, Arr[j]);
        }
        return LL;
    }",0,0
"    private byte[] getIHDRBytes(BufferedImage image) {
        byte bitDepth;
        byte colorType;
        int imageType = image.getType();
        switch(imageType) {
            case BufferedImage.TYPE_3BYTE_BGR:
            case BufferedImage.TYPE_INT_BGR:
            case BufferedImage.TYPE_INT_RGB:
            case BufferedImage.TYPE_USHORT_555_RGB:
            case BufferedImage.TYPE_USHORT_565_RGB:
                bitDepth = 8;
                colorType = 2;
                break;
            case BufferedImage.TYPE_4BYTE_ABGR:
            case BufferedImage.TYPE_INT_ARGB:
                bitDepth = 8;
                colorType = 6;
                break;
            case BufferedImage.TYPE_BYTE_INDEXED:
                bitDepth = 8;
                colorType = 3;
                break;
            case BufferedImage.TYPE_BYTE_GRAY:
                bitDepth = 8;
                colorType = 0;
                break;
            case BufferedImage.TYPE_USHORT_GRAY:
                bitDepth = 16;
                colorType = 0;
                break;
            case BufferedImage.TYPE_BYTE_BINARY:
            case BufferedImage.TYPE_4BYTE_ABGR_PRE:
            case BufferedImage.TYPE_INT_ARGB_PRE:
            case BufferedImage.TYPE_CUSTOM:
            default:
                throw new RuntimeException(""Unsupported image type"");
        }
        byte compressionMethod = 0;
        byte filterMethod = 0;
        byte interlaceMethod = 0;
        byte[] array = new byte[25];
        ByteBuffer buffer = ByteBuffer.wrap(array);
        buffer.putInt(13);
        buffer.put(getISO8859_1Bytes(CHUNK_TYPE_IHDR));
        buffer.putInt(image.getWidth());
        buffer.putInt(image.getHeight());
        buffer.put(bitDepth);
        buffer.put(colorType);
        buffer.put(compressionMethod);
        buffer.put(filterMethod);
        buffer.put(interlaceMethod);
        CRC32 crc = new CRC32();
        crc.update(array, 4, 17);
        buffer.putInt((int) crc.getValue());
        return array;
    }","    public static int fibonacci(int broj) {
        if (broj <= 1) return broj; else return fibonacci(broj - 1) + fibonacci(broj - 2);
    }",0,0
"    private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fileChooser = new JFileChooser();
        ExampleFileFilter filter = new ExampleFileFilter(new String[] { ""qc"" }, ""quantum circuits"");
        fileChooser.addChoosableFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            ObjectInputStream input = null;
            try {
                input = new ObjectInputStream(new FileInputStream(file));
                try {
                    int[] size = (int[]) input.readObject();
                    circuitPanel.setWires(size[0], size[1]);
                    circuitPanel.gates = (ArrayList) input.readObject();
                    initialQubits = ((QuantumGate) circuitPanel.gates.get(0)).qubits;
                    xRegisterSize = size[0];
                    yRegisterSize = size[1];
                    xRegister = new Register(xRegisterSize);
                    yRegister = new Register(yRegisterSize);
                    int initialState = 0;
                    for (int i = 0; i < xRegisterSize; i++) {
                        int k = xRegisterSize - i - 1;
                        initialState += initialQubits[k] * (1 << i);
                    }
                    double[] tmp = new double[1 << xRegisterSize];
                    tmp[initialState] = 1;
                    xRegister.real = tmp;
                    initialState = 0;
                    for (int i = 0; i < yRegisterSize; i++) {
                        int k = xRegisterSize + yRegisterSize - i - 1;
                        initialState += initialQubits[k] * (1 << i);
                    }
                    tmp = new double[1 << yRegisterSize];
                    tmp[initialState] = 1;
                    yRegister.real = tmp;
                    circuitPanel.repaint();
                    xPanel.setLengthColoring(lengthColoring);
                    yPanel.setLengthColoring(lengthColoring);
                    xPanel.setQubitStates(xRegister.real, xRegister.imaginary);
                    yPanel.setQubitStates(yRegister.real, yRegister.imaginary);
                } catch (ClassNotFoundException cnf) {
                    String title = ""File Error"";
                    String message = ""The file "" + file.getName() + "" does not contain a circuit!"";
                    JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
                } catch (ClassCastException cce) {
                    String title = ""File Error"";
                    String message = ""The file "" + file.getName() + "" does not contain a circuit or has the wrong format!"";
                    JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
                } catch (EOFException eof) {
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                try {
                    if (input != null) input.close();
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            }
        }
    }","    public static void main(String args[]) {
        String url = ""jdbc:timesten:direct:DSN=soppreproDSN;uid=sop_prepro;pwd=sop_prepro;oraclepwd=sop_prepro"";
        Connection con;
        String createString;
        Format formatter = new SimpleDateFormat(""hh:mm:ss.SSS"");
        long first = Long.parseLong(args[0]);
        long second = Long.parseLong(args[1]);
        createString = ""select sec_global,Mensaje from FED_TMENSAJES_CF "" + "" where SEC_GLOBAL between "" + first + "" and "" + second + "" order by sec_global"";
        System.out.println(createString);
        Statement stmt;
        try {
            Class.forName(""com.timesten.jdbc.TimesTenDriver"");
        } catch (java.lang.ClassNotFoundException e) {
            System.err.print(""ClassNotFoundException: "");
            System.err.println(e.getMessage());
        }
        try {
            con = DriverManager.getConnection(url, ""sop_prepro"", ""sop_prepro"");
            stmt = con.createStatement();
            stmt.executeUpdate(createString);
            ResultSet rs = stmt.executeQuery(createString);
            try {
                Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""Msg_"" + args[0] + ""-"" + args[1] + "".txt""), ""UTF8""));
                while (rs.next()) {
                    out.write(rs.getString(2).trim() + ""\n"");
                }
                out.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            rs.close();
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            System.err.println(""SQLException: "" + ex.getMessage());
        }
    }",0,0
"    private String normalizeUnicode(String string) {
        Pattern pattern = Pattern.compile(""(\\\\u([0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]))|(#(29|30|31);)"");
        Matcher matcher = pattern.matcher(string);
        StringBuffer result = new StringBuffer();
        int prevEnd = 0;
        while (matcher.find()) {
            result.append(string.substring(prevEnd, matcher.start()));
            result.append(getChar(matcher.group()));
            prevEnd = matcher.end();
        }
        result.append(string.substring(prevEnd));
        string = result.toString();
        return (string);
    }","    public static void help(String s) {
        String url = ""http://www.jcpsim.org/"" + s + "".html"";
        logger.info(""HELP: "" + url);
        BasicService basicService = null;
        try {
            basicService = (BasicService) ServiceManager.lookup(""javax.jnlp.BasicService"");
        } catch (UnavailableServiceException use) {
            logger.info(""Java Web Start Services are unavailable."");
        }
        if (basicService != null) {
            logger.info(basicService.getCodeBase().toString());
            try {
                basicService.showDocument(new java.net.URL(url));
            } catch (java.net.MalformedURLException e) {
                logger.info(""Malformed URL: "" + e.toString());
            }
        } else {
            if ((System.getProperty(""java.version"").startsWith(""1.6""))) {
                if (Desktop.isDesktopSupported()) {
                    if (Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                        try {
                            Desktop.getDesktop().browse(new java.net.URI(url));
                        } catch (IOException ioe) {
                            ioe.printStackTrace();
                        } catch (URISyntaxException use) {
                            use.printStackTrace();
                        }
                    }
                }
            }
        }
    }",0,0
"    public String checkString(String s) {
        Pattern p = null;
        Matcher m = null;
        int start = 0;
        int end = 0;
        for (int i = 0; i < comps.size(); i++) {
            try {
                p = Pattern.compile(comps.get(i));
            } catch (PatternSyntaxException pse) {
                ;
            }
            m = p.matcher(s);
            while (m.find()) {
                start = m.start();
                end = m.end();
                if (start == 0 && end == s.length()) {
                    s = reps.get(i);
                } else if (start == 0) {
                    s = reps.get(i) + s.substring(end);
                } else if (end == s.length()) {
                    s = s.substring(0, start) + reps.get(i);
                } else {
                    s = s.substring(0, start) + reps.get(i) + s.substring(end);
                }
            }
        }
        return s;
    }","    public GCGCDatum[][] toArray() {
        GCGCDatum tempArray[][] = new GCGCDatum[getNumberRows()][];
        GCGCDatum returnedArray[][] = new GCGCDatum[getNumberCols()][getNumberRows()];
        for (int i = 0; i < getNumberRows(); i++) {
            tempArray[i] = ((List<GCGCDatum>) peakList.get(i).getVar(""getDatumArray"")).toArray(new GCGCDatum[0]);
        }
        for (int i = 0; i < getNumberRows(); i++) {
            for (int j = 0; j < getNumberCols(); j++) {
                returnedArray[j][i] = tempArray[i][j];
            }
        }
        return returnedArray;
    }",0,0
"    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        res.setContentType(""text/html"");
        PrintWriter out = res.getWriter();
        out.println(""<html><head><title>Student File</title></head><body bgcolor=\""turquoise\"">"");
        int err = 0;
        if (req.getParameter(""add"") != null) {
            out.println(""<center><h1>Student</h1></center><hr>"");
            out.println(""<b>Add Record</b><br><br><form method=\""POST\"">"");
            out.println(""Name: <input type=\""text\"" name=\""name\"">"");
            out.println(""Address: <input type=\""text\"" name=\""address\"">"");
            out.println(""Phone: <input type=\""text\"" name=\""phone\"">"");
            out.println(""<br><br><input type=\""submit\"" name=\""addrecord\"" value=\""Addrecord\"">"");
            out.println(""<input type=\""submit\"" name=\""cancel\"" value=\""Cancel\"">"");
            out.println(""</form>"");
        } else if (req.getParameter(""cancel"") != null) {
            res.sendRedirect(""http://localhost:8080/Jeff"");
        } else if (req.getParameter(""addrecord"") != null) {
            Connection con;
            String dbsource = ""jdbc:odbc:jdbctest"";
            String drv = ""sun.jdbc.odbc.JdbcOdbcDriver"";
            String duser = ""root"";
            String dpass = """";
            String defaultquery = ""insert into student values('"" + req.getParameter(""name"") + ""','"" + req.getParameter(""address"") + ""','"" + req.getParameter(""phone"") + ""')"";
            try {
                con = DriverManager.getConnection(dbsource, duser, dpass);
                Statement stm = con.createStatement();
                int a = stm.executeUpdate(defaultquery);
                con.close();
            } catch (SQLException ex) {
                System.out.println(""SQL EXCEPTION:"" + ex.getMessage());
                out.println(""ERROR"");
                err++;
            } finally {
                if (err == 0) {
                    JOptionPane.showMessageDialog(null, ""RECORD ADDED"");
                    res.sendRedirect(""http://localhost:8080/Exercise2/Student"");
                }
            }
        } else if (req.getParameter(""update"") != null) {
            out.println(""<center><h1>Student</h1></center><hr>"");
            out.println(""<b>Update Record</b><br><br><form method=\""POST\"">"");
            out.println(""Name: <input type=\""text\"" name=\""name\"" value=\"""" + req.getParameter(""name"") + ""\"">"");
            out.println(""<input type=\""hidden\"" name=\""pname\"" value=\"""" + req.getParameter(""name"") + ""\"">"");
            out.println(""Address: <input type=\""text\"" name=\""address\"" value=\"""" + req.getParameter(""address"") + ""\"">"");
            out.println(""<input type=\""hidden\"" name=\""paddress\"" value=\"""" + req.getParameter(""address"") + ""\"">"");
            out.println(""Phone: <input type=\""text\"" name=\""phone\""value=\"""" + req.getParameter(""phone"") + ""\"">"");
            out.println(""<input type=\""hidden\"" name=\""pphone\""value=\"""" + req.getParameter(""phone"") + ""\"">"");
            out.println(""<br><br><input type=\""submit\"" name=\""uprecord\"" value=\""Save Changes\"">"");
            out.println(""<input type=\""submit\"" name=\""cancel\"" value=\""Cancel\"">"");
            out.println(""</form>"");
        } else if (req.getParameter(""uprecord"") != null) {
            Connection con;
            String dbsource = ""jdbc:odbc:jdbctest"";
            String drv = ""sun.jdbc.odbc.JdbcOdbcDriver"";
            String duser = ""root"";
            String dpass = """";
            String defaultquery = ""update student set name='"" + req.getParameter(""name"") + ""', address='"" + req.getParameter(""address"") + ""', phone='"" + req.getParameter(""phone"") + ""'"" + "" where name='"" + req.getParameter(""pname"") + ""'and address='"" + req.getParameter(""paddress"") + ""'and phone='"" + req.getParameter(""pphone"") + ""'"";
            try {
                con = DriverManager.getConnection(dbsource, duser, dpass);
                Statement stm = con.createStatement();
                int a = stm.executeUpdate(defaultquery);
                con.close();
            } catch (SQLException ex) {
                System.out.println(""SQL EXCEPTION:"" + ex.getMessage());
                out.println(""ERROR"");
                err++;
            } finally {
                if (err == 0) {
                    JOptionPane.showMessageDialog(null, ""RECORD CHANGED"");
                    res.sendRedirect(""http://localhost:8080/Exercise2/Student"");
                }
            }
        } else if (req.getParameter(""delete"") != null) {
            int del = JOptionPane.showConfirmDialog(null, ""Do you want to delete this record?"");
            if (del == 0) {
                Connection con;
                String dbsource = ""jdbc:odbc:jdbctest"";
                String drv = ""sun.jdbc.odbc.JdbcOdbcDriver"";
                String duser = ""root"";
                String dpass = """";
                String defaultquery = ""delete from student  where name='"" + req.getParameter(""name"") + ""'and address='"" + req.getParameter(""address"") + ""'and phone='"" + req.getParameter(""phone"") + ""'"";
                try {
                    con = DriverManager.getConnection(dbsource, duser, dpass);
                    Statement stm = con.createStatement();
                    int a = stm.executeUpdate(defaultquery);
                    con.close();
                } catch (SQLException ex) {
                    System.out.println(""SQL EXCEPTION:"" + ex.getMessage());
                    out.println(""ERROR"");
                    err++;
                } finally {
                    if (err == 0) {
                        JOptionPane.showMessageDialog(null, ""RECORD DELETED"");
                        res.sendRedirect(""http://localhost:8080/Exercise2/Student"");
                    }
                }
            } else {
                res.sendRedirect(""http://localhost:8080/Exercise2/Student"");
            }
        }
        out.println(""</body></html>"");
    }","    public static <T> T[] removeFromArray(T[] array, T member) {
        int i;
        for (i = 0; i < array.length; i++) {
            if (array[i] == member) {
                break;
            }
        }
        if (i < array.length) {
            T[] newArray = (T[]) Array.newInstance(array.getClass().getComponentType(), array.length - 1);
            System.arraycopy(array, 0, newArray, 0, i);
            System.arraycopy(array, i + 1, newArray, i, array.length - i - 1);
            return newArray;
        }
        return array;
    }",0,0
"    public static SRPGAnimation makeObject(String fileName, int tileWidth, int tileHeight, LColor col) {
        String key = fileName.trim().toLowerCase();
        SRPGAnimation animation = (SRPGAnimation) animations.get(key);
        if (animation == null) {
            LImage image = GraphicsUtils.loadNotCacheImage(fileName);
            int c = col.getRGB();
            int wlength = image.getWidth() / tileWidth;
            int hlength = image.getHeight() / tileHeight;
            LImage[][] images = new LImage[wlength][hlength];
            Rect srcR = new Rect();
            Rect dstR = new Rect();
            Canvas canvas = GraphicsUtils.canvas;
            for (int y = 0; y < hlength; y++) {
                for (int x = 0; x < wlength; x++) {
                    Bitmap bitmap = Bitmap.createBitmap(tileWidth, tileHeight, Config.ARGB_4444);
                    srcR.set((x * tileWidth), (y * tileHeight), tileWidth + (x * tileWidth), tileHeight + (y * tileHeight));
                    dstR.set(0, 0, tileWidth, tileHeight);
                    canvas.setBitmap(bitmap);
                    canvas.drawBitmap(image.getBitmap(), srcR, dstR, null);
                    images[x][y] = new LImage(bitmap);
                    LImage tmp = images[x][y];
                    int[] pixels = tmp.getPixels();
                    int size = pixels.length;
                    for (int i = 0; i < size; i++) {
                        if (pixels[i] == c) {
                            pixels[i] = 0xffffff;
                        }
                    }
                    tmp.setPixels(pixels, tmp.getWidth(), tmp.getHeight());
                }
            }
            LImage[][] result = new LImage[hlength][wlength];
            for (int y = 0; y < wlength; y++) {
                for (int x = 0; x < hlength; x++) {
                    result[x][y] = images[y][x];
                }
            }
            images = null;
            animations.put(key, animation = makeObject(result[0], result[1], result[3], result[2]));
        }
        return animation;
    }","    public static boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }",0,0
"    public FTPUtil(final String server) {
        log.debug(""~ftp.FTPUtil() : Creating object"");
        ftpClient = new FTPClient();
        try {
            ftpClient.connect(server);
            ftpClient.login(""anonymous"", """");
            ftpClient.setConnectTimeout(120000);
            ftpClient.setSoTimeout(120000);
            final int reply = ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                final String errMsg = ""Non-positive completion connecting FTPClient"";
                log.warn(""~ftp.FTPUtil() : ["" + errMsg + ""]"");
            }
        } catch (IOException ioe) {
            final String errMsg = ""Cannot connect and login to ftpClient ["" + ioe.getMessage() + ""]"";
            log.warn(""~ftp.FTPUtil() : ["" + errMsg + ""]"");
            ioe.printStackTrace();
        }
    }","
    public static int[] findLastRegExp2(String input, String regExp) throws java.util.regex.PatternSyntaxException {
        int[] out = new int[2];
        out[0] = -1;
        Pattern lbPattern = Pattern.compile(regExp);
        Matcher matcher = lbPattern.matcher(input);
        while (matcher.find()) {
            out[0] = matcher.start();
            out[1] = matcher.end();
        }
        return out;",0,0
"    public Object toArray() {
        final int length = Array.getLength(storage);
        final Object dst = Array.newInstance(getComponentType(), length);
        System.arraycopy(storage, 0, dst, 0, length);
        return dst;
    }","    public RobotList<Location> sort_incr_Location(RobotList<Location> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        Location cur_loc = this.getLocation();
        for (int i = 0; i < length; i++) {
            enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i)));
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value > enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Location> new_location_list = new RobotList<Location>(Location.class);
        for (int i = 0; i < length; i++) {
            new_location_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_location_list;
    }",0,0
"    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] append(T[] array0, T[] array1) {
        T[] array2 = (T[]) Array.newInstance(array0.getClass().getComponentType(), array0.length + array1.length);
        System.arraycopy(array0, 0, array2, 0, array0.length);
        System.arraycopy(array1, 0, array2, array0.length, array1.length);
        return array2;
    }",0,0
"    public DeskTopFrame() {
        setTitle(""DeskTop XML/ZIP Renderer"");
        setSize(DEFAULT_WIDTH, DEFAULT_HEIGHT);
        setLayout(new BorderLayout());
        setResizable(false);
        ActionListener validationListener = new ActionListener() {

            public void actionPerformed(ActionEvent event) {
                if (validation.isSelected()) validationMethod = ""ON""; else validationMethod = ""OFF"";
                if (strict.isSelected()) strictType = ""ON""; else strictType = ""OFF"";
            }
        };
        headerString = ""<html><center><h4>JAssess: A Java Implementation of IMS QTI Version 2</h4>"" + ""<h5>Developed by Graham Smith with support from UCLES and CARET </h5>"" + ""<h2>Desktop XML Test (MathAssess Version)</h2><h5>Developed by Graham Smith with support from JISC </h5></center></html>"";
        headerPanel = new JPanel();
        header = new JLabel(headerString);
        headerPanel.add(header);
        add(headerPanel, BorderLayout.NORTH);
        selectionPanel = new JPanel();
        selectionPanel.setLayout(new BorderLayout());
        selectionPanel.setSize(680, 20);
        border = BorderFactory.createLoweredBevelBorder();
        border2 = BorderFactory.createLineBorder(Color.BLACK, 2);
        selectionPanel.setBorder(border);
        Action = new JPanel();
        actionButton = new JButton(""Render XML File"");
        actionButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent event) {
                String InputFilename = fileNameField.getText();
                extension = getFileExtension(InputFilename).toUpperCase();
                inFile = new File(InputFilename);
                String testData = """";
                String testFileRoot = """";
                String testItemIdentifier = """";
                String homeDirectory = """";
                if (extension.equals(""XML"")) {
                    try {
                        XMLCaller = new XMLHandlercallerDT2();
                        output = XMLCaller.run(InputFilename, testItemIdentifier, IncludeInFilenamelist, validationMethod, strictType, testData, testFileRoot, homeDirectory);
                    } catch (gqtiexcept.VersionException e) {
                    }
                } else if (extension.equals(""ZIP"")) {
                    pkgeHandler = new PkgeHandlerDT();
                    PackageData packagedata = pkgeHandler.run(InputFilename, validationMethod, strictType, true);
                    String[] HTMFilePaths = packagedata.getFilePaths();
                    String[] HTMFileHrefs = packagedata.getFileHrefs();
                    for (int i2 = 0; i2 < HTMFilePaths.length; i2++) {
                        output = output + HTMFilePaths[i2] + ""\n"";
                        output = output + HTMFileHrefs[i2] + ""\n"";
                        output = output + ""\n\n"";
                    }
                } else if (inFile.isDirectory()) {
                    multipleHandler = new MultipleZipHandlerDT();
                    output = multipleHandler.run(InputFilename, validationMethod, strictType);
                } else {
                    JOptionPane.showMessageDialog(null, ""INVALID FILENAME: "" + fileNameField.getText(), ""Desktop XML Test"", JOptionPane.ERROR_MESSAGE);
                    output = ""INVALID FILENAME"" + InputFilename + "" "" + extension;
                }
                outputText.setText(output);
            }
        });
        Action.add(actionButton);
        XMLFilePanel = new JPanel();
        XMLFilePanel.setLayout(new BorderLayout());
        FileTypeSelectionPanel = new JPanel();
        typeGroup = new ButtonGroup();
        FileTypeSelectionPanel.add(new JLabel(""Type of File to be Rendered:""));
        addRadioButton(""XML"", true);
        addRadioButton(""ZIP (Content Packages and Packaged Tests)"", false);
        addRadioButton(""Directory"", false);
        MainXMLFilePanel = new JPanel();
        fileNameField = new JTextField(40);
        MainXMLFilePanel.add(new JLabel(""XML/ZIP File or Directory name:""));
        MainXMLFilePanel.add(fileNameField);
        fileOpenButton = new JButton(""Browse"");
        XMLFilechooser = new JFileChooser();
        XMLFilechooser.setCurrentDirectory(new File("".""));
        XMLFilechooser.addChoosableFileFilter(new XMLFilter());
        XMLFilechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        ZIPFilechooser = new JFileChooser();
        ZIPFilechooser.setCurrentDirectory(new File("".""));
        ZIPFilechooser.addChoosableFileFilter(new ZIPFilter());
        ZIPFilechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        Directorychooser = new JFileChooser();
        Directorychooser.setCurrentDirectory(new File("".""));
        Directorychooser.addChoosableFileFilter(new XMLFilter());
        Directorychooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileOpenButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent event) {
                if (fileType.equals(""XML"")) {
                    int result = XMLFilechooser.showOpenDialog(null);
                    if (result == JFileChooser.APPROVE_OPTION) {
                        InFilename = XMLFilechooser.getSelectedFile().getPath();
                        fileNameField.setText(InFilename);
                        actionButton.setEnabled(true);
                    }
                } else if (fileType.equals(""ZIP (Content Packages and Packaged Tests)"")) {
                    int result = ZIPFilechooser.showOpenDialog(null);
                    if (result == JFileChooser.APPROVE_OPTION) {
                        InFilename = ZIPFilechooser.getSelectedFile().getPath();
                        fileNameField.setText(InFilename);
                        actionButton.setEnabled(true);
                    }
                } else if (fileType.equals(""Directory"")) {
                    int result = Directorychooser.showOpenDialog(null);
                    if (result == JFileChooser.APPROVE_OPTION) {
                        InFilename = Directorychooser.getSelectedFile().getPath();
                        fileNameField.setText(InFilename);
                        actionButton.setEnabled(true);
                    }
                }
            }
        });
        MainXMLFilePanel.add(fileOpenButton);
        IncludeXMLFilePanel = new JPanel();
        IncludeFileNameField = new JTextField(40);
        IncludeXMLFilePanel.add(new JLabel(""IncludeXML File name(s) (if any):""));
        IncludeXMLFilePanel.add(IncludeFileNameField);
        IncludeFileOpenButton = new JButton(""Browse"");
        IncludeInFilename = """";
        IncludeInFilenamelist = """";
        IncludeFileOpenButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent event) {
                int result = XMLFilechooser.showOpenDialog(null);
                if (result == JFileChooser.APPROVE_OPTION) {
                    IncludeInFilename = XMLFilechooser.getSelectedFile().getPath();
                    IncludeInFilenamelist = IncludeInFilenamelist + IncludeInFilename + "";"";
                    IncludeFileNameField.setText(IncludeInFilenamelist);
                }
            }
        });
        IncludeXMLFilePanel.add(IncludeFileOpenButton);
        XMLFilePanel.add(FileTypeSelectionPanel, BorderLayout.NORTH);
        XMLFilePanel.add(MainXMLFilePanel, BorderLayout.CENTER);
        XMLFilePanel.add(IncludeXMLFilePanel, BorderLayout.SOUTH);
        selectionPanel.add(XMLFilePanel, BorderLayout.NORTH);
        validationPanel = new JPanel();
        validation = new JCheckBox(""Validation"");
        validation.addActionListener(validationListener);
        validationPanel.add(validation);
        strict = new JCheckBox(""Strict Type"");
        strict.addActionListener(validationListener);
        validationPanel.add(strict);
        selectionPanel.add(validationPanel, BorderLayout.CENTER);
        String notesString = ""<html><body><center><h4>Notes on Usage</h4></center>"" + ""1. The XML\\ZIP filename.<br>"" + ""<p>"" + ""The renderer will accept either a single XML file, a zip file with an IMS Content Package, or a directory containg ZIP files with ContentPackages. The operation of the renderer depends upon whether a file or directory is presented, and in the case of a file, the file extension '*.ZIP' or '*.XML'."" + ""<p><p>"" + ""2. The Include filename.<br>"" + ""Enter the name of the XML file(s) for any XInclude elements needed. More files can be added by using the 'Browse' button repeatedly. If adding files to the text box by hand, space the filenames with a semicolon';'."" + ""<p><p>"" + ""3. Validation.<br>"" + ""If this box is checked, the XML is validated against the Schema or DTD specified in the file. The Schema and DTD files are held locally to avoid the necessity of an internet connection. "" + ""Owing to the necessity to copy these large files, validation may take several seconds.<br>"" + ""In the case of package submission, note that it is only the XML of the submitted assessment items which is validated: the imsmanifest.xml is not. However malformed imsmanifest.xml will cause an error.<br>"" + ""<p><p>"" + ""5. StrictType Checking.<br>"" + ""The QTI specifications dictate stringent requirements for variable typing, particularly where expressions and operators are used."" + ""The rendering and responding engines in this version are very tolerant of type errors, but others are not. Checking this box submits the xml to type checking which other engines might demand. Type errors are notified by appending a 'WARNING' message to the returned HTML, either at the rendering or at the responding stage, depending upon where the error becomes significant."" + ""<p><p>"" + ""6. The Style and Appearance of the Rendered XML.<br>"" + ""The QTI version 2 specification provides means whereby authors can control the appearance of the rendered XML, through the inclusion of stylesheet references and certain XHTML tags. However, many XML examples, including those in the QTI documentation, contain very little, if any, style information."" + ""The HTML produced by the JAssess rendering engine used in this system contains no style information as such, other than that specified in the XML by these HTML tags. However, a number of the sections of the HTML are provided with '&lt;div&gt;' tags with 'class' attributes to provide means by which styles specified in a stylesheet may be added. 'View Source' of an example of the rendered HTML to examine these.<br />"" + ""The rendering engine of  has a number of built-in stylesheets available to it. By default, a stylesheet 'JAssessL.css' is used. However ,by using the Browser's View->Page Style menu item one of the other available stylesheets, or no stylesheet, may be selected. Using this requires that the stylesheet be re-selected for the reply after submitting the user's response."" + ""</p>"" + ""</body></html>"";
        final JDialog notesDialog = new JDialog(this, ""Notes on Usage"");
        JLabel notesPane = new JLabel(notesString);
        notesPane.setSize(595, 495);
        notesPane.setBorder(border);
        JButton closeButton = new JButton(""Close"");
        closeButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent event) {
                notesDialog.setVisible(false);
                notesDialog.dispose();
            }
        });
        JPanel notesContentPane = new JPanel();
        notesContentPane.setLayout(new BorderLayout(50, 50));
        notesContentPane.add(notesPane, BorderLayout.NORTH);
        notesContentPane.add(closeButton, BorderLayout.SOUTH);
        notesDialog.setContentPane(notesContentPane);
        notesDialog.setSize(650, 700);
        notesDialog.setVisible(false);
        notesButton = new JButton(""Notes on Usage"");
        notesButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent event) {
                notesDialog.setVisible(true);
            }
        });
        Action.add(notesButton);
        selectionPanel.add(Action, BorderLayout.SOUTH);
        add(selectionPanel, BorderLayout.CENTER);
        outputPanel = new JPanel();
        outputPanel.setLayout(new BorderLayout());
        outputPanel.add(new JLabel(""This text area contains diagnostic messages only.\n It will be removed in later versions""), BorderLayout.NORTH);
        Border titled = BorderFactory.createTitledBorder(border2, ""Output"");
        outputPanel.setBorder(titled);
        outputText = new JTextArea(15, 60);
        outputPane = new JScrollPane(outputText);
        outputPanel.add(outputPane, BorderLayout.SOUTH);
        add(outputPanel, BorderLayout.SOUTH);
    }","    public void setRandom(boolean random) {
        this.random = random;
        if (random) {
            possibleScores = new int[NUM_SCORES];
            for (int i = 0; i < NUM_SCORES - 1; i++) {
                getRandomScore: while (true) {
                    int score = (int) (Math.random() * 20) + 1;
                    for (int j = 0; j < i; j++) {
                        if (score == possibleScores[j]) {
                            continue getRandomScore;
                        }
                    }
                    possibleScores[i] = score;
                    break;
                }
            }
            possibleScores[NUM_SCORES - 1] = 25;
            boolean sorted = false;
            while (!sorted) {
                sorted = true;
                for (int i = 0; i < NUM_SCORES - 1; i++) {
                    if (possibleScores[i] > possibleScores[i + 1]) {
                        int t = possibleScores[i];
                        possibleScores[i] = possibleScores[i + 1];
                        possibleScores[i + 1] = t;
                        sorted = false;
                    }
                }
            }
            setPossibleScores(possibleScores);
        }
    }",0,0
"    public CSolver(int maxR, int minR, int maxS, int minS, boolean u, ClusterManager cm, SolutionFactory f) {
        this.model = new CPModel();
        this.solver = null;
        this.nFound = 0;
        this.maxRosters = maxR;
        this.minRosters = minR;
        this.maxSize = maxS;
        this.minSize = minS;
        this.useAll = u;
        this.mgr = cm;
        this.nClusters = cm.getClusterCount();
        this.capacity = cm.getCapacities();
        this.singletons = cm.getSingletons();
        this.factory = f;
        this.result = Result.UNSOLVED;
        if (useAll) {
            int all = 0;
            for (int c : capacity) {
                all += c;
            }
            int m = (int) Math.round(Math.ceil(((double) all) / maxSize));
            minRosters = Math.max(minRosters, m);
        }
        assign = new IntegerVariable[nClusters][maxRosters + 1];
        transpose = new IntegerVariable[maxRosters + 1][nClusters];
        for (int c = 0; c < nClusters; c++) {
            int x = capacity[c];
            for (int r = 1; r <= maxRosters; r++) {
                assign[c][r] = Choco.makeIntVar(""assign_"" + c + ""_"" + r, 0, x);
                model.addVariable(assign[c][r]);
                transpose[r][c] = assign[c][r];
            }
            assign[c][0] = Choco.makeIntVar(""unassigned_"" + c, 0, (useAll) ? 0 : x);
            model.addVariable(assign[c][0]);
            transpose[0][c] = assign[c][0];
        }
        size = new IntegerVariable[maxRosters + 1];
        used = new IntegerVariable[maxRosters + 1];
        int[] temp = new int[maxSize - minSize + 2];
        temp[0] = 0;
        for (int i = 0; i <= maxSize - minSize; i++) {
            temp[i + 1] = minSize + i;
        }
        for (int r = 1; r <= minRosters; r++) {
            size[r] = Choco.makeIntVar(""size_"" + r, minSize, maxSize);
            used[r] = Choco.makeIntVar(""used_"" + r, 1, 1);
        }
        for (int r = minRosters + 1; r <= maxRosters; r++) {
            size[r] = Choco.makeIntVar(""size_"" + r, temp);
            used[r] = Choco.makeIntVar(""used_"" + r, 0, 1);
        }
        int h = (useAll) ? 1 : 0;
        used[0] = Choco.makeIntVar(""used_0"", 0, 0);
        assignTo = new IntegerVariable[nClusters];
        for (int i : singletons) {
            assignTo[i] = Choco.makeIntVar(""assign_"" + i + ""_to"", h, maxRosters);
        }
        nUsed = Choco.makeIntVar(""nRosters"", minRosters, maxRosters);
        model.addVariable(nUsed);
        for (int c = 0; c < nClusters; c++) {
            model.addConstraint(Choco.eq(Choco.sum(assign[c]), capacity[c]));
        }
        for (int r = 1; r <= maxRosters; r++) {
            model.addConstraint(Choco.eq(Choco.sum(transpose[r]), size[r]));
        }
        for (int r = 1; r <= maxRosters; r++) {
            model.addConstraint(Choco.reifiedIntConstraint(used[r], Choco.gt(size[r], 0)));
        }
        model.addConstraint(Choco.eq(Choco.sum(used), nUsed));
        for (int i : singletons) {
            model.addConstraint(Choco.domainConstraint(assignTo[i], assign[i]));
        }
        Set<HashSet<Integer>> cliques = mgr.getCliques();
        for (Set<Integer> c : cliques) {
            if (c.size() < 2) {
                continue;
            }
            Integer[] clist = c.toArray(new Integer[1]);
            for (int i = 1; i < clist.length; i++) {
                model.addConstraint(Choco.eq(assignTo[clist[0]], assignTo[clist[i]]));
            }
        }
        Map<Integer, ArrayList<Integer>> incompatible = mgr.getIncompatible();
        if (incompatible != null) {
            for (int i0 : incompatible.keySet()) {
                for (int i1 : incompatible.get(i0)) {
                    if (i0 < i1) {
                        model.addConstraint(Choco.or(Choco.eq(assignTo[i0], 0), Choco.neq(assignTo[i0], assignTo[i1])));
                    }
                }
            }
        }
        for (int r = 1; r < maxRosters; r++) {
            model.addConstraint(Choco.lexeq(transpose[r + 1], transpose[r]));
        }
        for (int r = minRosters; r < maxRosters; r++) {
            model.addConstraint(Choco.leq(used[r + 1], used[r]));
        }
    }","        private Object[] toArray(Object[] dest, boolean copied) {
            int destIndex = 0;
            for (final Segment<K, V> segment : ConcurrentWeakKeyHashMap.this.segments) {
                for (HashEntry<K, V> e : segment.table) {
                    while (e != null) {
                        final V value = e.value;
                        if (value != null) {
                            if (destIndex == dest.length) {
                                final Object[] newDest = (Object[]) Array.newInstance(dest.getClass().getComponentType(), (destIndex == 0) ? 16 : (destIndex << 1));
                                System.arraycopy(dest, 0, newDest, 0, destIndex);
                                dest = newDest;
                                copied = true;
                            }
                            dest[destIndex++] = value;
                        }
                        e = e.next;
                    }
                }
            }
            if (destIndex < dest.length) {
                if (copied) {
                    final Object[] newDest = new Object[destIndex];
                    System.arraycopy(dest, 0, newDest, 0, destIndex);
                    dest = newDest;
                } else {
                    dest[destIndex] = null;
                }
            }
            return dest;
        }",0,0
"    private int CalculateTreeWidth(int myGraph[][], int SolutionVector[], int zaehler) {
        int[][] DecompositionedMatrix;
        int[] ConnectedNodes;
        int[] NextSolutionVector;
        int TreeWidth;
        int NumVerticesOfMyGraph;
        int DeeperTreeWidth;
        int LineIndex;
        NumVerticesOfMyGraph = myGraph.length;
        DecompositionedMatrix = new int[NumVerticesOfMyGraph - 1][NumVerticesOfMyGraph - 1];
        ConnectedNodes = new int[NumVerticesOfMyGraph];
        TreeWidth = 0;
        DeeperTreeWidth = 0;
        LineIndex = 0;
        NextSolutionVector = new int[SolutionVector.length - 1];
        for (int i = 1; i < NumVerticesOfMyGraph; i++) {
            if (SolutionVector[0] == myGraph[i][0]) {
                LineIndex = i;
            }
        }
        for (int j = 1; j < NumVerticesOfMyGraph; j++) {
            if (myGraph[LineIndex][j] == 1) {
                ConnectedNodes[TreeWidth] = myGraph[0][j];
                TreeWidth++;
            }
        }
        for (int i = 0; i < NumVerticesOfMyGraph; i++) {
            if (i < LineIndex) {
                for (int j = 0; j < NumVerticesOfMyGraph; j++) {
                    if (j < LineIndex) {
                        DecompositionedMatrix[i][j] = myGraph[i][j];
                    } else if (j > LineIndex) {
                        DecompositionedMatrix[i][j - 1] = myGraph[i][j];
                    }
                }
            } else if (i > LineIndex) {
                for (int j = 0; j < NumVerticesOfMyGraph; j++) {
                    if (j < LineIndex) {
                        DecompositionedMatrix[i - 1][j] = myGraph[i][j];
                    } else if (j > LineIndex) {
                        DecompositionedMatrix[i - 1][j - 1] = myGraph[i][j];
                    }
                }
            }
        }
        for (int k = 0; k < TreeWidth; k++) {
            for (int i = 0; i < DecompositionedMatrix.length; i++) {
                if (DecompositionedMatrix[i][0] == ConnectedNodes[k]) {
                    for (int l = 0; l < TreeWidth; l++) {
                        for (int j = 0; j < DecompositionedMatrix.length; j++) {
                            if (DecompositionedMatrix[0][j] == ConnectedNodes[l]) {
                                DecompositionedMatrix[i][j] = 1;
                            }
                        }
                    }
                }
            }
        }
        for (int i = 1; i < DecompositionedMatrix.length; i++) {
            DecompositionedMatrix[i][i] = 0;
            for (int j = 1; j < DecompositionedMatrix.length; j++) {
                DecompositionedMatrix[i][j] = DecompositionedMatrix[j][i];
            }
        }
        for (int l = 1; l < SolutionVector.length; l++) {
            NextSolutionVector[l - 1] = SolutionVector[l];
        }
        if (NextSolutionVector.length > 1) {
            DeeperTreeWidth = CalculateTreeWidth(DecompositionedMatrix, NextSolutionVector, zaehler + 1);
            if (TreeWidth < DeeperTreeWidth) {
                TreeWidth = DeeperTreeWidth;
            }
        }
        return TreeWidth;
    }","    private static String execCmd(String cmd) {
        String msg = new String("""");
        boolean cmdOK = true;
        Process proc = null;
        Runtime runtime = Runtime.getRuntime();
        try {
            proc = runtime.exec(cmd);
            InputStreamReader isrError = new InputStreamReader(proc.getErrorStream());
            BufferedReader brError = new BufferedReader(isrError);
            String line = null;
            while ((line = brError.readLine()) != null) {
                System.out.println(""ERROR MSG>"" + line);
            }
            InputStreamReader isrOutput = new InputStreamReader(proc.getInputStream());
            BufferedReader brOutput = new BufferedReader(isrOutput);
            line = null;
            while ((line = brOutput.readLine()) != null) {
                System.out.println(""OUTPUT>"" + line);
            }
            int exitVal = proc.waitFor();
            System.out.println(""ExitValue: "" + exitVal);
        } catch (Exception e) {
            cmdOK = false;
            msg += ""Problem executing command: "" + cmd + ""  DAMN. Exception "" + e.toString();
            System.err.println(msg);
        }
        if (cmdOK) {
            msg += ""Command: "" + cmd + "" OK."";
        }
        return msg;
    }",0,0
"    public static final Object[][] transpose(Object[][] a) {
        int am = a.length;
        int an = a[0].length;
        Object[][] result = new Object[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                result[j][i] = a[i][j];
            }
        }
        return result;
    }","    @SuppressWarnings(""unchecked"")
    @Override
    public <T> T[] toArray(T[] a) throws ArrayStoreException, NullPointerException {
        if (a.length < size) {
            a = (T[]) Array.newInstance(a.getClass().getComponentType(), size);
        }
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size) {
            a[size] = null;
        }
        return a;
    }",0,0
"    public SOCTradeOffer makeOffer(SOCPossiblePiece targetPiece) {
        D.ebugPrintln(""***** MAKE OFFER *****"");
        if (targetPiece == null) {
            return null;
        }
        SOCTradeOffer offer = null;
        SOCResourceSet targetResources = null;
        switch(targetPiece.getType()) {
            case SOCPossiblePiece.CARD:
                targetResources = SOCGame.CARD_SET;
                break;
            case SOCPossiblePiece.ROAD:
                targetResources = SOCGame.ROAD_SET;
                break;
            case SOCPossiblePiece.SETTLEMENT:
                targetResources = SOCGame.SETTLEMENT_SET;
                break;
            case SOCPossiblePiece.CITY:
                targetResources = SOCGame.CITY_SET;
                break;
        }
        SOCResourceSet ourResources = ourPlayerData.getResources();
        D.ebugPrintln(""*** targetResources = "" + targetResources);
        D.ebugPrintln(""*** ourResources = "" + ourResources);
        if (ourResources.contains(targetResources)) {
            return offer;
        }
        if (ourResources.getAmount(SOCResourceConstants.UNKNOWN) > 0) {
            D.ebugPrintln(""AGG WE HAVE UNKNOWN RESOURCES !!!! %%%%%%%%%%%%%%%%%%%%%%%%%%%%"");
            return offer;
        }
        SOCTradeOffer batna = getOfferToBank(targetResources);
        D.ebugPrintln(""*** BATNA = "" + batna);
        SOCBuildingSpeedEstimate estimate = new SOCBuildingSpeedEstimate(ourPlayerData.getNumbers());
        SOCResourceSet giveResourceSet = new SOCResourceSet();
        SOCResourceSet getResourceSet = new SOCResourceSet();
        int batnaBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
        D.ebugPrintln(""*** batnaBuildingTime = "" + batnaBuildingTime);
        if (batna != null) {
            batnaBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, batna.getGiveSet(), batna.getGetSet(), estimate);
        }
        D.ebugPrintln(""*** batnaBuildingTime = "" + batnaBuildingTime);
        int[] rollsPerResource = estimate.getRollsPerResource();
        int[] neededRsrc = new int[5];
        int[] notNeededRsrc = new int[5];
        int neededRsrcCount = 0;
        int notNeededRsrcCount = 0;
        for (int rsrcType = SOCResourceConstants.CLAY; rsrcType <= SOCResourceConstants.WOOD; rsrcType++) {
            if (targetResources.getAmount(rsrcType) > 0) {
                neededRsrc[neededRsrcCount] = rsrcType;
                neededRsrcCount++;
            } else {
                notNeededRsrc[notNeededRsrcCount] = rsrcType;
                notNeededRsrcCount++;
            }
        }
        for (int j = neededRsrcCount - 1; j >= 0; j--) {
            for (int i = 0; i < j; i++) {
                if (rollsPerResource[neededRsrc[i]] > rollsPerResource[neededRsrc[i + 1]]) {
                    int tmp = neededRsrc[i];
                    neededRsrc[i] = neededRsrc[i + 1];
                    neededRsrc[i + 1] = tmp;
                }
            }
        }
        if (D.ebugOn) {
            for (int i = 0; i < neededRsrcCount; i++) {
                D.ebugPrintln(""NEEDED RSRC: "" + neededRsrc[i] + "" : "" + rollsPerResource[neededRsrc[i]]);
            }
        }
        for (int j = notNeededRsrcCount - 1; j >= 0; j--) {
            for (int i = 0; i < j; i++) {
                if (rollsPerResource[notNeededRsrc[i]] > rollsPerResource[notNeededRsrc[i + 1]]) {
                    int tmp = notNeededRsrc[i];
                    notNeededRsrc[i] = notNeededRsrc[i + 1];
                    notNeededRsrc[i + 1] = tmp;
                }
            }
        }
        if (D.ebugOn) {
            for (int i = 0; i < notNeededRsrcCount; i++) {
                D.ebugPrintln(""NOT-NEEDED RSRC: "" + notNeededRsrc[i] + "" : "" + rollsPerResource[notNeededRsrc[i]]);
            }
        }
        boolean[] someoneIsSellingResource = new boolean[SOCResourceConstants.MAXPLUSONE];
        for (int rsrcType = SOCResourceConstants.CLAY; rsrcType <= SOCResourceConstants.WOOD; rsrcType++) {
            someoneIsSellingResource[rsrcType] = false;
            for (int pn = 0; pn < SOCGame.MAXPLAYERS; pn++) {
                if ((pn != ourPlayerData.getPlayerNumber()) && (isSellingResource[pn][rsrcType])) {
                    someoneIsSellingResource[rsrcType] = true;
                    D.ebugPrintln(""*** player "" + pn + "" is selling "" + rsrcType);
                    break;
                }
            }
        }
        int getRsrcIdx = neededRsrcCount - 1;
        while ((getRsrcIdx >= 0) && ((ourResources.getAmount(neededRsrc[getRsrcIdx]) >= targetResources.getAmount(neededRsrc[getRsrcIdx])) || (!someoneIsSellingResource[neededRsrc[getRsrcIdx]]))) {
            getRsrcIdx--;
        }
        if (getRsrcIdx >= 0) {
            D.ebugPrintln(""*** getRsrc = "" + neededRsrc[getRsrcIdx]);
            getResourceSet.add(1, neededRsrc[getRsrcIdx]);
            D.ebugPrintln(""*** offer should be null : offer = "" + offer);
            int giveRsrcIdx = 0;
            while ((giveRsrcIdx < notNeededRsrcCount) && (offer == null)) {
                D.ebugPrintln(""*** ourResources.getAmount("" + notNeededRsrc[giveRsrcIdx] + "") = "" + ourResources.getAmount(notNeededRsrc[giveRsrcIdx]));
                if (ourResources.getAmount(notNeededRsrc[giveRsrcIdx]) > 0) {
                    giveResourceSet.clear();
                    giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx]);
                    offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                    D.ebugPrintln(""*** offer = "" + offer);
                    int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                }
                giveRsrcIdx++;
            }
            D.ebugPrintln(""*** ourResources = "" + ourResources);
            if (offer == null) {
                int giveRsrcIdx1 = 0;
                while ((giveRsrcIdx1 < neededRsrcCount) && (offer == null)) {
                    D.ebugPrintln(""*** ourResources.getAmount("" + neededRsrc[giveRsrcIdx1] + "") = "" + ourResources.getAmount(neededRsrc[giveRsrcIdx1]));
                    D.ebugPrintln(""*** targetResources.getAmount("" + neededRsrc[giveRsrcIdx1] + "") = "" + targetResources.getAmount(neededRsrc[giveRsrcIdx1]));
                    if ((ourResources.getAmount(neededRsrc[giveRsrcIdx1]) > targetResources.getAmount(neededRsrc[giveRsrcIdx1])) && (neededRsrc[giveRsrcIdx1] != neededRsrc[getRsrcIdx])) {
                        giveResourceSet.clear();
                        giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                        int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                        if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                            offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                            D.ebugPrintln(""*** offer = "" + offer);
                            D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                        }
                    }
                    giveRsrcIdx1++;
                }
            }
            D.ebugPrintln(""*** ourResources = "" + ourResources);
            SOCResourceSet leftovers = ourResources.copy();
            leftovers.subtract(targetResources);
            D.ebugPrintln(""*** leftovers = "" + leftovers);
            if (offer == null) {
                int giveRsrcIdx1 = 0;
                int giveRsrcIdx2 = 0;
                while ((giveRsrcIdx1 < notNeededRsrcCount) && (offer == null)) {
                    if (ourResources.getAmount(notNeededRsrc[giveRsrcIdx1]) > 0) {
                        while ((giveRsrcIdx2 < notNeededRsrcCount) && (offer == null)) {
                            giveResourceSet.clear();
                            giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx1]);
                            giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx2]);
                            if (ourResources.contains(giveResourceSet)) {
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            giveRsrcIdx2++;
                        }
                        giveRsrcIdx2 = 0;
                        while ((giveRsrcIdx2 < neededRsrcCount) && (offer == null)) {
                            if (neededRsrc[giveRsrcIdx2] != neededRsrc[getRsrcIdx]) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx1]);
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx2]);
                                if (leftovers.contains(giveResourceSet)) {
                                    int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                    if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                        offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                        D.ebugPrintln(""*** offer = "" + offer);
                                        D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                    }
                                }
                            }
                            giveRsrcIdx2++;
                        }
                    }
                    giveRsrcIdx1++;
                }
                giveRsrcIdx1 = 0;
                giveRsrcIdx2 = 0;
                while ((giveRsrcIdx1 < neededRsrcCount) && (offer == null)) {
                    if ((leftovers.getAmount(neededRsrc[giveRsrcIdx1]) > 0) && (neededRsrc[giveRsrcIdx1] != neededRsrc[getRsrcIdx])) {
                        while ((giveRsrcIdx2 < notNeededRsrcCount) && (offer == null)) {
                            giveResourceSet.clear();
                            giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                            giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx2]);
                            if (leftovers.contains(giveResourceSet)) {
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            giveRsrcIdx2++;
                        }
                        giveRsrcIdx2 = 0;
                        while ((giveRsrcIdx2 < neededRsrcCount) && (offer == null)) {
                            if (neededRsrc[giveRsrcIdx2] != neededRsrc[getRsrcIdx]) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx2]);
                                if (leftovers.contains(giveResourceSet)) {
                                    int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                    if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                        offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                        D.ebugPrintln(""*** offer = "" + offer);
                                        D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                    }
                                }
                            }
                            giveRsrcIdx2++;
                        }
                    }
                    giveRsrcIdx1++;
                }
            }
        }
        if (offer == null) {
            SOCResourceSet leftovers = ourResources.copy();
            leftovers.subtract(targetResources);
            D.ebugPrintln(""*** leftovers = "" + leftovers);
            int getRsrcIdx2 = notNeededRsrcCount - 1;
            while ((getRsrcIdx2 >= 0) && (!someoneIsSellingResource[neededRsrc[getRsrcIdx2]])) {
                getRsrcIdx2--;
            }
            while ((getRsrcIdx2 >= 0) && (offer == null)) {
                getResourceSet.clear();
                getResourceSet.add(1, notNeededRsrc[getRsrcIdx2]);
                leftovers.add(1, notNeededRsrc[getRsrcIdx2]);
                if (offer == null) {
                    int giveRsrcIdx1 = 0;
                    while ((giveRsrcIdx1 < notNeededRsrcCount) && (offer == null)) {
                        if ((leftovers.getAmount(notNeededRsrc[giveRsrcIdx1]) > 0) && (notNeededRsrc[giveRsrcIdx1] != notNeededRsrc[getRsrcIdx2])) {
                            leftovers.subtract(1, notNeededRsrc[giveRsrcIdx1]);
                            if (getOfferToBank(targetResources, leftovers) != null) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx1]);
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if (offerBuildingTime < batnaBuildingTime) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, notNeededRsrc[getRsrcIdx2]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            leftovers.add(1, notNeededRsrc[giveRsrcIdx1]);
                        }
                        giveRsrcIdx1++;
                    }
                }
                if (offer == null) {
                    int giveRsrcIdx1 = 0;
                    while ((giveRsrcIdx1 < neededRsrcCount) && (offer == null)) {
                        if (leftovers.getAmount(neededRsrc[giveRsrcIdx1]) > 0) {
                            leftovers.subtract(1, neededRsrc[giveRsrcIdx1]);
                            if (getOfferToBank(targetResources, leftovers) != null) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if (offerBuildingTime < batnaBuildingTime) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, notNeededRsrc[getRsrcIdx2]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            leftovers.add(1, neededRsrc[giveRsrcIdx1]);
                        }
                        giveRsrcIdx1++;
                    }
                }
                leftovers.subtract(1, notNeededRsrc[getRsrcIdx2]);
                getRsrcIdx2--;
            }
        }
        return offer;
    }","            public void onClickDo(final MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    final Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(""http://eworld.sourceforge.net""));
                    } catch (final Exception e) {
                        e.printStackTrace();
                    }
                }
            }",0,0
"    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException exc) {
                feedback.registerBug(""IOException occurred opening a link in the browser."", exc);
            }
        } else {
            feedback.registerBug(""Desktop is not supported, cannot open browser to show link!"");
        }
    }","    public Collection findUsersByLoginNameStateGroup(String login, String name, Integer state, Integer groupId) throws DAOException {
        ArrayList users = new ArrayList();
        try {
            StringBuffer sql = new StringBuffer();
            boolean loginExists = false;
            this.acquire();
            sql.append(""SELECT u.Id "");
            sql.append("",u.Login "");
            sql.append("",u.Password "");
            sql.append("",u.Object_State "");
            sql.append("",p.id "");
            sql.append("",p.Name "");
            sql.append("",p.First_Name "");
            sql.append("",p.Nick_Name "");
            sql.append("",p.Email "");
            sql.append("",p.Title "");
            sql.append("",p.Url "");
            sql.append("",p.Salutation "");
            sql.append("",p.Position "");
            sql.append("",p.Department "");
            sql.append("",p.Disability "");
            sql.append(""FROM "").append(DatabaseTableConstants.USER_TABLE).append("" u, "");
            sql.append(DatabaseTableConstants.PERSON_TABLE).append("" p "");
            if (groupId != null) {
                sql.append("","").append(DatabaseTableConstants.USER_GROUP_TABLE).append("" up "");
            }
            sql.append(""WHERE u.Person_Id = p.id"");
            StringBuffer sqlZusatz = new StringBuffer();
            String[] loginArray = new String[login.length() + 1];
            int i = 0;
            if (state != null) {
                sqlZusatz.append("" AND u.Object_State = "").append(state);
            } else {
                sqlZusatz.append("" AND u.Object_State <>"").append(Constants.DELETED);
            }
            if (groupId != null) {
                sqlZusatz.append("" AND u.id = up.User_Id AND up.Group_Id = "").append(groupId);
            }
            if (login != null) {
                if (!(login.equals("""") || login.equals(""*"") || login.startsWith(""&"") || login.endsWith(""&"") || login.startsWith("" "") || login.endsWith("" ""))) {
                    loginExists = true;
                    login = login.replace('*', '%');
                    Pattern p = Pattern.compile(""&"");
                    Matcher m = p.matcher(login);
                    if (m.find()) {
                        String loginAnf = login.substring(0, m.start()).trim();
                        String gross = loginAnf.substring(0, 1).toUpperCase() + loginAnf.substring(1, loginAnf.length());
                        String klein = loginAnf.substring(0, 1).toLowerCase() + loginAnf.substring(1, loginAnf.length());
                        if (loginAnf.length() >= 1) {
                            loginArray[i] = ("" AND u.Login like '"" + gross + ""%'"");
                            i++;
                            loginArray[i] = ("" AND u.Login like '"" + klein + ""%'"");
                            i++;
                        } else {
                            loginArray[i] = ("" AND u.Login like '%'"");
                            i++;
                        }
                        login = login.substring(m.end(), login.length()).trim();
                        m = p.matcher(login);
                        while (m.find()) {
                            loginAnf = login.substring(0, m.start()).trim();
                            if (loginAnf.length() >= 1) {
                                gross = loginAnf.substring(0, 1).toUpperCase() + loginAnf.substring(1, loginAnf.length());
                                klein = loginAnf.substring(0, 1).toLowerCase() + loginAnf.substring(1, loginAnf.length());
                                loginArray[i] = ("" AND u.Login like '"" + gross + ""%'"");
                                i++;
                                loginArray[i] = ("" AND u.Login like '"" + klein + ""%'"");
                                i++;
                            } else {
                                loginArray[i] = ("" AND u.Login like '%'"");
                                i++;
                            }
                            login = login.substring(m.end(), login.length()).trim();
                            m = p.matcher(login);
                        }
                        if (login.length() >= 1) {
                            gross = login.substring(0, 1).toUpperCase() + login.substring(1, login.length());
                            klein = login.substring(0, 1).toLowerCase() + login.substring(1, login.length());
                            loginArray[i] = ("" AND u.Login like '"" + gross + ""%'"");
                            i++;
                            loginArray[i] = ("" AND u.Login like '"" + klein + ""%'"");
                            i++;
                        } else {
                            loginArray[i] = ("" AND u.Login like '%'"");
                            i++;
                        }
                    } else {
                        String gross = login.substring(0, 1).toUpperCase() + login.substring(1, login.length());
                        String klein = login.substring(0, 1).toLowerCase() + login.substring(1, login.length());
                        loginArray[i] = ("" AND u.Login like '"" + gross + ""%'"");
                        i++;
                        loginArray[i] = ("" AND u.Login like '"" + klein + ""%'"");
                        i++;
                    }
                } else {
                    loginArray[i] = ("" AND u.Login like '%'"");
                    i++;
                }
            } else {
                loginArray[i] = ("" AND u.Login like '%'"");
                i++;
            }
            if (name != null) {
                if (!(name.equals("""") || name.equals(""*"") || name.startsWith(""&"") || name.endsWith(""&"") || name.startsWith("" "") || name.endsWith("" ""))) {
                    name = name.replace('*', '%');
                    Pattern p = Pattern.compile(""&"");
                    Matcher m = p.matcher(name);
                    if (m.find()) {
                        String nameAnf = name.substring(0, m.start()).trim();
                        String gross = nameAnf.substring(0, 1).toUpperCase() + nameAnf.substring(1, nameAnf.length());
                        String klein = nameAnf.substring(0, 1).toLowerCase() + nameAnf.substring(1, nameAnf.length());
                        if (nameAnf.length() >= 1) {
                            sql.append("" AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[0]);
                            for (int j = 1; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                            }
                            for (int j = 0; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(klein).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                            }
                        } else {
                            for (int j = 0; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[j]);
                            }
                        }
                        name = name.substring(m.end(), name.length()).trim();
                        m = p.matcher(name);
                        while (m.find()) {
                            nameAnf = name.substring(0, m.start()).trim();
                            if (nameAnf.length() >= 1) {
                                gross = nameAnf.substring(0, 1).toUpperCase() + nameAnf.substring(1, nameAnf.length());
                                klein = nameAnf.substring(0, 1).toLowerCase() + nameAnf.substring(1, nameAnf.length());
                                for (int j = 0; j < i; j++) {
                                    sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                                }
                                for (int j = 0; j < i; j++) {
                                    sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(klein).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                                }
                            } else {
                                for (int j = 0; j < i; j++) {
                                    sql.append("" OR u.Person_Id = p.id AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[j]);
                                }
                            }
                            name = name.substring(m.end(), name.length()).trim();
                            m = p.matcher(name);
                        }
                        if (name.length() >= 1) {
                            gross = name.substring(0, 1).toUpperCase() + name.substring(1, name.length());
                            klein = name.substring(0, 1).toLowerCase() + name.substring(1, name.length());
                            for (int j = 0; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                            }
                            for (int j = 0; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(klein).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                            }
                        } else {
                            for (int j = 0; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[j]);
                            }
                        }
                    } else {
                        String gross = name.substring(0, 1).toUpperCase() + name.substring(1, name.length());
                        String klein = name.substring(0, 1).toLowerCase() + name.substring(1, name.length());
                        sql.append("" AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[0]);
                        for (int j = 1; j < i; j++) {
                            sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                        }
                        for (int j = 0; j < i; j++) {
                            sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(klein).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                        }
                    }
                } else {
                    sql.append("" AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[0]);
                    for (int j = 1; j < i; j++) {
                        sql.append("" OR u.Person_Id = p.id AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[j]);
                    }
                }
            } else {
                sql.append("" AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[0]);
                for (int j = 1; j < i; j++) {
                    sql.append("" OR u.Person_Id = p.id AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[j]);
                }
            }
            if (loginExists) {
                sql.append("" order by u.Login"");
            } else {
                sql.append("" order by p.Name"");
            }
            Statement statement = getConnection().createStatement();
            ResultSet result = statement.executeQuery(sql.toString());
            while (result.next()) {
                UserVo user = new UserVo();
                PersonVo person = new PersonVo();
                user.setId(new Integer(result.getInt(1)));
                user.setLogin(result.getString(2));
                user.setPassword(result.getString(3));
                user.setObjectState(new Integer(result.getInt(4)));
                person.setId(new Integer(result.getInt(5)));
                person.setName(result.getString(6));
                person.setFirstName(result.getString(7));
                person.setNickName(result.getString(8));
                person.setEmail(result.getString(9));
                person.setTitle(result.getString(10));
                person.setUrl(result.getString(11));
                person.setSalutation(result.getString(12));
                person.setPosition(result.getString(13));
                person.setDepartment(result.getString(14));
                person.setDisability(result.getString(15));
                user.setPerson(person);
                users.add(user);
            }
            statement.close();
            result.close();
            StringBuffer phoneSearch = new StringBuffer();
            phoneSearch.append(""SELECT Typ "");
            phoneSearch.append("",Phone_Jack "");
            phoneSearch.append("",Direct_Dial "");
            phoneSearch.append("",City_Code "");
            phoneSearch.append("",Country_Code "");
            phoneSearch.append(""FROM "").append(DatabaseTableConstants.PHONE_TABLE);
            phoneSearch.append("" WHERE Person_Id = ?"");
            PreparedStatement phoneStmt = getConnection().prepareStatement(phoneSearch.toString());
            for (Iterator it = users.iterator(); it.hasNext(); ) {
                PersonVo person = ((UserVo) it.next()).getPerson();
                phoneStmt.setInt(1, person.getId().intValue());
                ResultSet res = phoneStmt.executeQuery();
                ArrayList phones = new ArrayList();
                while (res.next()) {
                    PhoneVo phone = new PhoneVo();
                    phone.setTyp(new Integer(res.getInt(1)));
                    phone.setPhoneJack(res.getString(2));
                    phone.setDirectDial(res.getString(3));
                    phone.setCityCode(res.getString(4));
                    phone.setCountryCode(res.getString(5));
                    phones.add(phone);
                }
                person.addPhones(phones);
                res.close();
            }
            phoneStmt.close();
            StringBuffer addressSearch = new StringBuffer();
            addressSearch.append(""SELECT Typ "");
            addressSearch.append("",Locality "");
            addressSearch.append("",Street "");
            addressSearch.append("",Pcode "");
            addressSearch.append(""FROM "").append(DatabaseTableConstants.ADDRESS_TABLE);
            addressSearch.append("" WHERE Person_Id = ?"");
            PreparedStatement addressStmt = getConnection().prepareStatement(addressSearch.toString());
            for (Iterator it = users.iterator(); it.hasNext(); ) {
                PersonVo person = ((UserVo) it.next()).getPerson();
                addressStmt.setInt(1, person.getId().intValue());
                ResultSet res = addressStmt.executeQuery();
                ArrayList addresses = new ArrayList();
                while (res.next()) {
                    AddressVo address = new AddressVo();
                    address.setTyp(new Integer(res.getInt(1)));
                    address.setLocality(res.getString(2));
                    address.setStreet(res.getString(3));
                    address.setPcode(res.getString(4));
                    addresses.add(address);
                }
                person.addAddresses(addresses);
                res.close();
            }
            addressStmt.close();
        } catch (Exception e) {
            throw new DAOException();
        } finally {
            try {
                this.release();
            } catch (Exception e) {
                System.out.println(""Exception releasing connection !"" + e.toString());
            }
        }
        return users;
    }",0,0
"    public final boolean parseAuxFile(String filename) {
        Pattern pattern;
        Matcher matcher;
        boolean weiter = false;
        boolean back = true;
        boolean loopFileOpen = false;
        pattern = Pattern.compile(""\\\\citation\\{.+\\}"");
        BufferedReader br = null;
        Vector<String> fileList = new Vector<String>(5);
        fileList.add(filename);
        File dummy = new File(filename);
        String path = dummy.getParent();
        if (path != null) path = path + File.separator; else path = """";
        nestedAuxCounter = -1;
        int fileIndex = 0;
        while (fileIndex < fileList.size()) {
            String fName = fileList.elementAt(fileIndex);
            try {
                br = new BufferedReader(new FileReader(fName));
                weiter = true;
                loopFileOpen = true;
            } catch (FileNotFoundException fnfe) {
                System.out.println(""Cannot locate input file! "" + fnfe.getMessage());
                back = false;
                weiter = false;
                loopFileOpen = false;
            }
            while (weiter) {
                String line;
                try {
                    if (br == null) throw new IOException();
                    line = br.readLine();
                } catch (IOException ioe) {
                    line = null;
                    weiter = false;
                }
                if (line != null) {
                    matcher = pattern.matcher(line);
                    while (matcher.find()) {
                        int len = matcher.end() - matcher.start();
                        if (len > 11) {
                            String str = matcher.group().substring(matcher.start() + 10, matcher.end() - 1);
                            String keys[] = str.split("","");
                            if (keys != null) {
                                int keyCount = keys.length;
                                for (int t = 0; t < keyCount; t++) {
                                    String dummyStr = keys[t];
                                    if (dummyStr != null) {
                                        mySet.add(dummyStr.trim());
                                    }
                                }
                            }
                        }
                    }
                    int index = line.indexOf(""\\@input{"");
                    if (index >= 0) {
                        int start = index + 8;
                        int end = line.indexOf(""}"", start);
                        if (end > start) {
                            String str = path + line.substring(index + 8, end);
                            if (!fileList.contains(str)) {
                                fileList.add(str);
                            }
                        }
                    }
                } else weiter = false;
            }
            if (loopFileOpen) {
                try {
                    if (br != null) br.close();
                    nestedAuxCounter++;
                } catch (IOException ioe) {
                }
            }
            fileIndex++;
        }
        return back;
    }","    public static void takeScreenCap(Rectangle rv, String filename) {
        try {
            Robot robot = new Robot();
            BufferedImage bi = robot.createScreenCapture(rv);
            new CFile(""caps"").mkdir();
            File file = new CFile(""caps/"" + filename + "".jpg"");
            ImageIO.write(bi, ""jpg"", file);
        } catch (Throwable e) {
            log.warn("""", e);
        }
    }",0,0
"    public static void transpose(double[][] A, double[][] B) {
        assert rows(B) == cols(A);
        assert cols(B) == rows(A);
        int rows = rows(B);
        int cols = cols(B);
        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) B[i][j] = A[j][i];
    }","    public void webpageAction() {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(controller.getUrlLinks().getWebpageUri());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(getFrame(), ""Can't find the default web browser\nto open the web page "" + controller.getUrlLinks().getWebpageUrlStr() + ""."", ""Cannot open web page"", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(getFrame(), ""Operation not supported on this platform.\nPlease go to "" + controller.getUrlLinks().getWebpageUrlStr(), ""Cannot open web page"", JOptionPane.INFORMATION_MESSAGE);
        }
    }",0,0
"    public static void main(String arg[]) throws Exception {
        int idCounter = 0;
        boolean debug = false;
        Properties props = new Properties();
        props.put(""mail.smtp.host"", ""207.15.48.16"");
        Session session = Session.getDefaultInstance(props, null);
        session.setDebug(debug);
        Message msg = new MimeMessage(session);
        InternetAddress from = new InternetAddress(""anant.gowerdhan@momed.com"");
        InternetAddress to = new InternetAddress(""anant.gowerdhan@momed.com"");
        msg.setFrom(from);
        msg.setRecipient(Message.RecipientType.TO, to);
        msg.setSubject(""Testing Domino"");
        MimeBodyPart messageBodyPart = new MimeBodyPart();
        messageBodyPart.setText(""Hi, how are you"");
        Multipart multipart = new MimeMultipart();
        multipart.addBodyPart(messageBodyPart);
        msg.setContent(multipart);
        Transport.send(msg);
    }","    @Override
    public void sortArray(int[] array) {
        boolean sorted = false;
        while (sorted == false) {
            sorted = true;
            for (int i = 0; i <= array.length - 2; i++) {
                if (array[i] > array[i + 1]) {
                    int temp = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = temp;
                    sorted = false;
                }
            }
        }
    }",0,0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                fileBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }","            public void onClickDo(final MouseEvent me) {
                if (Desktop.isDesktopSupported()) {
                    final Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(""http://eworld.sourceforge.net""));
                    } catch (final Exception e) {
                        e.printStackTrace();
                    }
                }
            }",0,0
"    public static int orderedFind(Vector orderedArray, IComparable obj) {
        int size = orderedArray.size();
        if (size == 0) {
            return -1;
        }
        int begin = 0;
        int end = size - 1;
        int mid, cmp;
        while (begin <= end) {
            mid = (end + begin) / 2;
            IComparable obj2 = (IComparable) orderedArray.elementAt(mid);
            cmp = obj.compares(obj2);
            if (cmp == 0) {
                return mid;
            } else if (cmp < 0) {
                end = mid - 1;
            } else {
                begin = mid + 1;
            }
        }
        return -1;
    }","    public WpCustomSurface(Position position, SurfaceType surface, int level, int[][] description, boolean passing, int layer) throws WorldException {
        super(description[0].length, description.length + level, position);
        this.layer = layer;
        this.passing = passing;
        this.level = level;
        this.surface = surface;
        this.description = new int[x][y];
        for (int i = 0; i < description[0].length; i++) {
            for (int j = 0; j < description.length; j++) {
                this.description[i][j] = description[j][i];
            }
        }
    }",0,0
"    public static Object concat(Object arr1, Object arr2) {
        int len1 = (arr1 == null) ? (-1) : Array.getLength(arr1);
        if (len1 <= 0) {
            return arr2;
        }
        int len2 = (arr2 == null) ? (-1) : Array.getLength(arr2);
        if (len2 <= 0) {
            return arr1;
        }
        Class commonComponentType = commonClass(arr1.getClass().getComponentType(), arr2.getClass().getComponentType());
        Object newArray = Array.newInstance(commonComponentType, len1 + len2);
        System.arraycopy(arr1, 0, newArray, 0, len1);
        System.arraycopy(arr2, 0, newArray, len1, len2);
        return newArray;
    }","    public final void run() {
        String serverVersion = """";
        try {
            URL version = new URL(""http://www.digiextractor.de/version"");
            BufferedReader in = new BufferedReader(new InputStreamReader(version.openStream()));
            serverVersion = in.readLine();
            in.close();
        } catch (IOException ioe) {
            LOGGER.log(Level.SEVERE, ""Error getting Version from Server"", ioe);
            return;
        }
        if (!serverVersion.matches(""\\d+\\.\\d+\\.\\d+.*"")) {
            if (!silentMode) {
                JOptionPane.showMessageDialog(parentFrame, Messages.getString(""WebUpdater.1""), Messages.getString(""WebUpdater.2""), JOptionPane.ERROR_MESSAGE);
            }
            return;
        }
        if (!serverHasNewerVersion(serverVersion)) {
            if (!silentMode) {
                JOptionPane.showMessageDialog(parentFrame, Messages.getString(""WebUpdater.4""));
            }
        } else {
            Object[] options = { Messages.getString(""WebUpdater.5""), Messages.getString(""WebUpdater.6"") };
            int n = JOptionPane.showOptionDialog(parentFrame, String.format(Messages.getString(""WebUpdater.7""), """", serverVersion), Messages.getString(""WebUpdater.9""), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            if (n == JOptionPane.YES_OPTION) {
                try {
                    URI site = new URI(""http://www.digiextractor.de"");
                    if (Desktop.isDesktopSupported()) {
                        Desktop.getDesktop().browse(site);
                    } else {
                        JOptionPane.showMessageDialog(parentFrame, Messages.getString(""WebUpdater.11""), Messages.getString(""WebUpdater.12""), JOptionPane.WARNING_MESSAGE);
                    }
                } catch (Exception e) {
                    LOGGER.log(Level.SEVERE, ""Error opening Browser"", e);
                }
            }
        }
    }",0,0
"    public static void takeScreenCap(Rectangle rv, String filename) {
        try {
            Robot robot = new Robot();
            BufferedImage bi = robot.createScreenCapture(rv);
            new CFile(""caps"").mkdir();
            File file = new CFile(""caps/"" + filename + "".jpg"");
            ImageIO.write(bi, ""jpg"", file);
        } catch (Throwable e) {
            log.warn("""", e);
        }
    }","    public MultiDimensionalScaling(float[][] data, int anpcs) {
        n = data.length;
        npcs = anpcs;
        if (npcs > n) {
            npcs = n;
        }
        out = new float[n][npcs];
        double[][] d = new double[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                d[i][j] = data[i][j];
                d[j][i] = data[i][j];
            }
        }
        double max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                for (int k = 0; k < j; k++) {
                    max = Math.max(max, d[j][k] - d[i][j] - d[i][k]);
                }
            }
        }
        if (max > 0) {
            max *= 10;
        } else {
            max = 0;
        }
        System.out.println(""Triangle inequality constant: "" + max);
        float d_col[] = new float[n];
        float d_row[] = new float[n];
        float d_tot = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    d[i][j] += max;
                    d[i][j] = -0.5f * (d[i][j] * d[i][j]);
                    d_col[i] += d[i][j];
                    d_row[j] += d[i][j];
                    d_tot += d[i][j];
                }
            }
        }
        for (int i = 0; i < n; i++) {
            d_col[i] /= n + 0f;
            d_row[i] /= n + 0f;
            d_col[i] *= d_col[i];
            d_row[i] *= d_row[i];
        }
        d_tot /= n * n + 0f;
        d_tot *= d_tot;
        float d_tot2 = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                d[i][j] = d[i][j] - d_col[i] - d_row[j] + d_tot;
            }
        }
        long st = System.currentTimeMillis();
        EigenValueDecomposition evd = new EigenValueDecomposition(d);
        long et = System.currentTimeMillis();
        double[] eig = evd.d;
        double[] eigs = new double[npcs];
        for (int i = 0; i < npcs; i++) {
            eigs[i] = eig[n - 1 - i];
            System.out.println(eigs[i]);
        }
        eigenValues = eigs;
        st = System.currentTimeMillis();
        double[][] d2 = solveEigenvectors(d, eigs);
        System.out.println(d2.length + "" "" + d2[0].length + "" "" + eigs.length);
        double[][] d3 = scaleEigenvectors(d2, eigs);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < npcs; j++) {
                int jj = eig.length - j - 1;
                out[i][j] = (float) (d3[j][i]);
            }
        }
    }",0,0
"    public static AnimationHelper makeObject(String fileName, int row, int col, int tileWidth, int tileHeight) {
        String key = fileName.trim().toLowerCase();
        AnimationHelper animation = (AnimationHelper) animations.get(key);
        if (animation == null) {
            LTexture[][] images = TextureUtils.getSplit2Textures(fileName, tileWidth, tileHeight);
            LTexture[][] result = new LTexture[row][col];
            for (int y = 0; y < col; y++) {
                for (int x = 0; x < row; x++) {
                    result[x][y] = images[y][x];
                }
            }
            images = null;
            animations.put(key, animation = makeObject(result[0], result[1], result[2], result[3]));
        }
        return animation;
    }","    public static String serialize(String s) {
        StringBuffer sb = new StringBuffer();
        Pattern compile = Pattern.compile(serializeRegex);
        Matcher matcher = compile.matcher(s);
        int previousCopy = 0;
        while (matcher.find()) {
            int start = matcher.start();
            int end = matcher.end();
            sb.append(s.substring(previousCopy, start));
            String match = s.substring(start, end);
            sb.append(match.equals(""\\"") ? ""\\\\"" : ""\\n"");
            previousCopy = end;
        }
        sb.append(s.substring(previousCopy, s.length()));
        return sb.toString();
    }",0,0
"    public static void main(String[] args) {
        Connection con = null;
        String url = ""jdbc:mysql://192.168.15.110:3306/"";
        String dbName = ""os"";
        String driver = ""com.mysql.jdbc.Driver"";
        String userName = ""root"";
        String password = ""vkmohan123"";
        try {
            Class.forName(driver).newInstance();
            con = DriverManager.getConnection(url + dbName, userName, password);
            Statement st = con.createStatement();
            String sql123 = ""update os.LoadRequestResponse set processId="" + args[0] + "" where requestId="" + args[1];
            int update = st.executeUpdate(sql123);
            System.out.println(""after update"" + args[0] + "" req:"" + args[1]);
            st.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }","    @Override
    public void process(JCas jcas) throws AnalysisEngineProcessException {
        String text = jcas.getDocumentText();
        List<PubTerm> humans = new ArrayList<PubTerm>();
        List<PubTerm> mice = new ArrayList<PubTerm>();
        Pattern p = Pattern.compile(""\\s(human|humans|homo sapiens)\\s"", Pattern.CASE_INSENSITIVE);
        Matcher m = p.matcher(text);
        while (m.find()) {
            int begin = m.start() + 1;
            int end = m.end() - 1;
            int score = 1000;
            PubTerm term = createTerm(jcas, begin, end, PredefinedCategories.HUMAN, score, true);
            term.setIdentifiers(createIdentifiers(jcas, new String[][] { { PredefinedIdentifierTypes.UMLS_CUI, ""C0086418"" } }));
            humans.add(term);
        }
        p = Pattern.compile(""\\s(mouse|mus musculus|mice)\\s"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(text);
        while (m.find()) {
            int begin = m.start() + 1;
            int end = m.end() - 1;
            int score = 1000;
            PubTerm term = createTerm(jcas, begin, end, PredefinedCategories.MOUSE, score, true);
            term.setIdentifiers(createIdentifiers(jcas, new String[][] { { PredefinedIdentifierTypes.UMLS_CUI, ""C0025914"" }, { PredefinedIdentifierTypes.MESH_HEADING, ""Mice"" } }));
            mice.add(term);
        }
    }",0,0
"    @SuppressWarnings(""unchecked"")
    public static <T> T[] append(T[] oldArray, T toAppend) {
        Class<?> component = oldArray.getClass().getComponentType();
        T[] array = (T[]) Array.newInstance(component, oldArray.length + 1);
        System.arraycopy(oldArray, 0, array, 0, oldArray.length);
        array[oldArray.length] = toAppend;
        return array;
    }","    public Matrix getTransposed() {
        if (Transposed != null) return Transposed;
        Matrix result = new Matrix(Cols, Rows);
        for (int i = 0; i < Rows; ++i) {
            for (int j = 0; j < Cols; ++j) {
                result.Values[j][i] = Values[i][j];
            }
        }
        Transposed = result;
        result.Transposed = this;
        return result;
    }",0,0
"    public Matrix transpose() {
        double[][] out = new double[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                out[i][j] = value[j][i];
            }
        }
        return new Matrix(out, cols, rows);
    }","    private void openFileInBrowser_action(final List<String> items) {
        if (!java.awt.Desktop.isDesktopSupported()) {
            return;
        }
        if (!Desktop.getDesktop().isSupported(java.awt.Desktop.Action.BROWSE)) {
            return;
        }
        final String browserAddress = Core.frostSettings.getValue(SettingsClass.BROWSER_ADDRESS);
        if (browserAddress.length() == 0) {
            System.out.println(""DEBUG - Borser address not configured"");
            return;
        }
        if (items == null || items.size() < 1) {
            return;
        }
        for (final String key : items) {
            try {
                final URI browserURI = new URI(browserAddress);
                final URI uri = new URI(browserURI.getScheme(), browserURI.getSchemeSpecificPart() + key, null);
                Desktop.getDesktop().browse(uri);
            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (URISyntaxException e) {
                e.printStackTrace();
            }
        }
    }",0,0
"    String[][] transpose(String[][] data) {
        int r = data.length;
        int c = data[0].length;
        String matrix[][] = new String[c][r];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                matrix[j][i] = data[i][j];
            }
        }
        return matrix;
    }","    private void openFastaFileActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == openFastaFile) {
            int returnVal = fc.showOpenDialog(ParameterSolutions.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                inputFile = fc.getSelectedFile();
                log.append(""Opening: "" + inputFile.getName() + ""\n"");
                if (!inputFile.canRead() || !BinningFasta.verifyInputFile(inputFile)) {
                    log.append(""That is not a valid fasta file, please choose  a properly formatted fasta file.\n"");
                    inputFile = null;
                    return;
                }
                narr.println(""Opening: "" + inputFile.getName());
            } else {
                log.append(""Dialog Cancelled by User.\n"");
            }
        }
    }",0,0
"    private static void zip(ZipOutputStream zo, File root, File file) throws IOException {
        String rootPath = root.getAbsolutePath();
        String path = file.getAbsolutePath();
        path = path.replace('\\', '/');
        if (file.isDirectory()) {
            path = path + ""/"";
        }
        String name = path.substring(rootPath.length());
        if (Utils.isEmptyString(name)) {
            name = file.getName();
        }
        ZipEntry entry = new ZipEntry(name);
        if (file.isFile()) {
            zo.putNextEntry(entry);
            BufferedInputStream is = new BufferedInputStream(new FileInputStream(file));
            byte[] buff = new byte[4096];
            int read;
            while ((read = is.read(buff)) > 0) {
                zo.write(buff, 0, read);
            }
            zo.closeEntry();
        } else if (file.isDirectory()) {
            zo.putNextEntry(entry);
            zo.closeEntry();
            File[] files = file.listFiles();
            if (files.length > 0) {
                for (File f : files) {
                    zip(zo, root, f);
                }
            }
        }
    }","    public static double[][] rotation(final double[][] pos, final double[][] refPos) {
        if (pos.length != refPos.length) throw new IllegalArgumentException(""All arguments must have the same length."");
        double R_m[] = new double[3];
        double R_p[] = new double[3];
        double matrix[][] = new double[4][4];
        for (int k = 0; k < pos.length; ++k) {
            R_m = BLA.subtract(pos[k], refPos[k]);
            R_p = BLA.add(refPos[k], pos[k]);
            matrix[0][0] += (R_m[0] * R_m[0] + R_m[1] * R_m[1] + R_m[2] * R_m[2]);
            matrix[1][1] += (R_m[0] * R_m[0] + R_p[1] * R_p[1] + R_p[2] * R_p[2]);
            matrix[2][2] += (R_p[0] * R_p[0] + R_m[1] * R_m[1] + R_p[2] * R_p[2]);
            matrix[3][3] += (R_p[0] * R_p[0] + R_p[1] * R_p[1] + R_m[2] * R_m[2]);
            matrix[1][0] += (R_m[2] * R_p[1] - R_m[1] * R_p[2]);
            matrix[2][0] += (R_p[2] * R_m[0] - R_p[0] * R_m[2]);
            matrix[2][1] += (R_m[0] * R_m[1] - R_p[1] * R_p[0]);
            matrix[3][0] += (R_m[1] * R_p[0] - R_p[1] * R_m[0]);
            matrix[3][1] += (R_m[2] * R_m[0] - R_p[0] * R_p[2]);
            matrix[3][2] += (R_m[2] * R_m[1] - R_p[1] * R_p[2]);
        }
        for (int i = 0; i < 4; ++i) {
            for (int j = i + 1; j < 4; ++j) {
                matrix[i][j] = matrix[j][i];
            }
        }
        double eigenvals[] = new double[4];
        BLA.diagonalizeSymmetric(matrix, eigenvals);
        double q[] = new double[4];
        for (int i = 0; i < 4; ++i) q[i] = matrix[i][3];
        double operator[][] = BLA.zeroes(4, 4);
        operator[0][0] = q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
        operator[1][1] = q[0] * q[0] + q[2] * q[2] - q[1] * q[1] - q[3] * q[3];
        operator[2][2] = q[0] * q[0] + q[3] * q[3] - q[1] * q[1] - q[2] * q[2];
        operator[1][0] = 2 * (q[1] * q[2] - q[0] * q[3]);
        operator[2][0] = 2 * (q[1] * q[3] + q[0] * q[2]);
        operator[2][1] = 2 * (q[2] * q[3] - q[0] * q[1]);
        operator[0][1] = 2 * (q[1] * q[2] + q[0] * q[3]);
        operator[0][2] = 2 * (q[1] * q[3] - q[0] * q[2]);
        operator[1][2] = 2 * (q[2] * q[3] + q[0] * q[1]);
        operator[3] = eigenvals;
        return operator;
    }",0,0
"    private void helpActionPerformed() {
        boolean showMessage = !Desktop.isDesktopSupported();
        if (!showMessage) {
            try {
                Desktop.getDesktop().browse(new URI(""http://code.google.com/apis/language/translate/v2/using_rest.html#auth""));
            } catch (Exception e) {
                LOGGER.error(""Exception browsing to Google docs"", e);
                showMessage = true;
            }
        }
        if (showMessage) {
            JOptionPane.showMessageDialog(this, SwingUtils.getMessage(""settingsDialog.googleApiKeyHelp""));
        }
    }","    @Override
    public <T> T[] toArray(T[] array) {
        if (size > 0) {
            if (array.length < size) {
                @SuppressWarnings(""unchecked"") T[] newArray = (T[]) Array.newInstance(array.getClass().getComponentType(), size);
                array = newArray;
            }
            System.arraycopy(data, 0, array, 0, size);
        }
        if (array.length > size) {
            array[size] = null;
        }
        return array;
    }",0,0
"        @Override
        public void mouseClicked(final MouseEvent e) {
            if (Desktop.isDesktopSupported()) {
                final Desktop desktop = Desktop.getDesktop();
                try {
                    desktop.browse(new URI(uri));
                } catch (final IOException ex) {
                    Exceptions.printStackTrace(ex);
                } catch (final URISyntaxException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }","    public static int[][] find(String text, String term, boolean caseInsensitive, boolean fuzzy) {
        List<int[]> beginEnds = new ArrayList<int[]>();
        String regexp = """";
        if (fuzzy) {
            String[] termArray = term.split(""\\s+"");
            for (String termElement : termArray) {
                if (!regexp.isEmpty()) {
                    regexp += ""[\\W|_]*"";
                }
                regexp += Pattern.quote(termElement);
            }
        } else {
            regexp = Pattern.quote(term);
        }
        Pattern pattern;
        if (caseInsensitive) {
            pattern = Pattern.compile(regexp, Pattern.CASE_INSENSITIVE);
        } else {
            pattern = Pattern.compile(regexp);
        }
        Matcher matcher = pattern.matcher(text);
        while (matcher.find()) {
            int[] beginEnd = new int[] { matcher.start(), matcher.end() };
            beginEnds.add(beginEnd);
        }
        return beginEnds.toArray(new int[0][0]);
    }",0,0
"    protected void processRequest(ChannelMap fwdData, PlugInChannelMap out) throws SAPIException {
        String[] chanList = out.GetChannelList();
        String requestChanStr = chanList[0];
        if (requestChanStr.endsWith(""/"")) {
            requestChanStr = requestChanStr.substring(0, requestChanStr.length() - 1);
        }
        System.err.println((new Date()).toString() + ""  Source: "" + requestChanStr);
        ChannelMap reqMap = new ChannelMap();
        reqMap.Add(requestChanStr + ""/Altitude"");
        reqMap.Add(requestChanStr + ""/Latitude"");
        reqMap.Add(requestChanStr + ""/Longitude"");
        reqMap.Add(requestChanStr + ""/GroundSpeed"");
        reqMap.Add(requestChanStr + ""/Heading"");
        sink.Request(reqMap, 0, 0, ""newest"");
        ChannelMap dataMap = sink.Fetch(60000);
        int altIndex = dataMap.GetIndex(requestChanStr + ""/Altitude"");
        double alt = 0.0;
        if (dataMap.GetType(altIndex) == ChannelMap.TYPE_FLOAT64) {
            alt = dataMap.GetDataAsFloat64(altIndex)[0];
        } else if (dataMap.GetType(altIndex) == ChannelMap.TYPE_FLOAT32) {
            alt = (double) dataMap.GetDataAsFloat32(altIndex)[0];
        }
        int latIndex = dataMap.GetIndex(requestChanStr + ""/Latitude"");
        double lat = 0.0;
        if (dataMap.GetType(latIndex) == ChannelMap.TYPE_FLOAT64) {
            lat = dataMap.GetDataAsFloat64(latIndex)[0];
        } else if (dataMap.GetType(latIndex) == ChannelMap.TYPE_FLOAT32) {
            lat = (double) dataMap.GetDataAsFloat32(latIndex)[0];
        }
        int lonIndex = dataMap.GetIndex(requestChanStr + ""/Longitude"");
        double lon = 0.0;
        if (dataMap.GetType(lonIndex) == ChannelMap.TYPE_FLOAT64) {
            lon = dataMap.GetDataAsFloat64(lonIndex)[0];
        } else if (dataMap.GetType(lonIndex) == ChannelMap.TYPE_FLOAT32) {
            lon = (double) dataMap.GetDataAsFloat32(lonIndex)[0];
        }
        int gsIndex = dataMap.GetIndex(requestChanStr + ""/GroundSpeed"");
        double gs = 0.0;
        if (dataMap.GetType(gsIndex) == ChannelMap.TYPE_FLOAT64) {
            gs = dataMap.GetDataAsFloat64(gsIndex)[0];
        } else if (dataMap.GetType(gsIndex) == ChannelMap.TYPE_FLOAT32) {
            gs = (double) dataMap.GetDataAsFloat32(gsIndex)[0];
        }
        int headIndex = dataMap.GetIndex(requestChanStr + ""/Heading"");
        double heading = 0.0;
        if (dataMap.GetType(headIndex) == ChannelMap.TYPE_FLOAT64) {
            heading = dataMap.GetDataAsFloat64(headIndex)[0];
        } else if (dataMap.GetType(headIndex) == ChannelMap.TYPE_FLOAT32) {
            heading = (double) dataMap.GetDataAsFloat32(headIndex)[0];
        }
        double dataTime = dataMap.GetTimes(altIndex)[0];
        double currTime = System.currentTimeMillis() / 1000.0;
        double latency = currTime - dataTime;
        boolean bMaxLatencyExceeded = false;
        if (latency > maxLatency) {
            latency = maxLatency;
            bMaxLatencyExceeded = true;
        }
        double radius = latency * gs;
        String kmlStr = createDRCircle(lat, lon, alt, radius, heading, bMaxLatencyExceeded);
        out.PutTime(System.currentTimeMillis() / 1000.0, out.GetRequestDuration());
        if (!bKMZ) {
            out.PutDataAsString(0, kmlStr);
            out.PutMime(0, ""application/vnd.google-earth.kml+xml"");
        } else {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            try {
                ZipOutputStream zos = new ZipOutputStream(baos);
                ZipEntry ze = new ZipEntry(""doc.kml"");
                zos.setMethod(ZipOutputStream.DEFLATED);
                zos.setLevel(Deflater.DEFAULT_COMPRESSION);
                zos.putNextEntry(ze);
                byte[] kmlBytes = kmlStr.getBytes();
                zos.write(kmlBytes, 0, kmlBytes.length);
                zos.close();
                out.PutDataAsByteArray(0, baos.toByteArray());
                out.PutMime(0, ""application/vnd.google-earth.kmz"");
            } catch (Exception ex) {
                System.err.println(""Exception generating KMZ: "" + ex.getMessage());
                throw new SAPIException(""Exception generating KMZ"");
            }
        }
    }","    public void getTranspose(Matrix4 mat) {
        for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) mat.mm[i][j] = mm[j][i];
    }",0,0
"    public void bubbleSort(int[] arr) {
        BasicProcessor.getInstance().getStartBlock();
        BasicProcessor.getInstance().getVarDeclaration();
        boolean swapped = true;
        BasicProcessor.getInstance().getVarDeclaration();
        int j = 0;
        BasicProcessor.getInstance().getVarDeclaration();
        int tmp;
        {
            BasicProcessor.getInstance().getWhileStatement();
            while (swapped) {
                BasicProcessor.getInstance().getStartBlock();
                swapped = false;
                j++;
                {
                    BasicProcessor.getInstance().getForStatement();
                    for (int i = 0; i < arr.length - j; i++) {
                        BasicProcessor.getInstance().getStartBlock();
                        {
                            BasicProcessor.getInstance().getIfStatement();
                            if (arr[i] > arr[i + 1]) {
                                BasicProcessor.getInstance().getStartBlock();
                                tmp = arr[i];
                                arr[i] = arr[i + 1];
                                arr[i + 1] = tmp;
                                swapped = true;
                                BasicProcessor.getInstance().getEndBlock();
                            }
                        }
                        BasicProcessor.getInstance().getEndBlock();
                    }
                }
                BasicProcessor.getInstance().getEndBlock();
            }
        }
        BasicProcessor.getInstance().getEndBlock();
    }","    public WpCustomSurface(Position position, SurfaceType surface, int level, int[][] description, boolean passing, int layer) throws WorldException {
        super(description[0].length, description.length + level, position);
        this.layer = layer;
        this.passing = passing;
        this.level = level;
        this.surface = surface;
        this.description = new int[x][y];
        for (int i = 0; i < description[0].length; i++) {
            for (int j = 0; j < description.length; j++) {
                this.description[i][j] = description[j][i];
            }
        }
    }",0,0
"    @SuppressWarnings(""unchecked"")
    public static <T> T[] trim(T[] array, int newSize) {
        Assert.notNull(array);
        Assert.inRange(newSize, 0, Integer.MAX_VALUE, ""newSize may not be smaller than zero"");
        if (array.length > newSize) {
            Class<?> type = array.getClass().getComponentType();
            T[] newArray = (T[]) Array.newInstance(type, newSize);
            System.arraycopy(array, 0, newArray, 0, newSize);
            return newArray;
        } else return array;
    }","    private void extractLocation(String _loc, int _end) {
        String get_u = _loc.substring(_end, _loc.length()).trim();
        if (get_u.length() > 0) {
            System.out.print(""."");
            System.out.flush();
            Pattern _p = Pattern.compile(""^http://"", Pattern.CASE_INSENSITIVE);
            Matcher _m = _p.matcher(get_u);
            boolean _b = false;
            int _iend = -1;
            while (_m.find()) {
                _b = true;
                _iend = _m.end();
            }
            if (_iend > 0) {
                String pars02 = get_u.substring(_iend, get_u.length());
                _p = Pattern.compile(""/"");
                _m = _p.matcher(pars02.trim());
                String[] tok = _p.split(pars02.trim());
                String hst = tok[0].trim();
                int _s = -1;
                while (_m.find()) {
                    _s = _m.start();
                    if (_s > 0) break;
                }
                String rest = pars02.substring(_s, pars02.length()).trim();
                _host = hst;
                StringBuffer _buf = new StringBuffer();
                _buf.append(""GET "" + rest);
                _buf.append("" HTTP/1.1\r\n"");
                _buf.append(""Accept: text/html\r\n"");
                _buf.append(""Referer: "" + _refer + ""\r\n"");
                _buf.append(""Accept-Language: en-us\r\n"");
                _buf.append(""User-Agent: Mozilla/4.0 (compatible; "");
                _buf.append(""MSIE 6.0; Windows NT 5.1; "");
                _buf.append(""Avant Browser [avantbrowser.com]; "");
                _buf.append("".NET CLR 1.1.4322)\r\n"");
                _buf.append(""Host: "" + _host + ""\r\n"" + ""Connection: close\r\n\r\n"");
                String httpPost = _buf.toString();
                System.out.print(""."");
                System.out.flush();
                try {
                    Thread.sleep(100);
                    closeConnection();
                    _socket = new Socket(_host, _port);
                    if (_socket == null) throw new RuntimeException(""Invalid Host Connection""); else System.out.print("".."");
                    _socket.setSoTimeout(2 * 60 * 1000);
                    PrintWriter writer = new PrintWriter(_socket.getOutputStream(), true);
                    writer.print(httpPost);
                    writer.flush();
                    StringBuffer resultBuffer = new StringBuffer();
                    String line = null;
                    BufferedReader bufferedReader = null;
                    bufferedReader = new BufferedReader(new InputStreamReader(_socket.getInputStream()));
                    do {
                        try {
                            line = bufferedReader.readLine();
                        } catch (IOException exception) {
                            throw new RuntimeException(exception);
                        }
                        if (line != null) resultBuffer.append(line + ""\r\n"");
                    } while (line != null);
                    try {
                        _socket.close();
                        _socket = null;
                    } catch (Exception exception) {
                        exception.printStackTrace();
                    }
                    String result = resultBuffer.toString();
                    _passResults = result.trim();
                    redirectPassedFlag = true;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                throw new RuntimeException(""Invalid URL"");
            }
        }
    }",0,0
"    private Object[] allocateNewArray(int capacity) {
        Class arrayClass = this.array.getClass();
        Object[] newArray = (Object[]) Array.newInstance(arrayClass.getComponentType(), capacity);
        System.arraycopy(this.array, 0, newArray, 0, this.length);
        return newArray;
    }","    public static byte[][] transpose(byte[][] m) {
        byte[][] n = new byte[m[0].length][m.length];
        for (int j = 0; j < m.length; j++) for (int i = 0; i < m[0].length; i++) n[i][j] = m[j][i];
        return n;
    }",0,0
"    public static int strspn(String s, CharSequence f) {
        String regex = """";
        int res = 0;
        for (int i = 0; i < f.length(); i++) {
            regex += ""|"" + f.charAt(i);
        }
        regex = regex.substring(1);
        regex = ""("" + regex + "")+"";
        Pattern p = Pattern.compile(regex);
        Matcher m = p.matcher(s);
        while (m.find()) {
            int start = m.start();
            int end = m.end();
            if (res < (end - start)) {
                res = (end - start);
            }
        }
        return res;
    }","    public void bubbleSort(int[] arr) {
        BasicProcessor.getInstance().getStartBlock();
        BasicProcessor.getInstance().getVarDeclaration();
        boolean swapped = true;
        BasicProcessor.getInstance().getVarDeclaration();
        int j = 0;
        BasicProcessor.getInstance().getVarDeclaration();
        int tmp;
        {
            BasicProcessor.getInstance().getWhileStatement();
            while (swapped) {
                BasicProcessor.getInstance().getStartBlock();
                swapped = false;
                j++;
                {
                    BasicProcessor.getInstance().getForStatement();
                    for (int i = 0; i < arr.length - j; i++) {
                        BasicProcessor.getInstance().getStartBlock();
                        {
                            BasicProcessor.getInstance().getIfStatement();
                            if (arr[i] > arr[i + 1]) {
                                BasicProcessor.getInstance().getStartBlock();
                                tmp = arr[i];
                                arr[i] = arr[i + 1];
                                arr[i + 1] = tmp;
                                swapped = true;
                                BasicProcessor.getInstance().getEndBlock();
                            }
                        }
                        BasicProcessor.getInstance().getEndBlock();
                    }
                }
                BasicProcessor.getInstance().getEndBlock();
            }
        }
        BasicProcessor.getInstance().getEndBlock();
    }",0,0
"    public static Object expand(Object src, int increase, boolean bottom) {
        int size = Array.getLength(src);
        Object dest = Array.newInstance(src.getClass().getComponentType(), size + increase);
        System.arraycopy(src, 0, dest, (bottom) ? 0 : increase, size);
        return dest;
    }","    private String replaceQuotedStrings(String query) {
        StringBuffer buff = new StringBuffer(query);
        Pattern pattern = Pattern.compile(REGEX_QUOTED_STRING);
        Matcher matcher = pattern.matcher(buff);
        boolean found = false;
        int i = 0;
        while (matcher.find()) {
            quotedStrings.add(matcher.group());
            buff.replace(matcher.start(), matcher.end(), ""{"" + i + ""}"");
            matcher.reset();
            found = true;
            i++;
        }
        if (!found) {
        }
        String ret = buff.toString();
        return ret;
    }",0,0
"    public static long getCrc(File file) throws Exception {
        CRC32 crc32 = new CRC32();
        FileInputStream fileinputstream = new FileInputStream(file);
        int i = 50000;
        byte buffer[] = new byte[50000];
        long l = file.length();
        int j = (int) l;
        int k = j;
        if (k > 50000) {
            k = 50000;
        }
        for (int j1 = read(fileinputstream, buffer, k); j1 > 0; ) {
            crc32.update(buffer, 0, j1);
            int k1 = (int) (((l - (long) j) * 100L) / l);
            j -= j1;
            int i1 = j;
            if (i1 > 50000) {
                i1 = 50000;
            }
            j1 = read(fileinputstream, buffer, i1);
            Thread.yield();
        }
        fileinputstream.close();
        return crc32.getValue();
    }","    static boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }",0,0
"    public void exportarCarpeta(Component componente) {
        CarpetaTematica carpeta = (CarpetaTematica) componente.getAttribute(""carpeta"");
        if (carpeta != null) {
            try {
                ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
                ZipOutputStream zipOutput = new ZipOutputStream(byteOut);
                zipOutput.setLevel(6);
                FacadeConsultasConjuntosCassiaCore facade = SessionUtil.getFacadeConsultasConjuntosCassiaCore();
                ArrayList<Conjunto> contenido = new ArrayList(facade.consultarConjuntos(carpeta.getId(), SessionUtil.getUsuario(componente.getDesktop().getSession())));
                HashMap<Long, PerfilDocumentacion> perfiles = new HashMap<Long, PerfilDocumentacion>();
                for (Conjunto conjuntoHijo : contenido) {
                    conjuntoHijo = SessionUtil.getFacadeConsultasConjuntosCassiaCore().consultarConjunto(conjuntoHijo.getId());
                    PerfilDocumentacion perfil = perfiles.get(conjuntoHijo.getPerfil().getId());
                    if (perfil == null) {
                        perfil = SessionUtil.getFacadeConsultasPerfilesCassiaCore().consultarPerfil(conjuntoHijo.getPerfil());
                        perfiles.put(perfil.getId(), perfil);
                    }
                    String xml = SessionUtil.getFacadeConsultasConjuntosCassiaCore().exportarConjunto(conjuntoHijo, perfil);
                    byte buf[] = xml.getBytes();
                    CRC32 crc = new CRC32();
                    ZipEntry zipEntry = new ZipEntry(conjuntoHijo.getNombre() + "".xml"");
                    zipEntry.setSize(buf.length);
                    crc.reset();
                    crc.update(buf);
                    zipEntry.setCrc(crc.getValue());
                    zipOutput.putNextEntry(zipEntry);
                    zipOutput.write(buf, 0, buf.length);
                }
                zipOutput.finish();
                zipOutput.close();
                Filedownload filedownload = new Filedownload();
                filedownload.save(new ByteArrayInputStream(byteOut.toByteArray()), ""application/zip"", ""Conjuntos "" + carpeta.getNombre() + "".zip"");
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            try {
                Messagebox.show(Labels.getLabel(""msg_carpeta_noseleccionado""), Labels.getLabel(""msg_titulo_carpeta_seleccionado""), Messagebox.OK, Messagebox.QUESTION);
            } catch (InterruptedException e) {
            }
        }
    }","    public static void processTokens(StyledDocument doc, HighlightingStyleLoader styler, String word) {
        String delim = ""[\\W]"";
        Pattern p = Pattern.compile(delim);
        Matcher m = p.matcher(word);
        int start = 0;
        while (m.find(start)) {
            start = m.start();
            int end = m.end() - start;
            if (m.group().trim().length() > 0) {
                Style applyStyle = styler.getStyle(m.group());
                if (applyStyle != null) {
                    doc.setCharacterAttributes(start, end, applyStyle, true);
                }
            }
            start = m.end();
        }
        String[] t = word.split(delim);
        int startpt = 0;
        for (String tkn : t) {
            if (tkn.length() < 1) continue;
            startpt = word.indexOf(tkn, startpt);
            int endpt_orig = startpt + tkn.length();
            int endpt = tkn.length();
            Style applyStyle = styler.getStyle(word.substring(startpt, endpt_orig));
            if (applyStyle != null) {
                doc.setCharacterAttributes(startpt, endpt, applyStyle, true);
            } else {
                doc.setCharacterAttributes(startpt, endpt, defaultStyle, true);
            }
            startpt = endpt_orig;
        }
    }",0,0
"    public LinkedList<SearchResult> search(String strRequest) {
        LinkedList<SearchResult> ret = new LinkedList<SearchResult>();
        HttpClient h = new HttpClient();
        try {
            String strRequestUrl = ""http://www.youporn.com/search"";
            if (strRequest.toLowerCase().contains(""straight!"")) {
                strRequestUrl += ""?type=straight"";
                strRequest = strRequest.replaceAll(""straight!"", """");
            }
            if (strRequest.toLowerCase().contains(""gay!"")) {
                strRequestUrl += ""?type=gay"";
                strRequest = strRequest.replaceAll(""gay!"", """");
            }
            if (strRequest.toLowerCase().contains(""cocks!"")) {
                strRequestUrl += ""?type=cocks"";
                strRequest = strRequest.replaceAll(""cocks!"", """");
            }
            if (!strRequestUrl.endsWith(""search"")) strRequestUrl += ""&""; else strRequestUrl += ""?"";
            strRequestUrl += ""query="" + URLEncoder.encode(strRequest, ""UTF-8"");
            if (NoMuleRuntime.DEBUG) System.out.println(strRequestUrl);
            GetMethod get = new GetMethod(strRequestUrl);
            Date d = new Date((new Date()).getTime() + (1 * 24 * 3600 * 1000));
            h.getState().addCookie(new Cookie("".youporn.com"", ""age_check"", ""1"", ""/"", d, false));
            h.executeMethod(get);
            BufferedReader in = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream()));
            String s = """";
            String res = """";
            while ((s = in.readLine()) != null) {
                res += s;
            }
            get.releaseConnection();
            if (NoMuleRuntime.DEBUG) System.out.println(res);
            String regexp = ""\\<a href\\=\""\\/watch\\/[^\""]+\""\\>[^\\<]+"";
            Pattern p = Pattern.compile(regexp);
            Matcher m = p.matcher(res);
            while (m.find()) {
                int startPos = m.start() + ""<a href=\"""".length();
                String strUrl = ""http://www.youporn.com"";
                int pos = 0;
                for (pos = startPos; pos < m.end() && (res.charAt(pos) != '\""'); pos++) {
                    strUrl += res.charAt(pos);
                }
                String strTitle = res.substring(pos + 2, m.end());
                if (strTitle.trim().length() > 0) ret.add(new SearchResult(strTitle + "" at YouPorn"", strUrl));
            }
            return ret;
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (HttpException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }","            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }",0,0
"    public static void deleteDirs(File path) {
        try {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; ++i) {
                if (files[i].isDirectory()) {
                    deleteDirs(files[i]);
                }
                files[i].delete();
            }
            path.delete();
        } catch (Exception ignored) {
            ignored.printStackTrace(System.err);
        }
    }","    @SuppressWarnings(""unchecked"")
    public <T> T[] toArray(T[] a) {
        if (a.length < size) a = (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size) a[size] = null;
        return a;
    }",0,0
"    public static double[][] transpose(final double[][] m) {
        final double[][] mt = new double[m[0].length][m.length];
        for (int i = 0; i < mt.length; i++) {
            for (int j = 0; j < mt[i].length; j++) {
                mt[i][j] = m[j][i];
            }
        }
        return mt;
    }","    public ImageDisplay(ImageDisplayApplet applet, GraphicsConfiguration gc) {
        this.applet = applet;
        if (applet == null) {
            frame = new JFrame(gc);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(PREFERRED_WIDTH, PREFERRED_HEIGHT));
        Action openAction = new AbstractAction(""Open File"", new ImageIcon(getClass().getResource(""/open.gif""))) {

            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }
        };
        JToolBar bar = new JToolBar();
        bar.add(new ToolBarButton(openAction));
        add(bar, BorderLayout.NORTH);
        if (applet == null) {
            frame.setTitle(""Image Display - Control Panel"");
            frame.getContentPane().add(this, BorderLayout.CENTER);
            frame.pack();
            frame.show();
        }
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }","    private Object doAction(final Context cx, final Scriptable scope, final Scriptable thisObj, final Object[] args, final int actionType) {
        if (RA_REPLACE == actionType && args.length == 2 && (args[1] instanceof String)) {
            final String thisString = Context.toString(thisObj);
            String replacement = (String) args[1];
            final Object arg0 = args[0];
            if (arg0 instanceof String) {
                replacement = REPLACE_PATTERN.matcher(replacement).replaceAll(""\\$"");
                return StringUtils.replaceOnce(thisString, (String) arg0, replacement);
            } else if (arg0 instanceof NativeRegExp) {
                try {
                    final NativeRegExp regexp = (NativeRegExp) arg0;
                    final RegExpData reData = new RegExpData(regexp);
                    final String regex = reData.getJavaPattern();
                    final int flags = reData.getJavaFlags();
                    final Pattern pattern = Pattern.compile(regex, flags);
                    final Matcher matcher = pattern.matcher(thisString);
                    return doReplacement(thisString, replacement, matcher, reData.hasFlag('g'));
                } catch (final PatternSyntaxException e) {
                    LOG.warn(e.getMessage(), e);
                }
            }
        } else if (RA_MATCH == actionType || RA_SEARCH == actionType) {
            if (args.length == 0) {
                return null;
            }
            final Object arg0 = args[0];
            final String thisString = Context.toString(thisObj);
            final RegExpData reData;
            if (arg0 instanceof NativeRegExp) {
                reData = new RegExpData((NativeRegExp) arg0);
            } else {
                reData = new RegExpData(Context.toString(arg0));
            }
            final Pattern pattern = Pattern.compile(reData.getJavaPattern(), reData.getJavaFlags());
            final Matcher matcher = pattern.matcher(thisString);
            final boolean found = matcher.find();
            if (RA_SEARCH == actionType) {
                if (found) {
                    setProperties(matcher, thisString, matcher.start(), matcher.end());
                    return matcher.start();
                }
                return -1;
            }
            if (!found) {
                return null;
            }
            final int index = matcher.start(0);
            final List<Object> groups = new ArrayList<Object>();
            if (reData.hasFlag('g')) {
                groups.add(matcher.group(0));
                setProperties(matcher, thisString, matcher.start(0), matcher.end(0));
                while (matcher.find()) {
                    groups.add(matcher.group(0));
                    setProperties(matcher, thisString, matcher.start(0), matcher.end(0));
                }
            } else {
                for (int i = 0; i <= matcher.groupCount(); ++i) {
                    Object group = matcher.group(i);
                    if (group == null) {
                        group = Context.getUndefinedValue();
                    }
                    groups.add(group);
                }
                setProperties(matcher, thisString, matcher.start(), matcher.end());
            }
            final Scriptable response = cx.newArray(scope, groups.toArray());
            response.put(""index"", response, Integer.valueOf(index));
            response.put(""input"", response, thisString);
            return response;
        }
        return wrappedAction(cx, scope, thisObj, args, actionType);
    }",0,0
"    @Override
    public Object map(CharSequence valStr, Field field, Class type, CommandOpt anno, CommandLine line) throws IllegalAccessException {
        CommandLineAdvanced adv = line.getAdvancedKnobs();
        Class compType = type.getComponentType();
        if (compType.isArray()) {
            throw new IllegalArgumentException(""Multi-dimensional array fields not supported"");
        }
        Object curArray = field.get(line.getHolder());
        Pattern p;
        String pat = anno.mode();
        if (pat.length() > 0) p = Pattern.compile(pat); else p = adv.getValueSplitter();
        String[] vals = p.split(valStr);
        if (vals.length == 1 && vals[0].equals("""")) vals = new String[0];
        int curLength;
        if (curArray == null) {
            curLength = 0;
        } else {
            curLength = Array.getLength(curArray);
        }
        Object newArray = Array.newInstance(compType, curLength + vals.length);
        if (curLength > 0) {
            System.arraycopy(curArray, 0, newArray, 0, curLength);
        }
        for (int i = 0; i < vals.length; i++) {
            String val = vals[i];
            Object valObj = adv.getValueFor(val, compType, anno);
            Array.set(newArray, curLength + i, valObj);
        }
        return newArray;
    }","    public PasteOEdit(JTable tableSource, JTable tableDest, EditAdapter clipboardEdit) {
        modelDest = (ModelPlate) tableDest.getModel();
        modelSource = (ModelSourceSorted) tableSource.getModel();
        this.startRow = tableDest.getSelectedRow();
        this.numRows = clipboardEdit.getClipboardHeight();
        this.startCol = tableDest.getSelectedColumn();
        this.numCols = clipboardEdit.getClipboardWidth();
        int newNumRows = startRow + numCols;
        int newNumCols = startCol + numRows;
        if ((modelDest.getRowCount() < newNumRows) || (modelDest.getColumnCount() < newNumCols)) {
            JOptionPane.showMessageDialog(tableSource, ""Attempt to paste orthogonally outside the bounds"", ""PAD error"", JOptionPane.ERROR_MESSAGE);
        } else {
            Object[][] arrayTmpPaste = clipboardEdit.getArrayPaste();
            arrayTemp = new Object[numCols][numRows];
            arrayPaste = new Object[numCols][numRows];
            for (int i = 0; i < numCols; i++) {
                for (int j = 0; j < numRows; j++) {
                    arrayPaste[i][j] = arrayTmpPaste[j][i];
                    arrayTemp[i][j] = modelDest.getValueAt(startRow + i, startCol + j);
                    modelDest.setValueAt(arrayPaste[i][j], startRow + i, startCol + j);
                    modelSource.makeAvailable(arrayTemp[i][j]);
                    modelSource.makeUnavailable(arrayPaste[i][j], startRow + i, startCol + j);
                }
            }
        }
        tableDest.setRowSelectionInterval(startRow, newNumRows - 1);
        tableDest.setColumnSelectionInterval(startCol, newNumCols - 1);
    }",0,0
"    private JPanel getOpisAutora() {
        if (panelOpisaAutora == null) {
            panelOpisaAutora = new JPanel();
            panelOpisaAutora.setLayout(new GridLayout(6, 1));
            JLabel jLabel = new JLabel();
            jLabel.setText(""Аутор програма је студент Милан Алексић 63/02 - ЕТФ Београд"");
            jLabel.setHorizontalAlignment(JLabel.CENTER);
            JLabel jLabel4 = new JLabel();
            jLabel4.setText(""ВЕРЗИЈА 3 (март 2007)"");
            jLabel4.setHorizontalAlignment(JLabel.CENTER);
            JLabel jLabel2 = new JLabel();
            jLabel2.setText(""http://drop.to/goblin"");
            jLabel2.setHorizontalAlignment(JLabel.CENTER);
            jLabel2.setForeground(Color.blue);
            jLabel2.setFont(new Font(""Dialog"", Font.BOLD, 12));
            jLabel2.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    new Thread(new Runnable() {

                        public void run() {
                            if (Desktop.isDesktopSupported()) {
                                Desktop desktop = Desktop.getDesktop();
                                if (desktop.isSupported(Desktop.Action.BROWSE)) {
                                    try {
                                        desktop.browse(URI.create(""http://drop.to/goblin""));
                                    } catch (Exception exc) {
                                        System.err.println(""Nije omoguceno krstarenje Internetom"");
                                    }
                                }
                            }
                        }
                    }).start();
                }
            });
            JLabel jLabel3 = new JLabel();
            jLabel3.setText(""milan.aleksic@gmail.com"");
            jLabel3.setHorizontalAlignment(JLabel.CENTER);
            jLabel3.setForeground(Color.blue);
            jLabel3.setFont(new Font(""Dialog"", Font.BOLD, 12));
            jLabel3.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    new Thread(new Runnable() {

                        public void run() {
                            if (Desktop.isDesktopSupported()) {
                                Desktop desktop = Desktop.getDesktop();
                                if (desktop.isSupported(Desktop.Action.MAIL)) {
                                    try {
                                        desktop.mail(new URI(""mailto:milan.aleksic@gmail.com""));
                                    } catch (Exception exc) {
                                        System.err.println(""Nemoguce slanje elektronske poste"");
                                    }
                                }
                            }
                        }
                    }).start();
                }
            });
            panelOpisaAutora.add(new JLabel(""""));
            panelOpisaAutora.add(jLabel);
            panelOpisaAutora.add(jLabel4);
            panelOpisaAutora.add(jLabel2);
            panelOpisaAutora.add(jLabel3);
            panelOpisaAutora.add(new JLabel(""""));
        }
        return panelOpisaAutora;
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public boolean getFile(String pRemoteDirectory, String pLocalDirectory, String pFileName) throws IOException {
        FTPClient fc = new FTPClient();
        fc.connect(getRemoteHost());
        fc.login(getUserName(), getPassword());
        fc.changeWorkingDirectory(pRemoteDirectory);
        String workingDirectory = fc.printWorkingDirectory();
        FileOutputStream fos = null;
        logInfo(""Connected to remote host="" + getRemoteHost() + ""; userName="" + getUserName() + ""; "" + ""; remoteDirectory="" + pRemoteDirectory + ""; localDirectory="" + pLocalDirectory + ""; workingDirectory="" + workingDirectory);
        try {
            fos = new FileOutputStream(pLocalDirectory + ""/"" + pFileName);
            boolean retrieved = fc.retrieveFile(pFileName, fos);
            if (true == retrieved) {
                logInfo(""Successfully retrieved file: "" + pFileName);
            } else {
                logError(""Could not retrieve file: "" + pFileName);
            }
            return retrieved;
        } finally {
            if (null != fos) {
                fos.flush();
                fos.close();
            }
        }
    }","    @TestMethod(""testAlign"")
    public void align() {
        Matrix tmp;
        this.cm1 = new Point3d();
        this.cm2 = new Point3d();
        this.cm1 = getCenterOfMass(p1, atwt1);
        this.cm2 = getCenterOfMass(p2, atwt2);
        for (int i = 0; i < this.npoint; i++) {
            p1[i].x = p1[i].x - this.cm1.x;
            p1[i].y = p1[i].y - this.cm1.y;
            p1[i].z = p1[i].z - this.cm1.z;
            p2[i].x = p2[i].x - this.cm2.x;
            p2[i].y = p2[i].y - this.cm2.y;
            p2[i].z = p2[i].z - this.cm2.z;
        }
        double[][] tR = new double[3][3];
        for (int i = 0; i < this.npoint; i++) {
            wts[i] = 1.0;
        }
        for (int i = 0; i < this.npoint; i++) {
            tR[0][0] += p1[i].x * p2[i].x * wts[i];
            tR[0][1] += p1[i].x * p2[i].y * wts[i];
            tR[0][2] += p1[i].x * p2[i].z * wts[i];
            tR[1][0] += p1[i].y * p2[i].x * wts[i];
            tR[1][1] += p1[i].y * p2[i].y * wts[i];
            tR[1][2] += p1[i].y * p2[i].z * wts[i];
            tR[2][0] += p1[i].z * p2[i].x * wts[i];
            tR[2][1] += p1[i].z * p2[i].y * wts[i];
            tR[2][2] += p1[i].z * p2[i].z * wts[i];
        }
        double[][] R = new double[3][3];
        tmp = new Matrix(tR);
        R = tmp.transpose().getArray();
        double[][] RtR = new double[3][3];
        Matrix jamaR = new Matrix(R);
        tmp = tmp.times(jamaR);
        RtR = tmp.getArray();
        Matrix jamaRtR = new Matrix(RtR);
        EigenvalueDecomposition ed = jamaRtR.eig();
        double[] mu = ed.getRealEigenvalues();
        double[][] a = ed.getV().getArray();
        double tmp2 = mu[2];
        mu[2] = mu[0];
        mu[0] = tmp2;
        for (int i = 0; i < 3; i++) {
            tmp2 = a[i][2];
            a[i][2] = a[i][0];
            a[i][0] = tmp2;
        }
        a[0][2] = (a[1][0] * a[2][1]) - (a[1][1] * a[2][0]);
        a[1][2] = (a[0][1] * a[2][0]) - (a[0][0] * a[2][1]);
        a[2][2] = (a[0][0] * a[1][1]) - (a[0][1] * a[1][0]);
        double[][] b = new double[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                for (int k = 0; k < 3; k++) {
                    b[i][j] += R[i][k] * a[k][j];
                }
                b[i][j] = b[i][j] / Math.sqrt(mu[j]);
            }
        }
        double norm1 = 0.;
        double norm2 = 0.;
        for (int i = 0; i < 3; i++) {
            norm1 += b[i][0] * b[i][0];
            norm2 += b[i][1] * b[i][1];
        }
        norm1 = Math.sqrt(norm1);
        norm2 = Math.sqrt(norm2);
        for (int i = 0; i < 3; i++) {
            b[i][0] = b[i][0] / norm1;
            b[i][1] = b[i][1] / norm2;
        }
        b[0][2] = (b[1][0] * b[2][1]) - (b[1][1] * b[2][0]);
        b[1][2] = (b[0][1] * b[2][0]) - (b[0][0] * b[2][1]);
        b[2][2] = (b[0][0] * b[1][1]) - (b[0][1] * b[1][0]);
        double[][] tU = new double[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                for (int k = 0; k < 3; k++) {
                    tU[i][j] += b[i][k] * a[j][k];
                }
            }
        }
        U = new double[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                U[i][j] = tU[j][i];
            }
        }
        this.rp = new Point3d[this.npoint];
        for (int i = 0; i < this.npoint; i++) {
            this.rp[i] = new Point3d(U[0][0] * p2[i].x + U[0][1] * p2[i].y + U[0][2] * p2[i].z, U[1][0] * p2[i].x + U[1][1] * p2[i].y + U[1][2] * p2[i].z, U[2][0] * p2[i].x + U[2][1] * p2[i].y + U[2][2] * p2[i].z);
        }
        double rms = 0.;
        for (int i = 0; i < this.npoint; i++) {
            rms += (p1[i].x - this.rp[i].x) * (p1[i].x - this.rp[i].x) + (p1[i].y - this.rp[i].y) * (p1[i].y - this.rp[i].y) + (p1[i].z - this.rp[i].z) * (p1[i].z - this.rp[i].z);
        }
        this.rmsd = Math.sqrt(rms / this.npoint);
    }",0,0
"    private Spannable getHighlightQueryResult(String fullText, String userQuery) {
        SpannableString spannable = new SpannableString(fullText == null ? """" : fullText);
        if (!TextUtils.isEmpty(userQuery)) {
            mPattern = Pattern.compile(userQuery);
            Matcher m = mPattern.matcher(fullText);
            int start = 0;
            while (m.find(start)) {
                spannable.setSpan(new BackgroundColorSpan(this.getResources().getColor(R.color.user_query_highlight)), m.start(), m.end(), Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
                start = m.end();
            }
        }
        return spannable;
    }","    private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fileChooser = new JFileChooser();
        ExampleFileFilter filter = new ExampleFileFilter(new String[] { ""qc"" }, ""quantum circuits"");
        fileChooser.addChoosableFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            ObjectInputStream input = null;
            try {
                input = new ObjectInputStream(new FileInputStream(file));
                try {
                    int[] size = (int[]) input.readObject();
                    circuitPanel.setWires(size[0], size[1]);
                    circuitPanel.gates = (ArrayList) input.readObject();
                    initialQubits = ((QuantumGate) circuitPanel.gates.get(0)).qubits;
                    xRegisterSize = size[0];
                    yRegisterSize = size[1];
                    xRegister = new Register(xRegisterSize);
                    yRegister = new Register(yRegisterSize);
                    int initialState = 0;
                    for (int i = 0; i < xRegisterSize; i++) {
                        int k = xRegisterSize - i - 1;
                        initialState += initialQubits[k] * (1 << i);
                    }
                    double[] tmp = new double[1 << xRegisterSize];
                    tmp[initialState] = 1;
                    xRegister.real = tmp;
                    initialState = 0;
                    for (int i = 0; i < yRegisterSize; i++) {
                        int k = xRegisterSize + yRegisterSize - i - 1;
                        initialState += initialQubits[k] * (1 << i);
                    }
                    tmp = new double[1 << yRegisterSize];
                    tmp[initialState] = 1;
                    yRegister.real = tmp;
                    circuitPanel.repaint();
                    xPanel.setLengthColoring(lengthColoring);
                    yPanel.setLengthColoring(lengthColoring);
                    xPanel.setQubitStates(xRegister.real, xRegister.imaginary);
                    yPanel.setQubitStates(yRegister.real, yRegister.imaginary);
                } catch (ClassNotFoundException cnf) {
                    String title = ""File Error"";
                    String message = ""The file "" + file.getName() + "" does not contain a circuit!"";
                    JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
                } catch (ClassCastException cce) {
                    String title = ""File Error"";
                    String message = ""The file "" + file.getName() + "" does not contain a circuit or has the wrong format!"";
                    JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
                } catch (EOFException eof) {
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                try {
                    if (input != null) input.close();
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            }
        }
    }",0,0
"    public void applyHighlighting() {
        try {
            String line = textArea.getText().replaceAll(""\n"", "" "");
            int caretPosition = textArea.getCaretPosition();
            Element root = textArea.getDocument().getDefaultRootElement();
            int line2 = root.getElementIndex(caretPosition);
            lineEnd = root.getElement(line2).getStartOffset();
            java.util.List styles = new java.util.ArrayList();
            System.out.println(""SUB TEST "" + line.substring(lineEnd));
            line = line.substring(lineEnd);
            Pattern pattern;
            Matcher matcher;
            if (line.trim().length() > 0) if (line.trim().charAt(0) != ';') {
                for (int i = 0; i < reservedWords.length; i++) {
                    pattern = Pattern.compile(""\\s"" + reservedWords[i] + ""(?![^;\\s]+)"");
                    matcher = pattern.matcher(""\n"" + line.toUpperCase().split("";"")[0] + ""\n"");
                    while (matcher.find()) {
                        System.out.println(""reservedWords find"");
                        StyledDocument doc = (StyledDocument) textArea.getDocument();
                        MutableAttributeSet attr = new SimpleAttributeSet();
                        StyleConstants.setForeground(attr, new Color(0, 0, 204));
                        textArea.setCharacterAttributes(attr, false);
                        StyleConstants.setBold(attr, true);
                        doc.setCharacterAttributes(lineEnd + matcher.start(), reservedWords[i].length(), attr, true);
                        System.out.println(""RESERVED WORDS :"" + (lineEnd + matcher.start()) + "" "" + reservedWords[i].length());
                    }
                }
                for (int i = 0; i < registers.length; i++) {
                    pattern = Pattern.compile(""(\\s|,)"" + registers[i] + ""(?![^,;\\s]+)"");
                    matcher = pattern.matcher(""\n"" + line.toUpperCase().split("";"")[0] + ""\n"");
                    while (matcher.find()) {
                        System.out.println(""registers find"");
                        StyledDocument doc = (StyledDocument) textArea.getDocument();
                        MutableAttributeSet attr = new SimpleAttributeSet();
                        StyleConstants.setForeground(attr, new Color(102, 0, 51));
                        StyleConstants.setBold(attr, true);
                        textArea.setCharacterAttributes(attr, false);
                        doc.setCharacterAttributes(lineEnd + matcher.start(), registers[i].length(), attr, true);
                        System.out.println(""REGISTERS: "" + (lineEnd + matcher.start()) + "" "" + reservedWords[i].length());
                    }
                }
                for (int i = 0; i < declarations.length; i++) {
                    pattern = Pattern.compile(""\\s"" + declarations[i] + ""(?![^;\\s]+)"");
                    matcher = pattern.matcher(""\n"" + line.toUpperCase().split("";"")[0] + ""\n"");
                    while (matcher.find()) {
                        System.out.println(""declarations find"");
                        StyledDocument doc = (StyledDocument) textArea.getDocument();
                        MutableAttributeSet attr = new SimpleAttributeSet();
                        StyleConstants.setForeground(attr, new Color(00, 100, 100));
                        StyleConstants.setBold(attr, true);
                        textArea.setCharacterAttributes(attr, false);
                        doc.setCharacterAttributes(matcher.start(), declarations[i].length(), attr, true);
                    }
                }
                pattern = Pattern.compile(""^\\s\\w+:"");
                matcher = pattern.matcher(""\n"" + line.toUpperCase().split("";"")[0] + ""\n"");
                while (matcher.find()) {
                    System.out.println(""labels find"");
                    StyledDocument doc = (StyledDocument) textArea.getDocument();
                    MutableAttributeSet attr = new SimpleAttributeSet();
                    StyleConstants.setForeground(attr, new Color(00, 100, 100));
                    StyleConstants.setBold(attr, true);
                    textArea.setCharacterAttributes(attr, false);
                    doc.setCharacterAttributes(lineEnd + matcher.start() - 1, matcher.end() - (matcher.start()), attr, true);
                }
                pattern = Pattern.compile(""(\\s|,)((0B([0-1]+))|(0X([0-9A-F]+))|([0-9]+))(?![^;\\s]+)"");
                matcher = pattern.matcher(""\n"" + line.toUpperCase().split("";"")[0] + ""\n"");
                while (matcher.find()) {
                    System.out.println(""(bin/hex/dec numbers) find"");
                    StyledDocument doc = (StyledDocument) textArea.getDocument();
                    MutableAttributeSet attr = new SimpleAttributeSet();
                    StyleConstants.setForeground(attr, new Color(240, 51, 0));
                    StyleConstants.setBold(attr, true);
                    textArea.setCharacterAttributes(attr, false);
                    doc.setCharacterAttributes(lineEnd + matcher.start(), matcher.end() - matcher.start(), attr, true);
                }
                pattern = Pattern.compile(""(\""[^\""]*\""|'[^']*')"");
                matcher = pattern.matcher(""\n"" + line.toUpperCase().split("";"")[0] + ""\n"");
                while (matcher.find()) System.out.println(""strings find"");
                StyledDocument doc = (StyledDocument) textArea.getDocument();
                MutableAttributeSet attr = new SimpleAttributeSet();
                StyleConstants.setForeground(attr, new Color(204, 0, 0));
                StyleConstants.setBold(attr, true);
                textArea.setCharacterAttributes(attr, false);
                doc.setCharacterAttributes(lineEnd + matcher.start() - 1, matcher.end() - matcher.start(), attr, true);
            }
            pattern = Pattern.compile(""\\Q;\\E"");
            matcher = pattern.matcher(line);
            if (matcher.find()) System.out.println(""comments find"");
            StyledDocument doc = (StyledDocument) textArea.getDocument();
            MutableAttributeSet attr = new SimpleAttributeSet();
            StyleConstants.setForeground(attr, new Color(63, 127, 95));
            textArea.setCharacterAttributes(attr, false);
            StyleConstants.setBold(attr, false);
            doc.setCharacterAttributes(lineEnd + matcher.start(), (line.length() - matcher.start()), attr, true);
            System.out.println(lineEnd + matcher.start() + "" "" + (line.length() - matcher.start()));
            System.out.println(""ddd"" + textArea.getText(lineEnd + matcher.start(), (line.length() - matcher.start())));
        } catch (Exception ex) {
        }
    }","    @Override
    public Object call(Object target, CallProtocol callProtocol, Object... args) {
        if (args == null) {
            args = NULL_ARGS;
        }
        int argsLen = args.length;
        int paramTypesLen = paramTypes.length;
        int paramTypesLenM1 = paramTypesLen - 1;
        boolean varArg = isVarArgs(member);
        int fixArgsLen = varArg ? paramTypesLenM1 : paramTypesLen;
        int min = Math.min(argsLen, fixArgsLen);
        boolean argsCloned = false;
        for (int i = 0; i < min; ++i) {
            Object src = args[i];
            Object dst = marshal(args[i], paramTypes[i], callProtocol);
            if (dst != src) {
                if (!argsCloned) {
                    args = args.clone();
                }
                args[i] = dst;
            }
        }
        if (varArg) {
            Class<?> varArgType = paramTypes[paramTypesLenM1];
            Class<?> componentType = varArgType.getComponentType();
            if (argsLen != paramTypesLen) {
                Object[] newargs = new Object[paramTypesLen];
                System.arraycopy(args, 0, newargs, 0, paramTypesLenM1);
                int varArgLen = argsLen - paramTypesLenM1;
                Object varArgArray = Array.newInstance(componentType, varArgLen);
                newargs[paramTypesLenM1] = varArgArray;
                for (int i = 0; i < varArgLen; ++i) {
                    Array.set(varArgArray, i, marshal(args[paramTypesLenM1 + i], componentType, callProtocol));
                }
                args = newargs;
            } else {
                Object lastArg = args[paramTypesLenM1];
                Object varArgArray = callProtocol.representAs(lastArg, varArgType);
                if (varArgArray != null && !varArgType.isInstance(varArgArray)) {
                    varArgArray = Array.newInstance(componentType, 1);
                    Array.set(varArgArray, 0, marshal(lastArg, componentType, callProtocol));
                }
                if (lastArg != varArgArray) {
                    if (!argsCloned) {
                        args = args.clone();
                    }
                    args[paramTypesLenM1] = varArgArray;
                }
            }
        }
        try {
            return invoke(member, target, args);
        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            throw new UndeclaredThrowableException(e);
        }
    }",0,0
"    public void calculateDistances() {
        distances = new double[dimension][dimension];
        for (int i = 0; i < dimension; i++) {
            for (int j = i + 1; j < dimension; j++) {
                distances[i][j] = calculatePairwiseDistance(i, j);
                distances[j][i] = distances[i][j];
            }
            distances[i][i] = 0.0;
        }
        distancesKnown = true;
    }","    public int addDecisionInstruction(int condition, String frameSlot, String linkName, int objectId, String attribute, int positive, int negative) throws FidoDatabaseException, ObjectNotFoundException, InstructionNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                if ((condition == ConditionalOperatorTable.CONTAINS_LINK) || (condition == ConditionalOperatorTable.NOT_CONTAINS_LINK)) {
                    ObjectTable ot = new ObjectTable();
                    if (ot.contains(objectId) == false) throw new ObjectNotFoundException(objectId);
                }
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (contains(stmt, positive) == false) throw new InstructionNotFoundException(positive);
                if (contains(stmt, negative) == false) throw new InstructionNotFoundException(negative);
                String sql = ""insert into Instructions (Type, Operator, FrameSlot, LinkName, ObjectId, AttributeName) "" + ""values (2, "" + condition + "", '"" + frameSlot + ""', '"" + linkName + ""', "" + objectId + "", '"" + attribute + ""')"";
                stmt.executeUpdate(sql);
                int id = getCurrentId(stmt);
                InstructionGroupTable groupTable = new InstructionGroupTable();
                groupTable.deleteInstruction(stmt, id);
                if (positive != -1) groupTable.addInstructionAt(stmt, id, 1, positive);
                if (negative != -1) groupTable.addInstructionAt(stmt, id, 2, negative);
                conn.commit();
                return id;
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }",0,0
"    public RealSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }","    public boolean initialize() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setPreferredSize(new Dimension(1200, 600));
        setJMenuBar(createMenuBar());
        setContentPane(createContentPane());
        backupReader = new BackupReader();
        infoReader = new InfoReader();
        findMyIPhoneReader = FindMyIPhoneReader.getInstance();
        String systemOs = System.getProperty(""os.name"");
        String dataPath = null;
        String laf = UIManager.getCrossPlatformLookAndFeelClassName();
        if (systemOs.startsWith(""Windows"")) {
            dataPath = System.getenv(""APPDATA"") + FILE_SEPARATOR + ""Apple Computer"" + FILE_SEPARATOR + FOLDER_PATH;
            laf = UIManager.getSystemLookAndFeelClassName();
        } else if (systemOs.startsWith(""Mac OS"")) {
            laf = UIManager.getSystemLookAndFeelClassName();
            dataPath = System.getProperty(""user.home"") + """" + ""/Library/Application Support/"" + FOLDER_PATH;
        } else {
            logger.log(Level.INFO, ""{0} is not supported! Please manually select"" + "" a backup folder."", systemOs);
        }
        if (laf != null) {
            try {
                UIManager.setLookAndFeel(laf);
                SwingUtilities.updateComponentTreeUI(this);
            } catch (Exception ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        final String dataPathFinal = dataPath;
        if (dataPathFinal != null) {
            SwingWorker worker = new SwingWorker<Void, Void>() {

                @Override
                protected Void doInBackground() throws Exception {
                    addStatus(""Loading phones in '"" + dataPathFinal + ""'"");
                    File dir = new File(dataPathFinal);
                    String[] children = dir.list();
                    if (children == null) {
                    } else {
                        for (int i = 0; i < children.length; i++) {
                            String filename = children[i];
                            if (!filename.contains(""-"")) {
                                String backupFolder = dataPathFinal + FILE_SEPARATOR + filename + FILE_SEPARATOR;
                                addBackupFolder(backupFolder, false);
                            }
                        }
                    }
                    return null;
                }
            };
            worker.execute();
        }
        pack();
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setVisible(true);
        if (VersionCheck.getLatestVersion() != null) {
            int reply = JOptionPane.showConfirmDialog(null, ""iPhoneStalker is out of date!\n"" + ""Would you like to visit the iPhoneStalker homepage?"", ""New Version!"", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                if (!Desktop.isDesktopSupported()) {
                    JOptionPane.showMessageDialog(null, ""Unable to open browser.\n"" + ""Please visit http://iphonestalker.googlecode.com"");
                } else {
                    Desktop desktop = Desktop.getDesktop();
                    if (desktop.isSupported(Desktop.Action.BROWSE)) {
                        try {
                            desktop.browse(new URI(""http://iphonestalker.googlecode.com""));
                        } catch (IOException ex) {
                            logger.log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(null, ""Unable to open browser.\n"" + ""Please visit http://iphonestalker.googlecode.com"");
                        } catch (URISyntaxException ex) {
                            logger.log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(null, ""Unable to open browser.\n"" + ""Please visit http://iphonestalker.googlecode.com"");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, ""Unable to open browser.\n"" + ""Please visit http://iphonestalker.googlecode.com"");
                    }
                }
            }
        }
        initialized = true;
        return initialized;
    }",0,0
"    public Matrix4 transpose() {
        Matrix4 aux = new Matrix4();
        for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) aux.mm[i][j] = mm[j][i];
        assign(aux);
        return this;
    }","            @Override
            public void mousePressed(MouseEvent e) {
                Figure f = getFigureAt(e.getX(), e.getY());
                if (f == null) return;
                if (!(e.isPopupTrigger() || e.isControlDown())) return;
                JPopupMenu popup = new JPopupMenu();
                JMenuItem menu = new JMenuItem(new ObjectAction<Page>(f.page, ""Open "" + f.page) {

                    private static final long serialVersionUID = 1L;

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        String uri = Wikipedia.BASE + ""/wiki/"" + getObject().getQNameEncoded();
                        try {
                            if (RevisionVisualization.this.appletContext == null) {
                                Desktop d = Desktop.getDesktop();
                                d.browse(new URI(uri));
                            } else {
                                RevisionVisualization.this.appletContext.getAppletContext().showDocument(new URL(uri), ""_"" + System.currentTimeMillis());
                            }
                        } catch (Exception err) {
                            ThrowablePane.show(RevisionVisualization.this, err);
                        }
                    }
                });
                menu.setEnabled(RevisionVisualization.this.appletContext == null && Desktop.isDesktopSupported());
                popup.add(menu);
                popup.show(drawingArea, e.getX(), e.getY());
            }",0,0
"    private String[] execSingleLineOutputCmd(String cmdWithParams) {
        String result = """";
        try {
            Process p = Runtime.getRuntime().exec(cmdWithParams.split("" ""));
            BufferedReader sin = new BufferedReader(new InputStreamReader(p.getInputStream()));
            result = sin.readLine();
            sin.close();
            return result.split("" "");
        } catch (Exception ex) {
            System.out.println(""ERROR: "" + ex.getMessage());
            return null;
        }
    }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"    protected final void showMsg(final String msg, final boolean quit) {
        final JPanel p = new JPanel();
        p.setLayout(new GridBagLayout());
        final GridBagConstraints c = new GridBagConstraints();
        c.insets = new Insets(10, 10, 10, 10);
        c.gridx = 0;
        c.gridy = 0;
        c.fill = GridBagConstraints.BOTH;
        final JImage im = new JImage(new ImageIcon(this.getClass().getResource(""error.png"")));
        final JLabel l = new JLabel(""Une erreur est survenue"");
        l.setFont(l.getFont().deriveFont(Font.BOLD));
        final JLabel lError = new JLabel(msg);
        final JTextArea textArea = new JTextArea();
        textArea.setFont(textArea.getFont().deriveFont(11f));
        c.gridheight = 3;
        p.add(im, c);
        c.insets = new Insets(2, 4, 2, 4);
        c.gridheight = 1;
        c.gridx++;
        c.weightx = 1;
        c.gridwidth = 2;
        p.add(l, c);
        c.gridy++;
        p.add(lError, c);
        c.gridy++;
        p.add(new JLabel(""Il s'agit probablement d'une mauvaise configuration ou installation du logiciel.""), c);
        c.gridx = 0;
        c.gridwidth = 3;
        c.gridy++;
        c.weighty = 0;
        c.gridwidth = 1;
        c.gridx = 1;
        c.gridy++;
        c.fill = GridBagConstraints.NONE;
        c.anchor = GridBagConstraints.EAST;
        final Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        final boolean browseSupported = desktop != null && desktop.isSupported(Action.BROWSE);
        if (ForumURL != null) {
            final javax.swing.Action communityAction;
            if (browseSupported) {
                communityAction = new AbstractAction(""Consulter le forum"") {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        try {
                            desktop.browse(new URI(ForumURL));
                        } catch (Exception e1) {
                            e1.printStackTrace();
                        }
                    }
                };
            } else {
                communityAction = new AbstractAction(""Copier l'adresse du forum"") {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        copyToClipboard(ForumURL);
                    }
                };
            }
            p.add(new JButton(communityAction), c);
        }
        c.weightx = 0;
        c.gridx++;
        final javax.swing.Action supportAction;
        if (browseSupported) supportAction = new AbstractAction(""Contacter l'assistance"") {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    desktop.browse(URI.create(ILM_CONTACT));
                } catch (Exception e1) {
                    e1.printStackTrace();
                }
            }
        }; else supportAction = new AbstractAction(""Copier l'adresse de l'assistance"") {

            @Override
            public void actionPerformed(ActionEvent e) {
                copyToClipboard(ILM_CONTACT);
            }
        };
        p.add(new JButton(supportAction), c);
        c.gridy++;
        c.gridx = 0;
        c.gridwidth = 3;
        c.fill = GridBagConstraints.BOTH;
        c.insets = new Insets(0, 0, 0, 0);
        p.add(new JSeparator(), c);
        c.gridx = 0;
        c.gridwidth = 3;
        c.gridy++;
        c.insets = new Insets(2, 4, 2, 4);
        p.add(new JLabel(""Détails de l'erreur:""), c);
        c.insets = new Insets(0, 0, 0, 0);
        c.gridy++;
        String message = this.getCause() == null ? null : this.getCause().getMessage();
        if (message == null) {
            message = msg;
        } else {
            message = msg + ""\n\n"" + message;
        }
        message += ""\n"";
        message += getTrace();
        textArea.setText(message);
        textArea.setEditable(false);
        JScrollPane scroll = new JScrollPane(textArea);
        scroll.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scroll.getViewport().setMinimumSize(new Dimension(200, 300));
        c.weighty = 1;
        c.gridwidth = 3;
        c.gridx = 0;
        c.gridy++;
        p.add(scroll, c);
        c.gridy++;
        c.fill = GridBagConstraints.NONE;
        c.weighty = 0;
        c.insets = new Insets(2, 4, 2, 4);
        final JButton buttonClose = new JButton(""Fermer"");
        p.add(buttonClose, c);
        final Window window = this.comp == null ? null : SwingUtilities.getWindowAncestor(this.comp);
        final JDialog f;
        if (window instanceof Frame) {
            f = new JDialog((Frame) window, ""Erreur"", true);
        } else {
            f = new JDialog((Dialog) window, ""Erreur"", true);
        }
        f.setContentPane(p);
        f.pack();
        f.setSize(580, 680);
        f.setMinimumSize(new Dimension(380, 380));
        f.setLocationRelativeTo(this.comp);
        final ActionListener al = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (quit) {
                    System.exit(1);
                } else {
                    f.dispose();
                }
            }
        };
        buttonClose.addActionListener(al);
        f.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                al.actionPerformed(null);
            }
        });
        f.setVisible(true);
    }","    public float[][] findDistances() {
        float[][] distance = new float[noseqs][noseqs];
        if (pwtype.equals(""PID"")) {
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    if (j == i) {
                        distance[i][i] = 0;
                    } else {
                        distance[i][j] = 100 - Comparison.compare(sequence[i], sequence[j]);
                        distance[j][i] = distance[i][j];
                    }
                }
            }
        } else {
            float max = -1;
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    AlignSeq as = new AlignSeq(sequence[i], sequence[j], ""pep"");
                    as.calcScoreMatrix();
                    as.traceAlignment();
                    as.printAlignment();
                    distance[i][j] = (float) as.maxscore;
                    if (max < distance[i][j]) {
                        max = distance[i][j];
                    }
                }
            }
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    distance[i][j] = max - distance[i][j];
                    distance[j][i] = distance[i][j];
                }
            }
        }
        return distance;
    }",0,0
"    public static Object[] setLength(Object[] source, int length) {
        Object[] copy = (Object[]) Array.newInstance(source.getClass().getComponentType(), length);
        System.arraycopy(source, 0, copy, 0, Math.min(source.length, length));
        return copy;
    }","    private int findAt(E e) {
        int lower = 0, upper = list.size() - 1;
        int mid, comparison;
        while (lower <= upper) {
            mid = (lower + upper) / 2;
            comparison = comp.compare(e, list.get(mid));
            comparisons++;
            if (comparison < 0) {
                upper = mid - 1;
            } else if (comparison > 0) {
                lower = mid + 1;
            } else {
                return mid;
            }
        }
        return -1;
    }",0,0
"    protected static double[][] buildDistancesMatrix(PairwiseDistanceCalculator pairwiseDistanceCalculator, int dimension, boolean useTwiceMaximumDistanceWhenPairwiseDistanceNotCalculatable, ProgressListener progress) throws CannotBuildDistanceMatrixException {
        double[][] distances = new double[dimension][dimension];
        float tot = (dimension * (dimension - 1)) / 2;
        int done = 0;
        final double noDistance = -1;
        double maxDistance = -1;
        for (int i = 0; i < dimension; ++i) {
            for (int j = i + 1; j < dimension; ++j) {
                try {
                    distances[i][j] = pairwiseDistanceCalculator.calculatePairwiseDistance(i, j);
                    maxDistance = Math.max(distances[i][j], maxDistance);
                } catch (CannotBuildDistanceMatrixException e) {
                    if (!useTwiceMaximumDistanceWhenPairwiseDistanceNotCalculatable) {
                        throw e;
                    }
                    distances[i][j] = noDistance;
                }
                distances[j][i] = distances[i][j];
                if (progress != null) progress.setProgress(++done / tot);
            }
        }
        if (maxDistance < 0) {
            throw new CannotBuildDistanceMatrixException(""It is not possible to compute the Tamura-Nei genetic distance "" + ""for these sequences because no pair of sequences overlap in the alignment."");
        }
        for (int i = 0; i < dimension; ++i) {
            for (int j = i + 1; j < dimension; ++j) {
                if (distances[i][j] == noDistance) {
                    distances[i][j] = distances[j][i] = maxDistance * 2;
                }
            }
        }
        return distances;
    }","    public static boolean update(Departamento objDepartamento) {
        int result = 0;
        Connection c = DBConnection.getConnection();
        PreparedStatement pst = null;
        if (c == null) {
            return false;
        }
        try {
            c.setAutoCommit(false);
            String sql = ""update departamento set nome = ?, sala = ?, telefone = ?, id_orgao = ? where id_departamento= ?"";
            pst = c.prepareStatement(sql);
            pst.setString(1, objDepartamento.getNome());
            pst.setString(2, objDepartamento.getSala());
            pst.setString(3, objDepartamento.getTelefone());
            pst.setLong(4, (objDepartamento.getOrgao()).getCodigo());
            pst.setInt(5, objDepartamento.getCodigo());
            result = pst.executeUpdate();
            c.commit();
        } catch (SQLException e) {
            try {
                c.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
            System.out.println(""[DepartamentoDAO.update] Erro ao atualizar -> "" + e.getMessage());
        } finally {
            DBConnection.closePreparedStatement(pst);
            DBConnection.closeConnection(c);
        }
        if (result > 0) {
            return true;
        } else {
            return false;
        }
    }",0,0
"    public FoundExpressions getFoundExpressions(String regExpr) {
        FoundExpressions expressions = null;
        Pattern p = Pattern.compile(regExpr);
        Matcher m = p.matcher(text);
        while (m.find()) {
            int start = m.start();
            int end = m.end();
            if (expressions == null) {
                expressions = new FoundExpressions();
            }
            Selection selection = new Selection();
            selection.setStart(start);
            selection.setEnd(end);
            expressions.add(selection);
        }
        return expressions;
    }","    public static <T> T[] addToArray(T[] array, T object) {
        Object[] newArray = null;
        if (array == null) {
            newArray = (Object[]) Array.newInstance(object.getClass(), 1);
            newArray[0] = object;
        } else {
            newArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
            System.arraycopy(array, 0, newArray, 0, array.length);
            newArray[array.length] = object;
        }
        return (T[]) newArray;
    }",0,0
"    void logCorrectMatrix(double p) {
        for (int i = 0; i < numdata; i++) {
            for (int j = 0; j < i; j++) {
                depMatrix[i][j] = 1 / Math.pow(depMatrix[i][j], p);
                depMatrix[j][i] = depMatrix[i][j];
            }
        }
    }","    public Connection connect(String userName, String password, String url) {
        Connection connection = null;
        boolean err = false;
        try {
            Class.forName(""com.mysql.jdbc.Driver"").newInstance();
        } catch (Exception e) {
            System.err.println(""Error loading MySQL driver: "" + e.getMessage());
            err = true;
        }
        if (!err) {
            try {
                connection = DriverManager.getConnection(url, userName, password);
                System.out.println(""Database connection established."");
            } catch (SQLException e) {
                System.err.println(String.format(""Unable to connect to database server using url '%s', user '%s', and password '%s': msg is: %s"", url, userName, password, e.getMessage()));
                System.err.println(""SQLState: "" + e.getSQLState());
                System.err.println(""VendorError: "" + e.getErrorCode());
                err = true;
            }
        }
        if (err) System.exit(1);
        return connection;
    }",0,0
"    public float[][] findDistances() {
        float[][] distance = new float[noseqs][noseqs];
        if (pwtype.equals(""PID"")) {
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    if (j == i) {
                        distance[i][i] = 0;
                    } else {
                        distance[i][j] = 100 - Comparison.compare(sequence[i], sequence[j]);
                        distance[j][i] = distance[i][j];
                    }
                }
            }
        } else {
            float max = -1;
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    AlignSeq as = new AlignSeq(sequence[i], sequence[j], ""pep"");
                    as.calcScoreMatrix();
                    as.traceAlignment();
                    as.printAlignment();
                    distance[i][j] = (float) as.maxscore;
                    if (max < distance[i][j]) {
                        max = distance[i][j];
                    }
                }
            }
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    distance[i][j] = max - distance[i][j];
                    distance[j][i] = distance[i][j];
                }
            }
        }
        return distance;
    }","    public static JEditorPane createURLLabel(String htmlMessage) {
        Font font = UIManager.getFont(""Label.font"");
        String rgb = Integer.toHexString(new JPanel().getBackground().getRGB());
        rgb = rgb.substring(2, rgb.length());
        String bodyRule = ""body { background: #"" + rgb + ""; font-family: "" + font.getFamily() + ""; font-size: "" + font.getSize() + ""pt; }"";
        JEditorPane jEditorPane = new JEditorPane(new HTMLEditorKit().getContentType(), htmlMessage);
        ((HTMLDocument) jEditorPane.getDocument()).getStyleSheet().addRule(bodyRule);
        jEditorPane.setEditable(false);
        jEditorPane.setBorder(null);
        jEditorPane.setOpaque(false);
        jEditorPane.addHyperlinkListener(new HyperlinkListener() {

            @Override
            public void hyperlinkUpdate(HyperlinkEvent hyperlinkEvent) {
                if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                    HyperlinkEvent.EventType eventType = hyperlinkEvent.getEventType();
                    if (eventType == HyperlinkEvent.EventType.ACTIVATED) {
                        try {
                            Desktop.getDesktop().browse(hyperlinkEvent.getURL().toURI());
                        } catch (URISyntaxException uriSyntaxException) {
                            showMessageDialog(null, new MessageFormat(Messages.getString(""MessageDialog.6"")).format(new Object[] { hyperlinkEvent.getURL() }), JOptionPane.ERROR_MESSAGE, JOptionPane.DEFAULT_OPTION);
                        } catch (IOException ioException) {
                            showMessageDialog(null, Messages.getString(""MessageDialog.8""), JOptionPane.ERROR_MESSAGE, JOptionPane.DEFAULT_OPTION);
                        }
                    }
                } else {
                    showMessageDialog(null, Messages.getString(""MessageDialog.7""), JOptionPane.ERROR_MESSAGE, JOptionPane.DEFAULT_OPTION);
                }
            }
        });
        return jEditorPane;
    }",0,0
"    public void startFileConversion() {
        FileManagement.startTime = System.currentTimeMillis();
        FileManagement.fetchAllFiles(new File(sourceDir), javaFileList);
        Collections.sort(javaFileList);
        for (JavaFileBean javaFile : javaFileList) {
            performConversion(javaFile);
        }
        htmlManagementIndex = new HTMLManagementIndexFile();
        htmlManagementIndex.createIndexHtmlFile(javaFileList, destinationDir);
        Desktop desktop = null;
        if (Desktop.isDesktopSupported()) {
            desktop = Desktop.getDesktop();
            URI uri = null;
            try {
                uri = new URI(""file://"" + destinationDir.replace('\\', '/') + ""/index.html"");
                desktop.browse(uri);
            } catch (URISyntaxException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }","    @SuppressWarnings({ ""rawtypes"", ""unchecked"", ""null"" })
    public Object set(Object arrayOrList, int index, Object item, GenericBean<Object> arrayReceiver, int maximumGrowth) throws NlsIllegalArgumentException {
        if (arrayOrList == null) {
            throw new NlsNullPointerException(""arrayOrList"");
        }
        int maxGrowth = maximumGrowth;
        Class<?> type = arrayOrList.getClass();
        List list = null;
        int size;
        if (type.isArray()) {
            size = Array.getLength(arrayOrList);
            if (arrayReceiver == null) {
                maxGrowth = 0;
            }
        } else if (List.class.isAssignableFrom(type)) {
            list = (List) arrayOrList;
            size = list.size();
        } else {
            throw new NlsIllegalArgumentException(arrayOrList);
        }
        int growth = index - size + 1;
        if (growth > maxGrowth) {
            throw new ContainerGrowthException(growth, maxGrowth);
        }
        if (type.isArray()) {
            if (growth > 0) {
                if (getLogger().isTraceEnabled()) {
                    getLogger().trace(""Increasing array size by "" + growth);
                }
                Object newArray = Array.newInstance(type.getComponentType(), index + 1);
                System.arraycopy(arrayOrList, 0, newArray, 0, size);
                Array.set(newArray, index, item);
                arrayReceiver.setValue(newArray);
                return null;
            } else {
                Object old = Array.get(arrayOrList, index);
                Array.set(arrayOrList, index, item);
                return old;
            }
        } else {
            if (growth > 0) {
                if (getLogger().isTraceEnabled()) {
                    getLogger().trace(""Increasing list size by "" + growth);
                }
                growth--;
                while (growth > 0) {
                    list.add(null);
                    growth--;
                }
                list.add(item);
                return null;
            } else {
                return list.set(index, item);
            }
        }
    }",0,0
"    public static String serialize(String s) {
        StringBuffer sb = new StringBuffer();
        Pattern compile = Pattern.compile(serializeRegex);
        Matcher matcher = compile.matcher(s);
        int previousCopy = 0;
        while (matcher.find()) {
            int start = matcher.start();
            int end = matcher.end();
            sb.append(s.substring(previousCopy, start));
            String match = s.substring(start, end);
            sb.append(match.equals(""\\"") ? ""\\\\"" : ""\\n"");
            previousCopy = end;
        }
        sb.append(s.substring(previousCopy, s.length()));
        return sb.toString();
    }","	public static int getFibonacci(int n) {
		if(n == 0)
			return 0;
		else if (n == 1)
			return 1;
		else
			return getFibonacci(n-1) + getFibonacci(n-2);
	}",0,0
"    public ImageDisplay(ImageDisplayApplet applet, GraphicsConfiguration gc) {
        this.applet = applet;
        if (applet == null) {
            frame = new JFrame(gc);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(PREFERRED_WIDTH, PREFERRED_HEIGHT));
        Action openAction = new AbstractAction(""Open File"", new ImageIcon(getClass().getResource(""/open.gif""))) {

            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }
        };
        JToolBar bar = new JToolBar();
        bar.add(new ToolBarButton(openAction));
        add(bar, BorderLayout.NORTH);
        if (applet == null) {
            frame.setTitle(""Image Display - Control Panel"");
            frame.getContentPane().add(this, BorderLayout.CENTER);
            frame.pack();
            frame.show();
        }
    }","    public static String replacePlaceholders(String str, String placeholder, String replacement) {
        StringBuffer sb = new StringBuffer();
        Pattern pattern = Pattern.compile(""(\\$\\{"" + placeholder + ""\\})"");
        int lastIndex = 0;
        Matcher m = pattern.matcher(str);
        while (m.find()) {
            sb.append(str.substring(lastIndex, m.start()));
            sb.append(replacement);
            lastIndex = m.end();
        }
        sb.append(str.substring(lastIndex));
        return sb.toString();
    }",0,0
"    public static double[][] transpose(double[][] a) {
        double[][] t = new double[a[0].length][a.length];
        for (int i = 0; i < a.length; i++) for (int j = 0; j < a[0].length; j++) t[j][i] = a[i][j];
        return t;
    }","    public static String compileTemplateFile(HashMap<String, String> variables, Reader source) throws IOException {
        String tag = ""\\{%([\\w _-]+)%\\}"";
        Pattern patternTag = Pattern.compile(tag);
        StringBuilder builder = new StringBuilder();
        BufferedReader reader = new BufferedReader(source);
        String line = null;
        while ((line = reader.readLine()) != null) {
            Matcher matcher = patternTag.matcher(line);
            int lastIndex = 0;
            while (matcher.find()) {
                String key = matcher.group(1).trim();
                builder.append(line.substring(lastIndex, matcher.start()));
                builder.append(variables.get(key));
                lastIndex = matcher.end();
            }
            builder.append(line.substring(lastIndex));
            builder.append(""\n"");
        }
        return builder.toString();
    }",0,0
"    protected void showDownloadFolder() {
        if (Desktop.isDesktopSupported()) {
            try {
                if (JPTrayIcon.isWindows()) Runtime.getRuntime().exec(""rundll32 SHELL32.DLL,ShellExec_RunDLL \"""" + fileDownloads.getAbsolutePath() + ""\""""); else Desktop.getDesktop().browse(getFileURI(fileDownloads.getAbsolutePath()));
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else JOptionPane.showMessageDialog(this, Messages.getString(""FileWindow.DirectoryOpenNotSupported"").replace(""$PATH$"", fileDownloads.getAbsolutePath()));
    }","    private void buildMethod(Method result, String body) {
        Matcher stat = Pattern.compile(String.format(""(%s)|(%s)|(%s)"", methodReturn.toString(), objectAccess.toString(), staticAccess.toString())).matcher(body);
        int currentPos = 0;
        while (stat.find()) {
            Matcher returns = methodReturn.matcher(stat.group());
            Matcher oAccess = objectAccess.matcher(stat.group());
            Matcher sAccess = staticAccess.matcher(stat.group());
            returns.find();
            oAccess.find();
            sAccess.find();
            if (returns.matches()) {
                result.append(new UnchangedCode(body.substring(currentPos, stat.start() + returns.start(1))));
                result.append(new Method.Return(returns.group(2)));
            } else if (oAccess.matches()) {
                result.append(new UnchangedCode(body.substring(currentPos, stat.start() + oAccess.start(1))));
                result.append(new Method.ObjectAccess(oAccess.group(2), oAccess.group(3), oAccess.group(4)));
            } else {
                result.append(new UnchangedCode(body.substring(currentPos, stat.start() + sAccess.start(1))));
                result.append(new Method.StaticAccess(sAccess.group(2), sAccess.group(3)));
            }
            currentPos = stat.end();
        }
        result.append(new UnchangedCode(body.substring(currentPos, body.length())));
    }",0,0
"            @Override
            public void mouseClicked(MouseEvent arg0) {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    if (desktop.isSupported(Desktop.Action.BROWSE)) {
                        try {
                            desktop.browse(new URI(""http://sourceforge.net/projects/jcohorte/""));
                        } catch (IOException e) {
                            e.printStackTrace();
                        } catch (URISyntaxException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }","    public Object[] toArray(Object a[]) {
        if (a.length < size()) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size());
        if (inverse) {
            throw new OutOfMemoryError(""cannot allocate infinite array"");
        }
        System.arraycopy(elements, 0, a, 0, elements.length);
        if (a.length > elements.length) a[elements.length] = null;
        return a;
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 4) {
            usage();
            System.exit(1);
        }
        System.out.println();
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        if (debug) props.put(""mail.debug"", args[3]);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            Message msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(args[0]) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Test"");
            msg.setSentDate(new Date());
            msg.setText(msgText);
            Transport.send(msg);
        } catch (MessagingException mex) {
            System.out.println(""\n--Exception handling in msgsendsample.java"");
            mex.printStackTrace();
            System.out.println();
            Exception ex = mex;
            do {
                if (ex instanceof SendFailedException) {
                    SendFailedException sfex = (SendFailedException) ex;
                    Address[] invalid = sfex.getInvalidAddresses();
                    if (invalid != null) {
                        System.out.println(""    ** Invalid Addresses"");
                        if (invalid != null) {
                            for (int i = 0; i < invalid.length; i++) System.out.println(""         "" + invalid[i]);
                        }
                    }
                    Address[] validUnsent = sfex.getValidUnsentAddresses();
                    if (validUnsent != null) {
                        System.out.println(""    ** ValidUnsent Addresses"");
                        if (validUnsent != null) {
                            for (int i = 0; i < validUnsent.length; i++) System.out.println(""         "" + validUnsent[i]);
                        }
                    }
                    Address[] validSent = sfex.getValidSentAddresses();
                    if (validSent != null) {
                        System.out.println(""    ** ValidSent Addresses"");
                        if (validSent != null) {
                            for (int i = 0; i < validSent.length; i++) System.out.println(""         "" + validSent[i]);
                        }
                    }
                }
                System.out.println();
                if (ex instanceof MessagingException) ex = ((MessagingException) ex).getNextException(); else ex = null;
            } while (ex != null);
        }
    }","    private Object[] allocateNewArray(int capacity) {
        Class arrayClass = this.array.getClass();
        Object[] newArray = (Object[]) Array.newInstance(arrayClass.getComponentType(), capacity);
        System.arraycopy(this.array, 0, newArray, 0, this.length);
        return newArray;
    }",0,0
"    private static void search(List<CSequenceView> sequences, CRegexSearchParams params, CRegexResults results) {
        if (params.getRegexType() == CConstants.RegexType.PSSM) {
            searchPssm(sequences, params, results);
            return;
        }
        CRegexResults.Regex regex = results.addRegex(params.getQuery(), parsePattern(params), params.getRegexType());
        results.addRegex(regex);
        Pattern pat = Pattern.compile(regex.getRegex());
        for (CSequenceView seq : sequences) {
            String str = seq.getSequence(params.getSequenceType());
            if (str == null) continue;
            CRegexResults.Sequence sequence = results.addSequence(seq);
            Matcher matcher = pat.matcher(str);
            while (matcher.find()) {
                CRegexResults.Match match = regex.addMatch(sequence);
                match.setStart(matcher.start());
                match.setEnd(matcher.end());
                match.setMatch(matcher.group());
            }
        }
    }","    public static boolean delete(File resource) throws IOException {
        if (resource.isDirectory()) {
            File[] childFiles = resource.listFiles();
            for (File child : childFiles) {
                delete(child);
            }
        }
        return resource.delete();
    }",0,0
"    public String wikify(String s, WikiPageHandler handler) {
        s = s.replace(""\\\\["", ""_BRACKETOPEN_"");
        if (getReplaceNewlineWithP()) {
            s = s.replaceAll(""\r\n\r\n"", ""\n<p>\n"");
            s = s.replaceAll(""\r\r"", ""\n<p>\n"");
        }
        s = s.replaceAll(""'''''([^']+)'''''"", ""<b><i>$1</i></b>"");
        s = s.replaceAll(""'''([^']+)'''"", ""<b>$1</b>"");
        s = s.replaceAll(""''([^']+)''"", ""<i>$1</i>"");
        Pattern pattern;
        Matcher matcher;
        pattern = Pattern.compile(""\\[\\[([^\\]|]+)\\|?([^\\]]*)\\]\\]"");
        matcher = pattern.matcher(s);
        while (matcher.find()) {
            String name = matcher.group(1);
            String label = matcher.group(2);
            int start = matcher.start(0);
            int end = matcher.end(0);
            String link;
            if (handler == null) {
                if (label.trim().length() == 0) {
                    label = name;
                }
                link = ""<a href=\"""" + name + ""\"">"" + label + ""</a>"";
            } else {
                link = handler.getWikiLink(this, name, label);
            }
            s = s.substring(0, start) + link + s.substring(end);
            matcher = pattern.matcher(s);
        }
        int cnt = 0;
        pattern = Pattern.compile(""\\[([^\\]]+)\\]"");
        matcher = pattern.matcher(s);
        while (matcher.find()) {
            String name = matcher.group(1).trim();
            int idx = name.indexOf("" "");
            int start = matcher.start(0);
            int end = matcher.end(0);
            if (idx > 0) {
                String label = name.substring(idx);
                name = name.substring(0, idx);
                String ahref = ""<a title=\"""" + name + ""\"" class=\""wiki-link-external\"" target=\""externalpage\"" href=\"""" + name + ""\"">"";
                s = s.substring(0, start) + ahref + label + ""</a>"" + s.substring(end);
            } else {
                cnt++;
                String ahref = ""<a title=\"""" + name + ""\"" class=\""wiki-link-external\"" target=\""externalpage\"" href=\"""" + name + ""\"">"";
                s = s.substring(0, start) + ahref + ""_BRACKETOPEN_"" + cnt + ""_BRACKETCLOSE_</a>"" + s.substring(end);
            }
            matcher = pattern.matcher(s);
        }
        List headings = new ArrayList();
        pattern = Pattern.compile(""(?m)^\\s*(==+)([^=]+)(==+)\\s*$"");
        matcher = pattern.matcher(s);
        while (matcher.find()) {
            String prefix = matcher.group(1).trim();
            String label = matcher.group(2).trim();
            int start = matcher.start(0);
            int end = matcher.end(0);
            int level = prefix.length();
            String value;
            if (label.startsWith(""{{"")) {
                value = ""<div class=\""wiki-h"" + level + ""\"">"" + label + ""</div>"";
            } else {
                value = ""<a name=\"""" + label + ""\""></a><div class=\""wiki-h"" + level + ""\"">"" + label + ""</div>"";
                headings.add(new Object[] { new Integer(level), label });
            }
            s = s.substring(0, start) + value + s.substring(end);
            matcher = pattern.matcher(s);
        }
        int ulCnt = 0;
        int olCnt = 0;
        StringBuffer buff = new StringBuffer();
        for (String line : (List<String>) StringUtil.split(s, ""\n"", false, false)) {
            String tline = line.trim();
            if (tline.equals(""----"")) {
                buff.append(""<hr>"");
                buff.append(""\n"");
                continue;
            }
            int starCnt = 0;
            while (tline.startsWith(""*"")) {
                tline = tline.substring(1);
                starCnt++;
            }
            if (starCnt > 0) {
                if (starCnt > ulCnt) {
                    while (starCnt > ulCnt) {
                        buff.append(""<ul>\n"");
                        ulCnt++;
                    }
                } else {
                    while ((starCnt < ulCnt) && (ulCnt > 0)) {
                        buff.append(""</ul>\n"");
                        ulCnt--;
                    }
                }
                buff.append(""<li> "");
                buff.append(tline);
                buff.append(""</li> "");
                buff.append(""\n"");
                continue;
            }
            while (ulCnt > 0) {
                buff.append(""</ul>\n"");
                ulCnt--;
            }
            int hashCnt = 0;
            while (tline.startsWith(""#"")) {
                tline = tline.substring(1);
                hashCnt++;
            }
            if (hashCnt > 0) {
                if (hashCnt > olCnt) {
                    while (hashCnt > olCnt) {
                        buff.append(""<ol>\n"");
                        olCnt++;
                    }
                } else {
                    while ((hashCnt < olCnt) && (olCnt > 0)) {
                        buff.append(""</ol>\n"");
                        olCnt--;
                    }
                }
                buff.append(""<li> "");
                buff.append(tline);
                buff.append(""\n"");
                continue;
            }
            while (olCnt > 0) {
                buff.append(""</ol>\n"");
                olCnt--;
            }
            buff.append(line);
            buff.append(""\n"");
        }
        while (ulCnt > 0) {
            buff.append(""</ul>\n"");
            ulCnt--;
        }
        while (olCnt > 0) {
            buff.append(""</ol>\n"");
            olCnt--;
        }
        s = buff.toString();
        StringBuffer sb = new StringBuffer();
        int baseIdx = 0;
        while (true) {
            int idx1 = s.indexOf(""{{"", baseIdx);
            if (idx1 < 0) {
                sb.append(s.substring(baseIdx));
                break;
            }
            int idx2 = s.indexOf(""}}"", idx1);
            if (idx2 <= idx1) {
                sb.append(s.substring(baseIdx));
                break;
            }
            sb.append(s.substring(baseIdx, idx1));
            String property = s.substring(idx1 + 2, idx2);
            baseIdx = idx2 + 2;
            if (property.equals(""noheading"")) {
                makeHeadings = false;
            } else {
                String value = null;
                if (handler != null) {
                    value = handler.getWikiPropertyValue(this, property);
                }
                if (value == null) {
                    value = ""Unknown property:"" + property;
                }
                sb.append(value);
            }
        }
        s = sb.toString();
        sb = new StringBuffer();
        while (true) {
            int idx1 = s.indexOf(""<block"");
            if (idx1 < 0) {
                break;
            }
            int idx2 = s.indexOf("">"", idx1);
            if (idx2 < 0) {
                break;
            }
            int idx3 = s.indexOf(""</block>"", idx2);
            if (idx3 < 0) {
                break;
            }
            String first = s.substring(0, idx1);
            String attrs = s.substring(idx1 + 6, idx2);
            String inner = s.substring(idx2 + 1, idx3);
            Hashtable props = StringUtil.parseHtmlProperties(attrs);
            boolean open = Misc.getProperty(props, ""open"", true);
            String title = Misc.getProperty(props, ""title"", """");
            sb.append(first);
            sb.append(HtmlUtil.makeShowHideBlock(title, inner, open, HtmlUtil.cssClass(""wiki-blockheader""), HtmlUtil.cssClass(""wiki-block"")));
            s = s.substring(idx3 + ""</block>"".length());
        }
        sb.append(s);
        s = sb.toString();
        s = s.replace(""_BRACKETOPEN_"", ""["");
        s = s.replace(""_BRACKETCLOSE_"", ""]"");
        if (getMakeHeadings()) {
            if (headings.size() >= 2) {
                StringBuffer toc = new StringBuffer();
                makeHeadings(headings, toc, -1, """");
                String block = HtmlUtil.makeShowHideBlock(""Contents"", toc.toString(), true, HtmlUtil.cssClass(""wiki-tocheader""), HtmlUtil.cssClass(""wiki-toc""));
                floatBoxes.add(block);
                String blocks = ""<table class=\""wiki-toc-wrapper\"" align=\""right\"" width=\""30%\""><tr><td>"" + StringUtil.join(""<br>"", floatBoxes) + ""</td></tr></table>"";
                s = blocks + s;
            }
        }
        if (categoryLinks.size() > 0) {
            s = s + HtmlUtil.div(""<b>Categories:</b> "" + StringUtil.join(""&nbsp;|&nbsp; "", categoryLinks), HtmlUtil.cssClass(""wiki-categories""));
        }
        return s;
    }","    public float[][] findDistances() {
        float[][] distance = new float[noseqs][noseqs];
        if (pwtype.equals(""PID"")) {
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    if (j == i) {
                        distance[i][i] = 0;
                    } else {
                        distance[i][j] = 100 - Comparison.compare(sequence[i], sequence[j]);
                        distance[j][i] = distance[i][j];
                    }
                }
            }
        } else {
            float max = -1;
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    AlignSeq as = new AlignSeq(sequence[i], sequence[j], ""pep"");
                    as.calcScoreMatrix();
                    as.traceAlignment();
                    as.printAlignment();
                    distance[i][j] = (float) as.maxscore;
                    if (max < distance[i][j]) {
                        max = distance[i][j];
                    }
                }
            }
            for (int i = 0; i < noseqs - 1; i++) {
                for (int j = i; j < noseqs; j++) {
                    distance[i][j] = max - distance[i][j];
                    distance[j][i] = distance[i][j];
                }
            }
        }
        return distance;
    }",0,0
"    public FTPClient getFTP(final Credentials credentials, final String remoteFile) throws NumberFormatException, SocketException, IOException, AccessDeniedException {
        String fileName = extractFilename(remoteFile);
        String fileDirectory = getPathName(remoteFile).substring(0, getPathName(remoteFile).indexOf(fileName));
        FTPClient ftp;
        ftp = new FTPClient();
        loadConfig();
        logger.info(""FTP connection to: "" + extractHostname(remoteFile));
        logger.info(""FTP PORT: "" + prop.getProperty(""port""));
        ftp.connect(extractHostname(remoteFile), Integer.parseInt(prop.getProperty(""port"")));
        int reply = ftp.getReplyCode();
        if (!(FTPReply.isPositiveCompletion(reply))) {
            return null;
        }
        ftp.setFileTransferMode(org.apache.commons.net.ftp.FTP.BINARY_FILE_TYPE);
        ftp.setFileType(org.apache.commons.net.ftp.FTP.BINARY_FILE_TYPE);
        if (!ftp.login(credentials.getUserName(), credentials.getPassword())) {
            throw new AccessDeniedException(prop.getProperty(""login_message""));
        }
        if (fileDirectory != null) {
            ftp.changeWorkingDirectory(fileDirectory);
        }
        return ftp;
    }","    public void saveAs() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fileChooser.addChoosableFileFilter(new VESTChartFilter());
        fileChooser.setCurrentDirectory(new File("".""));
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.CANCEL_OPTION) return;
        File fileName = fileChooser.getSelectedFile();
        if (fileName == null || fileName.getName().equals("""")) {
            JOptionPane.showMessageDialog(this, ""Invalid File Name"", ""Invalid File Name"", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                output = new ObjectOutputStream(new FileOutputStream(fileName));
                save();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, ""Error Saving File"", ""Error"", JOptionPane.ERROR_MESSAGE);
            }
        }
    }",0,0
"    public static final Object[] remove(Object[] array, int index) {
        Object[] tArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length - 1);
        System.arraycopy(array, 0, tArray, 0, index);
        System.arraycopy(array, index + 1, tArray, index, array.length - index - 1);
        return tArray;
    }","                public void mousePressed(MouseEvent e) {
                    if (e.getClickCount() == 2) {
                        String S, S2, S3, Temp;
                        int i;
                        String[] projstr;
                        switch(ListCommande.getSelectedIndex()) {
                            case 0:
                            case 12:
                                S = JOptionPane.showInputDialog(null, ""Entrez le message"", ""Message"", 1);
                                if (S != null) {
                                    S = ""'"" + S;
                                    if (ListCommande.getSelectedIndex() == 0) {
                                        Temp = """";
                                        if (JOptionPane.showConfirmDialog(null, ""Voulez vous positionner le message?"", ""Option"", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                                            jump = new JumpTo(null, true);
                                            Temp = jump.Ed_X.getText() + "","" + jump.Ed_Y.getText();
                                            jump.dispose();
                                            jump = new JumpTo(null, false);
                                            jump.setVisible(false);
                                            jump.setModal(true);
                                            jump.setTitle(""Largeur/Hauteur"");
                                            jump.LblX.setText(""W"");
                                            jump.LblY.setText(""H"");
                                            jump.setVisible(true);
                                            Temp += "","" + jump.Ed_X.getText() + "","" + jump.Ed_Y.getText() + "","";
                                            jump.dispose();
                                            S = Temp + S;
                                        }
                                        Ed_Commande.setText(""Message("" + S + ""')"");
                                    }
                                    if (ListCommande.getSelectedIndex() == 12) Ed_Commande.setText(""OnResultQuery('"" + S + ""')"");
                                }
                                break;
                            case 1:
                                cd = new CondDecl(projet, """", null, true);
                                if (cd.status == 1) Ed_Commande.setText(""Condition('"" + cd.Commande + ""')"");
                                cd.dispose();
                                break;
                            case 2:
                            case 3:
                                values = new String[projet.getObjets().size()];
                                for (int j = 0; j < projet.getObjets().size(); j++) values[j] = projet.getObjetByIndex(j).Name;
                                liste = new JListe(values, null, ""Choisissez l'objet"", true);
                                if (liste.status == 1) {
                                    S = ""1"";
                                    S = (String) JOptionPane.showInputDialog(null, ""Entrez la quantité de l'objet"", ""Quantité"", 1, null, null, S);
                                    if (S != null) {
                                        if (S.compareTo("""") != 0) {
                                            if (S.compareTo(""1"") == 0) {
                                                if (ListCommande.getSelectedIndex() == 2) Ed_Commande.setText(""AddObject("" + liste.ListBox.getSelectedValue().toString() + "")""); else Ed_Commande.setText(""DelObject("" + liste.ListBox.getSelectedValue().toString() + "")"");
                                            } else {
                                                if (ListCommande.getSelectedIndex() == 2) Ed_Commande.setText(""AddObject("" + liste.ListBox.getSelectedValue().toString() + "","" + S + "")""); else Ed_Commande.setText(""DelObject("" + liste.ListBox.getSelectedValue().toString() + "","" + S + "")"");
                                            }
                                        }
                                    }
                                }
                                liste.dispose();
                                break;
                            case 4:
                            case 5:
                                ArrayList<Carte> carte = projet.getCartes();
                                ArrayList<String> nomcarte = new ArrayList<String>();
                                for (i = 0; i < carte.size(); i++) nomcarte.add(carte.get(i).Name);
                                projstr = new String[nomcarte.size()];
                                projstr = nomcarte.toArray(projstr);
                                liste = new JListe(projstr, null, ""Choisissez la carte"", true);
                                if (liste.status == 1) {
                                    jump = new JumpTo(null, true);
                                    if (jump.status == 1) {
                                        if (ListCommande.getSelectedIndex() == 4) Ed_Commande.setText(""Teleport("" + liste.ListBox.getSelectedValue().toString() + "","" + jump.Ed_X.getText() + "","" + jump.Ed_Y.getText() + "")""); else Ed_Commande.setText(""ChangeResPoint("" + liste.ListBox.getSelectedValue().toString() + "","" + jump.Ed_X.getText() + "","" + jump.Ed_Y.getText() + "")"");
                                    }
                                    jump.dispose();
                                }
                                liste.dispose();
                                break;
                            case 6:
                                jump = new JumpTo(null, true);
                                if (jump.status == 1) Ed_Commande.setText(""SScroll("" + jump.Ed_X.getText() + "","" + jump.Ed_Y.getText() + "")"");
                                jump.dispose();
                                break;
                            case 7:
                                ArrayList<String> nomclasses = new ArrayList<String>();
                                for (i = 0; i < projet.getClassesJoueur().size(); i++) nomclasses.add(projet.getClassesJoueur().get(i).Name);
                                projstr = new String[nomclasses.size()];
                                projstr = nomclasses.toArray(projstr);
                                liste = new JListe(projstr, null, ""Choisissez la classe(vide=aucune)"", true);
                                if (liste.status == 1) {
                                    Ed_Commande.setText(""ChangeClasse('"" + liste.ListBox.getSelectedValue().toString() + ""')"");
                                }
                                break;
                            case 8:
                            case 17:
                            case 19:
                            case 20:
                            case 21:
                                JFileChooser choix = new JFileChooser();
                                if (ListCommande.getSelectedIndex() == 7) choix.setCurrentDirectory(new java.io.File(projet.getName() + ""/Chipset/"")); else choix.setCurrentDirectory(new java.io.File(projet.getName() + ""/Sound/""));
                                int retour = choix.showOpenDialog(null);
                                if (retour == JFileChooser.APPROVE_OPTION) {
                                    switch(ListCommande.getSelectedIndex()) {
                                        case 8:
                                            Ed_Commande.setText(""ChangeSkin('Chipset\\"" + choix.getSelectedFile().getName() + ""')"");
                                            break;
                                        case 17:
                                            Ed_Commande.setText(""PlayMusic('Sound\\"" + choix.getSelectedFile().getName() + ""')"");
                                            break;
                                        case 29:
                                            Ed_Commande.setText(""PlaySound('Sound\\"" + choix.getSelectedFile().getName() + ""')"");
                                            break;
                                        case 20:
                                            Ed_Commande.setText(""ChAttaqueSound('Sound\\"" + choix.getSelectedFile().getName() + ""')"");
                                            break;
                                        case 21:
                                            Ed_Commande.setText(""ChBlesseSound('Sound\\"" + choix.getSelectedFile().getName() + ""')"");
                                            break;
                                    }
                                }
                                break;
                            case 9:
                                values = new String[projet.getMonstres().size()];
                                for (int j = 0; j < projet.getMonstres().size(); j++) values[j] = projet.getMonstreByIndex(j).Name;
                                liste = new JListe(values, null, ""Choisissez le monstre"", true);
                                if (liste.status == 1) {
                                    jump = new JumpTo(null, true);
                                    if (jump.status == 1) {
                                        S = JOptionPane.showInputDialog(null, ""Entrez le nombre de Monstre"", ""Monstre"", 1);
                                        if (S != null) {
                                            S2 = JOptionPane.showInputDialog(null, ""Vitesse de respawn?(0=ne respawn pas)"", ""Monstre"", 1);
                                            if (S2 != null) {
                                                S3 = JOptionPane.showInputDialog(null, ""Monstres donnent de l'xp? (0=non, 1=oui)"", ""Monstre"", 1);
                                                if (S3 != null) {
                                                    Ed_Commande.setText(""GenereMonstre("" + liste.ListBox.getSelectedValue().toString() + "","" + jump.Ed_X.getText() + "","" + jump.Ed_Y.getText() + "","" + S + "","" + S2 + "","" + S3 + "")"");
                                                }
                                            }
                                        }
                                    }
                                    jump.dispose();
                                }
                                liste.dispose();
                                break;
                            case 11:
                                Temp = """";
                                if (JOptionPane.showConfirmDialog(null, ""Voulez vous positionner le query?"", ""Option"", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                                    jump = new JumpTo(null, true);
                                    if (jump.status == 1) Temp = ""InputQuery("" + jump.Ed_X.getText() + "","" + jump.Ed_Y.getText();
                                    jump.dispose();
                                }
                                S = JOptionPane.showInputDialog(null, ""Entrez la question"", ""Message"", 1);
                                if (S != null) {
                                    i = 0;
                                    if (Temp.compareTo("""") == 0) Temp = ""InputQuery('"" + S + ""'""; else Temp += "",'"" + S + ""'"";
                                    do {
                                        S = """";
                                        S = JOptionPane.showInputDialog(null, ""Entrez la réponse "" + (i + 1), ""Message"", 1);
                                        if (S == null) S = """";
                                        if (S != """") Temp += "",'"" + S + ""'"";
                                        i++;
                                    } while (S != """");
                                    Temp += "")"";
                                    Ed_Commande.setText(Temp);
                                }
                                break;
                            case 14:
                                S = JOptionPane.showInputDialog(null, ""Entrez la question"", ""Message"", 1);
                                if (S != null) Ed_Commande.setText(Ed_Commande.getText() + ""InputString('"" + S + ""')"");
                                break;
                            case 15:
                                S = JOptionPane.showInputDialog(null, ""Entrez le message du magasin"", ""Message"", 1);
                                if (S != null) {
                                    values = new String[projet.getObjets().size()];
                                    for (int j = 0; j < projet.getObjets().size(); j++) values[j] = projet.getObjetByIndex(j).Name;
                                    liste = new JListe(values, null, ""Choisissez les objets"", true);
                                    if (liste.status == 1) {
                                        Ed_Commande.setText(""Magasin('"" + S + ""'"");
                                        Object[] obj = liste.ListBox.getSelectedValues();
                                        for (int j = 0; j < obj.length; j++) Ed_Commande.setText(Ed_Commande.getText() + "",'"" + obj[j].toString() + ""'"");
                                        Ed_Commande.setText(Ed_Commande.getText() + "")"");
                                    }
                                    liste.dispose();
                                }
                                break;
                            case 16:
                                S = JOptionPane.showInputDialog(null, ""Entrez le temps d'attente"", ""Timer"", 1);
                                if (S != null) Ed_Commande.setText(""Attente("" + S + "")"");
                                break;
                            case 22:
                            case 23:
                                values = new String[projet.getMagies().size()];
                                for (int j = 0; j < projet.getMagies().size(); j++) values[j] = projet.getMagieByIndex(j).Name;
                                liste = new JListe(values, null, ""Choisissez la magie"", true);
                                if (liste.status == 1) {
                                    if (ListCommande.getSelectedIndex() == 23) Ed_Commande.setText(""AddMagie("" + liste.ListBox.getSelectedValue().toString() + "")""); else Ed_Commande.setText(""DelMagie("" + liste.ListBox.getSelectedValue().toString() + "")"");
                                }
                                liste.dispose();
                                break;
                            case 26:
                            case 27:
                                S = JOptionPane.showInputDialog(null, ""Entrez le nom de la sauvegarde(Vide = Choix du joueur)"", ""Sauvegarde"", 1);
                                if (S != null) {
                                    if (ListCommande.getSelectedIndex() == 27) Ed_Commande.setText(""Chargement('"" + S + ""')""); else Ed_Commande.setText(""Sauvegarde('"" + S + ""')"");
                                }
                                break;
                            case 33:
                            case 34:
                                projstr = new String[verifie.getMenuPossibles().size()];
                                projstr = verifie.getMenuPossibles().toArray(projstr);
                                liste = new JListe(projstr, null, ""Choisissez le menu"", true);
                                if (liste.status == 1) {
                                    if (ListCommande.getSelectedIndex() == 32) Ed_Commande.setText(""AddMenu("" + liste.ListBox.getSelectedValue().toString() + "")""); else Ed_Commande.setText(""DelMenu("" + liste.ListBox.getSelectedValue().toString() + "")"");
                                }
                                break;
                            default:
                                Ed_Commande.setText(Ed_Commande.getText() + ListCommande.getSelectedValue().toString());
                        }
                    }
                }",0,0
"    public static String[] extractByPattern(String str, String pattern) {
        Pattern p = Pattern.compile(pattern);
        Matcher m = p.matcher(str);
        ArrayList list = new ArrayList(20);
        while (m.find()) {
            list.add(str.substring(m.start(), m.end()));
        }
        if (!list.isEmpty()) {
            return (String[]) list.toArray(new String[0]);
        } else return null;
    }","    public ComplexMatrix hermitianAdjoint() {
        final double arrayRe[][] = new double[numCols][numRows];
        final double arrayIm[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            arrayRe[0][i] = matrixRe[i][0];
            arrayIm[0][i] = -matrixIm[i][0];
            for (j = 1; j < numCols; j++) {
                arrayRe[j][i] = matrixRe[i][j];
                arrayIm[j][i] = -matrixIm[i][j];
            }
        }
        return new ComplexMatrix(arrayRe, arrayIm);
    }",0,0
"    public static void main(String[] args) {
        RegexUtil util = new RegexUtil();
        String strPattern1 = ""(.*)([\\d+])(.*)"";
        String strText1 = ""TR[54]"";
        Pattern pattern = Pattern.compile(strPattern1);
        Matcher matcher = pattern.matcher(strText1);
        System.out.println(""Matches entire String "" + matcher.matches());
        System.out.println(""Matches at beginning "" + matcher.lookingAt());
        System.out.println(matcher.group(1));
        while (matcher.find()) {
            System.out.println(""Found a match: "" + matcher.group());
            System.out.println(""Start position: "" + matcher.start());
            System.out.println(""End position: "" + matcher.end());
        }
        String strText2 = ""abasdfABSDSAFASDF"";
        System.out.println(!strText2.matches(""[a-zA-Z]*""));
    }","    public boolean processFtp(String serverIp, int port, String user, String password, String synchrnPath, String filePath, File[] uploadFile) throws Exception {
        boolean upload = false;
        try {
            FTPClient ftpClient = new FTPClient();
            ftpClient.setControlEncoding(""euc-kr"");
            if (!EgovWebUtil.isIPAddress(serverIp)) {
                throw new RuntimeException(""IP is needed. ("" + serverIp + "")"");
            }
            InetAddress host = InetAddress.getByName(serverIp);
            ftpClient.connect(host, port);
            if (!ftpClient.login(user, password)) throw new Exception(""FTP Client Login Error : \n"");
            if (synchrnPath.length() != 0) ftpClient.changeWorkingDirectory(synchrnPath);
            FTPFile[] fTPFile = ftpClient.listFiles(synchrnPath);
            FileInputStream fis = null;
            try {
                for (int i = 0; i < uploadFile.length; i++) {
                    if (uploadFile[i].isFile()) {
                        if (!isExist(fTPFile, uploadFile[i])) {
                            fis = new FileInputStream(uploadFile[i]);
                            ftpClient.storeFile(synchrnPath + uploadFile[i].getName(), fis);
                        }
                        if (fis != null) {
                            fis.close();
                        }
                    }
                }
                fTPFile = ftpClient.listFiles(synchrnPath);
                deleteFtpFile(ftpClient, fTPFile, uploadFile);
                upload = true;
            } catch (IOException ex) {
                System.out.println(ex);
            } finally {
                if (fis != null) try {
                    fis.close();
                } catch (IOException ignore) {
                    System.out.println(""IGNORE: "" + ignore);
                }
            }
            ftpClient.logout();
        } catch (Exception e) {
            System.out.println(e);
            upload = false;
        }
        return upload;
    }",0,0
"    @SuppressWarnings(""unchecked"")
    public <T> T[] toArray(T[] a) {
        a = (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size());
        E[] elementData = (E[]) toArray();
        System.arraycopy(elementData, 0, a, 0, size());
        if (a.length > size()) a[size()] = null;
        return a;
    }","    private double[][] calcAdjoint(double[][] values, int size, GlobalValues globals) {
        FunctionToken token = null;
        Function function = null;
        try {
            token = new FunctionToken(""Determinant"");
            function = globals.getFunctionManager().findFunction(token);
        } catch (java.lang.Exception e) {
        }
        double[][] result = new double[size][size];
        for (int rowNumber = 0; rowNumber < size; rowNumber++) {
            for (int colNumber = 0; colNumber < size; colNumber++) {
                DoubleNumberToken subMatrix = new DoubleNumberToken(constructMatrix(values, size, rowNumber, colNumber));
                OperandToken[] operands = new OperandToken[1];
                operands[0] = subMatrix;
                double minor = ((DoubleNumberToken) function.evaluate(operands, globals)).getValueRe();
                int modifier = -1;
                if ((rowNumber + colNumber) % 2 == 0) modifier = 1;
                result[rowNumber][colNumber] = modifier * minor;
            }
        }
        double[][] transResult = new double[size][size];
        for (int colno = 0; colno < size; colno++) {
            for (int rowno = 0; rowno < size; rowno++) {
                transResult[colno][rowno] = result[rowno][colno];
            }
        }
        return transResult;
    }",0,0
"    public void hyperlinkUpdate(HyperlinkEvent e) {
        Point l = MouseInfo.getPointerInfo().getLocation();
        SwingUtilities.convertPointFromScreen(l, invoker);
        final int mouseY = l.y;

        final Element element = e.getSourceElement();
        {
            BalloonTip balloonTip = openBalloons.get(element);
            if (balloonTip != null) {
                balloonTip.refreshLocation();
                return;
            }
        }

        URL url = e.getURL();
        String stringUrl = e.getDescription();
        String text = LinkUtils.getUrlText(element);

        if (url == null) {
            // Invalid url. Try to parse it from text.

            try {
                url = new URL(text);
                // Url in the 'text' field, so assume that text in the 'description' field
                text = stringUrl;
                stringUrl = url.toExternalForm();
            } catch (MalformedURLException ex) {
                // url can not be obtained neither from text nor from description.
            }
        }

        Integer messageId = LinkUtils.getMessageIdFromUrl(stringUrl);
        if (messageId == null) {
            messageId = LinkUtils.getMessageIdFromUrl(text);
        }

        if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            final Timer aimedTimer = aimedTimers.remove(element);
            if (aimedTimer != null) {
                aimedTimer.stop();
            }

            if (url == null) {
                // TODO: show error or standard dialog
            } else if (messageId == null) {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();

                    try {
                        desktop.browse(url.toURI());
                    } catch (IOException e1) {
                        log.error(""Can not open url "" + url.toExternalForm() + "" in default browser"");
                    } catch (URISyntaxException e1) {
                        log.error(""Can not obtain URI of URL: "" + url.toExternalForm());
                    }
                } else {
                    ClipboardUtils.copyToClipboard(url.toExternalForm());
                    Rectangle r = getElementRectangle(element, mouseY);

                    Color color = BalloonTipUtils.TIP_BACKGROUND;
                    BalloonTipStyle tipStyle = BalloonTipUtils.createTipStyle(color);

                    JButton closeButton = BalloonTipUtils.balloonTipCloseButton();
                    final JLabel label = new JLabel(Message.PreviewLink_LinkCopied.get());
                    final BalloonTip balloonTip = new CustomBalloonTip(invoker, label, r, tipStyle, new LeftAbovePositioner(15, 15), closeButton);
                    openBalloons.put(element, balloonTip);

                    balloonTip.addHierarchyListener(new HierarchyListener() {
                        @Override
                        public void hierarchyChanged(HierarchyEvent e) {
                            if (HierarchyEvent.SHOWING_CHANGED == (HierarchyEvent.SHOWING_CHANGED & e.getChangeFlags())) {
                                if (balloonTip.isShowing()) {
                                    openBalloons.put(element, balloonTip);
                                } else {
                                    openBalloons.remove(element);
                                }
                            }
                        }
                    });
                    Timer timer = new Timer((int) TimeUnit.SECONDS.toMillis(3), new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            balloonTip.closeBalloon();
                        }
                    });
                    timer.setRepeats(false);
                    timer.start();
                }
            } else {
                appControl.openMessage(messageId, Property.OPEN_MESSAGE_BEHAVIOUR_GENERAL.get());
            }
        } else if (e.getEventType() == HyperlinkEvent.EventType.EXITED) {
            final Timer timer = aimedTimers.remove(element);
            if (timer != null) {
                timer.stop();
            }
        } else if (e.getEventType() == HyperlinkEvent.EventType.ENTERED) {
            final Runnable showBalloonAction = new ShowBalloonAction(url, messageId, element, mouseY);

            int delay = Property.LINK_PREVIEW_DELAY.get();
            if (delay > 0) {
                // Set up timer
                final Timer timer = new Timer(delay, null);
                timer.setRepeats(false);
                timer.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        aimedTimers.remove(element);
                        showBalloonAction.run();
                    }
                });
                aimedTimers.put(element, timer);
                timer.start();
            } else {
                showBalloonAction.run();
            }
        }
    }","    public static int orderedFind(Vector orderedArray, IComparable obj) {
        int size = orderedArray.size();
        if (size == 0) {
            return -1;
        }
        int begin = 0;
        int end = size - 1;
        int mid, cmp;
        while (begin <= end) {
            mid = (end + begin) / 2;
            IComparable obj2 = (IComparable) orderedArray.elementAt(mid);
            cmp = obj.compares(obj2);
            if (cmp == 0) {
                return mid;
            } else if (cmp < 0) {
                end = mid - 1;
            } else {
                begin = mid + 1;
            }
        }
        return -1;
    }",0,0
"    static boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }","    public void addRole(String role) {
        int arrayLength = Array.getLength(this.roles);
        String[] newArray = (String[]) Array.newInstance(this.roles.getClass().getComponentType(), arrayLength + 1);
        System.arraycopy(this.roles, 0, newArray, 0, arrayLength);
        newArray[arrayLength] = role;
        this.roles = newArray;
    }",0,0
"    static boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    public static String convertLocationRun(String sequence, String symbol) {
        String regex = symbol + ""+"";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(sequence);
        List<String> ranges = new ArrayList<String>();
        while (matcher.find()) {
            int start = matcher.start() + 1;
            int end = matcher.end();
            ranges.add(start + DELIMITER + end);
        }
        return CStringHelper.join(ranges, "","");
    }","    public ContingencyTable(double[][] observed) {
        try {
            this.observed = observed;
            this.numberRow = observed.length;
            this.numberCol = observed[0].length;
            this.rowSumObserved = new int[this.numberRow];
            this.colSumObserved = new int[this.numberCol];
            double[][] currentColumnArray = new double[this.numberCol][this.numberRow];
            for (int i = 0; i < this.numberRow; i++) {
                rowSumObserved[i] = (int) AnalysisUtility.sum(observed[i]);
                for (int j = 0; j < this.numberCol; j++) {
                    currentColumnArray[j][i] = observed[i][j];
                    this.grandTotal += observed[i][j];
                }
            }
            for (int j = 0; j < this.numberCol; j++) {
                colSumObserved[j] = (int) AnalysisUtility.sum(currentColumnArray[j]);
            }
        } catch (DataIsEmptyException e) {
        } catch (NullPointerException e) {
        }
    }",0,0
"    public static Object setLength(Object array, int newLength) {
        if (array == null) {
            return null;
        }
        Object t = Array.newInstance(array.getClass().getComponentType(), newLength);
        int oldLength = Array.getLength(array);
        System.arraycopy(array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
        return t;
    }","    public ContingencyTable(double[][] observed) {
        try {
            this.observed = observed;
            this.numberRow = observed.length;
            this.numberCol = observed[0].length;
            this.rowSumObserved = new int[this.numberRow];
            this.colSumObserved = new int[this.numberCol];
            double[][] currentColumnArray = new double[this.numberCol][this.numberRow];
            for (int i = 0; i < this.numberRow; i++) {
                rowSumObserved[i] = (int) AnalysisUtility.sum(observed[i]);
                for (int j = 0; j < this.numberCol; j++) {
                    currentColumnArray[j][i] = observed[i][j];
                    this.grandTotal += observed[i][j];
                }
            }
            for (int j = 0; j < this.numberCol; j++) {
                colSumObserved[j] = (int) AnalysisUtility.sum(currentColumnArray[j]);
            }
        } catch (DataIsEmptyException e) {
        } catch (NullPointerException e) {
        }
    }",0,0
"        @Override
        public void mouseClicked(final MouseEvent e) {
            if (Desktop.isDesktopSupported()) {
                final Desktop desktop = Desktop.getDesktop();
                try {
                    desktop.browse(new URI(uri));
                } catch (final IOException ex) {
                    Exceptions.printStackTrace(ex);
                } catch (final URISyntaxException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }","    private String calculate(final String from, final Resources resources) {
        StringBuffer output = new StringBuffer();
        Pattern resourceRegexp = Pattern.compile(""\\$\\{[\\w\\.]+\\}"");
        Matcher matcher = resourceRegexp.matcher(from);
        while (matcher.find()) {
            String resourceKey = from.substring(matcher.start() + 2, matcher.end() - 1);
            matcher.appendReplacement(output, resources.getResourceValue(resourceKey));
        }
        matcher.appendTail(output);
        return output.toString();
    }",0,0
"    public Matrix4 transpose() {
        Matrix4 aux = new Matrix4();
        for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) aux.mm[i][j] = mm[j][i];
        assign(aux);
        return this;
    }","    private Pattern createPattern(String pattern) {
        StringBuilder patternBuilder = new StringBuilder();
        Matcher m = GLOB_PATTERN.matcher(pattern);
        int end = 0;
        while (m.find()) {
            patternBuilder.append(quote(pattern, end, m.start()));
            String match = m.group();
            if (""?"".equals(match)) {
                patternBuilder.append('.');
            } else if (""*"".equals(match)) {
                patternBuilder.append("".*"");
            } else if (match.startsWith(""{"") && match.endsWith(""}"")) {
                int colonIdx = match.indexOf(':');
                if (colonIdx == -1) {
                    patternBuilder.append(DEFAULT_VARIABLE_PATTERN);
                    variableNames.add(m.group(1));
                } else {
                    String variablePattern = match.substring(colonIdx + 1, match.length() - 1);
                    patternBuilder.append('(');
                    patternBuilder.append(variablePattern);
                    patternBuilder.append(')');
                    String variableName = match.substring(1, colonIdx);
                    variableNames.add(variableName);
                }
            }
            end = m.end();
        }
        patternBuilder.append(quote(pattern, end, pattern.length()));
        return Pattern.compile(patternBuilder.toString());
    }",0,0
"    public static String convertJS(String source) {
        if (source == null) return null;
        Pattern ptn = Pattern.compile(""\\$\\{[^}]+\\}"");
        Matcher m = ptn.matcher(source);
        char[] charArray = source.toCharArray();
        while (m.find()) {
            Arrays.fill(charArray, m.start(), m.end(), '1');
        }
        return new String(charArray);
    }","    public void createZip(String baseDir, String objFileName) throws Exception {
        logger.info(""createZip: [ "" + baseDir + ""]   ["" + objFileName + ""]"");
        baseDir = baseDir + ""/"" + timesmpt;
        File folderObject = new File(baseDir);
        if (folderObject.exists()) {
            List<?> fileList = getSubFiles(new File(baseDir));
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(objFileName));
            ZipEntry ze = null;
            byte[] buf = new byte[1024];
            int readLen = 0;
            for (int i = 0; i < fileList.size(); i++) {
                File f = (File) fileList.get(i);
                ze = new ZipEntry(getAbsFileName(baseDir, f));
                ze.setSize(f.length());
                ze.setTime(f.lastModified());
                zos.putNextEntry(ze);
                InputStream is = new BufferedInputStream(new FileInputStream(f));
                while ((readLen = is.read(buf, 0, 1024)) != -1) {
                    zos.write(buf, 0, readLen);
                }
                is.close();
            }
            zos.close();
        } else {
            throw new Exception(""this folder isnot exist!"");
        }
    }",0,0
"    @SuppressWarnings(""unchecked"")
    public static <T> T[] copy(T[] array) {
        Class<?> type = array.getClass().getComponentType();
        T[] newArray = (T[]) Array.newInstance(type, array.length);
        System.arraycopy(array, 0, newArray, 0, array.length);
        return newArray;
    }","    public static List<UserUrlCat> parseBookmark(File bookmarkFile) throws Exception {
        List<UserUrlCat> userUrlCatList = new ArrayList<UserUrlCat>(10);
        UserUrlCat userUrlCat, defaultUserUrlCat = new UserUrlCat();
        defaultUserUrlCat.setCatName(""收藏夹"");
        defaultUserUrlCat.setCatCreateType(UserUrlCat.CAT_CREATE_TYPE_UNLINIT);
        String src = FileIO.readAsString(bookmarkFile, FileUtil.getCharset(bookmarkFile));
        src = formatBookmark(src);
        List<Object[]> tempCatList = new ArrayList<Object[]>(10);
        Pattern p = Pattern.compile(""<(h\\d)[^>]*>([^<]*)</\\1>"", Pattern.CASE_INSENSITIVE);
        Matcher m = p.matcher(src);
        while (m.find()) {
            tempCatList.add(new Object[] { m.group(2), m.start(), m.end() });
        }
        String noCatUrls = null;
        if (tempCatList.size() == 0) {
            noCatUrls = src;
        } else {
            noCatUrls = src.substring(0, (Integer) tempCatList.get(0)[1]);
        }
        if (null != noCatUrls && !noCatUrls.trim().equals("""")) {
            parseUserUrl(noCatUrls, defaultUserUrlCat.getUserUrlList());
        }
        String catUrls = null, catName;
        for (int i = 0; i < tempCatList.size(); i++) {
            if (i == tempCatList.size() - 1) {
                catUrls = src.substring((Integer) tempCatList.get(i)[2]);
            } else {
                catUrls = src.substring((Integer) tempCatList.get(i)[2], (Integer) tempCatList.get(i + 1)[1]);
            }
            catName = tempCatList.get(i)[0].toString().trim();
            if (catName.equals("""")) {
                parseUserUrl(catUrls, defaultUserUrlCat.getUserUrlList());
            } else {
                userUrlCat = new UserUrlCat().setCatName(catName);
                userUrlCat.setCatCreateType(UserUrlCat.CAT_CREATE_TYPE_UNLINIT);
                parseUserUrl(catUrls, userUrlCat.getUserUrlList());
                if (userUrlCat.getUserUrlList().size() > 0) {
                    userUrlCatList.add(userUrlCat);
                }
            }
        }
        if (defaultUserUrlCat.getUserUrlList().size() > 0) {
            userUrlCatList.add(defaultUserUrlCat);
        }
        return userUrlCatList;
    }",0,0
"    public static void parseTextInlinedElement(StringBuilder strb, String text, int start, int end) {
        Pattern boldPattern = Pattern.compile(""(^|[\\. ,])([\\*\\+\\_])(.+)\\2($|[\\. ,])"");
        Matcher matcher = boldPattern.matcher(text);
        matcher.region(start, end);
        int i = start, j, k;
        while (matcher.find()) {
            j = matcher.start(2);
            k = matcher.end(2);
            strb.append(text, i, j - 1);
            renderTextInlinedElement(strb, text, j, k);
            i = k + 1;
        }
        if (i < text.length()) {
            strb.append(text, i, end);
        }
    }","    protected Object growIndexedProperty(String name, Object indexedProperty, int index) {
        if (indexedProperty instanceof List) {
            List list = (List) indexedProperty;
            while (index >= list.size()) {
                Class contentType = getDynaClass().getDynaProperty(name).getContentType();
                Object value = null;
                if (contentType != null) {
                    value = createProperty(name + ""["" + list.size() + ""]"", contentType);
                }
                list.add(value);
            }
        }
        if ((indexedProperty.getClass().isArray())) {
            int length = Array.getLength(indexedProperty);
            if (index >= length) {
                Class componentType = indexedProperty.getClass().getComponentType();
                Object newArray = Array.newInstance(componentType, (index + 1));
                System.arraycopy(indexedProperty, 0, newArray, 0, length);
                indexedProperty = newArray;
                set(name, indexedProperty);
                int newLength = Array.getLength(indexedProperty);
                for (int i = length; i < newLength; i++) {
                    Array.set(indexedProperty, i, createProperty(name + ""["" + i + ""]"", componentType));
                }
            }
        }
        return indexedProperty;
    }",0,0
"    public String FTPupload(String filepath) {
        String fileUrl = null;
        Long clicks = System.currentTimeMillis();
        String currentDateTimeString = clicks.toString();
        String[] tmpSplite = filepath.split(""/"");
        String filename = currentDateTimeString + tmpSplite[tmpSplite.length - 1];
        String host = ""140.112.31.165:8080/sound/"";
        Log.d(""test"", ""get in"");
        FTPClient ftp = new FTPClient();
        Log.d(""test"", ""initial ftp"");
        try {
            ftp.connect(""140.112.31.165"");
            ftp.enterLocalPassiveMode();
            Log.d(""test"", ""we connected"");
            if (!ftp.login(""tacowu"", ""4565686"")) {
                ftp.logout();
                return fileUrl;
            }
            int replyCode = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(replyCode)) {
                Log.d(""test"", ""get in trouble"");
                ftp.disconnect();
                return fileUrl;
            }
            Log.d(""test"", ""we logged in"");
            ftp.setFileType(ftp.BINARY_FILE_TYPE);
            ftp.enterLocalPassiveMode();
            File file = new File(filepath);
            if (file == null) Log.d(""test"", ""file open faild""); else Log.d(""test"", ""file open sucess"");
            FileInputStream aInputStream = new FileInputStream(file);
            boolean aRtn = ftp.storeFile(filename, aInputStream);
            aInputStream.close();
            ftp.disconnect();
        } catch (Exception ex) {
        }
        fileUrl = host + filename;
        return fileUrl;
    }","    public ComplexMatrix hermitianAdjoint() {
        final double arrayRe[][] = new double[numCols][numRows];
        final double arrayIm[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            arrayRe[0][i] = matrixRe[i][0];
            arrayIm[0][i] = -matrixIm[i][0];
            for (j = 1; j < numCols; j++) {
                arrayRe[j][i] = matrixRe[i][j];
                arrayIm[j][i] = -matrixIm[i][j];
            }
        }
        return new ComplexSquareMatrix(arrayRe, arrayIm);
    }",0,0
"    public static int[][] getPixels2D(int[] pixels, int w, int h, int size) {
        int[][] npixels = new int[w][h];
        for (int i = 0; i < npixels.length; i++) {
            for (int j = 0; j < npixels[i].length; j++) {
                npixels[i][j] = pixels[i + j * size];
            }
        }
        int pixel[][] = new int[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                pixel[i][j] = npixels[j][i];
            }
        }
        return pixel;
    }","    public void notify(final UIEvent evt) {
        if (evt.isOfType(IReplayTune.class)) {
            if (getPlayer().getTune() != null) {
                playTune(getPlayer().getTune().getInfo().file);
            } else {
                playTune(null);
            }
        } else if (evt.isOfType(IPlayTune.class)) {
            IPlayTune ifObj = (IPlayTune) evt.getUIEventImpl();
            if (evt.isOfType(Reset.class)) {
                getPlayer().setCommand(((Reset) evt.getUIEventImpl()).getCommand());
            }
            playTune(ifObj.getFile());
        } else if (evt.isOfType(IGotoURL.class)) {
            IGotoURL ifObj = (IGotoURL) evt.getUIEventImpl();
            if (isActive()) {
                getAppletContext().showDocument(ifObj.getCollectionURL(), ""_blank"");
            } else {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    if (desktop.isSupported(Desktop.Action.BROWSE)) {
                        try {
                            desktop.browse(ifObj.getCollectionURL().toURI());
                        } catch (final IOException ioe) {
                            ioe.printStackTrace();
                        } catch (final URISyntaxException urie) {
                            urie.printStackTrace();
                        }
                    }
                }
            }
        } else if (evt.isOfType(IStopTune.class)) {
            stopC64();
        } else if (evt.isOfType(IInsertMedia.class)) {
            IInsertMedia ifObj = (IInsertMedia) evt.getUIEventImpl();
            File mediaFile = ifObj.getSelectedMedia();
            try {
                if (mediaFile instanceof ZipEntryFileProxy) {
                    mediaFile = ZipEntryFileProxy.extractFromZip((ZipEntryFileProxy) mediaFile);
                }
                if (mediaFile.getName().endsWith("".gz"")) {
                    mediaFile = ZipEntryFileProxy.extractFromGZ(mediaFile);
                }
                switch(ifObj.getMediaType()) {
                    case TAPE:
                        insertTape(mediaFile, ifObj.getAutostartFile(), ifObj.getComponent());
                        break;
                    case DISK:
                        insertDisk(mediaFile, ifObj.getAutostartFile(), ifObj.getComponent());
                        break;
                    case CART:
                        insertCartridge(mediaFile);
                        break;
                    default:
                        break;
                }
            } catch (IOException e) {
                System.err.println(String.format(""Cannot attach file '%s'."", mediaFile.getAbsolutePath()));
                return;
            }
        }
    }",0,0
"    @Override
    public void hyperlinkUpdate(HyperlinkEvent event) {
        if (event.getEventType() == HyperlinkEvent.EventType.ENTERED) {
        } else if (event.getEventType() == HyperlinkEvent.EventType.EXITED) {
        } else if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            try {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    desktop.browse(event.getURL().toURI());
                }
            } catch (URISyntaxException ex) {
                Exceptions.printStackTrace(ex);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }","    public static String markupStringReplacement(RenderRequest req, RenderResponse res, HttpServletRequest httpReq, HttpServletResponse httpRes, DefinableEntity entity, String inputString, String type, Long binderId, Long entryId) {
        String outputString = new String(inputString);
        outputString = outputString.replaceAll(""%20"", "" "");
        outputString = outputString.replaceAll(""%7B"", ""{"");
        outputString = outputString.replaceAll(""%7D"", ""}"");
        int loopDetector;
        try {
            if (httpReq != null && binderId != null) {
                Pattern p1 = Pattern.compile(""(\\{\\{attachmentUrl: ([^}]*)\\}\\})"");
                Matcher m1 = p1.matcher(outputString);
                loopDetector = 0;
                while (m1.find()) {
                    if (loopDetector > 2000) {
                        logger.error(""Error processing markup: "" + inputString);
                        return outputString;
                    }
                    loopDetector++;
                    String url = m1.group(2);
                    String webUrl = WebUrlUtil.getServletRootURL(httpReq) + WebKeys.SERVLET_VIEW_FILE + ""?"";
                    if (entity != null) {
                        FileAttachment fa = entity.getFileAttachment(url.trim());
                        if (fa != null) {
                            webUrl += WebKeys.URL_FILE_ID + ""="" + fa.getId().toString() + ""&amp;"";
                        } else {
                            webUrl += WebKeys.URL_FILE_TITLE + ""="" + url.trim() + ""&amp;"";
                        }
                    } else {
                        webUrl += WebKeys.URL_FILE_TITLE + ""="" + url.trim() + ""&amp;"";
                    }
                    webUrl += WebKeys.URL_FILE_VIEW_TYPE + ""="" + WebKeys.FILE_VIEW_TYPE_ATTACHMENT_FILE + ""&amp;"";
                    webUrl += WebKeys.URL_BINDER_ID + ""="" + binderId.toString() + ""&amp;"";
                    if (entryId != null) {
                        webUrl += WebKeys.URL_ENTRY_ID + ""="" + entryId.toString() + ""&amp;"";
                    }
                    outputString = m1.replaceFirst(webUrl);
                }
            }
            if (type.equals(WebKeys.MARKUP_VIEW) || type.equals(WebKeys.MARKUP_FORM)) {
                Pattern p2 = Pattern.compile(""(\\{\\{attachmentFileId: ([^}]*)\\}\\})"");
                Matcher m2 = p2.matcher(outputString);
                loopDetector = 0;
                while (m2.find()) {
                    if (loopDetector > 2000) {
                        logger.error(""Error processing markup: "" + inputString);
                        return outputString;
                    }
                    loopDetector++;
                    String fileIds = m2.group(2).trim();
                    String webUrl = WebUrlUtil.getServletRootURL(httpReq) + WebKeys.SERVLET_VIEW_FILE + ""?"";
                    webUrl += WebKeys.URL_FILE_VIEW_TYPE + ""="" + WebKeys.FILE_VIEW_TYPE_ATTACHMENT_FILE + ""&amp;"";
                    webUrl += fileIds;
                    outputString = m2.replaceFirst(webUrl);
                    m2 = p2.matcher(outputString);
                }
            }
            if (type.equals(WebKeys.MARKUP_VIEW)) {
                Pattern p2 = Pattern.compile(""(\\{\\{titleUrl: ([^\\}]*)\\}\\})"");
                Matcher m2 = p2.matcher(outputString);
                loopDetector = 0;
                while (m2.find()) {
                    if (loopDetector > 2000) {
                        logger.error(""Error processing markup: "" + inputString);
                        return outputString;
                    }
                    loopDetector++;
                    String urlParts = m2.group(2).trim();
                    String s_binderId = """";
                    Pattern p3 = Pattern.compile(""binderId=([^ ]*)"");
                    Matcher m3 = p3.matcher(urlParts);
                    if (m3.find() && m3.groupCount() >= 1) s_binderId = m3.group(1).trim();
                    String normalizedTitle = """";
                    Pattern p4 = Pattern.compile(""title=([^ ]*)"");
                    Matcher m4 = p4.matcher(urlParts);
                    if (m4.find() && m4.groupCount() >= 1) normalizedTitle = m4.group(1).trim();
                    String title = """";
                    Pattern p5 = Pattern.compile(""text=(.*)$"");
                    Matcher m5 = p5.matcher(urlParts);
                    if (m5.find() && m5.groupCount() >= 1) title = m5.group(1).trim();
                    String titleLink = """";
                    String action = WebKeys.ACTION_VIEW_FOLDER_ENTRY;
                    Map params = new HashMap();
                    params.put(WebKeys.URL_BINDER_ID, new String[] { s_binderId });
                    params.put(WebKeys.URL_NORMALIZED_TITLE, new String[] { normalizedTitle });
                    String webUrl = getPortletUrl(req, res, httpReq, httpRes, action, true, params);
                    titleLink = ""<a href=\"""" + webUrl + ""\"" "";
                    titleLink += ""onClick=\""if (self.ss_openTitleUrl) return self.ss_openTitleUrl(this);\"">"";
                    titleLink += ""<span class=\""ss_title_link\"">"";
                    titleLink += title + ""</span></a>"";
                    titleLink = titleLink.replaceAll(""&"", ""&amp;"");
                    outputString = outputString.substring(0, m2.start(0)) + titleLink + outputString.substring(m2.end(), outputString.length());
                    m2 = p2.matcher(outputString);
                }
            }
            if (binderId != null && (type.equals(WebKeys.MARKUP_VIEW) || type.equals(WebKeys.MARKUP_FILE))) {
                String action = WebKeys.ACTION_VIEW_FOLDER_ENTRY;
                Pattern p3 = Pattern.compile(""(\\[\\[([^\\]]*)\\]\\])"");
                Matcher m3 = p3.matcher(outputString);
                loopDetector = 0;
                while (m3.find()) {
                    if (loopDetector > 2000) {
                        logger.error(""Error processing markup: "" + inputString);
                        return outputString;
                    }
                    loopDetector++;
                    String title = m3.group(2).trim();
                    String normalizedTitle = getNormalizedTitle(title);
                    if (!normalizedTitle.equals("""")) {
                        String titleLink = """";
                        if (type.equals(WebKeys.MARKUP_VIEW)) {
                            Map params = new HashMap();
                            params.put(WebKeys.URL_BINDER_ID, binderId.toString());
                            params.put(WebKeys.URL_NORMALIZED_TITLE, normalizedTitle);
                            String webUrl = getPortletUrl(req, res, httpReq, httpRes, action, true, params);
                            titleLink = ""<a href=\"""" + webUrl + ""\"" "";
                            titleLink += ""onClick=\""if (self.ss_openTitleUrl) return self.ss_openTitleUrl(this);\"">"";
                            titleLink += ""<span class=\""ss_title_link\"">"";
                            titleLink += title + ""</span></a>"";
                        } else {
                            titleLink = ""{{titleUrl: "" + WebKeys.URL_BINDER_ID + ""="" + binderId.toString();
                            titleLink += "" "" + WebKeys.URL_NORMALIZED_TITLE + ""="" + normalizedTitle;
                            titleLink += "" text="" + title + ""}}"";
                        }
                        outputString = outputString.substring(0, m3.start(0)) + titleLink + outputString.substring(m3.end(), outputString.length());
                        m3 = p3.matcher(outputString);
                    }
                }
            }
        } catch (Exception e) {
            logger.error(""Error processing markup: "" + inputString);
            return inputString;
        }
        return outputString;
    }",0,0
"    public int exists(String fileToCheck) throws IOException {
        FTPClient ftp = new FTPClient();
        int found = 0;
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, this.endpointPort);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.enterLocalPassiveMode();
            if (ftp.listNames(fileToCheck) != null) {
                found = 1;
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return found;
    }","    private void update() {
        double[][] data = new double[4][points.length];
        for (int i = 0; i < points.length; i++) {
            for (int j = 0; j < 3; j++) {
                data[j][i] = points[i][j];
            }
            data[3][i] = 1;
        }
        this.matrix = new Matrix(data);
        this.dirty = false;
    }",0,0
"    EmpTrainingPK getId(String string) {
        EmpTrainingPK id = new EmpTrainingPK();
        String[] params = new String[2];
        int p = 0;
        int grabStart = 0;
        String delim = ""#"";
        String escape = ""~"";
        Pattern pattern = Pattern.compile(escape + ""*"" + delim);
        Matcher matcher = pattern.matcher(string);
        while (matcher.find()) {
            String found = matcher.group();
            if (found.length() % 2 == 1) {
                params[p] = string.substring(grabStart, matcher.start());
                p++;
                grabStart = matcher.end();
            }
        }
        if (p != params.length - 1) {
            throw new IllegalArgumentException(""string "" + string + "" is not in expected format. expected 2 ids delimited by "" + delim);
        }
        params[p] = string.substring(grabStart);
        for (int i = 0; i < params.length; i++) {
            params[i] = params[i].replace(escape + delim, delim);
            params[i] = params[i].replace(escape + escape, escape);
        }
        id.setTrainingID(Short.parseShort(params[0]));
        id.setPersonID(Integer.parseInt(params[1]));
        return id;
    }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"    protected void attachAndRunDemo(final File selectedFile, final File autoStartFile) {
        if (selectedFile.getName().toLowerCase().endsWith("".pdf"")) {
            try {
                final File pdfFile = selectedFile;
                if (pdfFile.exists()) {
                    if (Desktop.isDesktopSupported()) {
                        Desktop.getDesktop().open(pdfFile);
                    } else {
                        System.out.println(""Awt Desktop is not supported!"");
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            config.sidplay2().setLastDirectory(config.sidplay2().getDemos());
            if (diskfileFilter.accept(selectedFile)) {
                getUiEvents().fireEvent(IInsertMedia.class, new IInsertMedia() {

                    @Override
                    public MediaType getMediaType() {
                        return MediaType.DISK;
                    }

                    @Override
                    public File getSelectedMedia() {
                        return selectedFile;
                    }

                    @Override
                    public File getAutostartFile() {
                        return autoStartFile;
                    }

                    @Override
                    public Component getComponent() {
                        return DiskCollection.this;
                    }
                });
            } else {
                getUiEvents().fireEvent(IInsertMedia.class, new IInsertMedia() {

                    @Override
                    public MediaType getMediaType() {
                        return MediaType.TAPE;
                    }

                    @Override
                    public File getSelectedMedia() {
                        return selectedFile;
                    }

                    @Override
                    public File getAutostartFile() {
                        return autoStartFile;
                    }

                    @Override
                    public Component getComponent() {
                        return DiskCollection.this;
                    }
                });
            }
            if (autoStartFile == null) {
                final String command;
                if (diskfileFilter.accept(selectedFile)) {
                    command = ""LOAD\""*\"",8,1\rRUN\r"";
                } else {
                    command = ""LOAD\rRUN\r"";
                }
                getUiEvents().fireEvent(Reset.class, new Reset() {

                    @Override
                    public boolean switchToVideoTab() {
                        return true;
                    }

                    @Override
                    public String getCommand() {
                        return command;
                    }

                    @Override
                    public Component getComponent() {
                        return DiskCollection.this;
                    }
                });
            }
        }
    }","    public static Object expandCollection(Object collection, int size) {
        if (collection == null) {
            return null;
        }
        if (size < getLength(collection)) {
            throw new JXPathException(""adjustment of "" + collection + "" to size "" + size + "" is not an expansion"");
        }
        if (collection.getClass().isArray()) {
            Object bigger = Array.newInstance(collection.getClass().getComponentType(), size);
            System.arraycopy(collection, 0, bigger, 0, Array.getLength(collection));
            return bigger;
        }
        if (collection instanceof Collection) {
            while (((Collection) collection).size() < size) {
                ((Collection) collection).add(null);
            }
            return collection;
        }
        throw new JXPathException(""Cannot turn "" + collection.getClass().getName() + "" into a collection of size "" + size);
    }",0,0
"    @SuppressWarnings(""unchecked"")
    static <T> T[] copyOfRange(T[] original, int start, int end) {
        if (original.length >= start && 0 <= start) {
            if (start <= end) {
                int length = end - start;
                int copyLength = Math.min(length, original.length - start);
                T[] copy = (T[]) Array.newInstance(original.getClass().getComponentType(), length);
                System.arraycopy(original, start, copy, 0, copyLength);
                return copy;
            }
            throw new IllegalArgumentException();
        }
        throw new ArrayIndexOutOfBoundsException();
    }","    @Override
    public void process(JCas jcas) throws AnalysisEngineProcessException {
        String text = jcas.getDocumentText();
        List<PubTerm> humans = new ArrayList<PubTerm>();
        List<PubTerm> mice = new ArrayList<PubTerm>();
        Pattern p = Pattern.compile(""\\s(human|humans|homo sapiens)\\s"", Pattern.CASE_INSENSITIVE);
        Matcher m = p.matcher(text);
        while (m.find()) {
            int begin = m.start() + 1;
            int end = m.end() - 1;
            int score = 1000;
            PubTerm term = createTerm(jcas, begin, end, PredefinedCategories.HUMAN, score, true);
            term.setIdentifiers(createIdentifiers(jcas, new String[][] { { PredefinedIdentifierTypes.UMLS_CUI, ""C0086418"" } }));
            humans.add(term);
        }
        p = Pattern.compile(""\\s(mouse|mus musculus|mice)\\s"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(text);
        while (m.find()) {
            int begin = m.start() + 1;
            int end = m.end() - 1;
            int score = 1000;
            PubTerm term = createTerm(jcas, begin, end, PredefinedCategories.MOUSE, score, true);
            term.setIdentifiers(createIdentifiers(jcas, new String[][] { { PredefinedIdentifierTypes.UMLS_CUI, ""C0025914"" }, { PredefinedIdentifierTypes.MESH_HEADING, ""Mice"" } }));
            mice.add(term);
        }
    }",0,0
"    public FTPClient getFTP(final Credentials credentials, final String remoteFile) throws NumberFormatException, SocketException, IOException, AccessDeniedException {
        String fileName = extractFilename(remoteFile);
        String fileDirectory = getPathName(remoteFile).substring(0, getPathName(remoteFile).indexOf(fileName));
        FTPClient ftp;
        ftp = new FTPClient();
        loadConfig();
        logger.info(""FTP connection to: "" + extractHostname(remoteFile));
        logger.info(""FTP PORT: "" + prop.getProperty(""port""));
        ftp.connect(extractHostname(remoteFile), Integer.parseInt(prop.getProperty(""port"")));
        int reply = ftp.getReplyCode();
        if (!(FTPReply.isPositiveCompletion(reply))) {
            return null;
        }
        ftp.setFileTransferMode(org.apache.commons.net.ftp.FTP.BINARY_FILE_TYPE);
        ftp.setFileType(org.apache.commons.net.ftp.FTP.BINARY_FILE_TYPE);
        if (!ftp.login(credentials.getUserName(), credentials.getPassword())) {
            throw new AccessDeniedException(prop.getProperty(""login_message""));
        }
        if (fileDirectory != null) {
            ftp.changeWorkingDirectory(fileDirectory);
        }
        return ftp;
    }","    public Matrix4 transpose() {
        Matrix4 aux = new Matrix4();
        for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) aux.mm[i][j] = mm[j][i];
        assign(aux);
        return this;
    }",0,0
"    public static boolean update(String user, String pass, String channelString, String globalIP) {
        FTPClient ftp = new FTPClient();
        int reply;
        try {
            ftp.connect(""witna.co.uk"", 21);
            ftp.login(user, pass);
            reply = ftp.getReplyCode();
            if (FTPReply.isPositiveCompletion(reply)) {
                updateChannelList(ftp, channelString);
                if (!ipUpdated) {
                    ipUpdated = updateMasterChannelIP(ftp, globalIP);
                }
                ftp.disconnect();
                return true;
            } else {
                ftp.disconnect();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return false;
    }","    public void changeSData() {
        String[][] fTempData = new String[sData[0].length][sData.length];
        for (int i = 0; i < sData.length; i++) for (int j = 0; j < sData[0].length; j++) fTempData[j][i] = sData[i][j];
        sData = fTempData;
    }",0,0
"    public Collection findUsersByLoginNameStateGroup(String login, String name, Integer state, Integer groupId) throws DAOException {
        ArrayList users = new ArrayList();
        try {
            StringBuffer sql = new StringBuffer();
            boolean loginExists = false;
            this.acquire();
            sql.append(""SELECT u.Id "");
            sql.append("",u.Login "");
            sql.append("",u.Password "");
            sql.append("",u.Object_State "");
            sql.append("",p.id "");
            sql.append("",p.Name "");
            sql.append("",p.First_Name "");
            sql.append("",p.Nick_Name "");
            sql.append("",p.Email "");
            sql.append("",p.Title "");
            sql.append("",p.Url "");
            sql.append("",p.Salutation "");
            sql.append("",p.Position "");
            sql.append("",p.Department "");
            sql.append("",p.Disability "");
            sql.append(""FROM "").append(DatabaseTableConstants.USER_TABLE).append("" u, "");
            sql.append(DatabaseTableConstants.PERSON_TABLE).append("" p "");
            if (groupId != null) {
                sql.append("","").append(DatabaseTableConstants.USER_GROUP_TABLE).append("" up "");
            }
            sql.append(""WHERE u.Person_Id = p.id"");
            StringBuffer sqlZusatz = new StringBuffer();
            String[] loginArray = new String[login.length() + 1];
            int i = 0;
            if (state != null) {
                sqlZusatz.append("" AND u.Object_State = "").append(state);
            } else {
                sqlZusatz.append("" AND u.Object_State <>"").append(Constants.DELETED);
            }
            if (groupId != null) {
                sqlZusatz.append("" AND u.id = up.User_Id AND up.Group_Id = "").append(groupId);
            }
            if (login != null) {
                if (!(login.equals("""") || login.equals(""*"") || login.startsWith(""&"") || login.endsWith(""&"") || login.startsWith("" "") || login.endsWith("" ""))) {
                    loginExists = true;
                    login = login.replace('*', '%');
                    Pattern p = Pattern.compile(""&"");
                    Matcher m = p.matcher(login);
                    if (m.find()) {
                        String loginAnf = login.substring(0, m.start()).trim();
                        String gross = loginAnf.substring(0, 1).toUpperCase() + loginAnf.substring(1, loginAnf.length());
                        String klein = loginAnf.substring(0, 1).toLowerCase() + loginAnf.substring(1, loginAnf.length());
                        if (loginAnf.length() >= 1) {
                            loginArray[i] = ("" AND u.Login like '"" + gross + ""%'"");
                            i++;
                            loginArray[i] = ("" AND u.Login like '"" + klein + ""%'"");
                            i++;
                        } else {
                            loginArray[i] = ("" AND u.Login like '%'"");
                            i++;
                        }
                        login = login.substring(m.end(), login.length()).trim();
                        m = p.matcher(login);
                        while (m.find()) {
                            loginAnf = login.substring(0, m.start()).trim();
                            if (loginAnf.length() >= 1) {
                                gross = loginAnf.substring(0, 1).toUpperCase() + loginAnf.substring(1, loginAnf.length());
                                klein = loginAnf.substring(0, 1).toLowerCase() + loginAnf.substring(1, loginAnf.length());
                                loginArray[i] = ("" AND u.Login like '"" + gross + ""%'"");
                                i++;
                                loginArray[i] = ("" AND u.Login like '"" + klein + ""%'"");
                                i++;
                            } else {
                                loginArray[i] = ("" AND u.Login like '%'"");
                                i++;
                            }
                            login = login.substring(m.end(), login.length()).trim();
                            m = p.matcher(login);
                        }
                        if (login.length() >= 1) {
                            gross = login.substring(0, 1).toUpperCase() + login.substring(1, login.length());
                            klein = login.substring(0, 1).toLowerCase() + login.substring(1, login.length());
                            loginArray[i] = ("" AND u.Login like '"" + gross + ""%'"");
                            i++;
                            loginArray[i] = ("" AND u.Login like '"" + klein + ""%'"");
                            i++;
                        } else {
                            loginArray[i] = ("" AND u.Login like '%'"");
                            i++;
                        }
                    } else {
                        String gross = login.substring(0, 1).toUpperCase() + login.substring(1, login.length());
                        String klein = login.substring(0, 1).toLowerCase() + login.substring(1, login.length());
                        loginArray[i] = ("" AND u.Login like '"" + gross + ""%'"");
                        i++;
                        loginArray[i] = ("" AND u.Login like '"" + klein + ""%'"");
                        i++;
                    }
                } else {
                    loginArray[i] = ("" AND u.Login like '%'"");
                    i++;
                }
            } else {
                loginArray[i] = ("" AND u.Login like '%'"");
                i++;
            }
            if (name != null) {
                if (!(name.equals("""") || name.equals(""*"") || name.startsWith(""&"") || name.endsWith(""&"") || name.startsWith("" "") || name.endsWith("" ""))) {
                    name = name.replace('*', '%');
                    Pattern p = Pattern.compile(""&"");
                    Matcher m = p.matcher(name);
                    if (m.find()) {
                        String nameAnf = name.substring(0, m.start()).trim();
                        String gross = nameAnf.substring(0, 1).toUpperCase() + nameAnf.substring(1, nameAnf.length());
                        String klein = nameAnf.substring(0, 1).toLowerCase() + nameAnf.substring(1, nameAnf.length());
                        if (nameAnf.length() >= 1) {
                            sql.append("" AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[0]);
                            for (int j = 1; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                            }
                            for (int j = 0; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(klein).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                            }
                        } else {
                            for (int j = 0; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[j]);
                            }
                        }
                        name = name.substring(m.end(), name.length()).trim();
                        m = p.matcher(name);
                        while (m.find()) {
                            nameAnf = name.substring(0, m.start()).trim();
                            if (nameAnf.length() >= 1) {
                                gross = nameAnf.substring(0, 1).toUpperCase() + nameAnf.substring(1, nameAnf.length());
                                klein = nameAnf.substring(0, 1).toLowerCase() + nameAnf.substring(1, nameAnf.length());
                                for (int j = 0; j < i; j++) {
                                    sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                                }
                                for (int j = 0; j < i; j++) {
                                    sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(klein).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                                }
                            } else {
                                for (int j = 0; j < i; j++) {
                                    sql.append("" OR u.Person_Id = p.id AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[j]);
                                }
                            }
                            name = name.substring(m.end(), name.length()).trim();
                            m = p.matcher(name);
                        }
                        if (name.length() >= 1) {
                            gross = name.substring(0, 1).toUpperCase() + name.substring(1, name.length());
                            klein = name.substring(0, 1).toLowerCase() + name.substring(1, name.length());
                            for (int j = 0; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                            }
                            for (int j = 0; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(klein).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                            }
                        } else {
                            for (int j = 0; j < i; j++) {
                                sql.append("" OR u.Person_Id = p.id AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[j]);
                            }
                        }
                    } else {
                        String gross = name.substring(0, 1).toUpperCase() + name.substring(1, name.length());
                        String klein = name.substring(0, 1).toLowerCase() + name.substring(1, name.length());
                        sql.append("" AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[0]);
                        for (int j = 1; j < i; j++) {
                            sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(gross).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                        }
                        for (int j = 0; j < i; j++) {
                            sql.append("" OR u.Person_Id = p.id AND p.Name like '"").append(klein).append(""%'"").append(sqlZusatz).append(loginArray[j]);
                        }
                    }
                } else {
                    sql.append("" AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[0]);
                    for (int j = 1; j < i; j++) {
                        sql.append("" OR u.Person_Id = p.id AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[j]);
                    }
                }
            } else {
                sql.append("" AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[0]);
                for (int j = 1; j < i; j++) {
                    sql.append("" OR u.Person_Id = p.id AND (p.Name like '%' OR p.Name is null)"").append(sqlZusatz).append(loginArray[j]);
                }
            }
            if (loginExists) {
                sql.append("" order by u.Login"");
            } else {
                sql.append("" order by p.Name"");
            }
            Statement statement = getConnection().createStatement();
            ResultSet result = statement.executeQuery(sql.toString());
            while (result.next()) {
                UserVo user = new UserVo();
                PersonVo person = new PersonVo();
                user.setId(new Integer(result.getInt(1)));
                user.setLogin(result.getString(2));
                user.setPassword(result.getString(3));
                user.setObjectState(new Integer(result.getInt(4)));
                person.setId(new Integer(result.getInt(5)));
                person.setName(result.getString(6));
                person.setFirstName(result.getString(7));
                person.setNickName(result.getString(8));
                person.setEmail(result.getString(9));
                person.setTitle(result.getString(10));
                person.setUrl(result.getString(11));
                person.setSalutation(result.getString(12));
                person.setPosition(result.getString(13));
                person.setDepartment(result.getString(14));
                person.setDisability(result.getString(15));
                user.setPerson(person);
                users.add(user);
            }
            statement.close();
            result.close();
            StringBuffer phoneSearch = new StringBuffer();
            phoneSearch.append(""SELECT Typ "");
            phoneSearch.append("",Phone_Jack "");
            phoneSearch.append("",Direct_Dial "");
            phoneSearch.append("",City_Code "");
            phoneSearch.append("",Country_Code "");
            phoneSearch.append(""FROM "").append(DatabaseTableConstants.PHONE_TABLE);
            phoneSearch.append("" WHERE Person_Id = ?"");
            PreparedStatement phoneStmt = getConnection().prepareStatement(phoneSearch.toString());
            for (Iterator it = users.iterator(); it.hasNext(); ) {
                PersonVo person = ((UserVo) it.next()).getPerson();
                phoneStmt.setInt(1, person.getId().intValue());
                ResultSet res = phoneStmt.executeQuery();
                ArrayList phones = new ArrayList();
                while (res.next()) {
                    PhoneVo phone = new PhoneVo();
                    phone.setTyp(new Integer(res.getInt(1)));
                    phone.setPhoneJack(res.getString(2));
                    phone.setDirectDial(res.getString(3));
                    phone.setCityCode(res.getString(4));
                    phone.setCountryCode(res.getString(5));
                    phones.add(phone);
                }
                person.addPhones(phones);
                res.close();
            }
            phoneStmt.close();
            StringBuffer addressSearch = new StringBuffer();
            addressSearch.append(""SELECT Typ "");
            addressSearch.append("",Locality "");
            addressSearch.append("",Street "");
            addressSearch.append("",Pcode "");
            addressSearch.append(""FROM "").append(DatabaseTableConstants.ADDRESS_TABLE);
            addressSearch.append("" WHERE Person_Id = ?"");
            PreparedStatement addressStmt = getConnection().prepareStatement(addressSearch.toString());
            for (Iterator it = users.iterator(); it.hasNext(); ) {
                PersonVo person = ((UserVo) it.next()).getPerson();
                addressStmt.setInt(1, person.getId().intValue());
                ResultSet res = addressStmt.executeQuery();
                ArrayList addresses = new ArrayList();
                while (res.next()) {
                    AddressVo address = new AddressVo();
                    address.setTyp(new Integer(res.getInt(1)));
                    address.setLocality(res.getString(2));
                    address.setStreet(res.getString(3));
                    address.setPcode(res.getString(4));
                    addresses.add(address);
                }
                person.addAddresses(addresses);
                res.close();
            }
            addressStmt.close();
        } catch (Exception e) {
            throw new DAOException();
        } finally {
            try {
                this.release();
            } catch (Exception e) {
                System.out.println(""Exception releasing connection !"" + e.toString());
            }
        }
        return users;
    }","    public Object[] toArray(Object a[]) {
        if (a.length < size) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        if (head < tail) {
            System.arraycopy(elementData, head, a, 0, tail - head);
        } else {
            System.arraycopy(elementData, head, a, 0, elementData.length - head);
            System.arraycopy(elementData, 0, a, elementData.length - head, tail);
        }
        if (a.length > size) a[size] = null;
        return a;
    }",0,0
"    private String applyMacro(XMLRegexPattern in, HashMap<String, XMLRegexPattern> macros) {
        String input = in.regex;
        int start = 0;
        int j = 0;
        int k = 0;
        int l = 0;
        String temp = """";
        XMLRegexGroup group = null;
        XMLRegexGroup newGroup = null;
        ArrayList<Integer> captGroups = getGroups(input);
        if (in.groups.getGroup().size() > 0) {
            for (int i : captGroups) {
                j++;
                group = null;
                for (Group g : in.groups.getGroup()) {
                    if (g.getId() == j) {
                        group = (XMLRegexGroup) in.groups.getGroup().get(l);
                        break;
                    }
                }
                if (group == null) {
                    continue;
                }
                newGroup = new XMLRegexGroup(0, group.getClassName());
                groups.getGroup().add(newGroup);
                k = groups.getGroup().size() - 1;
                temp += input.substring(start, i) + ""\\p{group:"" + k + ""}"";
                start = i;
                l++;
            }
        }
        temp += input.substring(start, input.length());
        if (in.getClassName() != null) {
            newGroup = new XMLRegexGroup(0, in.getClassName());
            groups.getGroup().add(newGroup);
            k = groups.getGroup().size() - 1;
            temp = ""\\p{group:"" + k + ""}("" + temp + "")"";
        }
        Pattern p = Pattern.compile(""\\\\p\\{pattern:([^}]+)\\}"");
        Matcher m = p.matcher(temp);
        String out = """";
        start = 0;
        while (m.find()) {
            XMLRegexPattern macro = macros.get(m.group(1));
            out += temp.substring(start, m.start()) + applyMacro(macro, macros);
            start = m.end();
        }
        out += temp.substring(start, temp.length());
        return out;
    }","    public void transpose() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                double t = flmat[i][j];
                flmat[i][j] = flmat[j][i];
                flmat[j][i] = t;
            }
        }
    }",0,0
"    public static synchronized String getSequenceNumber(String SequenceName) {
        String result = ""0"";
        Connection conn = null;
        Statement ps = null;
        ResultSet rs = null;
        try {
            conn = TPCW_Database.getConnection();
            conn.setAutoCommit(false);
            String sql = ""select num from sequence where name='"" + SequenceName + ""'"";
            ps = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            rs = ps.executeQuery(sql);
            long num = 0;
            while (rs.next()) {
                num = rs.getLong(1);
                result = new Long(num).toString();
            }
            num++;
            sql = ""update sequence set num="" + num + "" where name='"" + SequenceName + ""'"";
            int res = ps.executeUpdate(sql);
            if (res == 1) {
                conn.commit();
            } else conn.rollback();
        } catch (Exception e) {
            System.out.println(""Error Happens when trying to obtain the senquence number"");
            e.printStackTrace();
        } finally {
            try {
                if (conn != null) conn.close();
                if (rs != null) rs.close();
                if (ps != null) ps.close();
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
        return result;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"        private <T> T[] increaseArray(T[] a, int len) {
            T[] tmp = a;
            if (a.length > len) {
                return a;
            }
            int newLen = a.length * 2;
            if (newLen < len) {
                newLen = len;
            }
            a = (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), newLen);
            System.arraycopy(tmp, 0, a, 0, tmp.length);
            return a;
        }","    public static String convertJS(String source) {
        if (source == null) return null;
        Pattern ptn = Pattern.compile(""\\$\\{[^}]+\\}"");
        Matcher m = ptn.matcher(source);
        char[] charArray = source.toCharArray();
        while (m.find()) {
            Arrays.fill(charArray, m.start(), m.end(), '1');
        }
        return new String(charArray);
    }",0,0
"    public static final Object[][] transpose(Object[][] a) {
        int am = a.length;
        int an = a[0].length;
        Object[][] result = new Object[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                result[j][i] = a[i][j];
            }
        }
        return result;
    }","    public EEViewer() throws HeadlessException {
        super();
        structureTree = new JTree();
        folderList = new JList();
        folderList.setLayoutOrientation(JList.HORIZONTAL_WRAP);
        folderList.addMouseListener(this);
        folderList.setVisibleRowCount(0);
        infoPanel = new JEditorPane();
        infoPanel.setEditable(false);
        infoPanel.setContentType(""text/html"");
        infoPanel.addHyperlinkListener(new HyperlinkListener() {

            @Override
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == EventType.ACTIVATED && Desktop.isDesktopSupported()) {
                    try {
                        logger.info(""Url: "" + e.getDescription());
                        Desktop.getDesktop().browse(e.getURL().toURI());
                    } catch (Exception ex) {
                        logger.error(ex);
                    }
                }
            }
        });
        structureTree.addTreeSelectionListener(this);
        verticalSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT, new JScrollPane(folderList), new JScrollPane(infoPanel));
        horizontalSplit = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, new JScrollPane(structureTree), verticalSplit);
        this.getContentPane().add(horizontalSplit);
        JToolBar toolbar = new JToolBar();
        toolbar.add(makeNavigationButton(""search.gif"", ""SEARCH"", ""Suchfenster öffnen"", ""Suchen""));
        toolbar.addSeparator();
        toolbar.add(makeNavigationButton(""help.gif"", ""HELP"", ""Hilfefenster öffnen"", ""Hilfe""));
        this.getContentPane().add(toolbar, BorderLayout.PAGE_START);
        Dimension screen = getToolkit().getScreenSize();
        this.setBounds(100, 100, screen.width - 200, screen.height - 200);
        horizontalSplit.setDividerLocation(0.8);
        verticalSplit.setDividerLocation(400);
        JMenuBar menubar = createMenu();
        this.setJMenuBar(menubar);
        this.addWindowListener(this);
    }",0,0
"    public static double[][] correlation(double matrix[][]) {
        double[][] covMatrix = covariance(matrix);
        int m = covMatrix.length;
        double[] vectorDiagonal = new double[m];
        for (int i = 0; i < m; i++) {
            if (covMatrix[i].length != m) throw new IllegalArgumentException();
            vectorDiagonal[i] = Math.sqrt(covMatrix[i][i]);
        }
        double[][] corMatrix = covMatrix;
        for (int v1 = 0; v1 < m; v1++) {
            for (int v2 = v1; v2 < m; v2++) {
                corMatrix[v1][v2] = covMatrix[v1][v2] / (vectorDiagonal[v1] * vectorDiagonal[v2]);
                corMatrix[v2][v1] = corMatrix[v1][v2];
            }
        }
        return corMatrix;
    }","    private void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
        }
    }",0,0
"    public static void main(String[] p) {
        AAAJpg t = new AAAJpg();
        try {
            GB_Frame l_frame = new GB_Frame();
            GB_PanelRowsTitle l_panel = new GB_PanelRowsTitle();
            l_panel.addRow(""toto"", new JLabel(""abcd""));
            l_panel.addRowFill(""toto"", new JTextField(""abcd""));
            l_frame.setMainPanel(l_panel);
            l_frame.pack();
            l_frame.setVisible(true);
            Thread.sleep(2000);
            Robot r = new Robot();
            Dimension d = l_frame.getSize();
            BufferedImage l_img = r.createScreenCapture(new Rectangle(0, 0, d.width, d.height));
            File f = new File(""c:/aa/toto.png"");
            ImageIO.write(l_img, ""png"", f);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    private String parseLineOrientedString(String code) {
        Queue<String> tags = new LinkedList<String>();
        Queue<String> delimiters = new LinkedList<String>();
        Pattern pattern = Pattern.compile(LINE_ORIENTED_STRING_TAG);
        String[] parts = code.split(""\\\\\\\\\n"", 2);
        String firstLine = parts[0];
        String body = parts[1];
        Matcher matcher = pattern.matcher(firstLine);
        while (matcher.find()) {
            String currentDelimiter = matcher.group(1);
            tags.add(matcher.group(2));
            delimiters.add(currentDelimiter);
            if (currentDelimiter.equals(""`"")) {
                this.output += ""\\rubyexecution "";
            } else {
                this.output += ""\\rubystring "";
            }
            this.output += matcher.group();
        }
        this.output += ""\\rubynormal \\\\\n"";
        this.lastMode = ""normal"";
        while (!tags.equals("""")) {
            String currentTag = tags.poll();
            String currentDelimiter = delimiters.poll();
            Pattern endTagPattern = Pattern.compile(""(?m)^"" + currentTag + ""((\\\\\\\\\n)|(\\Z))"");
            Matcher endTagMatcher = endTagPattern.matcher(body);
            if (!endTagMatcher.find()) {
                break;
            }
            int endOfTag = endTagMatcher.start();
            String stringForCurrentTag = body.substring(0, endOfTag);
            if (currentDelimiter.equals(""`"")) {
                this.output += ""\\rubyexecution "";
            } else {
                this.output += ""\\rubystring "";
            }
            if (currentDelimiter.equals(""'"")) {
                this.output += stringForCurrentTag;
            } else {
                String mode;
                if (currentDelimiter.equals(""`"")) {
                    mode = ""execution"";
                } else {
                    mode = ""string"";
                }
                parseStringWithInterpolations(stringForCurrentTag, mode);
            }
            this.output += currentTag + ""\\rubynormal \\\\\n"";
            body = body.substring(endTagMatcher.end());
        }
        return body;
    }",0,0
"    public void processChangedLines(int offset, int length) throws BadLocationException {
        String text = getText(0, getLength());
        highlightString(Color.black, 0, getLength(), true, false, false);
        Set<String> keyw = keywords.keySet();
        for (String keyword : keyw) {
            Color col = keywords.get(keyword);
            Pattern p = Pattern.compile(""\\b"" + keyword + ""\\b"", Pattern.CASE_INSENSITIVE);
            Matcher m = p.matcher(text);
            while (m.find()) {
                highlightString(col, m.start(), keyword.length(), true, true, false);
            }
        }
        int mlsStart = text.indexOf(stringDelimiter);
        while (mlsStart > -1) {
            int mlsEnd = text.indexOf(stringDelimiter, mlsStart + 1);
            mlsEnd = (mlsEnd < 0 ? text.length() - 1 : mlsEnd);
            highlightString(stringColor, mlsStart, (mlsEnd - (mlsStart - 1)), true, false, false);
            mlsStart = text.indexOf(stringDelimiter, mlsEnd + 1);
        }
        int mlqStart = text.indexOf(quoteDelimiter);
        while (mlqStart > -1) {
            int mlqEnd = text.indexOf(quoteDelimiter, mlqStart + 1);
            mlqEnd = (mlqEnd < 0 ? text.length() - 1 : mlqEnd);
            highlightString(quoteColor, mlqStart, (mlqEnd - (mlqStart - 1)), true, false, false);
            mlqStart = text.indexOf(quoteDelimiter, mlqEnd + 1);
        }
        Matcher mlcStart = multiLineCommentDelimiterStart.matcher(text);
        Matcher mlcEnd = multiLineCommentDelimiterEnd.matcher(text);
        while (mlcStart.find()) {
            if (mlcEnd.find(mlcStart.end())) highlightString(commentColor, mlcStart.start(), (mlcEnd.end() - mlcStart.start()), true, false, true); else highlightString(commentColor, mlcStart.start(), getLength(), true, false, true);
        }
        Matcher slc = singleLineCommentDelimter.matcher(text);
        while (slc.find()) {
            int line = rootElement.getElementIndex(slc.start());
            int endOffset = rootElement.getElement(line).getEndOffset() - 1;
            highlightString(commentColor, slc.start(), (endOffset - slc.start()), true, false, true);
        }
    }","    public static <T> T insert(T array, T additionArray, int idx) {
        int additionLength = Array.getLength(additionArray);
        if (additionLength == 0) return array;
        Class componentType = array.getClass().getComponentType();
        int originalLength = Array.getLength(array);
        if (idx == -1) idx = originalLength;
        T newarray = (T) Array.newInstance(componentType, originalLength + additionLength);
        if (idx > 0) System.arraycopy(array, 0, newarray, 0, idx == originalLength ? idx : idx + 1);
        if (componentType.isPrimitive()) {
            for (int a = 0; a < additionLength; a++) {
                Array.set(newarray, idx + a, Array.get(additionArray, a));
            }
        } else {
            System.arraycopy(additionArray, 0, newarray, idx, additionLength);
        }
        if (idx < Array.getLength(array)) System.arraycopy(array, idx, newarray, idx + additionLength, originalLength - idx);
        return newarray;
    }",0,0
"    public static Object[] addElement(Object[] a, Object o) {
        Class clazz = a.getClass().getComponentType();
        Object[] a2 = (Object[]) Array.newInstance(clazz, a.length + 1);
        System.arraycopy(a, 0, a2, 0, a.length);
        a2[a.length] = o;
        return a2;
    }","    public int sftp_connect(HttpServletRequest request) {
        Map<String, Object> setting = (Map<String, Object>) request.getAttribute(""globalSetting"");
        int ftpssl = Common.intval(setting.get(""ftpssl"") + """");
        String ftphost = setting.get(""ftphost"") + """";
        int ftpport = Common.intval(setting.get(""ftpport"") + """");
        String ftpuser = setting.get(""ftpuser"") + """";
        String ftppassword = setting.get(""ftppassword"") + """";
        int ftppasv = Common.intval(setting.get(""ftppasv"") + """");
        String ftpdir = setting.get(""ftpdir"") + """";
        int ftptimeout = Common.intval(setting.get(""ftptimeout"") + """");
        if (ftpssl > 0) {
            try {
                fc = new FTPSClient();
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
                return JC_FTPClientException;
            }
        } else {
            fc = new FTPClient();
        }
        try {
            fc.setConnectTimeout(20000);
            InetAddress inetAddress = InetAddress.getByName(ftphost);
            fc.connect(inetAddress, ftpport);
            if (fc.login(ftpuser, ftppassword)) {
                if (ftppasv > 0) {
                    fc.pasv();
                }
                if (ftptimeout > 0) {
                    fc.setDataTimeout(ftptimeout);
                }
                if (fc.changeWorkingDirectory(ftpdir)) {
                    return JC_FTPClientYES;
                } else {
                    FileHelper.writeLog(request, ""FTP"", ""CHDIR "" + ftpdir + "" ERROR."");
                    try {
                        fc.disconnect();
                        fc = null;
                    } catch (Exception e1) {
                    }
                    return JC_FTPClientNO;
                }
            } else {
                FileHelper.writeLog(request, ""FTP"", ""530 NOT LOGGED IN."");
                try {
                    fc.disconnect();
                    fc = null;
                } catch (Exception e1) {
                }
                return JC_FTPClientNO;
            }
        } catch (Exception e) {
            FileHelper.writeLog(request, ""FTP"", ""COULDN'T CONNECT TO "" + ftphost + "":"" + ftpport + ""."");
            e.printStackTrace();
            if (fc != null) {
                try {
                    fc.disconnect();
                    fc = null;
                } catch (Exception e1) {
                }
            }
            return JC_FTPClientException;
        }
    }",0,0
"    public MathRealMatrix transpose() {
        int m = this.M;
        int n = this.N;
        double[][] mData = this.Data;
        double[][] newData = new double[n][m];
        for (int ni = 0; ni < n; ni++) {
            for (int mi = 0; mi < m; mi++) {
                newData[ni][mi] = mData[mi][ni];
            }
        }
        return new MathRealMatrix(newData);
    }","    protected Object growIndexedProperty(String name, Object indexedProperty, int index) {
        if (indexedProperty instanceof List) {
            List list = (List) indexedProperty;
            while (index >= list.size()) {
                Class contentType = getDynaClass().getDynaProperty(name).getContentType();
                Object value = null;
                if (contentType != null) {
                    value = createProperty(name + ""["" + list.size() + ""]"", contentType);
                }
                list.add(value);
            }
        }
        if ((indexedProperty.getClass().isArray())) {
            int length = Array.getLength(indexedProperty);
            if (index >= length) {
                Class componentType = indexedProperty.getClass().getComponentType();
                Object newArray = Array.newInstance(componentType, (index + 1));
                System.arraycopy(indexedProperty, 0, newArray, 0, length);
                indexedProperty = newArray;
                set(name, indexedProperty);
                int newLength = Array.getLength(indexedProperty);
                for (int i = length; i < newLength; i++) {
                    Array.set(indexedProperty, i, createProperty(name + ""["" + i + ""]"", componentType));
                }
            }
        }
        return indexedProperty;
    }",0,0
"    private void openURI(String uriString) {
        try {
            URI uri = new URI(uriString);
            if (java.awt.Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)) {
                    desktop.browse(uri);
                }
            }
        } catch (Exception ex) {
        }
    }","    public List<String> getFtpFileList(String serverIp, int port, String user, String password, String synchrnPath) throws Exception {
        List<String> list = new ArrayList<String>();
        FTPClient ftpClient = new FTPClient();
        ftpClient.setControlEncoding(""euc-kr"");
        if (!EgovWebUtil.isIPAddress(serverIp)) {
            throw new RuntimeException(""IP is needed. ("" + serverIp + "")"");
        }
        InetAddress host = InetAddress.getByName(serverIp);
        ftpClient.connect(host, port);
        ftpClient.login(user, password);
        ftpClient.changeWorkingDirectory(synchrnPath);
        FTPFile[] fTPFile = ftpClient.listFiles(synchrnPath);
        for (int i = 0; i < fTPFile.length; i++) {
            list.add(fTPFile[i].getName());
        }
        return list;
    }",0,0
"    public static String markupStringReplacement(RenderRequest req, RenderResponse res, HttpServletRequest httpReq, HttpServletResponse httpRes, DefinableEntity entity, String inputString, String type, Long binderId, Long entryId) {
        String outputString = new String(inputString);
        outputString = outputString.replaceAll(""%20"", "" "");
        outputString = outputString.replaceAll(""%7B"", ""{"");
        outputString = outputString.replaceAll(""%7D"", ""}"");
        int loopDetector;
        try {
            if (httpReq != null && binderId != null) {
                Pattern p1 = Pattern.compile(""(\\{\\{attachmentUrl: ([^}]*)\\}\\})"");
                Matcher m1 = p1.matcher(outputString);
                loopDetector = 0;
                while (m1.find()) {
                    if (loopDetector > 2000) {
                        logger.error(""Error processing markup: "" + inputString);
                        return outputString;
                    }
                    loopDetector++;
                    String url = m1.group(2);
                    String webUrl = WebUrlUtil.getServletRootURL(httpReq) + WebKeys.SERVLET_VIEW_FILE + ""?"";
                    if (entity != null) {
                        FileAttachment fa = entity.getFileAttachment(url.trim());
                        if (fa != null) {
                            webUrl += WebKeys.URL_FILE_ID + ""="" + fa.getId().toString() + ""&amp;"";
                        } else {
                            webUrl += WebKeys.URL_FILE_TITLE + ""="" + url.trim() + ""&amp;"";
                        }
                    } else {
                        webUrl += WebKeys.URL_FILE_TITLE + ""="" + url.trim() + ""&amp;"";
                    }
                    webUrl += WebKeys.URL_FILE_VIEW_TYPE + ""="" + WebKeys.FILE_VIEW_TYPE_ATTACHMENT_FILE + ""&amp;"";
                    webUrl += WebKeys.URL_BINDER_ID + ""="" + binderId.toString() + ""&amp;"";
                    if (entryId != null) {
                        webUrl += WebKeys.URL_ENTRY_ID + ""="" + entryId.toString() + ""&amp;"";
                    }
                    outputString = m1.replaceFirst(webUrl);
                }
            }
            if (type.equals(WebKeys.MARKUP_VIEW) || type.equals(WebKeys.MARKUP_FORM)) {
                Pattern p2 = Pattern.compile(""(\\{\\{attachmentFileId: ([^}]*)\\}\\})"");
                Matcher m2 = p2.matcher(outputString);
                loopDetector = 0;
                while (m2.find()) {
                    if (loopDetector > 2000) {
                        logger.error(""Error processing markup: "" + inputString);
                        return outputString;
                    }
                    loopDetector++;
                    String fileIds = m2.group(2).trim();
                    String webUrl = WebUrlUtil.getServletRootURL(httpReq) + WebKeys.SERVLET_VIEW_FILE + ""?"";
                    webUrl += WebKeys.URL_FILE_VIEW_TYPE + ""="" + WebKeys.FILE_VIEW_TYPE_ATTACHMENT_FILE + ""&amp;"";
                    webUrl += fileIds;
                    outputString = m2.replaceFirst(webUrl);
                    m2 = p2.matcher(outputString);
                }
            }
            if (type.equals(WebKeys.MARKUP_VIEW)) {
                Pattern p2 = Pattern.compile(""(\\{\\{titleUrl: ([^\\}]*)\\}\\})"");
                Matcher m2 = p2.matcher(outputString);
                loopDetector = 0;
                while (m2.find()) {
                    if (loopDetector > 2000) {
                        logger.error(""Error processing markup: "" + inputString);
                        return outputString;
                    }
                    loopDetector++;
                    String urlParts = m2.group(2).trim();
                    String s_binderId = """";
                    Pattern p3 = Pattern.compile(""binderId=([^ ]*)"");
                    Matcher m3 = p3.matcher(urlParts);
                    if (m3.find() && m3.groupCount() >= 1) s_binderId = m3.group(1).trim();
                    String normalizedTitle = """";
                    Pattern p4 = Pattern.compile(""title=([^ ]*)"");
                    Matcher m4 = p4.matcher(urlParts);
                    if (m4.find() && m4.groupCount() >= 1) normalizedTitle = m4.group(1).trim();
                    String title = """";
                    Pattern p5 = Pattern.compile(""text=(.*)$"");
                    Matcher m5 = p5.matcher(urlParts);
                    if (m5.find() && m5.groupCount() >= 1) title = m5.group(1).trim();
                    String titleLink = """";
                    String action = WebKeys.ACTION_VIEW_FOLDER_ENTRY;
                    Map params = new HashMap();
                    params.put(WebKeys.URL_BINDER_ID, new String[] { s_binderId });
                    params.put(WebKeys.URL_NORMALIZED_TITLE, new String[] { normalizedTitle });
                    String webUrl = getPortletUrl(req, res, httpReq, httpRes, action, true, params);
                    titleLink = ""<a href=\"""" + webUrl + ""\"" "";
                    titleLink += ""onClick=\""if (self.ss_openTitleUrl) return self.ss_openTitleUrl(this);\"">"";
                    titleLink += ""<span class=\""ss_title_link\"">"";
                    titleLink += title + ""</span></a>"";
                    titleLink = titleLink.replaceAll(""&"", ""&amp;"");
                    outputString = outputString.substring(0, m2.start(0)) + titleLink + outputString.substring(m2.end(), outputString.length());
                    m2 = p2.matcher(outputString);
                }
            }
            if (binderId != null && (type.equals(WebKeys.MARKUP_VIEW) || type.equals(WebKeys.MARKUP_FILE))) {
                String action = WebKeys.ACTION_VIEW_FOLDER_ENTRY;
                Pattern p3 = Pattern.compile(""(\\[\\[([^\\]]*)\\]\\])"");
                Matcher m3 = p3.matcher(outputString);
                loopDetector = 0;
                while (m3.find()) {
                    if (loopDetector > 2000) {
                        logger.error(""Error processing markup: "" + inputString);
                        return outputString;
                    }
                    loopDetector++;
                    String title = m3.group(2).trim();
                    String normalizedTitle = getNormalizedTitle(title);
                    if (!normalizedTitle.equals("""")) {
                        String titleLink = """";
                        if (type.equals(WebKeys.MARKUP_VIEW)) {
                            Map params = new HashMap();
                            params.put(WebKeys.URL_BINDER_ID, binderId.toString());
                            params.put(WebKeys.URL_NORMALIZED_TITLE, normalizedTitle);
                            String webUrl = getPortletUrl(req, res, httpReq, httpRes, action, true, params);
                            titleLink = ""<a href=\"""" + webUrl + ""\"" "";
                            titleLink += ""onClick=\""if (self.ss_openTitleUrl) return self.ss_openTitleUrl(this);\"">"";
                            titleLink += ""<span class=\""ss_title_link\"">"";
                            titleLink += title + ""</span></a>"";
                        } else {
                            titleLink = ""{{titleUrl: "" + WebKeys.URL_BINDER_ID + ""="" + binderId.toString();
                            titleLink += "" "" + WebKeys.URL_NORMALIZED_TITLE + ""="" + normalizedTitle;
                            titleLink += "" text="" + title + ""}}"";
                        }
                        outputString = outputString.substring(0, m3.start(0)) + titleLink + outputString.substring(m3.end(), outputString.length());
                        m3 = p3.matcher(outputString);
                    }
                }
            }
        } catch (Exception e) {
            logger.error(""Error processing markup: "" + inputString);
            return inputString;
        }
        return outputString;
    }","    public static JEditorPane createURLLabel(String htmlMessage) {
        Font font = UIManager.getFont(""Label.font"");
        String rgb = Integer.toHexString(new JPanel().getBackground().getRGB());
        rgb = rgb.substring(2, rgb.length());
        String bodyRule = ""body { background: #"" + rgb + ""; font-family: "" + font.getFamily() + ""; font-size: "" + font.getSize() + ""pt; }"";
        JEditorPane jEditorPane = new JEditorPane(new HTMLEditorKit().getContentType(), htmlMessage);
        ((HTMLDocument) jEditorPane.getDocument()).getStyleSheet().addRule(bodyRule);
        jEditorPane.setEditable(false);
        jEditorPane.setBorder(null);
        jEditorPane.setOpaque(false);
        jEditorPane.addHyperlinkListener(new HyperlinkListener() {

            @Override
            public void hyperlinkUpdate(HyperlinkEvent hyperlinkEvent) {
                if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                    HyperlinkEvent.EventType eventType = hyperlinkEvent.getEventType();
                    if (eventType == HyperlinkEvent.EventType.ACTIVATED) {
                        try {
                            Desktop.getDesktop().browse(hyperlinkEvent.getURL().toURI());
                        } catch (URISyntaxException uriSyntaxException) {
                            showMessageDialog(null, new MessageFormat(Messages.getString(""MessageDialog.6"")).format(new Object[] { hyperlinkEvent.getURL() }), JOptionPane.ERROR_MESSAGE, JOptionPane.DEFAULT_OPTION);
                        } catch (IOException ioException) {
                            showMessageDialog(null, Messages.getString(""MessageDialog.8""), JOptionPane.ERROR_MESSAGE, JOptionPane.DEFAULT_OPTION);
                        }
                    }
                } else {
                    showMessageDialog(null, Messages.getString(""MessageDialog.7""), JOptionPane.ERROR_MESSAGE, JOptionPane.DEFAULT_OPTION);
                }
            }
        });
        return jEditorPane;
    }",0,0
"    private static String formatBookmark(String input) {
        Pattern p;
        Matcher m;
        StringBuilder buffer = new StringBuilder(1024);
        input = input.replaceAll(""\\s+"", "" "");
        p = Pattern.compile(""\\\\[\""\']{1}"");
        m = p.matcher(input);
        int offset = 0;
        buffer.append(input);
        while (m.find()) {
            buffer.delete(m.start() - offset, m.end() - offset);
            offset += (m.end() - m.start());
        }
        input = buffer.toString();
        input = input.replace('\'', '""');
        return input.replaceAll(""\\s*=\\s*"", ""="");
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                fileBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0,0
"    public static Object[] addElement(Object[] a, Object o) {
        Class clazz = a.getClass().getComponentType();
        Object[] a2 = (Object[]) Array.newInstance(clazz, a.length + 1);
        System.arraycopy(a, 0, a2, 0, a.length);
        a2[a.length] = o;
        return a2;
    }","    private static void test_regex() {
        String input = ""{{pron-rég|France <!-- précisez svp la ville ou la région -->|bɔ̃.ʒuʁ|audio=Bonjour.ogg}}"";
        Pattern p = Pattern.compile(""(\\{\\{pron-rég|)([^|]*|)"");
        Matcher m = p.matcher(input);
        while (m.find()) {
            System.out.println(""Le texte \"""" + m.group() + ""\"" débute à "" + m.start() + "" et termine à "" + m.end());
        }
    }",0,0
"    public Connection initiateCon() {
        Connection connection;
        try {
            Class.forName(""com.mysql.jdbc.Driver"");
            url = ""jdbc:mysql://localhost:3306/os"";
            connection = DriverManager.getConnection(url, ""root"", ""vkmohan123"");
            return connection;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }","    private void computeMImatrix() {
        int numInAtt = NUM_ATTRIBUTES - 1;
        m_MImatrix = new double[numInAtt][numInAtt];
        for (int i = 0; i < numInAtt; i++) {
            for (int j = i; j < numInAtt; j++) {
                m_MImatrix[i][j] = getAttAttMI(i, j);
                m_MImatrix[j][i] = m_MImatrix[i][j];
            }
        }
    }",0,0
"            public void mouseClicked(MouseEvent e) {
                java.net.URI uri = null;
                try {
                    uri = new java.net.URI(Constants.HOMEPAGE_LINK);
                } catch (URISyntaxException e1) {
                    e1.printStackTrace();
                }
                if (java.awt.Desktop.isDesktopSupported()) {
                    try {
                        if (uri != null) {
                            java.awt.Desktop.getDesktop().browse(uri);
                        }
                    } catch (IOException e1) {
                        e1.printStackTrace();
                    }
                }
            }","    public long copyDirAllFilesToDirectoryRecursive(String baseDirStr, String destDirStr, boolean copyOutputsRtIDsDirs) throws Exception {
        long plussQuotaSize = 0;
        if (baseDirStr.endsWith(sep)) {
            baseDirStr = baseDirStr.substring(0, baseDirStr.length() - 1);
        }
        if (destDirStr.endsWith(sep)) {
            destDirStr = destDirStr.substring(0, destDirStr.length() - 1);
        }
        FileUtils.getInstance().createDirectory(destDirStr);
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        byte dataBuff[] = new byte[bufferSize];
        File baseDir = new File(baseDirStr);
        baseDir.mkdirs();
        if (!baseDir.exists()) {
            createDirectory(baseDirStr);
        }
        if ((baseDir.exists()) && (baseDir.isDirectory())) {
            String[] entryList = baseDir.list();
            if (entryList.length > 0) {
                for (int pos = 0; pos < entryList.length; pos++) {
                    String entryName = entryList[pos];
                    String oldPathFileName = baseDirStr + sep + entryName;
                    File entryFile = new File(oldPathFileName);
                    if (entryFile.isFile()) {
                        String newPathFileName = destDirStr + sep + entryName;
                        File newFile = new File(newPathFileName);
                        if (newFile.exists()) {
                            plussQuotaSize -= newFile.length();
                            newFile.delete();
                        }
                        in = new BufferedInputStream(new FileInputStream(oldPathFileName), bufferSize);
                        out = new BufferedOutputStream(new FileOutputStream(newPathFileName), bufferSize);
                        int readLen;
                        while ((readLen = in.read(dataBuff)) > 0) {
                            out.write(dataBuff, 0, readLen);
                            plussQuotaSize += readLen;
                        }
                        out.flush();
                        in.close();
                        out.close();
                    }
                    if (entryFile.isDirectory()) {
                        boolean enableCopyDir = false;
                        if (copyOutputsRtIDsDirs) {
                            enableCopyDir = true;
                        } else {
                            if (entryFile.getParentFile().getName().equals(""outputs"")) {
                                enableCopyDir = false;
                            } else {
                                enableCopyDir = true;
                            }
                        }
                        if (enableCopyDir) {
                            plussQuotaSize += this.copyDirAllFilesToDirectoryRecursive(baseDirStr + sep + entryName, destDirStr + sep + entryName, copyOutputsRtIDsDirs);
                        }
                    }
                }
            }
        } else {
            throw new Exception(""Base dir not exist ! baseDirStr = ("" + baseDirStr + "")"");
        }
        return plussQuotaSize;
    }",0,0
"    public static void main(String[] args) throws Exception {
        boolean external = false;
        if (args.length == 1) {
            if (args[0].equals(""-h"")) {
                printZMERTUsage(args.length, true);
                System.exit(2);
            } else {
                external = false;
            }
        } else if (args.length == 3) {
            external = true;
        } else {
            printZMERTUsage(args.length, false);
            System.exit(1);
        }
        if (!external) {
            MertCore myMert = new MertCore(args[0]);
            myMert.run_MERT();
            myMert.finish();
        } else {
            int maxMem = Integer.parseInt(args[1]);
            String configFileName = args[2];
            String stateFileName = ""ZMERT.temp.state"";
            String cp = System.getProperty(""java.class.path"");
            boolean done = false;
            int iteration = 0;
            while (!done) {
                ++iteration;
                Runtime rt = Runtime.getRuntime();
                Process p = rt.exec(""java -Xmx"" + maxMem + ""m -cp "" + cp + "" joshua.zmert.MertCore "" + configFileName + "" "" + stateFileName + "" "" + iteration);
                BufferedReader br_i = new BufferedReader(new InputStreamReader(p.getInputStream()));
                BufferedReader br_e = new BufferedReader(new InputStreamReader(p.getErrorStream()));
                String dummy_line = null;
                while ((dummy_line = br_i.readLine()) != null) {
                    System.out.println(dummy_line);
                }
                while ((dummy_line = br_e.readLine()) != null) {
                    System.out.println(dummy_line);
                }
                int status = p.waitFor();
                if (status == 90) {
                    done = true;
                } else if (status == 91) {
                    done = false;
                } else {
                    System.out.println(""Z-MERT exiting prematurely (MertCore returned "" + status + "")..."");
                    break;
                }
            }
        }
        System.exit(0);
    }","    public static int[][] mergeColumns(int[]... x) {
        int[][] array = new int[x[0].length][x.length];
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                array[i][j] = x[j][i];
            }
        }
        return array;
    }",0,0
"    public static <T> T[] add(T[] array, T element) {
        @SuppressWarnings(""unchecked"") T[] newArray = (T[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = element;
        return newArray;
    }","    public LinkedList<Image> scanForMissingImages() {
        LinkedList<Image> undefinedImages = new LinkedList<Image>();
        Pattern p = Pattern.compile(imagePattern);
        Matcher m = p.matcher(targetCode.toLowerCase());
        while (m.find()) {
            Pattern p1 = Pattern.compile(innerImagePattern);
            Matcher m1 = p1.matcher(m.group().toLowerCase());
            if (m1.find()) {
                String[] src = null;
                if (m1.group().contains(""\"""")) src = m1.group().split(""\""""); else src = m1.group().split(""'"");
                if (!isImageAvailable(src[1])) {
                    undefinedImages.add(new Image(src[1], m.start(), m.end()));
                    Activator.getDefault().logDebuggingData(""[ImageScanner]: Added '"" + src[1] + ""' to the list of undefined images."");
                }
            }
        }
        return undefinedImages;
    }",0,0
"    boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }","    static Object setLength(Object array, int newLength) {
        Object t = Array.newInstance(array.getClass().getComponentType(), newLength);
        int oldLength = Array.getLength(array);
        System.arraycopy(array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
        return t;
    }",0,0
"            public void mouseClicked(MouseEvent e) {
                java.net.URI uri = null;
                try {
                    uri = new java.net.URI(Constants.HOMEPAGE_LINK);
                } catch (URISyntaxException e1) {
                    e1.printStackTrace();
                }
                if (java.awt.Desktop.isDesktopSupported()) {
                    try {
                        if (uri != null) {
                            java.awt.Desktop.getDesktop().browse(uri);
                        }
                    } catch (IOException e1) {
                        e1.printStackTrace();
                    }
                }
            }","    public void addRole(String role) {
        int arrayLength = Array.getLength(this.roles);
        String[] newArray = (String[]) Array.newInstance(this.roles.getClass().getComponentType(), arrayLength + 1);
        System.arraycopy(this.roles, 0, newArray, 0, arrayLength);
        newArray[arrayLength] = role;
        this.roles = newArray;
    }",0,0
"    public static File takeAPictureAndSaveIt(int wait, String dir) {
        try {
            Thread.sleep(wait);
            boolean wasVisible = false;
            if (dir == null && Context.wind != null) {
                if (Context.wind.isVisible()) {
                    Context.wind.setVisible(false);
                    wasVisible = true;
                }
            }
            Robot robot = new Robot();
            BufferedImage image = robot.createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
            String imagefile = ""img"" + ORDER++ + "".gif"";
            if (dir != null) {
                imagefile = dir + ""/snd"" + ORDER + "".nk"";
            }
            File file = new File(imagefile);
            ImageIO.write(image, ""gif"", file);
            if (dir == null && wasVisible && Context.wind != null) {
                Context.wind.setVisible(true);
            }
            return file;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }","    @SuppressWarnings(""unchecked"")
    public <T> T[] toArray(T[] a) {
        if (a.length < size) a = (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size) a[size] = null;
        return a;
    }",0,0
"    private void execCommand(String command) throws Exception {
        Runtime r = Runtime.getRuntime();
        Process p = r.exec(command);
        InputStream p_i_s = p.getInputStream();
        OutputStream p_o_s = p.getOutputStream();
        InputStream p_e_s = p.getErrorStream();
        int status = -1;
        try {
            status = p.waitFor();
        } catch (InterruptedException err) {
        }
        if (0 != status) {
            return;
        }
        BufferedReader in = new BufferedReader(new InputStreamReader(p_i_s));
        String temp;
        temp = in.readLine();
        while ((temp = in.readLine()) != null) {
        }
        in.close();
        in = null;
        p_i_s.close();
        p_e_s.close();
        p_o_s.close();
        p_i_s = null;
        p_e_s = null;
        p_o_s = null;
        p = null;
    }","    public TabelaVerdade(String tipoDeExercicio, String ordem, String ordem2, String[][] valores, String preposicao) {
        super(Usuario.statusDoExercicio(tipoDeExercicio, InterfaceDados.obtemNumeroDoExercicioCorrente()));
        pSuperior = new JPanel(new GridLayout(2, 1));
        pTitulo = new JPanel(new FlowLayout(FlowLayout.CENTER));
        titulo = new JLabel(tipoDeExercicio);
        titulo.setFont(new Font(""Arial"", 0, 25));
        titulo.setForeground(new Color(0, 0, 128));
        pTitulo.add(titulo);
        pSuperior.add(pTitulo);
        preposicao = alteraString(preposicao);
        valores = alteraMatrizDeStrings(valores);
        pEnun = new JPanel(new GridLayout(2, 1));
        enunciado1 = new JLabel(this.retornaEspacoAjustado(""    "") + ordem);
        enunciado1.setFont(new Font(""Arial"", 1, 14));
        enunciado1.setForeground(new Color(0, 0, 128));
        pEnun.add(enunciado1);
        pEnun2 = new JPanel(new FlowLayout(FlowLayout.LEFT));
        enunciado2 = new JLabel(this.retornaEspacoAjustado(""    "") + ordem2);
        enunciado2.setFont(new Font(""Arial"", 1, 14));
        enunciado2.setForeground(new Color(0, 0, 128));
        pEnun2.add(enunciado2);
        enunciado2 = new JLabel(preposicao);
        enunciado2.setFont(new Font(""Times"", 1, 16));
        enunciado2.setForeground(new Color(0, 0, 128));
        pEnun2.add(enunciado2);
        pEnun.add(pEnun2);
        pSuperior.add(pEnun);
        getContentPane().add(""North"", pSuperior);
        pOeste = new JPanel(new FlowLayout(FlowLayout.LEFT));
        pOeste.add(new JLabel(this.retornaEspacoAjustado(""  "")));
        getContentPane().add(""East"", pOeste);
        pOeste.add(new JLabel(this.retornaEspacoAjustado(""    "")));
        getContentPane().add(""West"", pOeste);
        pCentral = new JPanel(new GridLayout(1, valores[0].length + 1));
        pColuna = new JPanel(new GridLayout(valores.length, 1));
        String[][] valor = new String[valores[1].length][valores.length];
        for (int i = 0; i < valor.length; i++) for (int j = 0; j < valor[i].length; j++) {
            valor[i][j] = valores[j][i];
        }
        int total = 0;
        for (int i = 0; i < valor.length; i++) {
            if (valor[i][1].equals(""nada"")) total++;
        }
        preencher = new JTextField[total + 1][valor[1].length - 1];
        resposta = new String[total + 1][valor[1].length - 1];
        int aux = 0;
        for (int i = 0; i <= valor.length; i++) {
            pColuna = new JPanel(new GridLayout(valor[1].length, 1));
            for (int j = 0; j < valor[1].length; j++) {
                if (i == valor.length) {
                    if (j == 0) {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        JLabel prep = new JLabel(preposicao);
                        prep.setFont(new Font(""Times"", 0, 11));
                        prep.setForeground(new Color(0, 0, 128));
                        pAux.add(prep);
                    } else {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        preencher[total][j - 1] = new JTextField("""", 3);
                        preencher[total][j - 1].setDocument(new DefinePadraoDoTexto(1));
                        preencher[total][j - 1].addKeyListener(this);
                        pAux.add(preencher[total][j - 1]);
                    }
                } else {
                    if ((valor[i][j]).equals(""nada"")) {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        preencher[aux][j - 1] = new JTextField("""", 3);
                        preencher[aux][j - 1].setDocument(new DefinePadraoDoTexto(1));
                        preencher[aux][j - 1].addKeyListener(this);
                        pAux.add(preencher[aux][j - 1]);
                        if (j == valor[i].length - 1) aux++;
                    } else {
                        pAux = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        JLabel vals = new JLabel(valor[i][j]);
                        if (j == 0) {
                            vals.setFont(new Font(""Times"", 0, 14));
                            vals.setForeground(new Color(0, 0, 128));
                        }
                        pAux.add(vals);
                    }
                }
                pColuna.add(pAux);
            }
            pCentral.add(pColuna);
        }
        getContentPane().add(""Center"", pCentral);
    }",0,0
"    public String filter(String text) {
        String result = text;
        String regex = ""\\[\\[.+?\\]\\]"";
        Pattern p = Pattern.compile(regex);
        Matcher m = p.matcher(text);
        int addedChars = 0;
        while (m.find()) {
            String plainLink = m.group();
            WikiLink link = new WikiLink(plainLink.substring(2, plainLink.length() - 2), defNamespace);
            String formattedLink = link.toHtml();
            int linkStart = m.start() + addedChars;
            String first = result.substring(0, linkStart);
            String end = result.substring(m.end() + addedChars);
            addedChars += formattedLink.length() - plainLink.length();
            result = first + formattedLink + end;
        }
        return result;
    }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    public static JamaMatrix makeCovarianceMatrix(double[][] data_vectors) throws VisADException {
        int dim = data_vectors[0].length;
        int n_vectors = data_vectors.length;
        double[] mean_vector = new double[dim];
        for (int jj = 0; jj < dim; jj++) {
            double sum = 0;
            for (int kk = 0; kk < n_vectors; kk++) {
                sum += data_vectors[kk][jj];
            }
            mean_vector[jj] = sum / n_vectors;
        }
        double[][] cv = new double[dim][dim];
        for (int jj = 0; jj < dim; jj++) {
            for (int ii = jj; ii < dim; ii++) {
                double sum = 0;
                for (int kk = 0; kk < n_vectors; kk++) {
                    sum += (data_vectors[kk][jj] - mean_vector[jj]) * (data_vectors[kk][ii] - mean_vector[ii]);
                }
                cv[jj][ii] = sum / n_vectors;
                cv[ii][jj] = cv[jj][ii];
            }
        }
        return new JamaMatrix(cv);
    }","    public static Object resizeArray(Object oldArray, int newSize) {
        int oldSize = java.lang.reflect.Array.getLength(oldArray);
        Class elementType = oldArray.getClass().getComponentType();
        Object newArray = java.lang.reflect.Array.newInstance(elementType, newSize);
        int preserveLength = Math.min(oldSize, newSize);
        if (preserveLength > 0) System.arraycopy(oldArray, 0, newArray, 0, preserveLength);
        return newArray;
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 4) {
            System.out.println(""usage: java msgmultisend <to> <from> <smtp> true|false"");
            return;
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Multipart Test"");
            msg.setSentDate(new Date());
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setText(msgText2, ""us-ascii"");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        }
    }","    public int findString(String search, int startPos, boolean downward, boolean loopSearch, boolean senseCaseSearch, boolean regexSearch, boolean wordUnitSearch) {
        StdStyledDocument ssd = getStdStyledDocument();
        if (ssd == null || search.length() == 0) {
            return -1;
        }
        StringBuilder target = ssd.getStringBuilder();
        if (!senseCaseSearch) {
            StringBuilder tsb = new StringBuilder(target.toString().toUpperCase());
            target = tsb;
            search = search.toUpperCase();
        }
        int result = -1;
        if (regexSearch) {
            int patternFlags;
            if (senseCaseSearch) {
                patternFlags = Pattern.MULTILINE;
            } else {
                patternFlags = Pattern.MULTILINE | Pattern.CASE_INSENSITIVE;
            }
            Pattern ptn = Pattern.compile(search, patternFlags);
            if (downward) {
                if (startPos == -1) {
                    startPos = getSelectionEnd();
                }
                Matcher matcher = ptn.matcher(target);
                int s = -1;
                int e = -1;
                if (matcher.find(startPos)) {
                    s = matcher.start();
                    e = matcher.end();
                }
                if (s == -1 && loopSearch) {
                    if (matcher.find(0)) {
                        s = matcher.start();
                        e = matcher.end();
                    }
                }
                if (s != -1) {
                    select(s, e);
                    result = s;
                }
            } else {
                if (startPos == -1) {
                    startPos = getSelectionStart();
                }
                Matcher matcher = ptn.matcher(target);
                int s = -1;
                int e = -1;
                if (matcher.find(0)) {
                    do {
                        if (matcher.end() < startPos) {
                            s = matcher.start();
                            e = matcher.end();
                        } else {
                            break;
                        }
                    } while (matcher.find());
                }
                if (s == -1 && loopSearch) {
                    if (matcher.find(startPos)) {
                        do {
                            s = matcher.start();
                            e = matcher.end();
                        } while (matcher.find());
                    }
                }
                if (s != -1) {
                    select(s, e);
                    result = s;
                }
            }
        } else if (wordUnitSearch) {
            if (downward) {
                if (startPos == -1) {
                    startPos = getSelectionEnd();
                }
                int s = -1;
                int r = startPos;
                while ((r = target.indexOf(search, r)) != -1) {
                    int e = r + search.length();
                    if (r > 0 && wordDelimiter.indexOf(target.charAt(r - 1)) == -1) {
                        r = r + 1;
                        continue;
                    }
                    if (e < target.length() && wordDelimiter.indexOf(target.charAt(e)) == -1) {
                        r = r + 1;
                        continue;
                    }
                    s = r;
                    break;
                }
                if (s == -1 && loopSearch) {
                    r = 0;
                    while ((r = target.indexOf(search, r)) != -1) {
                        int e = r + search.length();
                        if (r > 0 && wordDelimiter.indexOf(target.charAt(r - 1)) == -1) {
                            r = r + 1;
                            continue;
                        }
                        if (e < target.length() && wordDelimiter.indexOf(target.charAt(e)) == -1) {
                            r = r + 1;
                            continue;
                        }
                        s = r;
                        break;
                    }
                }
                if (s != -1) {
                    select(s, s + search.length());
                    result = s;
                }
            } else {
                if (startPos == -1) {
                    startPos = getSelectionStart();
                }
                int s = -1;
                int r = startPos - 1;
                if (r >= 0) {
                    while ((r = target.lastIndexOf(search, r)) != -1) {
                        int e = r + search.length();
                        if (r > 0 && wordDelimiter.lastIndexOf(target.charAt(r - 1)) == -1) {
                            r = r - 1;
                            continue;
                        }
                        if (e < target.length() && wordDelimiter.lastIndexOf(target.charAt(e)) == -1) {
                            r = r - 1;
                            continue;
                        }
                        r = s;
                        break;
                    }
                } else {
                    s = -1;
                }
                if (s == -1 && loopSearch) {
                    r = target.length();
                    while ((r = target.lastIndexOf(search, r)) != -1) {
                        int e = r + search.length();
                        if (r > 0 && wordDelimiter.lastIndexOf(target.charAt(r - 1)) == -1) {
                            r = r - 1;
                            continue;
                        }
                        if (e < target.length() && wordDelimiter.lastIndexOf(target.charAt(e)) == -1) {
                            r = r - 1;
                            continue;
                        }
                        s = r;
                        break;
                    }
                }
                if (s != -1) {
                    select(s, s + search.length());
                    result = s;
                }
            }
        } else {
            if (downward) {
                if (startPos == -1) {
                    startPos = getSelectionEnd();
                }
                int s = startPos;
                s = target.indexOf(search, s);
                if (s == -1 && loopSearch) {
                    s = target.indexOf(search, 0);
                }
                if (s != -1) {
                    select(s, s + search.length());
                    result = s;
                }
            } else {
                if (startPos == -1) {
                    startPos = getSelectionStart();
                }
                int s = startPos - 1;
                if (s >= 0) {
                    s = target.lastIndexOf(search, s);
                } else {
                    s = -1;
                }
                if (s == -1 && loopSearch) {
                    s = target.lastIndexOf(search, target.length());
                }
                if (s != -1) {
                    select(s, s + search.length());
                    result = s;
                }
            }
        }
        return result;
    }",0,0
"    public static float medianElement(float[] array, int size) {
        float[] tmpArray = new float[size];
        System.arraycopy(array, 0, tmpArray, 0, size);
        boolean changed = true;
        while (changed) {
            changed = false;
            for (int i = 0; i < size - 1; i++) {
                if (tmpArray[i] > tmpArray[i + 1]) {
                    changed = true;
                    float tmp = tmpArray[i];
                    tmpArray[i] = tmpArray[i + 1];
                    tmpArray[i + 1] = tmp;
                }
            }
        }
        return tmpArray[size / 2];
    }","    public GCGCDatum[][] toArray() {
        GCGCDatum tempArray[][] = new GCGCDatum[getNumberRows()][];
        GCGCDatum returnedArray[][] = new GCGCDatum[getNumberCols()][getNumberRows()];
        for (int i = 0; i < getNumberRows(); i++) {
            tempArray[i] = ((List<GCGCDatum>) peakList.get(i).getVar(""getDatumArray"")).toArray(new GCGCDatum[0]);
        }
        for (int i = 0; i < getNumberRows(); i++) {
            for (int j = 0; j < getNumberCols(); j++) {
                returnedArray[j][i] = tempArray[i][j];
            }
        }
        return returnedArray;
    }",0,0
"    public Object toArray(Object dst, int[] origin, int[] shape) {
        if (origin.length != lengths.length || shape.length != lengths.length) throw new IllegalArgumentException(""Rank Mismatch"");
        int ji = lengths.length - 1;
        for (; ji >= 0; ji--) {
            if (origin[ji] != 0 || shape[ji] != lengths[ji]) break;
        }
        if (ji < 0) {
            final int length = Array.getLength(storage);
            dst = fixDest(dst, length, getComponentType());
            System.arraycopy(storage, 0, dst, 0, length);
            return dst;
        }
        final int[] shp = (int[]) shape.clone();
        final int[] pducts = new int[shp.length];
        final int product = numberOfElements(shp, pducts);
        dst = fixDest(dst, product, getComponentType());
        int src_pos = indexMap(origin);
        if (ji == 0) {
            System.arraycopy(storage, src_pos, dst, 0, product);
            return dst;
        }
        ji--;
        final int step = products[ji];
        final int contig = pducts[ji];
        for (int dst_pos = 0; dst_pos < product; dst_pos += contig) {
            System.arraycopy(storage, src_pos, dst, dst_pos, contig);
            src_pos += step;
        }
        return dst;
    }","    private void readVariableHeader() throws SQLException {
        Data page = createData();
        for (int i = 1; ; i++) {
            if (i == 3) {
                throw Message.getSQLException(ErrorCode.FILE_CORRUPTED_1, fileName);
            }
            page.reset();
            readPage(i, page);
            CRC32 crc = new CRC32();
            crc.update(page.getBytes(), 4, pageSize - 4);
            int expected = (int) crc.getValue();
            int got = page.readInt();
            if (expected == got) {
                writeCount = page.readLong();
                logKey = page.readInt();
                logFirstTrunkPage = page.readInt();
                logFirstDataPage = page.readInt();
                break;
            }
        }
    }",0,0
"            @Override
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    if (Desktop.isDesktopSupported()) {
                        Desktop desktop = Desktop.getDesktop();
                        if (desktop.isSupported(Desktop.Action.BROWSE)) {
                            try {
                                desktop.browse(URI.create(e.getDescription()));
                                textEntry.requestFocusInWindow();
                                viewPane.setCaretPosition(viewPane.getStyledDocument().getLength());
                            } catch (IOException ex) {
                                JOptionPane.showMessageDialog(viewPane, messages.getString(""ChatPane.msg.CouldNotLaunchDefaultBrowserSeeLogForReason""));
                                logger.log(Level.INFO, messages.getString(""ChatPane.msg.CouldNotLaunchBrowser""), ex);
                            }
                        }
                    }
                }
            }","    private Object doAction(final Context cx, final Scriptable scope, final Scriptable thisObj, final Object[] args, final int actionType) {
        if (RA_REPLACE == actionType && args.length == 2 && (args[1] instanceof String)) {
            final String thisString = Context.toString(thisObj);
            String replacement = (String) args[1];
            final Object arg0 = args[0];
            if (arg0 instanceof String) {
                replacement = REPLACE_PATTERN.matcher(replacement).replaceAll(""\\$"");
                return StringUtils.replaceOnce(thisString, (String) arg0, replacement);
            } else if (arg0 instanceof NativeRegExp) {
                try {
                    final NativeRegExp regexp = (NativeRegExp) arg0;
                    final RegExpData reData = new RegExpData(regexp);
                    final String regex = reData.getJavaPattern();
                    final int flags = reData.getJavaFlags();
                    final Pattern pattern = Pattern.compile(regex, flags);
                    final Matcher matcher = pattern.matcher(thisString);
                    return doReplacement(thisString, replacement, matcher, reData.hasFlag('g'));
                } catch (final PatternSyntaxException e) {
                    LOG.warn(e.getMessage(), e);
                }
            }
        } else if (RA_MATCH == actionType || RA_SEARCH == actionType) {
            if (args.length == 0) {
                return null;
            }
            final Object arg0 = args[0];
            final String thisString = Context.toString(thisObj);
            final RegExpData reData;
            if (arg0 instanceof NativeRegExp) {
                reData = new RegExpData((NativeRegExp) arg0);
            } else {
                reData = new RegExpData(Context.toString(arg0));
            }
            final Pattern pattern = Pattern.compile(reData.getJavaPattern(), reData.getJavaFlags());
            final Matcher matcher = pattern.matcher(thisString);
            final boolean found = matcher.find();
            if (RA_SEARCH == actionType) {
                if (found) {
                    setProperties(matcher, thisString, matcher.start(), matcher.end());
                    return matcher.start();
                }
                return -1;
            }
            if (!found) {
                return null;
            }
            final int index = matcher.start(0);
            final List<Object> groups = new ArrayList<Object>();
            if (reData.hasFlag('g')) {
                groups.add(matcher.group(0));
                setProperties(matcher, thisString, matcher.start(0), matcher.end(0));
                while (matcher.find()) {
                    groups.add(matcher.group(0));
                    setProperties(matcher, thisString, matcher.start(0), matcher.end(0));
                }
            } else {
                for (int i = 0; i <= matcher.groupCount(); ++i) {
                    Object group = matcher.group(i);
                    if (group == null) {
                        group = Context.getUndefinedValue();
                    }
                    groups.add(group);
                }
                setProperties(matcher, thisString, matcher.start(), matcher.end());
            }
            final Scriptable response = cx.newArray(scope, groups.toArray());
            response.put(""index"", response, Integer.valueOf(index));
            response.put(""input"", response, thisString);
            return response;
        }
        return wrappedAction(cx, scope, thisObj, args, actionType);
    }",0,0
"	public static <T extends Comparable<T>> int binarySearch3(T[] arr, T key, int imin, int imax) {
		//Implementation: Recursive, comparable type
		if(imax < imin)
			return -1;
		int imid = (imin+imax)/2;
		if(arr[imid].compareTo(key) > 0)
			return binarySearch3(arr,key,imin,imid-1);
		else if (arr[imid].compareTo(key) < 0)
			return binarySearch3(arr,key,imid+1,imax);
		else
			return imid;
	}","    protected void doDel(File f) {
        if (f.isDirectory()) {
            File[] ls = f.listFiles();
            for (File element : ls) {
                doDel(element);
            }
            f.delete();
        } else {
            f.delete();
        }
    }",0,0
"    public void rescale() {
        double[][] sim = new double[numSeqs][numSeqs];
        for (int i = 0; i < numSeqs; i++) {
            for (int j = i; j < numSeqs; j++) {
                if (this.getDistance(i, j) > 0) {
                    sim[i][j] = (this.getDistance(i, j) - kMin) * 2 / (kMax - kMin);
                }
                sim[j][i] = sim[i][j];
            }
        }
        setDistances(sim);
        System.out.println(""K rescaled"");
    }","        private Object[] toArray(Object[] dest, boolean copied) {
            int destIndex = 0;
            for (final Segment<K, V> segment : ConcurrentWeakKeyHashMap.this.segments) {
                for (HashEntry<K, V> e : segment.table) {
                    while (e != null) {
                        final V value = e.value;
                        if (value != null) {
                            if (destIndex == dest.length) {
                                final Object[] newDest = (Object[]) Array.newInstance(dest.getClass().getComponentType(), (destIndex == 0) ? 16 : (destIndex << 1));
                                System.arraycopy(dest, 0, newDest, 0, destIndex);
                                dest = newDest;
                                copied = true;
                            }
                            dest[destIndex++] = value;
                        }
                        e = e.next;
                    }
                }
            }
            if (destIndex < dest.length) {
                if (copied) {
                    final Object[] newDest = new Object[destIndex];
                    System.arraycopy(dest, 0, newDest, 0, destIndex);
                    dest = newDest;
                } else {
                    dest[destIndex] = null;
                }
            }
            return dest;
        }",0,0
"    public static int[][] reversalXandY(final int[][] array) {
        int col = array[0].length;
        int row = array.length;
        int[][] result = new int[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","    private static String formatBookmark(String input) {
        Pattern p;
        Matcher m;
        StringBuilder buffer = new StringBuilder(1024);
        input = input.replaceAll(""\\s+"", "" "");
        p = Pattern.compile(""\\\\[\""\']{1}"");
        m = p.matcher(input);
        int offset = 0;
        buffer.append(input);
        while (m.find()) {
            buffer.delete(m.start() - offset, m.end() - offset);
            offset += (m.end() - m.start());
        }
        input = buffer.toString();
        input = input.replace('\'', '""');
        return input.replaceAll(""\\s*=\\s*"", ""="");
    }",0,0
"                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    Desktop desktop = null;
                                    if (Desktop.isDesktopSupported()) {
                                        desktop = Desktop.getDesktop();
                                        try {
                                            desktop.browse(uri);
                                        } catch (IOException ioe) {
                                            JOptionPane.showMessageDialog((Component) aggregator, ioe.getMessage());
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog((Component) aggregator, ""Hyperlinks not supported by OS."");
                                    }
                                }","    public static Map<String, List<int[]>> findUnboundVars(String sqlStmt) {
        Map<String, List<int[]>> notReplaced = new HashMap<String, List<int[]>>();
        String variable;
        Pattern pattern = null;
        String regex = SQL_VAR_BIND_REGEX;
        try {
            pattern = Pattern.compile(regex);
        } catch (PatternSyntaxException pex) {
            pex.printStackTrace();
        }
        Matcher matcher = pattern.matcher(sqlStmt);
        while (matcher.find()) {
            variable = matcher.group().substring(1);
            List<int[]> boundsList = notReplaced.get(variable);
            if (boundsList == null) {
                boundsList = new ArrayList<int[]>();
                notReplaced.put(variable, boundsList);
            }
            int[] bounds = { matcher.start(), matcher.end() };
            boundsList.add(bounds);
        }
        return notReplaced;
    }",0,0
"	public static void BubbleSortLong2(long[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					long temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}","    public static JEditorPane createURLLabel(String htmlMessage) {
        Font font = UIManager.getFont(""Label.font"");
        String rgb = Integer.toHexString(new JPanel().getBackground().getRGB());
        rgb = rgb.substring(2, rgb.length());
        String bodyRule = ""body { background: #"" + rgb + ""; font-family: "" + font.getFamily() + ""; font-size: "" + font.getSize() + ""pt; }"";
        JEditorPane jEditorPane = new JEditorPane(new HTMLEditorKit().getContentType(), htmlMessage);
        ((HTMLDocument) jEditorPane.getDocument()).getStyleSheet().addRule(bodyRule);
        jEditorPane.setEditable(false);
        jEditorPane.setBorder(null);
        jEditorPane.setOpaque(false);
        jEditorPane.addHyperlinkListener(new HyperlinkListener() {

            @Override
            public void hyperlinkUpdate(HyperlinkEvent hyperlinkEvent) {
                if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                    HyperlinkEvent.EventType eventType = hyperlinkEvent.getEventType();
                    if (eventType == HyperlinkEvent.EventType.ACTIVATED) {
                        try {
                            Desktop.getDesktop().browse(hyperlinkEvent.getURL().toURI());
                        } catch (URISyntaxException uriSyntaxException) {
                            showMessageDialog(null, new MessageFormat(Messages.getString(""MessageDialog.6"")).format(new Object[] { hyperlinkEvent.getURL() }), JOptionPane.ERROR_MESSAGE, JOptionPane.DEFAULT_OPTION);
                        } catch (IOException ioException) {
                            showMessageDialog(null, Messages.getString(""MessageDialog.8""), JOptionPane.ERROR_MESSAGE, JOptionPane.DEFAULT_OPTION);
                        }
                    }
                } else {
                    showMessageDialog(null, Messages.getString(""MessageDialog.7""), JOptionPane.ERROR_MESSAGE, JOptionPane.DEFAULT_OPTION);
                }
            }
        });
        return jEditorPane;
    }",0,0
"    private void readVariableHeader() throws SQLException {
        Data page = createData();
        for (int i = 1; ; i++) {
            if (i == 3) {
                throw Message.getSQLException(ErrorCode.FILE_CORRUPTED_1, fileName);
            }
            page.reset();
            readPage(i, page);
            CRC32 crc = new CRC32();
            crc.update(page.getBytes(), 4, pageSize - 4);
            int expected = (int) crc.getValue();
            int got = page.readInt();
            if (expected == got) {
                writeCount = page.readLong();
                logKey = page.readInt();
                logFirstTrunkPage = page.readInt();
                logFirstDataPage = page.readInt();
                break;
            }
        }
    }","    private static int executeCommand(final String commandName, final List<String> arguments) {
        System.out.println(""executing ["" + commandName.toString() + ""] with arguments: "" + Arrays.toString(arguments.toArray()));
        try {
            final List<String> pbArgs = new LinkedList<String>(arguments);
            pbArgs.add(0, commandName);
            final ProcessBuilder pb = new ProcessBuilder(pbArgs);
            System.out.println(""starting ..."");
            final Process process = pb.start();
            InputStream inputStream = process.getInputStream();
            InputStream errorStream = process.getErrorStream();
            ThreadedStreamHandler outputStreamHandler = ThreadedStreamHandler.newSimple(""OUT"", inputStream);
            ThreadedStreamHandler errorStreamHandler = ThreadedStreamHandler.newSimple(""ERR"", errorStream);
            outputStreamHandler.start();
            errorStreamHandler.start();
            System.out.println(""command running"");
            final int exitValue = process.waitFor();
            outputStreamHandler.interrupt();
            errorStreamHandler.interrupt();
            outputStreamHandler.join();
            errorStreamHandler.join();
            System.out.println(""finished. exitValue: "" + exitValue);
            return exitValue;
        } catch (final Exception e) {
            throw new RuntimeException(""executing command failed"", e);
        }
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 4) {
            usage();
            System.exit(1);
        }
        System.out.println();
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        if (debug) props.put(""mail.debug"", args[3]);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            Message msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(args[0]) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Test"");
            msg.setSentDate(new Date());
            msg.setText(msgText);
            Transport.send(msg);
        } catch (MessagingException mex) {
            System.out.println(""\n--Exception handling in msgsendsample.java"");
            mex.printStackTrace();
            System.out.println();
            Exception ex = mex;
            do {
                if (ex instanceof SendFailedException) {
                    SendFailedException sfex = (SendFailedException) ex;
                    Address[] invalid = sfex.getInvalidAddresses();
                    if (invalid != null) {
                        System.out.println(""    ** Invalid Addresses"");
                        if (invalid != null) {
                            for (int i = 0; i < invalid.length; i++) System.out.println(""         "" + invalid[i]);
                        }
                    }
                    Address[] validUnsent = sfex.getValidUnsentAddresses();
                    if (validUnsent != null) {
                        System.out.println(""    ** ValidUnsent Addresses"");
                        if (validUnsent != null) {
                            for (int i = 0; i < validUnsent.length; i++) System.out.println(""         "" + validUnsent[i]);
                        }
                    }
                    Address[] validSent = sfex.getValidSentAddresses();
                    if (validSent != null) {
                        System.out.println(""    ** ValidSent Addresses"");
                        if (validSent != null) {
                            for (int i = 0; i < validSent.length; i++) System.out.println(""         "" + validSent[i]);
                        }
                    }
                }
                System.out.println();
                if (ex instanceof MessagingException) ex = ((MessagingException) ex).getNextException(); else ex = null;
            } while (ex != null);
        }
    }","    public static void transpose(double[][] A, double[][] B) {
        assert rows(B) == cols(A);
        assert cols(B) == rows(A);
        int rows = rows(B);
        int cols = cols(B);
        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) B[i][j] = A[j][i];
    }",0,0
"    public static void takeScreenCap(Rectangle rv, String filename) {
        try {
            Robot robot = new Robot();
            BufferedImage bi = robot.createScreenCapture(rv);
            new CFile(""caps"").mkdir();
            File file = new CFile(""caps/"" + filename + "".jpg"");
            ImageIO.write(bi, ""jpg"", file);
        } catch (Throwable e) {
            log.warn("""", e);
        }
    }","    public int solve() {
        Date startTime = new Date();
        int noiseCount = 0;
        for (int s = 0; s < sensors.length; s++) {
            noiseCount += sensors[s].getNumberEvents();
        }
        timeOrderSensor = new int[noiseCount];
        timeOrderEvent = new int[noiseCount];
        int[] checkList = new int[sensors.length];
        int noisesDone = 0;
        int earliestSensor = -1;
        int earliestEvent = -1;
        while (noisesDone < noiseCount) {
            earliestSensor = -1;
            earliestEvent = -1;
            double earliestTime = Double.POSITIVE_INFINITY;
            for (int s = 0; s < sensors.length; s++) {
                if (checkList[s] < sensors[s].getNumberEvents()) {
                    if (sensors[s].getEvent(checkList[s]) < earliestTime) {
                        earliestTime = sensors[s].getEvent(checkList[s]);
                        earliestSensor = s;
                        earliestEvent = checkList[s];
                    }
                }
            }
            timeOrderSensor[noisesDone] = earliestSensor;
            timeOrderEvent[noisesDone] = earliestEvent;
            checkList[earliestSensor]++;
            noisesDone++;
        }
        sensorDistances = new double[sensors.length][sensors.length];
        for (int s = 0; s < sensors.length; s++) {
            for (int t = s; t < sensors.length; t++) {
                sensorDistances[s][t] = sensors[s].getDistance(sensors[t]);
                sensorDistances[t][s] = sensorDistances[s][t];
            }
        }
        int solutionSize = 20;
        int solutions = 0;
        possibleSolutions = new NoiseEvent[20];
        aveError = new double[20];
        sensorError = new double[20][];
        int[] lowPossibleNoise = new int[sensors.length];
        int[] hihPossibleNoise = new int[sensors.length];
        for (int n = 0; n < noisesDone; n++) {
            int homeSensor = timeOrderSensor[n];
            lowPossibleNoise[homeSensor] = timeOrderEvent[n];
            hihPossibleNoise[homeSensor] = timeOrderEvent[n];
            for (int s = 0; s < sensors.length; s++) {
                if (s != homeSensor) {
                    findHighLow(homeSensor, s, timeOrderEvent[n], lowPossibleNoise, hihPossibleNoise);
                }
            }
            int sCount = 0;
            for (int s = 0; s < sensors.length; s++) {
                if (hihPossibleNoise[s] >= lowPossibleNoise[s]) {
                    sCount++;
                }
            }
            if (sCount >= 4) {
                int[] possibleNoise = new int[sensors.length];
                possibleNoise[0] = -2;
                boolean possible = nextPossibleNoise(possibleNoise, lowPossibleNoise, hihPossibleNoise);
                while (possible == true) {
                    double[] x = new double[sCount];
                    double[] y = new double[sCount];
                    double[] t = new double[sCount];
                    int i = 0;
                    for (int s = 0; s < sensors.length; s++) {
                        if (hihPossibleNoise[s] > -1) {
                            x[i] = sensors[s].getX();
                            y[i] = sensors[s].getY();
                            t[i] = sensors[s].getEvent(possibleNoise[s]);
                            i++;
                        }
                    }
                    NoiseEvent ne = new NoiseEvent(x, y, t, getTemperatureAtTime(t[0]));
                    ne.solve();
                    double[] error = new double[sCount];
                    double aveErrorInMeters = ne.distanceFitness(error);
                    double xDif = ne.getSolutionX() - ne.getSensorsCentroidX();
                    double yDif = ne.getSolutionY() - ne.getSensorsCentroidY();
                    double solutionDistanceSquared = xDif * xDif + yDif * yDif;
                    double tDif = ne.getMinimumTimeDifference() - ne.getSolutionTime();
                    if (aveErrorInMeters <= mTolerance && mTimeDiffercial >= tDif && mDistFromSensors * mDistFromSensors >= solutionDistanceSquared) {
                        if (solutions == solutionSize) {
                            solutionSize += 20;
                            NoiseEvent[] oldPossibleSolutions = possibleSolutions;
                            possibleSolutions = new NoiseEvent[solutionSize];
                            double[] oldAveError = aveError;
                            aveError = new double[solutionSize];
                            double[][] oldSensorError = sensorError;
                            sensorError = new double[solutionSize][];
                            for (int old = 0; old < oldPossibleSolutions.length; old++) {
                                possibleSolutions[old] = oldPossibleSolutions[old];
                                aveError[old] = oldAveError[old];
                                sensorError[old] = oldSensorError[old];
                            }
                        }
                        possibleSolutions[solutions] = ne;
                        aveError[solutions] = aveErrorInMeters;
                        sensorError[solutions] = error;
                        solutions++;
                    }
                    possible = nextPossibleNoise(possibleNoise, lowPossibleNoise, hihPossibleNoise);
                }
            }
        }
        if (solutions == 0) {
            possibleSolutions = null;
            aveError = null;
            sensorError = null;
        } else {
            NoiseEvent[] oldPossibleSolutions = possibleSolutions;
            possibleSolutions = new NoiseEvent[solutions];
            double[] oldAveError = aveError;
            aveError = new double[solutions];
            double[][] oldSensorError = sensorError;
            sensorError = new double[solutions][];
            for (int old = 0; old < solutions; old++) {
                possibleSolutions[old] = oldPossibleSolutions[old];
                aveError[old] = oldAveError[old];
                sensorError[old] = oldSensorError[old];
            }
        }
        Date endTime = new Date();
        solveRunTime = (endTime.getTime() - startTime.getTime()) / 1000;
        return solutions;
    }",0,0
"    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }","    private void updateResult() {
        final String text = fText.getText();
        final Pattern pattern = Pattern.compile(fRegEx.getText());
        final Matcher matcher = pattern.matcher(text);
        final StringBuffer result = new StringBuffer();
        int start = 0;
        int end = 0;
        while (matcher.find()) {
            start = matcher.start();
            end = matcher.end();
            result.append(text.substring(start, end));
            result.append(' ');
            result.append(start);
            result.append(' ');
            result.append(end);
            result.append('\n');
        }
        Display display = fText.getDisplay();
        display.asyncExec(new Runnable() {

            public void run() {
                fResult.setText(result.toString());
            }
        });
    }",0,0
"    public Object[] toArray(Object a[]) {
        Object[] elementData = array();
        if (a.length < elementData.length) a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), elementData.length);
        System.arraycopy(elementData, 0, a, 0, elementData.length);
        if (a.length > elementData.length) a[elementData.length] = null;
        return a;
    }","    public boolean exists(String fileToCheck) throws IOException {
        FTPClient ftp = new FTPClient();
        boolean found = false;
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, Config.getFtpPort());
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.enterLocalPassiveMode();
            if (ftp.listNames(fileToCheck) != null) {
                found = true;
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return found;
    }",0,0
"    protected GatherBot(IniEditor settings2, Rcon rcon2) {
        live = false;
        topicChanged = true;
        ready = false;
        this.rcon = rcon2;
        this.settings = settings2;
        setName(settings.get(""irc"", ""nick""));
        setVerbose(true);
        smartConnect(settings.get(""irc"", ""ip""), Integer.parseInt(settings.get(""irc"", ""port"")));
        chan = settings.get(""irc"", ""channel"");
        unregistererror = settings.get(""register"", ""unregistererror"");
        joinChannel(chan);
        joinChannel(""#Crit"");
        sendMessage(""Q@CServe.quakenet.org"", ""AUTH "" + settings.get(""irc"", ""qaccount"") + "" "" + settings.get(""irc"", ""qpassword""));
        setMode(getNick(), ""+x"");
        maxplayers = 12;
        players = new Players();
        maps = new ArrayList<Map>();
        if (settings.get(""sql"", ""usemysql"").equalsIgnoreCase(""true"")) {
            try {
                Class.forName(""com.mysql.jdbc.Driver"").newInstance();
                sql = DriverManager.getConnection(""jdbc:mysql://"" + settings.get(""sql"", ""ip"") + "":"" + settings.get(""sql"", ""port"") + ""/"" + settings.get(""sql"", ""database""), settings.get(""sql"", ""user""), settings.get(""sql"", ""password"")).createStatement();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            try {
                Class.forName(""org.sqlite.JDBC"").newInstance();
                sql = DriverManager.getConnection(""jdbc:sqlite:database.sqlite"").createStatement();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        live = false;
        reg = true;
    }","    boolean clean(File dir) {
        boolean ok = true;
        for (File f : dir.listFiles()) {
            if (f.isDirectory()) ok &= clean(f);
            ok &= f.delete();
        }
        return ok;
    }",0,0
"        public void actionPerformed(ActionEvent ev) {
            Object src = ev.getSource();
            if (src == butConfirm) {
                int i;
                long limitSize;
                boolean computeMD5, computeSHA1;
                computeMD5 = dialMD5.activeOption();
                computeSHA1 = dialSHA1.activeOption();
                try {
                    limitSize = Long.parseLong(inputPieceMaxSize.getText());
                } catch (NumberFormatException e) {
                    limitSize = -1;
                }
                if (limitSize > 0) {
                    i = sizeMultiple.getSelectedIndex();
                    while (i-- > 0) limitSize *= 1024;
                    File f = new File(filepath.getText());
                    JFileChooser fc = new JFileChooser();
                    fc.setMultiSelectionEnabled(false);
                    if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                        SplitFile task;
                        showProgress(""Splitting file..."");
                        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                        task = new SplitFile(f, fc.getSelectedFile().getPath(), limitSize, computeMD5, computeSHA1);
                        task.addPropertyChangeListener(owner);
                        task.execute();
                    } else {
                        JOptionPane.showMessageDialog(null, ""Split file :\naction cancelled by user"", ""JoinSplit"", JOptionPane.INFORMATION_MESSAGE);
                    }
                    setVisible(false);
                } else {
                    JOptionPane.showMessageDialog(null, ""Action aborted :\nYou must enter a strictly positive number"", ""JoinSplit"", JOptionPane.ERROR_MESSAGE);
                }
            } else if (src == butCancel) {
                setVisible(false);
            }
        }","    void run() throws Exception {
        List<String> cmd = new ArrayList<String>();
        File java_home = new File(System.getProperty(""java.home""));
        if (java_home.getName().equals(""jre"")) java_home = java_home.getParentFile();
        cmd.add(new File(new File(java_home, ""bin""), ""java"").getPath());
        cmd.add(""-Xbootclasspath:"" + System.getProperty(""sun.boot.class.path""));
        cmd.add(""-classpath"");
        cmd.add(System.getProperty(""java.class.path""));
        cmd.add(""-da"");
        cmd.add(""-dsa"");
        cmd.add(""EarlyAssert"");
        System.err.println(""Running command: "" + cmd);
        ProcessBuilder pb = new ProcessBuilder(cmd);
        pb.redirectErrorStream(true);
        Process p = pb.start();
        p.getOutputStream().close();
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        String line;
        DataInputStream in = new DataInputStream(p.getInputStream());
        try {
            while ((line = in.readLine()) != null) pw.println(line);
        } finally {
            in.close();
        }
        pw.close();
        String out = sw.toString();
        int rc = p.waitFor();
        if (rc != 0 || out.length() > 0) throw new Error(""failed: rc="" + rc + (out.length() > 0 ? "": "" + out : """"));
    }",0,0
"    public static void synchronizeConnectionTable(int[][] contab) {
        int N = contab.length;
        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                contab[j][i] = contab[i][j];
            }
        }
    }","    public static String[] separate(String str, String reg) {
        List<String> list = new ArrayList<String>();
        Pattern pattern = Pattern.compile(reg);
        Matcher matcher = pattern.matcher(str);
        while (matcher.find()) list.add(str.substring(matcher.start(), matcher.end()));
        return list.toArray(new String[list.size()]);
    }",0,0
"    public LinkedList<SearchResult> search(String strRequest) {
        LinkedList<SearchResult> ret = new LinkedList<SearchResult>();
        HttpClient h = new HttpClient();
        try {
            String strRequestUrl = ""http://www.youporn.com/search"";
            if (strRequest.toLowerCase().contains(""straight!"")) {
                strRequestUrl += ""?type=straight"";
                strRequest = strRequest.replaceAll(""straight!"", """");
            }
            if (strRequest.toLowerCase().contains(""gay!"")) {
                strRequestUrl += ""?type=gay"";
                strRequest = strRequest.replaceAll(""gay!"", """");
            }
            if (strRequest.toLowerCase().contains(""cocks!"")) {
                strRequestUrl += ""?type=cocks"";
                strRequest = strRequest.replaceAll(""cocks!"", """");
            }
            if (!strRequestUrl.endsWith(""search"")) strRequestUrl += ""&""; else strRequestUrl += ""?"";
            strRequestUrl += ""query="" + URLEncoder.encode(strRequest, ""UTF-8"");
            if (NoMuleRuntime.DEBUG) System.out.println(strRequestUrl);
            GetMethod get = new GetMethod(strRequestUrl);
            Date d = new Date((new Date()).getTime() + (1 * 24 * 3600 * 1000));
            h.getState().addCookie(new Cookie("".youporn.com"", ""age_check"", ""1"", ""/"", d, false));
            h.executeMethod(get);
            BufferedReader in = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream()));
            String s = """";
            String res = """";
            while ((s = in.readLine()) != null) {
                res += s;
            }
            get.releaseConnection();
            if (NoMuleRuntime.DEBUG) System.out.println(res);
            String regexp = ""\\<a href\\=\""\\/watch\\/[^\""]+\""\\>[^\\<]+"";
            Pattern p = Pattern.compile(regexp);
            Matcher m = p.matcher(res);
            while (m.find()) {
                int startPos = m.start() + ""<a href=\"""".length();
                String strUrl = ""http://www.youporn.com"";
                int pos = 0;
                for (pos = startPos; pos < m.end() && (res.charAt(pos) != '\""'); pos++) {
                    strUrl += res.charAt(pos);
                }
                String strTitle = res.substring(pos + 2, m.end());
                if (strTitle.trim().length() > 0) ret.add(new SearchResult(strTitle + "" at YouPorn"", strUrl));
            }
            return ret;
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (HttpException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }","    public static void main(String[] args) {
        Connection con = null;
        String url = ""jdbc:mysql://192.168.15.110:3306/"";
        String dbName = ""os"";
        String driver = ""com.mysql.jdbc.Driver"";
        String userName = ""root"";
        String password = ""vkmohan123"";
        try {
            Class.forName(driver).newInstance();
            con = DriverManager.getConnection(url + dbName, userName, password);
            Statement st = con.createStatement();
            String sql123 = ""update os.LoadRequestResponse set processId="" + args[0] + "" where requestId="" + args[1];
            int update = st.executeUpdate(sql123);
            System.out.println(""after update"" + args[0] + "" req:"" + args[1]);
            st.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }",0,0
"    public static int deleteOrderStatusHis(String likePatten) {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append("" DELETE FROM JHF_ORDER_STATUS_HISTORY "").append("" WHERE   ORDER_ID LIKE  ? "");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            psmt.setString(1, ""%"" + likePatten + ""%"");
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println("" error when roll back !"");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println("" error  when psmt close or conn close ."");
            }
        }
        return deleted;
    }","    private void onLink(String linkDesc) {
        if (linkDesc == null) return;
        if (linkDesc.contains(""gpl"")) {
            showGpl();
        } else if (linkDesc.contains(""contacts"")) {
            if (java.awt.Desktop.isDesktopSupported()) {
                try {
                    java.awt.Desktop.getDesktop().browse(URI.create(""http://code.google.com/p/jgef/""));
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }",0,0
"    public IntSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }","    private String processBrTags(String message, String contentType) {
        StringBuffer processedMessage;
        if (contentType != null && contentType.equals(HTML_CONTENT_TYPE)) {
            processedMessage = new StringBuffer();
            Pattern p = Pattern.compile(""<\\s*[bB][rR](.*?)(/\\s*>)"");
            Matcher m = p.matcher(message);
            int slash_index;
            int start = 0;
            while (m.find()) {
                processedMessage.append(message.substring(start, m.start()));
                slash_index = m.group().lastIndexOf(""/"");
                processedMessage.append(m.group().substring(0, slash_index));
                processedMessage.append(m.group().substring(slash_index + 1));
                start = m.end();
            }
            processedMessage.append(message.substring(start));
        } else {
            processedMessage = new StringBuffer(message);
        }
        return processedMessage.toString();
    }",0,0
"    @Override
    public List<SectionFinderResult> lookForSections(String text, Section<?> father, Type type) {
        ArrayList<SectionFinderResult> result = new ArrayList<SectionFinderResult>();
        Pattern TABLE_LINE = Pattern.compile(TABLE_LINE_REGEXP, Pattern.MULTILINE);
        Matcher m = TABLE_LINE.matcher(text);
        int end = 0;
        int tableStart = -1;
        int tableEnd = -1;
        while (m.find(end)) {
            int start = m.start();
            end = m.end();
            if (tableEnd == start) {
                tableEnd = end;
            } else {
                addResultIfAvailable(result, tableStart, tableEnd);
                tableStart = start;
                tableEnd = end;
            }
            if (end >= text.length()) break;
        }
        addResultIfAvailable(result, tableStart, tableEnd);
        return result;
    }","    protected void showDownloadFolder() {
        if (Desktop.isDesktopSupported()) {
            try {
                if (JPTrayIcon.isWindows()) Runtime.getRuntime().exec(""rundll32 SHELL32.DLL,ShellExec_RunDLL \"""" + fileDownloads.getAbsolutePath() + ""\""""); else Desktop.getDesktop().browse(getFileURI(fileDownloads.getAbsolutePath()));
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else JOptionPane.showMessageDialog(this, Messages.getString(""FileWindow.DirectoryOpenNotSupported"").replace(""$PATH$"", fileDownloads.getAbsolutePath()));
    }",0,0
"            public List<Code> getProperties() {
                if (value == null) {
                    return Collections.emptyList();
                }
                String value = org.apache.commons.lang.StringUtils.strip(this.value, ""\"" \n\r\f\t"");
                Pattern p = Pattern.compile(""(memo|date|desc|summary|milestone|def|value|vdef|quote|ref|title|cause)\\s*:\\s*"");
                Matcher m = p.matcher(value);
                List<Code> result = new LinkedList<Code>();
                String lastKey = ""desc"";
                StringBuilder currentValue = new StringBuilder();
                int pos = 0;
                while (m.find()) {
                    int start = m.start();
                    String key = m.group(1);
                    if (pos < start) {
                        currentValue.append(value.substring(pos, start));
                    }
                    pos = m.end();
                    if (currentValue.length() > 0) {
                        result.add(new TagCodedCode(lastKey + ""=\"""" + org.apache.commons.lang.StringUtils.strip(currentValue.toString(), "", \n\r\f\t"") + ""\""""));
                        currentValue = new StringBuilder();
                    }
                    lastKey = key;
                }
                if (pos < value.length()) {
                    currentValue.append(value.substring(pos));
                }
                if (currentValue.length() > 0) {
                    result.add(new TagCodedCode(lastKey + ""=\"""" + org.apache.commons.lang.StringUtils.strip(currentValue.toString(), "", \n\r\f\t"") + ""\""""));
                }
                return result;
            }","    public static long checksum(File file) throws java.io.IOException, FileNotFoundException {
        FileInputStream fis = null;
        byte[] bytes = new byte[16384];
        int len;
        try {
            fis = new FileInputStream(file);
            CRC32 chkSum = new CRC32();
            len = fis.read(bytes);
            while (len != -1) {
                chkSum.update(bytes, 0, len);
                len = fis.read(bytes);
            }
            return chkSum.getValue();
        } finally {
            quietClose(fis);
        }
    }",0,0
"                @Override
                public void hyperlinkUpdate(HyperlinkEvent hlinkEvt) {
                    try {
                        if (hlinkEvt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                            if (!Desktop.isDesktopSupported()) throw new Exception(""Cannot open link: this system does not support opening web links."");
                            Desktop desktop = Desktop.getDesktop();
                            desktop.browse(hlinkEvt.getURL().toURI());
                        }
                    } catch (Throwable e) {
                        ErrDialog.errorDialog(getContentPane(), ErrUtils.getExceptionMessage(e));
                    }
                }","    public void processChangedLines(int offset, int length) throws BadLocationException {
        String text = getText(0, getLength());
        highlightString(Color.black, 0, getLength(), true, false, false);
        Set<String> keyw = keywords.keySet();
        for (String keyword : keyw) {
            Color col = keywords.get(keyword);
            Pattern p = Pattern.compile(""\\b"" + keyword + ""\\b"", Pattern.CASE_INSENSITIVE);
            Matcher m = p.matcher(text);
            while (m.find()) {
                highlightString(col, m.start(), keyword.length(), true, true, false);
            }
        }
        int mlsStart = text.indexOf(stringDelimiter);
        while (mlsStart > -1) {
            int mlsEnd = text.indexOf(stringDelimiter, mlsStart + 1);
            mlsEnd = (mlsEnd < 0 ? text.length() - 1 : mlsEnd);
            highlightString(stringColor, mlsStart, (mlsEnd - (mlsStart - 1)), true, false, false);
            mlsStart = text.indexOf(stringDelimiter, mlsEnd + 1);
        }
        int mlqStart = text.indexOf(quoteDelimiter);
        while (mlqStart > -1) {
            int mlqEnd = text.indexOf(quoteDelimiter, mlqStart + 1);
            mlqEnd = (mlqEnd < 0 ? text.length() - 1 : mlqEnd);
            highlightString(quoteColor, mlqStart, (mlqEnd - (mlqStart - 1)), true, false, false);
            mlqStart = text.indexOf(quoteDelimiter, mlqEnd + 1);
        }
        Matcher mlcStart = multiLineCommentDelimiterStart.matcher(text);
        Matcher mlcEnd = multiLineCommentDelimiterEnd.matcher(text);
        while (mlcStart.find()) {
            if (mlcEnd.find(mlcStart.end())) highlightString(commentColor, mlcStart.start(), (mlcEnd.end() - mlcStart.start()), true, false, true); else highlightString(commentColor, mlcStart.start(), getLength(), true, false, true);
        }
        Matcher slc = singleLineCommentDelimter.matcher(text);
        while (slc.find()) {
            int line = rootElement.getElementIndex(slc.start());
            int endOffset = rootElement.getElement(line).getEndOffset() - 1;
            highlightString(commentColor, slc.start(), (endOffset - slc.start()), true, false, true);
        }
    }",0,0
"    private static double[][] makeAutoCovarianceMatrice_(double[][] vec) {
        int dim = vec[0].length;
        double[][] out = new double[dim][dim];
        double _n = 1. / vec.length;
        for (int k = 0; k < vec.length; k++) {
            double[] x = vec[k];
            for (int i = 0; i < dim; i++) for (int j = i; j < dim; j++) out[i][j] += x[i] * x[j];
        }
        for (int i = 0; i < dim; i++) for (int j = i; j < dim; j++) out[i][j] *= _n;
        for (int i = 0; i < dim; i++) for (int j = i; j < dim; j++) out[j][i] = out[i][j];
        return out;
    }","    private long getCRC(List<ErazeMethod> methods) {
        byte[] randomBytes = { (byte) 0x00, (byte) 0x00 };
        byte[] sizeByte = new byte[2];
        int patternLength;
        CRC32 crc = new CRC32();
        for (ErazeMethod method : methods) {
            for (PatternDefinition pattern : method.getPatterns()) {
                if (pattern.isRandom()) {
                    crc.update(randomBytes);
                } else {
                    patternLength = pattern.getPattern().length;
                    sizeByte[1] = (byte) ((patternLength >> 8) & 0xFF);
                    sizeByte[0] = (byte) ((patternLength) & 0xFF);
                    crc.update(sizeByte);
                    crc.update(pattern.getPattern());
                }
            }
        }
        return crc.getValue();
    }",0,0
"    public void saveImage() {
        String title = makeTitle();
        if (title == null) {
            cancelSaveOperations();
            return;
        }
        Rectangle screenRect = this.getBounds();
        int topAdjust = 23;
        int y = screenRect.y;
        screenRect.y += topAdjust;
        int height = screenRect.height;
        screenRect.height -= topAdjust;
        Robot robot = null;
        BufferedImage image = null;
        if (iUseRobot) {
            try {
                robot = new Robot();
            } catch (AWTException e) {
                println(""EXCEPTION -- NO ROBOT -- NOT SAVING"");
                iSaveInProcess = false;
                iSaveImage = false;
                iAceTree.iAceMenuBar.resetSaveState();
                return;
            }
            image = robot.createScreenCapture(screenRect);
        } else {
            image = BufferedImageCreator.create((ColorProcessor) iImgPlus.getProcessor());
        }
        try {
            ImageIO.write(image, ""jpeg"", new File(title));
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println(""file: "" + title + "" written"");
        iSaveInProcess = false;
    }","    protected Object growIndexedProperty(String name, Object indexedProperty, int index) {
        if (indexedProperty instanceof List) {
            List list = (List) indexedProperty;
            while (index >= list.size()) {
                list.add(null);
            }
        }
        if ((indexedProperty.getClass().isArray())) {
            int length = Array.getLength(indexedProperty);
            if (index >= length) {
                Class componentType = indexedProperty.getClass().getComponentType();
                Object newArray = Array.newInstance(componentType, (index + 1));
                System.arraycopy(indexedProperty, 0, newArray, 0, length);
                indexedProperty = newArray;
                set(name, indexedProperty);
                int newLength = Array.getLength(indexedProperty);
                for (int i = length; i < newLength; i++) {
                    Array.set(indexedProperty, i, createProperty(name + ""["" + i + ""]"", componentType));
                }
            }
        }
        return indexedProperty;
    }",0,0
"    public List equivalenceClasses() {
        int[] weight = weightVector();
        Object[] cyclesArray = (Object[]) cycles.toArray();
        Arrays.sort(cyclesArray, new Comparator() {

            public int compare(Object o1, Object o2) {
                return (int) (((SimpleCycle) o1).weight() - ((SimpleCycle) o2).weight());
            }
        });
        Collection essentialCycles = essentialCycles();
        boolean[][] u = new boolean[cyclesArray.length][edgeList.size()];
        boolean[][] a = getCycleEdgeIncidenceMatrix(cyclesArray);
        boolean[][] ai = inverseBinaryMatrix(a, cyclesArray.length);
        for (int i = 0; i < cyclesArray.length; i++) {
            for (int j = 0; j < cyclesArray.length; j++) {
                u[i][j] = ai[j][i];
            }
        }
        UndirectedGraph h = new SimpleGraph();
        h.addAllVertices(cycles);
        ConnectivityInspector connectivityInspector = new ConnectivityInspector(h);
        int left = 0;
        for (int right = 0; right < weight.length; right++) {
            if ((right < weight.length - 1) && (weight[right + 1] == weight[right])) continue;
            for (int i = left; i <= right; i++) {
                if (essentialCycles.contains((SimpleCycle) cyclesArray[i])) continue;
                for (int j = i + 1; j <= right; j++) {
                    if (essentialCycles.contains((SimpleCycle) cyclesArray[j])) continue;
                    if (connectivityInspector.pathExists(cyclesArray[i], cyclesArray[j])) continue;
                    boolean sameClass = false;
                    AuxiliaryGraph2 auxGraph = new AuxiliaryGraph2(graph, edgeList, u[i], u[j]);
                    for (Iterator it = graph.vertexSet().iterator(); it.hasNext(); ) {
                        Object vertex = it.next();
                        boolean shouldSearchCycle = false;
                        Collection incidentEdges = graph.edgesOf(vertex);
                        Iterator edgeIterator = incidentEdges.iterator();
                        while (edgeIterator.hasNext()) {
                            Edge edge = (Edge) edgeIterator.next();
                            int index = getEdgeIndex(edge);
                            if (u[i][index] || u[j][index]) {
                                shouldSearchCycle = true;
                                break;
                            }
                        }
                        if (shouldSearchCycle) {
                            Object auxVertex00 = auxGraph.auxVertex00(vertex);
                            Object auxVertex11 = auxGraph.auxVertex11(vertex);
                            List auxPath = BFSShortestPath.findPathBetween(auxGraph, auxVertex00, auxVertex11);
                            double pathWeight = auxPath.size();
                            if (pathWeight == weight[left]) {
                                sameClass = true;
                                break;
                            }
                        }
                    }
                    if (sameClass) {
                        h.addEdge(cyclesArray[i], cyclesArray[j]);
                    }
                }
            }
            for (int i = left; i <= right; i++) {
                if (essentialCycles.contains((SimpleCycle) cyclesArray[i])) continue;
                for (int j = i + 1; j <= right; j++) {
                    if (essentialCycles.contains((SimpleCycle) cyclesArray[j])) continue;
                    if (connectivityInspector.pathExists(cyclesArray[i], cyclesArray[j])) continue;
                    boolean sameClass = false;
                    for (int k = 0; ((SimpleCycle) cyclesArray[k]).weight() < weight[left]; k++) {
                        AuxiliaryGraph2 auxGraph = new AuxiliaryGraph2(graph, edgeList, u[i], u[k]);
                        boolean shortestPathFound = false;
                        for (Iterator it = graph.vertexSet().iterator(); it.hasNext(); ) {
                            Object vertex = it.next();
                            Object auxVertex00 = auxGraph.auxVertex00(vertex);
                            Object auxVertex11 = auxGraph.auxVertex11(vertex);
                            List auxPath = BFSShortestPath.findPathBetween(auxGraph, auxVertex00, auxVertex11);
                            double pathWeight = auxPath.size();
                            if (pathWeight == weight[left]) {
                                shortestPathFound = true;
                                break;
                            }
                        }
                        if (!shortestPathFound) continue;
                        auxGraph = new AuxiliaryGraph2(graph, edgeList, u[j], u[k]);
                        for (Iterator it = graph.vertexSet().iterator(); it.hasNext(); ) {
                            Object vertex = it.next();
                            Object auxVertex00 = auxGraph.auxVertex00(vertex);
                            Object auxVertex11 = auxGraph.auxVertex11(vertex);
                            List auxPath = BFSShortestPath.findPathBetween(auxGraph, auxVertex00, auxVertex11);
                            double pathWeight = auxPath.size();
                            if (pathWeight == weight[left]) {
                                sameClass = true;
                                break;
                            }
                        }
                        if (sameClass) break;
                    }
                    if (sameClass) {
                        h.addEdge(cyclesArray[i], cyclesArray[j]);
                    }
                }
            }
            left = right + 1;
        }
        return connectivityInspector.connectedSets();
    }","    public static final Object concat(Object ary, Object ary1) {
        int len = Array.getLength(ary) + Array.getLength(ary1);
        if (!ary.getClass().getComponentType().isAssignableFrom(ary1.getClass().getComponentType())) throw new IllegalArgumentException(""These concated array component types are not compatible."");
        Object dst = Array.newInstance(ary.getClass().getComponentType(), len);
        System.arraycopy(ary, 0, dst, 0, Array.getLength(ary));
        System.arraycopy(ary1, 0, dst, Array.getLength(ary), Array.getLength(ary1));
        return dst;
    }",0,0
"    private String[] splitContent(String matchexp, String content) {
        int startAt = 0;
        List tempList = new ArrayList();
        Pattern pattern = Pattern.compile(matchexp);
        Matcher matcher = pattern.matcher(content);
        while (matcher.find()) {
            tempList.add(content.substring(startAt, matcher.start()));
            tempList.add(matcher.group());
            startAt = matcher.end();
        }
        tempList.add(content.substring(startAt));
        String[] result = new String[tempList.size()];
        for (int i = 0; i < result.length; i++) {
            result[i] = (String) tempList.get(i);
        }
        return result;
    }","    private JTextPane getJtpChannelText() {
        if (jtpChannelText == null) {
            jtpChannelText = new JTextPane();
            jtpChannelText.setAutoscrolls(true);
            jtpChannelText.setEditable(false);
            jtpChannelText.addKeyListener(new KeyAdapter() {

                /**
				 * Called when a key is typed.
				 *
				 * @param e The KeyEvent.
				 */
                @Override
                public void keyPressed(KeyEvent e) {
                    if ((e.getModifiers() & InputEvent.CTRL_MASK) == InputEvent.CTRL_MASK || (e.getModifiers() & InputEvent.ALT_MASK) == InputEvent.ALT_MASK || (e.getModifiers() & InputEvent.META_MASK) == InputEvent.META_MASK) {
                        return;
                    }
                    parent.focusTextInput(e.getKeyChar());
                }
            });
            jtpChannelText.addMouseListener(new MouseAdapter() {

                /**
				 * Handle the mouse clicking the control.
				 *
				 * @param e The MouseEvent.
				 */
                @Override
                public void mouseClicked(MouseEvent e) {
                    if (!e.isPopupTrigger() && SwingUtilities.isLeftMouseButton(e)) {
                        if (Desktop.isDesktopSupported()) {
                            try {
                                StyledDocument doc = (StyledDocument) getJtpChannelText().getDocument();
                                String url = (String) doc.getCharacterElement(getJtpChannelText().viewToModel(e.getPoint())).getAttributes().getAttribute(TextStyle.IDENTIFIER_URL);
                                if (url != null) {
                                    Desktop.getDesktop().browse(new java.net.URI(StringHelper.addProcotol(url, ""http://"")));
                                }
                            } catch (Exception ex) {
                            }
                        }
                    }
                }
            });
            jtpChannelText.addMouseMotionListener(new MouseMotionAdapter() {

                /**
				 * Called when the mouse is moved.
				 *
				 * @param e The MouseEvent.
				 */
                @Override
                public void mouseMoved(MouseEvent e) {
                    try {
                        StyledDocument doc = (StyledDocument) getJtpChannelText().getDocument();
                        String url = (String) doc.getCharacterElement(getJtpChannelText().viewToModel(e.getPoint())).getAttributes().getAttribute(TextStyle.IDENTIFIER_URL);
                        if (url != null) {
                            setCursor(new Cursor(Cursor.HAND_CURSOR));
                        } else {
                            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        }
                    } catch (Exception ex) {
                    }
                }
            });
        }
        return jtpChannelText;
    }",0,0
"    public static void delete_class() {
        File basedir = new File(System.getProperty(""user.dir""));
        File[] alldirs = getalldirs(basedir);
        Vector classfiles = new Vector();
        for (int i = 0; i < alldirs.length; i++) {
            File[] f = alldirs[i].listFiles();
            for (int j = 0; j < f.length; j++) {
                if (f[j].isDirectory()) {
                    continue;
                }
                String s = f[j].toString();
                if (s.endsWith(""SourceUtil.class"")) {
                    continue;
                }
                if (s.endsWith(""Ask.class"")) {
                    continue;
                }
                if (s.endsWith("".class"")) {
                    classfiles.addElement(f[j]);
                    System.out.println(""Adding:"" + s + "" for DELETE!"");
                }
            }
        }
        for (int m = 0; m < classfiles.size(); m++) {
            File to_del = (File) classfiles.elementAt(m);
            try {
                System.out.println(""DELETING: "" + to_del.toString());
                to_del.delete();
                System.out.println(""->deleted"");
            } catch (Exception e) {
                System.out.println(""Failed to delete:"" + to_del.toString());
            }
        }
    }","    public static Object[] remove(Object[] array, Object obj) {
        int index = indexOf(array, obj);
        if (index < 0) {
            return array;
        }
        Object[] newArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length - 1);
        if (index > 0) {
            System.arraycopy(array, 0, newArray, 0, index);
        }
        if (index < array.length - 1) {
            System.arraycopy(array, index + 1, newArray, index, newArray.length - index);
        }
        return newArray;
    }",0,0
"    public String fetchSpecificText(String regularExpress, String contents) {
        String resultStr = """";
        try {
            Pattern p = Pattern.compile(regularExpress);
            Matcher matcher = p.matcher(contents);
            String startTag = regularExpress.substring(0, regularExpress.indexOf(""[""));
            String endTag = regularExpress.substring(regularExpress.indexOf(""]""), regularExpress.length());
            while (matcher.find()) {
                int start = matcher.start();
                int end = matcher.end();
                String match = contents.substring(start, end);
                resultStr = match.replaceAll(startTag, """").replaceAll(endTag, """");
            }
        } catch (Exception ex) {
            this.logAffectuException(ex, ""fetchSpecificText出错:"" + contents);
        }
        return resultStr;
    }","    public Object toArray(Object dst, int[] origin, int[] shape) {
        if (origin.length != lengths.length || shape.length != lengths.length) throw new IllegalArgumentException(""Rank Mismatch"");
        int ji = lengths.length - 1;
        for (; ji >= 0; ji--) {
            if (origin[ji] != 0 || shape[ji] != lengths[ji]) break;
        }
        if (ji < 0) {
            final int length = Array.getLength(storage);
            dst = fixDest(dst, length, getComponentType());
            System.arraycopy(storage, 0, dst, 0, length);
            return dst;
        }
        final int[] shp = (int[]) shape.clone();
        final int[] pducts = new int[shp.length];
        final int product = numberOfElements(shp, pducts);
        dst = fixDest(dst, product, getComponentType());
        int src_pos = indexMap(origin);
        if (ji == 0) {
            System.arraycopy(storage, src_pos, dst, 0, product);
            return dst;
        }
        ji--;
        final int step = products[ji];
        final int contig = pducts[ji];
        for (int dst_pos = 0; dst_pos < product; dst_pos += contig) {
            System.arraycopy(storage, src_pos, dst, dst_pos, contig);
            src_pos += step;
        }
        return dst;
    }",0,0
"    public static int[][] getPixels2D(int[] pixels, int w, int h, int size) {
        int[][] npixels = new int[w][h];
        for (int i = 0; i < npixels.length; i++) {
            for (int j = 0; j < npixels[i].length; j++) {
                npixels[i][j] = pixels[i + j * size];
            }
        }
        int pixel[][] = new int[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                pixel[i][j] = npixels[j][i];
            }
        }
        return pixel;
    }","    public static Object[] addElement(Object[] a, Object o) {
        Class clazz = a.getClass().getComponentType();
        Object[] a2 = (Object[]) Array.newInstance(clazz, a.length + 1);
        System.arraycopy(a, 0, a2, 0, a.length);
        a2[a.length] = o;
        return a2;
    }",0,0
"        static double[][] evalBurdenMatrix(AtomContainer ac, double[] vsd) {
            AtomContainer local = AtomContainerManipulator.removeHydrogens(ac);
            int natom = local.getAtomCount();
            double[][] m = new double[natom][natom];
            for (int i = 0; i < natom - 1; i++) {
                for (int j = i + 1; j < natom; j++) {
                    for (int k = 0; k < local.getBondCount(); k++) {
                        Bond b = local.getBondAt(k);
                        if (b.contains(local.getAtomAt(i)) && b.contains(local.getAtomAt(j))) {
                            if (b.getOrder() == CDKConstants.BONDORDER_SINGLE) m[i][j] = 0.1; else if (b.getOrder() == CDKConstants.BONDORDER_DOUBLE) m[i][j] = 0.2; else if (b.getOrder() == CDKConstants.BONDORDER_TRIPLE) m[i][j] = 0.3; else if (b.getOrder() == CDKConstants.BONDORDER_AROMATIC) m[i][j] = 0.15;
                            if (local.getBondCount(i) == 1 || local.getBondCount(j) == 1) {
                                m[i][j] += 0.01;
                            }
                            m[j][i] = m[i][j];
                        } else {
                            m[i][j] = 0.001;
                            m[j][i] = 0.001;
                        }
                    }
                }
            }
            for (int i = 0; i < natom; i++) {
                if (vsd != null) m[i][i] = vsd[i]; else m[i][i] = 0.0;
            }
            return (m);
        }","    private Pattern createPattern(String pattern) {
        StringBuilder patternBuilder = new StringBuilder();
        Matcher m = GLOB_PATTERN.matcher(pattern);
        int end = 0;
        while (m.find()) {
            patternBuilder.append(quote(pattern, end, m.start()));
            String match = m.group();
            if (""?"".equals(match)) {
                patternBuilder.append('.');
            } else if (""*"".equals(match)) {
                patternBuilder.append("".*"");
            } else if (match.startsWith(""{"") && match.endsWith(""}"")) {
                int colonIdx = match.indexOf(':');
                if (colonIdx == -1) {
                    patternBuilder.append(DEFAULT_VARIABLE_PATTERN);
                    variableNames.add(m.group(1));
                } else {
                    String variablePattern = match.substring(colonIdx + 1, match.length() - 1);
                    patternBuilder.append('(');
                    patternBuilder.append(variablePattern);
                    patternBuilder.append(')');
                    String variableName = match.substring(1, colonIdx);
                    variableNames.add(variableName);
                }
            }
            end = m.end();
        }
        patternBuilder.append(quote(pattern, end, pattern.length()));
        return Pattern.compile(patternBuilder.toString());
    }",0,0
"    public static double[][] Transpose(double[][] a) {
        if (logger.isLoggable(Level.FINEST)) {
            logger.finest(""Performing Transpose..."");
        }
        int tms = a.length;
        double m[][] = new double[tms][tms];
        for (int i = 0; i < tms; i++) {
            for (int j = 0; j < tms; j++) {
                m[i][j] = a[j][i];
            }
        }
        return m;
    }","    public ITreeProcessor[] getProcessors(String text) {
        ArrayList<ITreeProcessor> list = new ArrayList<ITreeProcessor>();
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(text);
        while (matcher.find()) {
            String found = text.substring(matcher.start(), matcher.end());
            StringTokenizer st = new StringTokenizer(found, "" ;"");
            st.nextToken();
            list.add(new ImportStarHandler(st.nextToken()));
        }
        return list.toArray(new ITreeProcessor[list.size()]);
    }",0,0
"    public void hyperlinkUpdate(HyperlinkEvent event) {
        URL url = event.getURL();
        if (event.getEventType() == HyperlinkEvent.EventType.ENTERED && !event.getDescription().equals(""login"") && !event.getDescription().startsWith(""copyUrl:"")) {
            urlsEditorPane.setToolTipText(url.toString());
        } else if (event.getEventType() == HyperlinkEvent.EventType.EXITED) {
            urlsEditorPane.setToolTipText(null);
        } else if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            if (event.getDescription().equals(""login"")) {
                if (loginWindow == null) {
                    loginWindow = new LoginWindow(this, keys, configManager, pdfDocument);
                } else {
                    loginWindow.setVisible(true);
                }
            } else if (event.getDescription().startsWith(""copyUrl:"")) {
                String toCopy = event.getDescription().replaceFirst(""copyUrl:"", """");
                StringSelection data = new StringSelection(toCopy);
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(data, data);
            } else {
                String browser = configManager.getBrowser();
                if (!Desktop.isDesktopSupported()) {
                    try {
                        if (!browser.equals("""")) {
                            Runtime.getRuntime().exec(browser + "" "" + url.toString());
                        } else {
                            Runtime.getRuntime().exec(""firefox "" + url.toString());
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ""Unable to find a web browser, "" + ""please set up one on settings window"", ""Web browser error"", JOptionPane.WARNING_MESSAGE);
                    }
                }
                try {
                    Desktop desktop = Desktop.getDesktop();
                    URI uri = new URI(url.toString());
                    desktop.browse(uri);
                } catch (Exception e) {
                    return;
                }
            }
        }
    }","    private void send(HttpServletRequest req, HttpServletResponse res, ServletOutputStream out, HttpSession ssn) throws IOException {
        String to = req.getParameter(""to"");
        String cc = req.getParameter(""cc"");
        String subj = req.getParameter(""subject"");
        String text = req.getParameter(""text"");
        try {
            MailUserData mud = getMUD(ssn);
            if (mud == null) throw new Exception(""trying to send, but not logged in"");
            Message msg = new MimeMessage(mud.getSession());
            InternetAddress[] toAddrs = null, ccAddrs = null;
            if (to != null) {
                toAddrs = InternetAddress.parse(to, false);
                msg.setRecipients(Message.RecipientType.TO, toAddrs);
            } else throw new MessagingException(""No \""To\"" address specified"");
            if (cc != null) {
                ccAddrs = InternetAddress.parse(cc, false);
                msg.setRecipients(Message.RecipientType.CC, ccAddrs);
            }
            if (subj != null) msg.setSubject(subj);
            URLName u = mud.getURLName();
            msg.setFrom(new InternetAddress(u.getUsername() + ""@"" + u.getHost()));
            if (text != null) msg.setText(text);
            Transport.send(msg);
            out.println(""<h1>Message sent successfully</h1></body></html>"");
            out.close();
        } catch (Exception mex) {
            out.println(""<h1>Error sending message.</h1>"");
            out.println(mex.toString());
            out.println(""<br></body></html>"");
        }
    }",0,0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://prologdev1:5432/wdb"";
        final String dbuser = ""guest2"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT value, dataProviderName, placeName, placeGeometry,"" + ""        referencetime, "" + ""        validFrom, validTo, "" + ""        valueParameterName, valueParameterUnit, "" + ""        levelParameterName, levelUnitName, levelFrom, levelTo, "" + ""        dataVersion, confidenceCode, storetime, valueid, valuetype "" + "" FROM wci.read( array['hirlam 10'], 'POINT( 10.0 59.0 )', "" + ""                ('2000-01-03 01:00:00', '2000-01-03 01:00:00', 'exact'), "" + ""                NULL, "" + ""                array['instant temperature of air'], "" + ""                ( 2, 2, 'distance above ground', 'exact' ), "" + ""                array[-1], "" + ""                NULL::wci.returnOid )"";
        final String colNames[] = { ""value"", ""dataProviderName"", ""placeName"", ""referencetime"", ""validFrom"", ""validTo"", ""valueParameterName"", ""valueParameterUnit"", ""levelParameterName"", ""levelUnitName"", ""levelFrom"", ""levelTo"" };
        ResultSet rs = null;
        try {
            con.setAutoCommit(false);
            statement.execute(wdbInit);
            LargeObjectManager lobj = ((org.postgresql.PGConnection) con).getLargeObjectAPI();
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                first = true;
                for (String name : colNames) {
                    data = rs.getString(name);
                    if (first) {
                        first = false;
                    } else {
                        System.out.print("", "");
                    }
                    if (data != null) System.out.print(data); else System.out.print(""\\N"");
                }
                long oid = rs.getLong(""value"");
                LargeObject obj = lobj.open(oid, LargeObjectManager.READ);
                byte buf[] = new byte[obj.size()];
                obj.read(buf, 0, obj.size());
                obj.close();
                System.out.print(""  BLOB size: "" + buf.length);
                System.out.println();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                con.commit();
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }","    private JTextPane getJtpChannelText() {
        if (jtpChannelText == null) {
            jtpChannelText = new JTextPane();
            jtpChannelText.setAutoscrolls(true);
            jtpChannelText.setEditable(false);
            jtpChannelText.addKeyListener(new KeyAdapter() {

                /**
				 * Called when a key is typed.
				 *
				 * @param e The KeyEvent.
				 */
                @Override
                public void keyPressed(KeyEvent e) {
                    if ((e.getModifiers() & InputEvent.CTRL_MASK) == InputEvent.CTRL_MASK || (e.getModifiers() & InputEvent.ALT_MASK) == InputEvent.ALT_MASK || (e.getModifiers() & InputEvent.META_MASK) == InputEvent.META_MASK) {
                        return;
                    }
                    parent.focusTextInput(e.getKeyChar());
                }
            });
            jtpChannelText.addMouseListener(new MouseAdapter() {

                /**
				 * Handle the mouse clicking the control.
				 *
				 * @param e The MouseEvent.
				 */
                @Override
                public void mouseClicked(MouseEvent e) {
                    if (!e.isPopupTrigger() && SwingUtilities.isLeftMouseButton(e)) {
                        if (Desktop.isDesktopSupported()) {
                            try {
                                StyledDocument doc = (StyledDocument) getJtpChannelText().getDocument();
                                String url = (String) doc.getCharacterElement(getJtpChannelText().viewToModel(e.getPoint())).getAttributes().getAttribute(TextStyle.IDENTIFIER_URL);
                                if (url != null) {
                                    Desktop.getDesktop().browse(new java.net.URI(StringHelper.addProcotol(url, ""http://"")));
                                }
                            } catch (Exception ex) {
                            }
                        }
                    }
                }
            });
            jtpChannelText.addMouseMotionListener(new MouseMotionAdapter() {

                /**
				 * Called when the mouse is moved.
				 *
				 * @param e The MouseEvent.
				 */
                @Override
                public void mouseMoved(MouseEvent e) {
                    try {
                        StyledDocument doc = (StyledDocument) getJtpChannelText().getDocument();
                        String url = (String) doc.getCharacterElement(getJtpChannelText().viewToModel(e.getPoint())).getAttributes().getAttribute(TextStyle.IDENTIFIER_URL);
                        if (url != null) {
                            setCursor(new Cursor(Cursor.HAND_CURSOR));
                        } else {
                            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        }
                    } catch (Exception ex) {
                    }
                }
            });
        }
        return jtpChannelText;
    }",0,0
"    public static Object[] remove(Object[] array, Object obj) {
        int index = indexOf(array, obj);
        if (index < 0) {
            return array;
        }
        Object[] newArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length - 1);
        if (index > 0) {
            System.arraycopy(array, 0, newArray, 0, index);
        }
        if (index < array.length - 1) {
            System.arraycopy(array, index + 1, newArray, index, newArray.length - index);
        }
        return newArray;
    }","    public static void mattran_j(double a[][], double at[][], int n, int p) {
        int i, j;
        for (i = 0; i < n; i++) {
            for (j = 0; j < p; j++) {
                at[j][i] = a[i][j];
            }
        }
    }",0,0
"    public static int zipFile(File file_input, File dir_output) {
        File zip_output = new File(dir_output, file_input.getName() + "".zip"");
        ZipOutputStream zip_out_stream;
        try {
            FileOutputStream out = new FileOutputStream(zip_output);
            zip_out_stream = new ZipOutputStream(new BufferedOutputStream(out));
        } catch (IOException e) {
            return STATUS_OUT_FAIL;
        }
        byte[] input_buffer = new byte[BUF_SIZE];
        int len = 0;
        try {
            ZipEntry zip_entry = new ZipEntry(file_input.getName());
            zip_out_stream.putNextEntry(zip_entry);
            FileInputStream in = new FileInputStream(file_input);
            BufferedInputStream source = new BufferedInputStream(in, BUF_SIZE);
            while ((len = source.read(input_buffer, 0, BUF_SIZE)) != -1) zip_out_stream.write(input_buffer, 0, len);
            in.close();
        } catch (IOException e) {
            return STATUS_ZIP_FAIL;
        }
        try {
            zip_out_stream.close();
        } catch (IOException e) {
        }
        return STATUS_OK;
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                fileBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0,0
"    public ImageDisplay(ImageDisplayApplet applet, GraphicsConfiguration gc) {
        this.applet = applet;
        if (applet == null) {
            frame = new JFrame(gc);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(PREFERRED_WIDTH, PREFERRED_HEIGHT));
        Action openAction = new AbstractAction(""Open File"", new ImageIcon(getClass().getResource(""/open.gif""))) {

            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }
        };
        JToolBar bar = new JToolBar();
        bar.add(new ToolBarButton(openAction));
        add(bar, BorderLayout.NORTH);
        if (applet == null) {
            frame.setTitle(""Image Display - Control Panel"");
            frame.getContentPane().add(this, BorderLayout.CENTER);
            frame.pack();
            frame.show();
        }
    }","    public void doPerform() {
        if (!java.awt.Desktop.isDesktopSupported()) {
            log.error(""Desktop is not supported (fatal)"");
        } else {
            final java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
            Action actionType = Action.BROWSE;
            if (file != null) {
                actionType = Action.OPEN;
            }
            if (!desktop.isSupported(actionType)) {
                log.error(""Desktop doesn't support the "" + actionType.name() + "" action (fatal)"");
            } else {
                try {
                    if (uri != null) {
                        desktop.browse(uri);
                    } else if (file != null) {
                        desktop.open(file);
                    }
                } catch (Exception e1) {
                    log.error(e1.getMessage());
                }
            }
        }
    }",0,0
"    private static int[][] transpose(int[][] matrix) {
        int[][] transposed = new int[matrix.length][matrix[0].length];
        for (int k = 0; k < matrix.length; k++) {
            for (int j = 0; j < matrix.length; j++) {
                transposed[j][k] = matrix[k][j];
            }
        }
        return transposed;
    }","    public static String getAlbumName(String author, String track) {
        String url = ""http://musicbrainz.org/ws/1/track/?type=xml&title="" + track.replace(' ', '+') + ""&artist="" + author.replace(' ', '+');
        String ret = HTTP.get(url);
        System.out.println(url);
        String regexp = ""<title>[^<]*</title>"";
        Pattern p = Pattern.compile(regexp);
        Matcher m = p.matcher(ret);
        while (m.find()) {
            String s = ret.substring(m.start() + 7, m.end() - 8);
            if (!s.toUpperCase().equals(track.toUpperCase())) return s;
        }
        return """";
    }",0,0
"    public static void main(String[] args) {
        if (args.length != 4) {
            System.out.println(""usage: java msgmultisend <to> <from> <smtp> true|false"");
            return;
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        boolean debug = Boolean.valueOf(args[3]).booleanValue();
        Properties props = new Properties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(""JavaMail APIs Multipart Test"");
            msg.setSentDate(new Date());
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setText(msgText2, ""us-ascii"");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        }
    }","    public static double[][] transpose(final double[][] m) {
        final double[][] mt = new double[m[0].length][m.length];
        for (int i = 0; i < mt.length; i++) {
            for (int j = 0; j < mt[i].length; j++) {
                mt[i][j] = m[j][i];
            }
        }
        return mt;
    }",0,0
"    public static SRPGAnimation makeObject(String fileName, int tileWidth, int tileHeight, LColor col) {
        String key = fileName.trim().toLowerCase();
        SRPGAnimation animation = (SRPGAnimation) animations.get(key);
        if (animation == null) {
            LImage image = GraphicsUtils.loadNotCacheImage(fileName);
            int c = col.getRGB();
            int wlength = image.getWidth() / tileWidth;
            int hlength = image.getHeight() / tileHeight;
            LImage[][] images = new LImage[wlength][hlength];
            Rect srcR = new Rect();
            Rect dstR = new Rect();
            Canvas canvas = GraphicsUtils.canvas;
            for (int y = 0; y < hlength; y++) {
                for (int x = 0; x < wlength; x++) {
                    Bitmap bitmap = Bitmap.createBitmap(tileWidth, tileHeight, Config.ARGB_4444);
                    srcR.set((x * tileWidth), (y * tileHeight), tileWidth + (x * tileWidth), tileHeight + (y * tileHeight));
                    dstR.set(0, 0, tileWidth, tileHeight);
                    canvas.setBitmap(bitmap);
                    canvas.drawBitmap(image.getBitmap(), srcR, dstR, null);
                    images[x][y] = new LImage(bitmap);
                    LImage tmp = images[x][y];
                    int[] pixels = tmp.getPixels();
                    int size = pixels.length;
                    for (int i = 0; i < size; i++) {
                        if (pixels[i] == c) {
                            pixels[i] = 0xffffff;
                        }
                    }
                    tmp.setPixels(pixels, tmp.getWidth(), tmp.getHeight());
                }
            }
            LImage[][] result = new LImage[hlength][wlength];
            for (int y = 0; y < wlength; y++) {
                for (int x = 0; x < hlength; x++) {
                    result[x][y] = images[y][x];
                }
            }
            images = null;
            animations.put(key, animation = makeObject(result[0], result[1], result[3], result[2]));
        }
        return animation;
    }","        public void actionPerformed(ActionEvent e) {
            JFileChooser chooser = new JFileChooser();
            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) m_viewer.setGMNFile(chooser.getSelectedFile());
        }",0,0
"    private static int executeCommand(final String commandName, final List<String> arguments) {
        System.out.println(""executing ["" + commandName.toString() + ""] with arguments: "" + Arrays.toString(arguments.toArray()));
        try {
            final List<String> pbArgs = new LinkedList<String>(arguments);
            pbArgs.add(0, commandName);
            final ProcessBuilder pb = new ProcessBuilder(pbArgs);
            System.out.println(""starting ..."");
            final Process process = pb.start();
            InputStream inputStream = process.getInputStream();
            InputStream errorStream = process.getErrorStream();
            ThreadedStreamHandler outputStreamHandler = ThreadedStreamHandler.newSimple(""OUT"", inputStream);
            ThreadedStreamHandler errorStreamHandler = ThreadedStreamHandler.newSimple(""ERR"", errorStream);
            outputStreamHandler.start();
            errorStreamHandler.start();
            System.out.println(""command running"");
            final int exitValue = process.waitFor();
            outputStreamHandler.interrupt();
            errorStreamHandler.interrupt();
            outputStreamHandler.join();
            errorStreamHandler.join();
            System.out.println(""finished. exitValue: "" + exitValue);
            return exitValue;
        } catch (final Exception e) {
            throw new RuntimeException(""executing command failed"", e);
        }
    }","    public static final Object[][] transpose(Object[][] a) {
        int am = a.length;
        int an = a[0].length;
        Object[][] result = new Object[an][am];
        for (int i = 0; i < am; i++) {
            for (int j = 0; j < an; j++) {
                result[j][i] = a[i][j];
            }
        }
        return result;
    }",0,0
"    public static float medianElement(float[] array, int size) {
        float[] tmpArray = new float[size];
        System.arraycopy(array, 0, tmpArray, 0, size);
        boolean changed = true;
        while (changed) {
            changed = false;
            for (int i = 0; i < size - 1; i++) {
                if (tmpArray[i] > tmpArray[i + 1]) {
                    changed = true;
                    float tmp = tmpArray[i];
                    tmpArray[i] = tmpArray[i + 1];
                    tmpArray[i + 1] = tmp;
                }
            }
        }
        return tmpArray[size / 2];
    }","    public static void transpose(double[][] A, double[][] B) {
        assert rows(B) == cols(A);
        assert cols(B) == rows(A);
        int rows = rows(B);
        int cols = cols(B);
        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) B[i][j] = A[j][i];
    }",0,0
"    protected static String findJavacOutputs(String fullOutput) {
        if (fullOutput == null) return """";
        StringBuilder javacOutputs = new StringBuilder();
        int findOffset = 0;
        Pattern javacPattern = Pattern.compile(""^\\s*\\[javac\\]"", Pattern.MULTILINE);
        Matcher m = javacPattern.matcher(fullOutput);
        while (m.find(findOffset)) {
            int javacBegin = m.end();
            int javacEnd = fullOutput.length();
            Pattern taskPattern = Pattern.compile(""^\\s*\\[[^\\]]+\\]"", Pattern.MULTILINE);
            Matcher m2 = taskPattern.matcher(fullOutput);
            if (m2.find(javacBegin)) {
                javacEnd = m2.start();
            }
            javacOutputs.append(fullOutput.substring(javacBegin, javacEnd));
            if (javacEnd == fullOutput.length()) break;
            findOffset = javacEnd;
        }
        return javacOutputs.toString();
    }","    static double[][] transpose(final double a[][]) {
        int nc = 0;
        for (double[] v : a) {
            if (v.length > nc) nc = v.length;
        }
        double[][] b = new double[nc][];
        for (int i = 0; i < b.length; i++) b[i] = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a[i].length; j++) {
                b[j][i] = a[i][j];
            }
        }
        return b;
    }",0,0
"    private String fixUnicode(String s) {
        String s2 = """";
        String patron = ""(\\\\[U][+])([0-9A-Fa-f]{4})"";
        Pattern compiledPatron = Pattern.compile(patron);
        Matcher matcher = compiledPatron.matcher(s);
        int lastEnd = 0;
        while (matcher.find()) {
            int start = matcher.start();
            int end = matcher.end();
            String code = matcher.group(2);
            String hexa = ""0x"" + code;
            int caracter = Integer.decode(hexa).intValue();
            s2 = s2 + s.substring(lastEnd, start) + (char) caracter;
            lastEnd = end;
        }
        s2 = s2 + s.substring(lastEnd);
        return s2;
    }","    public static Object[] addToArray(Object[] array, Object member) {
        Object[] newArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = member;
        return newArray;
    }",0,0
"    public static Double[][] transpor(Double[][] matriz) {
        validarMatriz(matriz);
        Double[][] transposta = new Double[matriz[0].length][matriz.length];
        for (int x = 0; x < matriz.length; x++) {
            Double[] linha = matriz[x];
            for (int y = 0; y < linha.length; y++) {
                transposta[y][x] = matriz[x][y];
            }
        }
        return transposta;
    }","    private void highlightWordToBeAnonymized(String patternText) {
        if (highlightSuggested) {
            removeSuggestedHighlights();
        }
        try {
            Document document = transcript.getDocument();
            Pattern pattern = Pattern.compile(patternText, Pattern.MULTILINE);
            Matcher textMatcher = pattern.matcher(document.getText(0, document.getLength()));
            while (textMatcher.find()) {
                transcript.getHighlighter().addHighlight(textMatcher.start(), textMatcher.end() - 1, markedForAnonHighlighter);
            }
        } catch (BadLocationException error) {
            ErrorLog.instance().addEntry(error);
        }
        if (highlightSuggested) {
            highlightSuggestedWords();
        }
    }",0,0
"                public void mousePressed(MouseEvent e) {
                    if (e.getClickCount() == 2) {
                        String S, S2, S3, Temp;
                        int i;
                        String[] projstr;
                        switch(ListCommande.getSelectedIndex()) {
                            case 0:
                            case 12:
                                S = JOptionPane.showInputDialog(null, ""Entrez le message"", ""Message"", 1);
                                if (S != null) {
                                    S = ""'"" + S;
                                    if (ListCommande.getSelectedIndex() == 0) {
                                        Temp = """";
                                        if (JOptionPane.showConfirmDialog(null, ""Voulez vous positionner le message?"", ""Option"", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                                            jump = new JumpTo(null, true);
                                            Temp = jump.Ed_X.getText() + "","" + jump.Ed_Y.getText();
                                            jump.dispose();
                                            jump = new JumpTo(null, false);
                                            jump.setVisible(false);
                                            jump.setModal(true);
                                            jump.setTitle(""Largeur/Hauteur"");
                                            jump.LblX.setText(""W"");
                                            jump.LblY.setText(""H"");
                                            jump.setVisible(true);
                                            Temp += "","" + jump.Ed_X.getText() + "","" + jump.Ed_Y.getText() + "","";
                                            jump.dispose();
                                            S = Temp + S;
                                        }
                                        Ed_Commande.setText(""Message("" + S + ""')"");
                                    }
                                    if (ListCommande.getSelectedIndex() == 12) Ed_Commande.setText(""OnResultQuery('"" + S + ""')"");
                                }
                                break;
                            case 1:
                                cd = new CondDecl(projet, """", null, true);
                                if (cd.status == 1) Ed_Commande.setText(""Condition('"" + cd.Commande + ""')"");
                                cd.dispose();
                                break;
                            case 2:
                            case 3:
                                values = new String[projet.getObjets().size()];
                                for (int j = 0; j < projet.getObjets().size(); j++) values[j] = projet.getObjetByIndex(j).Name;
                                liste = new JListe(values, null, ""Choisissez l'objet"", true);
                                if (liste.status == 1) {
                                    S = ""1"";
                                    S = (String) JOptionPane.showInputDialog(null, ""Entrez la quantité de l'objet"", ""Quantité"", 1, null, null, S);
                                    if (S != null) {
                                        if (S.compareTo("""") != 0) {
                                            if (S.compareTo(""1"") == 0) {
                                                if (ListCommande.getSelectedIndex() == 2) Ed_Commande.setText(""AddObject("" + liste.ListBox.getSelectedValue().toString() + "")""); else Ed_Commande.setText(""DelObject("" + liste.ListBox.getSelectedValue().toString() + "")"");
                                            } else {
                                                if (ListCommande.getSelectedIndex() == 2) Ed_Commande.setText(""AddObject("" + liste.ListBox.getSelectedValue().toString() + "","" + S + "")""); else Ed_Commande.setText(""DelObject("" + liste.ListBox.getSelectedValue().toString() + "","" + S + "")"");
                                            }
                                        }
                                    }
                                }
                                liste.dispose();
                                break;
                            case 4:
                            case 5:
                                ArrayList<Carte> carte = projet.getCartes();
                                ArrayList<String> nomcarte = new ArrayList<String>();
                                for (i = 0; i < carte.size(); i++) nomcarte.add(carte.get(i).Name);
                                projstr = new String[nomcarte.size()];
                                projstr = nomcarte.toArray(projstr);
                                liste = new JListe(projstr, null, ""Choisissez la carte"", true);
                                if (liste.status == 1) {
                                    jump = new JumpTo(null, true);
                                    if (jump.status == 1) {
                                        if (ListCommande.getSelectedIndex() == 4) Ed_Commande.setText(""Teleport("" + liste.ListBox.getSelectedValue().toString() + "","" + jump.Ed_X.getText() + "","" + jump.Ed_Y.getText() + "")""); else Ed_Commande.setText(""ChangeResPoint("" + liste.ListBox.getSelectedValue().toString() + "","" + jump.Ed_X.getText() + "","" + jump.Ed_Y.getText() + "")"");
                                    }
                                    jump.dispose();
                                }
                                liste.dispose();
                                break;
                            case 6:
                                jump = new JumpTo(null, true);
                                if (jump.status == 1) Ed_Commande.setText(""SScroll("" + jump.Ed_X.getText() + "","" + jump.Ed_Y.getText() + "")"");
                                jump.dispose();
                                break;
                            case 7:
                                ArrayList<String> nomclasses = new ArrayList<String>();
                                for (i = 0; i < projet.getClassesJoueur().size(); i++) nomclasses.add(projet.getClassesJoueur().get(i).Name);
                                projstr = new String[nomclasses.size()];
                                projstr = nomclasses.toArray(projstr);
                                liste = new JListe(projstr, null, ""Choisissez la classe(vide=aucune)"", true);
                                if (liste.status == 1) {
                                    Ed_Commande.setText(""ChangeClasse('"" + liste.ListBox.getSelectedValue().toString() + ""')"");
                                }
                                break;
                            case 8:
                            case 17:
                            case 19:
                            case 20:
                            case 21:
                                JFileChooser choix = new JFileChooser();
                                if (ListCommande.getSelectedIndex() == 7) choix.setCurrentDirectory(new java.io.File(projet.getName() + ""/Chipset/"")); else choix.setCurrentDirectory(new java.io.File(projet.getName() + ""/Sound/""));
                                int retour = choix.showOpenDialog(null);
                                if (retour == JFileChooser.APPROVE_OPTION) {
                                    switch(ListCommande.getSelectedIndex()) {
                                        case 8:
                                            Ed_Commande.setText(""ChangeSkin('Chipset\\"" + choix.getSelectedFile().getName() + ""')"");
                                            break;
                                        case 17:
                                            Ed_Commande.setText(""PlayMusic('Sound\\"" + choix.getSelectedFile().getName() + ""')"");
                                            break;
                                        case 29:
                                            Ed_Commande.setText(""PlaySound('Sound\\"" + choix.getSelectedFile().getName() + ""')"");
                                            break;
                                        case 20:
                                            Ed_Commande.setText(""ChAttaqueSound('Sound\\"" + choix.getSelectedFile().getName() + ""')"");
                                            break;
                                        case 21:
                                            Ed_Commande.setText(""ChBlesseSound('Sound\\"" + choix.getSelectedFile().getName() + ""')"");
                                            break;
                                    }
                                }
                                break;
                            case 9:
                                values = new String[projet.getMonstres().size()];
                                for (int j = 0; j < projet.getMonstres().size(); j++) values[j] = projet.getMonstreByIndex(j).Name;
                                liste = new JListe(values, null, ""Choisissez le monstre"", true);
                                if (liste.status == 1) {
                                    jump = new JumpTo(null, true);
                                    if (jump.status == 1) {
                                        S = JOptionPane.showInputDialog(null, ""Entrez le nombre de Monstre"", ""Monstre"", 1);
                                        if (S != null) {
                                            S2 = JOptionPane.showInputDialog(null, ""Vitesse de respawn?(0=ne respawn pas)"", ""Monstre"", 1);
                                            if (S2 != null) {
                                                S3 = JOptionPane.showInputDialog(null, ""Monstres donnent de l'xp? (0=non, 1=oui)"", ""Monstre"", 1);
                                                if (S3 != null) {
                                                    Ed_Commande.setText(""GenereMonstre("" + liste.ListBox.getSelectedValue().toString() + "","" + jump.Ed_X.getText() + "","" + jump.Ed_Y.getText() + "","" + S + "","" + S2 + "","" + S3 + "")"");
                                                }
                                            }
                                        }
                                    }
                                    jump.dispose();
                                }
                                liste.dispose();
                                break;
                            case 11:
                                Temp = """";
                                if (JOptionPane.showConfirmDialog(null, ""Voulez vous positionner le query?"", ""Option"", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                                    jump = new JumpTo(null, true);
                                    if (jump.status == 1) Temp = ""InputQuery("" + jump.Ed_X.getText() + "","" + jump.Ed_Y.getText();
                                    jump.dispose();
                                }
                                S = JOptionPane.showInputDialog(null, ""Entrez la question"", ""Message"", 1);
                                if (S != null) {
                                    i = 0;
                                    if (Temp.compareTo("""") == 0) Temp = ""InputQuery('"" + S + ""'""; else Temp += "",'"" + S + ""'"";
                                    do {
                                        S = """";
                                        S = JOptionPane.showInputDialog(null, ""Entrez la réponse "" + (i + 1), ""Message"", 1);
                                        if (S == null) S = """";
                                        if (S != """") Temp += "",'"" + S + ""'"";
                                        i++;
                                    } while (S != """");
                                    Temp += "")"";
                                    Ed_Commande.setText(Temp);
                                }
                                break;
                            case 14:
                                S = JOptionPane.showInputDialog(null, ""Entrez la question"", ""Message"", 1);
                                if (S != null) Ed_Commande.setText(Ed_Commande.getText() + ""InputString('"" + S + ""')"");
                                break;
                            case 15:
                                S = JOptionPane.showInputDialog(null, ""Entrez le message du magasin"", ""Message"", 1);
                                if (S != null) {
                                    values = new String[projet.getObjets().size()];
                                    for (int j = 0; j < projet.getObjets().size(); j++) values[j] = projet.getObjetByIndex(j).Name;
                                    liste = new JListe(values, null, ""Choisissez les objets"", true);
                                    if (liste.status == 1) {
                                        Ed_Commande.setText(""Magasin('"" + S + ""'"");
                                        Object[] obj = liste.ListBox.getSelectedValues();
                                        for (int j = 0; j < obj.length; j++) Ed_Commande.setText(Ed_Commande.getText() + "",'"" + obj[j].toString() + ""'"");
                                        Ed_Commande.setText(Ed_Commande.getText() + "")"");
                                    }
                                    liste.dispose();
                                }
                                break;
                            case 16:
                                S = JOptionPane.showInputDialog(null, ""Entrez le temps d'attente"", ""Timer"", 1);
                                if (S != null) Ed_Commande.setText(""Attente("" + S + "")"");
                                break;
                            case 22:
                            case 23:
                                values = new String[projet.getMagies().size()];
                                for (int j = 0; j < projet.getMagies().size(); j++) values[j] = projet.getMagieByIndex(j).Name;
                                liste = new JListe(values, null, ""Choisissez la magie"", true);
                                if (liste.status == 1) {
                                    if (ListCommande.getSelectedIndex() == 23) Ed_Commande.setText(""AddMagie("" + liste.ListBox.getSelectedValue().toString() + "")""); else Ed_Commande.setText(""DelMagie("" + liste.ListBox.getSelectedValue().toString() + "")"");
                                }
                                liste.dispose();
                                break;
                            case 26:
                            case 27:
                                S = JOptionPane.showInputDialog(null, ""Entrez le nom de la sauvegarde(Vide = Choix du joueur)"", ""Sauvegarde"", 1);
                                if (S != null) {
                                    if (ListCommande.getSelectedIndex() == 27) Ed_Commande.setText(""Chargement('"" + S + ""')""); else Ed_Commande.setText(""Sauvegarde('"" + S + ""')"");
                                }
                                break;
                            case 33:
                            case 34:
                                projstr = new String[verifie.getMenuPossibles().size()];
                                projstr = verifie.getMenuPossibles().toArray(projstr);
                                liste = new JListe(projstr, null, ""Choisissez le menu"", true);
                                if (liste.status == 1) {
                                    if (ListCommande.getSelectedIndex() == 32) Ed_Commande.setText(""AddMenu("" + liste.ListBox.getSelectedValue().toString() + "")""); else Ed_Commande.setText(""DelMenu("" + liste.ListBox.getSelectedValue().toString() + "")"");
                                }
                                break;
                            default:
                                Ed_Commande.setText(Ed_Commande.getText() + ListCommande.getSelectedValue().toString());
                        }
                    }
                }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] append(T[] oldArray, T[] toAppend1, T[] toAppend2) {
        Class<?> component = oldArray.getClass().getComponentType();
        T[] array = (T[]) Array.newInstance(component, oldArray.length + toAppend1.length + toAppend2.length);
        System.arraycopy(oldArray, 0, array, 0, oldArray.length);
        System.arraycopy(toAppend1, 0, array, oldArray.length, toAppend1.length);
        System.arraycopy(toAppend2, 0, array, oldArray.length + toAppend1.length, toAppend2.length);
        return array;
    }",0,0
"    @Override
    public List<SectionFinderResult> lookForSections(String text, Section<?> father, Type type) {
        ArrayList<SectionFinderResult> result = new ArrayList<SectionFinderResult>();
        Pattern TABLE_LINE = Pattern.compile(TABLE_LINE_REGEXP, Pattern.MULTILINE);
        Matcher m = TABLE_LINE.matcher(text);
        int end = 0;
        int tableStart = -1;
        int tableEnd = -1;
        while (m.find(end)) {
            int start = m.start();
            end = m.end();
            if (tableEnd == start) {
                tableEnd = end;
            } else {
                addResultIfAvailable(result, tableStart, tableEnd);
                tableStart = start;
                tableEnd = end;
            }
            if (end >= text.length()) break;
        }
        addResultIfAvailable(result, tableStart, tableEnd);
        return result;
    }","    public static Object concat(Object arr1, Object arr2) {
        int len1 = (arr1 == null) ? (-1) : Array.getLength(arr1);
        if (len1 <= 0) {
            return arr2;
        }
        int len2 = (arr2 == null) ? (-1) : Array.getLength(arr2);
        if (len2 <= 0) {
            return arr1;
        }
        Class commonComponentType = commonClass(arr1.getClass().getComponentType(), arr2.getClass().getComponentType());
        Object newArray = Array.newInstance(commonComponentType, len1 + len2);
        System.arraycopy(arr1, 0, newArray, 0, len1);
        System.arraycopy(arr2, 0, newArray, len1, len2);
        return newArray;
    }",0,0
"    public static String convertLocationRun(String sequence, String symbol) {
        String regex = symbol + ""+"";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(sequence);
        List<String> ranges = new ArrayList<String>();
        while (matcher.find()) {
            int start = matcher.start() + 1;
            int end = matcher.end();
            ranges.add(start + DELIMITER + end);
        }
        return CStringHelper.join(ranges, "","");
    }","    private void openSaveFileActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == openSaveFile) {
            int returnVal = fc.showOpenDialog(ParameterSolutions.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File savedFile = fc.getSelectedFile();
                log.append(""Opening: "" + savedFile.getName() + ""\n"");
                String name = savedFile.getName();
                if (!savedFile.canRead() || !((name.substring(name.length() - 4, name.length()).equals("".cpm""))) || !recoverSavedData(savedFile)) {
                    log.append(""That is not a valid saved file, please choose"" + "" a file previously saved in this program.\n"");
                }
            } else {
                log.append(""Dialog Cancelled by User.\n"");
            }
        }
    }",0,0
"    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        res.setContentType(""text/html"");
        PrintWriter out = res.getWriter();
        out.println(""<html><head><title>Student File</title></head><body bgcolor=\""turquoise\"">"");
        int err = 0;
        if (req.getParameter(""add"") != null) {
            out.println(""<center><h1>Student</h1></center><hr>"");
            out.println(""<b>Add Record</b><br><br><form method=\""POST\"">"");
            out.println(""Name: <input type=\""text\"" name=\""name\"">"");
            out.println(""Address: <input type=\""text\"" name=\""address\"">"");
            out.println(""Phone: <input type=\""text\"" name=\""phone\"">"");
            out.println(""<br><br><input type=\""submit\"" name=\""addrecord\"" value=\""Addrecord\"">"");
            out.println(""<input type=\""submit\"" name=\""cancel\"" value=\""Cancel\"">"");
            out.println(""</form>"");
        } else if (req.getParameter(""cancel"") != null) {
            res.sendRedirect(""http://localhost:8080/Jeff"");
        } else if (req.getParameter(""addrecord"") != null) {
            Connection con;
            String dbsource = ""jdbc:odbc:jdbctest"";
            String drv = ""sun.jdbc.odbc.JdbcOdbcDriver"";
            String duser = ""root"";
            String dpass = """";
            String defaultquery = ""insert into student values('"" + req.getParameter(""name"") + ""','"" + req.getParameter(""address"") + ""','"" + req.getParameter(""phone"") + ""')"";
            try {
                con = DriverManager.getConnection(dbsource, duser, dpass);
                Statement stm = con.createStatement();
                int a = stm.executeUpdate(defaultquery);
                con.close();
            } catch (SQLException ex) {
                System.out.println(""SQL EXCEPTION:"" + ex.getMessage());
                out.println(""ERROR"");
                err++;
            } finally {
                if (err == 0) {
                    JOptionPane.showMessageDialog(null, ""RECORD ADDED"");
                    res.sendRedirect(""http://localhost:8080/Exercise2/Student"");
                }
            }
        } else if (req.getParameter(""update"") != null) {
            out.println(""<center><h1>Student</h1></center><hr>"");
            out.println(""<b>Update Record</b><br><br><form method=\""POST\"">"");
            out.println(""Name: <input type=\""text\"" name=\""name\"" value=\"""" + req.getParameter(""name"") + ""\"">"");
            out.println(""<input type=\""hidden\"" name=\""pname\"" value=\"""" + req.getParameter(""name"") + ""\"">"");
            out.println(""Address: <input type=\""text\"" name=\""address\"" value=\"""" + req.getParameter(""address"") + ""\"">"");
            out.println(""<input type=\""hidden\"" name=\""paddress\"" value=\"""" + req.getParameter(""address"") + ""\"">"");
            out.println(""Phone: <input type=\""text\"" name=\""phone\""value=\"""" + req.getParameter(""phone"") + ""\"">"");
            out.println(""<input type=\""hidden\"" name=\""pphone\""value=\"""" + req.getParameter(""phone"") + ""\"">"");
            out.println(""<br><br><input type=\""submit\"" name=\""uprecord\"" value=\""Save Changes\"">"");
            out.println(""<input type=\""submit\"" name=\""cancel\"" value=\""Cancel\"">"");
            out.println(""</form>"");
        } else if (req.getParameter(""uprecord"") != null) {
            Connection con;
            String dbsource = ""jdbc:odbc:jdbctest"";
            String drv = ""sun.jdbc.odbc.JdbcOdbcDriver"";
            String duser = ""root"";
            String dpass = """";
            String defaultquery = ""update student set name='"" + req.getParameter(""name"") + ""', address='"" + req.getParameter(""address"") + ""', phone='"" + req.getParameter(""phone"") + ""'"" + "" where name='"" + req.getParameter(""pname"") + ""'and address='"" + req.getParameter(""paddress"") + ""'and phone='"" + req.getParameter(""pphone"") + ""'"";
            try {
                con = DriverManager.getConnection(dbsource, duser, dpass);
                Statement stm = con.createStatement();
                int a = stm.executeUpdate(defaultquery);
                con.close();
            } catch (SQLException ex) {
                System.out.println(""SQL EXCEPTION:"" + ex.getMessage());
                out.println(""ERROR"");
                err++;
            } finally {
                if (err == 0) {
                    JOptionPane.showMessageDialog(null, ""RECORD CHANGED"");
                    res.sendRedirect(""http://localhost:8080/Exercise2/Student"");
                }
            }
        } else if (req.getParameter(""delete"") != null) {
            int del = JOptionPane.showConfirmDialog(null, ""Do you want to delete this record?"");
            if (del == 0) {
                Connection con;
                String dbsource = ""jdbc:odbc:jdbctest"";
                String drv = ""sun.jdbc.odbc.JdbcOdbcDriver"";
                String duser = ""root"";
                String dpass = """";
                String defaultquery = ""delete from student  where name='"" + req.getParameter(""name"") + ""'and address='"" + req.getParameter(""address"") + ""'and phone='"" + req.getParameter(""phone"") + ""'"";
                try {
                    con = DriverManager.getConnection(dbsource, duser, dpass);
                    Statement stm = con.createStatement();
                    int a = stm.executeUpdate(defaultquery);
                    con.close();
                } catch (SQLException ex) {
                    System.out.println(""SQL EXCEPTION:"" + ex.getMessage());
                    out.println(""ERROR"");
                    err++;
                } finally {
                    if (err == 0) {
                        JOptionPane.showMessageDialog(null, ""RECORD DELETED"");
                        res.sendRedirect(""http://localhost:8080/Exercise2/Student"");
                    }
                }
            } else {
                res.sendRedirect(""http://localhost:8080/Exercise2/Student"");
            }
        }
        out.println(""</body></html>"");
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    private Object[][] transform(Object[][] src) {
        int col = src.length;
        int row = src[0].length;
        Object[][] dest = new Object[row][col];
        for (int i = 0; i < col; i++) {
            for (int j = 0; j < row; j++) {
                dest[j][i] = src[i][j];
            }
        }
        return dest;
    }","    private String[] execSingleLineOutputCmd(String cmdWithParams) {
        String result = """";
        try {
            Process p = Runtime.getRuntime().exec(cmdWithParams.split("" ""));
            BufferedReader sin = new BufferedReader(new InputStreamReader(p.getInputStream()));
            result = sin.readLine();
            sin.close();
            return result.split("" "");
        } catch (Exception ex) {
            System.out.println(""ERROR: "" + ex.getMessage());
            return null;
        }
    }",0,0
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    private Object reallocArray(Object src, int newSize) {
        Object dest = java.lang.reflect.Array.newInstance(src.getClass().getComponentType(), newSize);
        System.arraycopy(src, 0, dest, 0, java.lang.reflect.Array.getLength(src));
        return dest;
    }",0,0
"    public static void main(String args[]) {
        try {
            Runtime rt = Runtime.getRuntime();
            Process p = rt.exec(""Disk.exe t 6291529"");
            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String h = in.readLine();
            while (h != null) {
                System.out.println(h);
                h = in.readLine();
            }
            OutputStream out = p.getOutputStream();
            InputStream err = p.getErrorStream();
            p.destroy();
        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }","    public static void createScreenShot(long sleeptime, String outFileName, JFrame frame) throws Exception {
        outFileName = outFileName + (counter++) + "".png"";
        try {
            long time = sleeptime * 1000L;
            System.out.println(""Waiting "" + (time / 1000L) + "" second(s)..."");
            Thread.sleep(time);
        } catch (NumberFormatException nfe) {
            System.err.println(sleeptime + "" does not seem to be a "" + ""valid number of seconds."");
            System.exit(1);
        }
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Rectangle screenRect = frame.getBounds();
        Robot robot = new Robot();
        BufferedImage image = robot.createScreenCapture(screenRect);
        ImageIO.write(image, ""png"", new File(outFileName));
        System.out.println(""Saved screen shot ("" + image.getWidth() + "" x "" + image.getHeight() + "" pixels) to file \"""" + outFileName + ""\""."");
    }",0,0
"    public static String getFormattedName(final InformationUnit unit) {
        StringWriter returnValue = new StringWriter();
        String string = ContactActivator.getDefault().getPreferenceStore().getString(ContactPreferenceInitializer.FORMATTED_NAME_PATTERN);
        Pattern compile = Pattern.compile(FORMATTED_REGEXP);
        Matcher matcher = compile.matcher(string);
        int lastEnd = 0;
        while (matcher.find()) {
            String group = matcher.group();
            matcher.start();
            returnValue.append(string.substring(lastEnd, matcher.start()));
            lastEnd = matcher.end();
            String substring = group.substring(1);
            InformationUnit childByType = InformationUtil.getChildByType(unit, substring);
            if (childByType != null && childByType.getStringValue() != null) {
                returnValue.append(childByType.getStringValue());
            }
        }
        return StringUtils.strip(returnValue.toString());
    }","    public boolean authorizeToken() throws Exception {
        String url;
        if (this.provider.getAuthorizationUrl().indexOf('?') == -1) {
            url = this.provider.getAuthorizationUrl() + ""?oauth_token="" + this.token;
        } else {
            url = this.provider.getAuthorizationUrl() + ""&oauth_token="" + this.token;
        }
        URI authUrl = new URI(url);
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                desktop.browse(authUrl);
            } else {
                JOptionPane.showMessageDialog(null, ""Visit the following URL: "" + authUrl);
            }
        } else {
            JOptionPane.showMessageDialog(null, ""Visit the following URL: "" + authUrl);
        }
        verificationCode = JOptionPane.showInputDialog(""Please enter the verification Code"");
        return true;
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static final Object[] remove(Object[] array, int index) {
        Object[] tArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length - 1);
        System.arraycopy(array, 0, tArray, 0, index);
        System.arraycopy(array, index + 1, tArray, index, array.length - index - 1);
        return tArray;
    }",0,0
"    public MathRealMatrix transpose() {
        int m = this.M;
        int n = this.N;
        double[][] mData = this.Data;
        double[][] newData = new double[n][m];
        for (int ni = 0; ni < n; ni++) {
            for (int mi = 0; mi < m; mi++) {
                newData[ni][mi] = mData[mi][ni];
            }
        }
        return new MathRealMatrix(newData);
    }","    private String matchPattern(String string, String regex, String tag) {
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(string);
        int lastend = 0;
        String output = """";
        while (matcher.find()) {
            output += string.substring(lastend, matcher.start(1));
            output += colorize(matcher, tag);
            lastend = matcher.end(1);
        }
        output += string.substring(lastend);
        return output;
    }",0,0
"    private byte[] getIHDRBytes(BufferedImage image) {
        byte bitDepth;
        byte colorType;
        int imageType = image.getType();
        switch(imageType) {
            case BufferedImage.TYPE_3BYTE_BGR:
            case BufferedImage.TYPE_INT_BGR:
            case BufferedImage.TYPE_INT_RGB:
            case BufferedImage.TYPE_USHORT_555_RGB:
            case BufferedImage.TYPE_USHORT_565_RGB:
                bitDepth = 8;
                colorType = 2;
                break;
            case BufferedImage.TYPE_4BYTE_ABGR:
            case BufferedImage.TYPE_INT_ARGB:
                bitDepth = 8;
                colorType = 6;
                break;
            case BufferedImage.TYPE_BYTE_INDEXED:
                bitDepth = 8;
                colorType = 3;
                break;
            case BufferedImage.TYPE_BYTE_GRAY:
                bitDepth = 8;
                colorType = 0;
                break;
            case BufferedImage.TYPE_USHORT_GRAY:
                bitDepth = 16;
                colorType = 0;
                break;
            case BufferedImage.TYPE_BYTE_BINARY:
            case BufferedImage.TYPE_4BYTE_ABGR_PRE:
            case BufferedImage.TYPE_INT_ARGB_PRE:
            case BufferedImage.TYPE_CUSTOM:
            default:
                throw new RuntimeException(""Unsupported image type"");
        }
        byte compressionMethod = 0;
        byte filterMethod = 0;
        byte interlaceMethod = 0;
        byte[] array = new byte[25];
        ByteBuffer buffer = ByteBuffer.wrap(array);
        buffer.putInt(13);
        buffer.put(getISO8859_1Bytes(CHUNK_TYPE_IHDR));
        buffer.putInt(image.getWidth());
        buffer.putInt(image.getHeight());
        buffer.put(bitDepth);
        buffer.put(colorType);
        buffer.put(compressionMethod);
        buffer.put(filterMethod);
        buffer.put(interlaceMethod);
        CRC32 crc = new CRC32();
        crc.update(array, 4, 17);
        buffer.putInt((int) crc.getValue());
        return array;
    }","    public static void apri(java.io.File dst) {
        if (System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) {
            try {
                Runtime.getRuntime().exec(""rundll32 url.dll,FileProtocolHandler "" + dst);
            } catch (IOException ex) {
                Logger.getLogger(jcApriFileEsterno.class.getName()).log(Level.SEVERE, null, ex);
                jcFunzioni.erroreSQL(ex.toString());
            }
        } else {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().open(dst);
                } catch (IOException ex) {
                    Logger.getLogger(jcApriFileEsterno.class.getName()).log(Level.SEVERE, null, ex);
                    jcFunzioni.erroreSQL(ex.toString());
                }
            } else {
                jcFunzioni.erroreSQL(""Impossibile lanciare il file !"");
            }
        }
    }",0,0
"    private void buildMenu() {
        JMenuBar menuBar;
        JMenu file;
        JMenuItem newItem, open, save, close, quit;
        menuBar = new JMenuBar();
        file = new JMenu(""File..."");
        file.setMnemonic(KeyEvent.VK_F);
        menuBar.add(file);
        newItem = new JMenuItem(""New"", KeyEvent.VK_N);
        newItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.META_MASK));
        newItem.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                new Training();
            }
        });
        open = new JMenuItem(""Open"", KeyEvent.VK_O);
        open.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ActionEvent.META_MASK));
        open.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                JFileChooser chooser = new JFileChooser();
                try {
                    chooser.setCurrentDirectory(new File(new File(""."").getCanonicalPath()));
                } catch (IOException ioe) {
                }
                int returnVal = chooser.showOpenDialog(frame);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    openFile(chooser.getSelectedFile());
                }
            }
        });
        save = new JMenuItem(""Save"", KeyEvent.VK_S);
        save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.META_MASK));
        save.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                saveClassifier();
            }
        });
        close = new JMenuItem(""Close"", KeyEvent.VK_W);
        close.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W, ActionEvent.META_MASK));
        close.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                frame.setVisible(false);
                recognitionInfoFrame.setVisible(false);
            }
        });
        quit = new JMenuItem(""Quit"", KeyEvent.VK_Q);
        quit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, ActionEvent.META_MASK));
        quit.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
        file.add(newItem);
        file.add(open);
        file.add(save);
        file.addSeparator();
        file.add(close);
        file.add(quit);
        menuBar.add(file);
        frame.setJMenuBar(menuBar);
    }","    public static String convertLocationRun(String sequence, String symbol) {
        String regex = symbol + ""+"";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(sequence);
        List<String> ranges = new ArrayList<String>();
        while (matcher.find()) {
            int start = matcher.start() + 1;
            int end = matcher.end();
            ranges.add(start + DELIMITER + end);
        }
        return CStringHelper.join(ranges, "","");
    }",0,0
"    @Override
    public void runCode() {
        if (Desktop.isDesktopSupported()) {
            final Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(new URI(HELP_URI));
            } catch (final IOException e) {
                LogEngine.error(""Could not launch the default browser for your system"", e);
            } catch (final URISyntaxException e) {
                LogEngine.error(""Invalid URI "" + HELP_URI, e);
            }
        } else {
            LogEngine.inform(""Unfortunately your system doesn't support Java SE 6 Desktop API"", null);
        }
    }","    private void symmetrizeMatrix() {
        for (int i = 0; i < systemConstants.length; i++) {
            for (int j = 0; j < i; j++) systemMatrix[j][i] = systemMatrix[i][j];
        }
    }",0,0
"    public void actionPerformed(ActionEvent telleAction) {
        JMenuItem laSource = (JMenuItem) (telleAction.getSource());
        String leChoix = laSource.getText();
        if (leChoix == ""Nouveau"") {
            UneCarte laCarte = new UneCarte(this, this);
            if (!laCarte.getsonNom().equals("""")) {
                saCarte = laCarte;
                afficheLaCarte();
                afficheEnContexte(new JPanel());
                sonTypeSelectionne = saCarte.getsonType();
                getJMenuBar().getMenu(2).setEnabled(true);
                getJMenuBar().getMenu(1).setEnabled(true);
                getJMenuBar().updateUI();
            }
        }
        if (leChoix == ""Ouvrir"") {
            int leRetour = sonSelectionneurDeFichier.showOpenDialog(UnEditeurDonjon.this);
            if (leRetour == JFileChooser.APPROVE_OPTION) {
                File leFichier = sonSelectionneurDeFichier.getSelectedFile();
                UneCarte laCarte = new UneCarte(leFichier, this);
                if (!laCarte.getsonNom().equals("""")) {
                    saCarte = laCarte;
                    afficheLaCarte();
                    afficheEnContexte(new JPanel());
                    sonTypeSelectionne = saCarte.getsonType();
                    getJMenuBar().getMenu(2).setEnabled(true);
                    getJMenuBar().getMenu(1).setEnabled(true);
                    getJMenuBar().updateUI();
                }
            }
        }
        if (leChoix == ""Enregistrer"") {
            int leRetour = sonSelectionneurDeFichier.showSaveDialog(UnEditeurDonjon.this);
            if (leRetour == JFileChooser.APPROVE_OPTION) {
                File leFichier = sonSelectionneurDeFichier.getSelectedFile();
                saCarte.enregistreToi(leFichier);
            }
        }
        if (leChoix == ""Quitter"") {
            int laDecision = JOptionPane.showConfirmDialog(this, ""D�sirez-vous sauvegarder avant de quitter?\n"", ""Quitter"", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (laDecision == JOptionPane.YES_OPTION) {
                int leRetour = sonSelectionneurDeFichier.showSaveDialog(UnEditeurDonjon.this);
                if (leRetour == JFileChooser.APPROVE_OPTION) {
                    File leFichier = sonSelectionneurDeFichier.getSelectedFile();
                    saCarte.enregistreToi(leFichier);
                }
                System.exit(0);
            }
            if (laDecision == JOptionPane.NO_OPTION) {
                System.exit(0);
            }
        }
        if (leChoix == ""Cr�er un personnage joueur"") {
            afficheEnContexte(new UnJoueur(this).afficheToi());
        }
        if (leChoix == ""Cr�er un personnage non-joueur"") {
            afficheEnContexte(new UnNonJoueur(this).afficheToi());
        }
        if (leChoix == ""Cr�er un objet simple"") {
            afficheEnContexte(new UnObjet().afficheToi());
        }
        if (leChoix == ""Cr�er une armure"") {
            afficheEnContexte(new UneArmure().afficheToi());
        }
        if (leChoix == ""Cr�er une arme"") {
            afficheEnContexte(new UneArme().afficheToi());
        }
        if (leChoix == ""Cr�er un consommable"") {
            afficheEnContexte(new UnConsommable().afficheToi());
        }
        if (leChoix == ""Cr�er un type de case"") {
            afficheEnContexte(new UnType());
        }
        if (leChoix == ""Cr�er une classe"") {
            afficheEnContexte(new UneClasse().afficheToi());
        }
        if (leChoix == ""Cr�er un sort"") {
            afficheEnContexte(new UnSort().afficheToi());
        }
        if (leChoix == ""Cr�er une race"") {
            afficheEnContexte(new UneRace().creeToi());
        }
        if (leChoix == ""Cr�er une capacit�"") {
            afficheEnContexte(new UneCapacite().afficheToi());
        }
        if ((leChoix == ""Editer un personnage"") || (leChoix == ""Editer des stats"")) {
            Vector<UneCreature> lesCreatures = saCarte.getsesCreatures();
            String[] lesChoixPossibles = new String[lesCreatures.size()];
            for (int i = 0; i < lesCreatures.size(); i++) {
                lesChoixPossibles[i] = lesCreatures.get(i).getsonNom();
            }
            try {
                String leChoixCrea = (String) JOptionPane.showInputDialog(null, ""Quel personnage modifie-t-on?"", ""Edition Personnage"", JOptionPane.QUESTION_MESSAGE, null, lesChoixPossibles, lesChoixPossibles[0]);
                if (leChoixCrea != null) {
                    int i = 0;
                    while (!leChoixCrea.equals(lesChoixPossibles[i])) i++;
                    if (leChoix == ""Editer un personnage"") afficheEnContexte(lesCreatures.get(i).afficheToi()); else afficheEnContexte(lesCreatures.get(i).editeTesStats());
                }
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(null, ""Il n'y a aucun personnage sur la carte."", ""Edition Personnage"", JOptionPane.WARNING_MESSAGE);
            }
        }
        if (leChoix == ""Editer un objet simple"") {
            String choix = JOptionPane.showInputDialog(null, ""Un objet nomm�?"", ""Editer objet"", JOptionPane.QUESTION_MESSAGE);
            if (choix != null) afficheEnContexte(new UnObjet(choix).afficheToi());
        }
        if (leChoix == ""Editer une armure"") {
            String choix = JOptionPane.showInputDialog(null, ""Un armure nomm�?"", ""Editer objet"", JOptionPane.QUESTION_MESSAGE);
            if (choix != null) try {
                afficheEnContexte(new UneArmure(choix).afficheToi());
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(null, ""Ceci n'est pas une armure."", ""Erreur"", JOptionPane.WARNING_MESSAGE);
            }
        }
        if (leChoix == ""Editer une arme"") {
            String choix = JOptionPane.showInputDialog(null, ""Un arme nomm�?"", ""Editer objet"", JOptionPane.QUESTION_MESSAGE);
            if (choix != null) try {
                afficheEnContexte(new UneArme(choix).afficheToi());
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(null, ""Ceci n'est pas une arme"", ""Erreur"", JOptionPane.WARNING_MESSAGE);
            }
        }
        if (leChoix == ""Editer un consommable"") {
            String choix = JOptionPane.showInputDialog(null, ""Un consommable nomm�?"", ""Editer objet"", JOptionPane.QUESTION_MESSAGE);
            if (choix != null) try {
                afficheEnContexte(new UnConsommable(choix).afficheToi());
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(null, ""Ceci n'est pas un consommable"", ""Erreur"", JOptionPane.WARNING_MESSAGE);
            }
        }
        if (leChoix == ""Poser un objet simple"") {
            String laChaine = JOptionPane.showInputDialog(null, ""Quel objet pose-t-on et o�?\nDonnez les informations au format suivant : nom,X,Y"", ""Poser un objet"", JOptionPane.QUESTION_MESSAGE);
            if (laChaine != null) try {
                int X = Integer.parseInt(laChaine.split("","")[1]);
                int Y = Integer.parseInt(laChaine.split("","")[2]);
                saCarte.getsesCases()[Y][X].addUnObjet(new UnObjet(laChaine.split("","")[0]));
                afficheLaCarte();
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(null, ""Format de donn�e non reconnu ou case inexistante"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (leChoix == ""Poser une armure"") {
            String laChaine = JOptionPane.showInputDialog(null, ""Quelle armure pose-t-on et o�?\nDonnez les informations au format suivant : nom,X,Y"", ""Poser un objet"", JOptionPane.QUESTION_MESSAGE);
            if (laChaine != null) try {
                int X = Integer.parseInt(laChaine.split("","")[1]);
                int Y = Integer.parseInt(laChaine.split("","")[2]);
                saCarte.getsesCases()[Y][X].addUnObjet(new UneArmure(laChaine.split("","")[0]));
                afficheLaCarte();
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(null, ""Format de donn�e non reconnu ou case inexistante"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (leChoix == ""Poser une arme"") {
            String laChaine = JOptionPane.showInputDialog(null, ""Quelle arme pose-t-on et o�?\nDonnez les informations au format suivant : nom,X,Y"", ""Poser un objet"", JOptionPane.QUESTION_MESSAGE);
            if (laChaine != null) try {
                int X = Integer.parseInt(laChaine.split("","")[1]);
                int Y = Integer.parseInt(laChaine.split("","")[2]);
                saCarte.getsesCases()[Y][X].addUnObjet(new UneArme(laChaine.split("","")[0]));
                afficheLaCarte();
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(null, ""Format de donn�e non reconnu ou case inexistante"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (leChoix == ""Poser un consommable"") {
            String laChaine = JOptionPane.showInputDialog(null, ""Quel consommable pose-t-on et o�?\nDonnez les informations au format suivant : nom,X,Y"", ""Poser un objet"", JOptionPane.QUESTION_MESSAGE);
            if (laChaine != null) try {
                int X = Integer.parseInt(laChaine.split("","")[1]);
                int Y = Integer.parseInt(laChaine.split("","")[2]);
                saCarte.getsesCases()[Y][X].addUnObjet(new UnConsommable(laChaine.split("","")[0]));
                afficheLaCarte();
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(null, ""Format de donn�e non reconnu ou case inexistante"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (leChoix == ""D�placer un personnage"") {
            Vector<UnJoueur> lesJoueurs = saCarte.getsesJoueurs();
            String[] lesChoixPossibles = new String[lesJoueurs.size() + 1];
            lesChoixPossibles[0] = ""Tous les joueurs"";
            for (int i = 1; i <= lesJoueurs.size(); i++) {
                lesChoixPossibles[i] = lesJoueurs.get(i - 1).getsonNom();
            }
            try {
                String leChoixCrea = (String) JOptionPane.showInputDialog(this, ""Qui d�place-t-on?"", ""Deplacement Personnage"", JOptionPane.QUESTION_MESSAGE, null, lesChoixPossibles, lesChoixPossibles[0]);
                if (leChoixCrea != null) {
                    String laDest = JOptionPane.showInputDialog(this, ""Veuillez indiquer la destination de "" + leChoixCrea + "".\nUtilisez le format suivant : direction,distance.\nDirections possibles : N,S,E,O,NE,NO,SE,SO.\nLa distance est en case (rappel : 1 case = 1,5m)"", ""Deplacement"", JOptionPane.QUESTION_MESSAGE);
                    if (leChoixCrea.equals(lesChoixPossibles[0])) {
                        sonMode = ETAT_INTER;
                        for (int i = 0; i < lesJoueurs.size(); i++) {
                            deplaceLePerso(lesJoueurs.get(i), laDest);
                        }
                        sonMode = JOUER;
                        afficheLaCarte();
                    } else {
                        int i = 1;
                        while (!leChoixCrea.equals(lesChoixPossibles[i])) i++;
                        deplaceLePerso(lesJoueurs.get(i - 1), laDest);
                    }
                }
            } catch (Exception lException) {
                JOptionPane.showMessageDialog(this, ""Il n'y a aucun joueur sur la carte."", ""Edition Personnage"", JOptionPane.WARNING_MESSAGE);
            }
        }
        if (leChoix == ""Lancer des d�s"") {
            String lesDes = JOptionPane.showInputDialog(this, ""Vous �tes sur le point de lancer des d�s.\nUtilisez la syntaxe suivante : xdy, o� x est le nombre de d�s, et y leur valeur."", ""Lancer de d�s"", JOptionPane.QUESTION_MESSAGE);
            if (lesDes != null) {
                if (lesDes.split(""[dD]"").length != 2) JOptionPane.showMessageDialog(null, ""Erreur : vous n'avez pas respect� le format."", ""Erreur : mauvaise saisie!"", JOptionPane.ERROR_MESSAGE); else {
                    try {
                        int[] leResultat = lanceLesDes(lesDes);
                        int total = 0;
                        String laChaine = ""R�sultat : \n"";
                        for (int i = 0; i < leResultat.length; i++) {
                            laChaine += ""D� "" + (i + 1) + "" : "" + leResultat[i] + ""\n"";
                            total += leResultat[i];
                        }
                        laChaine += ""total : "" + total;
                        JOptionPane.showMessageDialog(null, laChaine);
                    } catch (Exception lException) {
                        JOptionPane.showMessageDialog(null, ""Erreur : vous n'avez pas respect� le format."", ""Erreur : mauvaise saisie!"", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
        if (leChoix == ""des �v�nements"") {
            Vector<UnEvenement> lesEvenements = saCarte.getsesEvenements();
            String laChaine = ""<HTML>Liste des �v�nements : <br>"";
            if (lesEvenements.size() == 0) laChaine += ""Il n'y a pas d'�v�nements sur la carte""; else for (int i = 0; i < lesEvenements.size(); i++) {
                laChaine += lesEvenements.get(i).sonNom + "" ("" + lesEvenements.get(i).saCase.getsonX() + "","" + lesEvenements.get(i).saCase.getsonY() + "")<br>"";
            }
            laChaine += ""</HTML>"";
            JPanel lePanneau = new JPanel();
            lePanneau.add(new JLabel(laChaine));
            afficheEnContexte(lePanneau);
        }
        if (leChoix == ""des personnages"") {
            Vector<UneCreature> lesCreatures = saCarte.getsesCreatures();
            String laChaine = ""<HTML>Liste des personnages : <br>"";
            if (lesCreatures.size() == 0) laChaine += ""Il n'y a pas de personnages sur la carte""; else for (int i = 0; i < lesCreatures.size(); i++) {
                laChaine += lesCreatures.get(i).getsonNom() + "" ("" + lesCreatures.get(i).getsaPosX() + "","" + lesCreatures.get(i).getsaPosY() + "")<br>"";
            }
            laChaine += ""</HTML>"";
            JPanel lePanneau = new JPanel();
            lePanneau.add(new JLabel(laChaine));
            afficheEnContexte(lePanneau);
        }
        if (leChoix == ""A propos..."") JOptionPane.showMessageDialog(this, ""<html><table border='0'><tr><td><img src='http://wankin.net/perso_coffre_evt_exemple.jpg' width='60' height='60'></td><th><div align='left'><p>L'&eacute;diteur Donjons et Dragons - version beta 0.7<br>Copyright &copy; 2007, Aur&eacute;lien P&ecirc;cheur, Jonathan Mondon, Yannick Balla<br>L'&eacute;diteur Donjons et Dragons est un logiciel d'aide &agrave; la gestion de campagne pour le jeu &quot;Donjons et Dragons&quot;.<br>Merci &agrave; Jean-Philippe Farrugia l'ensemble du corps enseignant de l'IUT A - Lyon 1 pour leur aide et formation.</p></div></th></tr></table><p><br>This program is free software: you can redistribute it and/or modify it under the terms of the GNU General<br>Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option)<br>any later version.</p><p><br>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without <br>even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br>GNU General Public License for more details.</p><p><br>You should have received a copy of the GNU General Public License along with this program. <br></p><p>If not, see <a href='http://www.gnu.org/licenses/'>http://www.gnu.org/licenses/</a>.</p></html>"", ""A propos..."", JOptionPane.PLAIN_MESSAGE);
        if (leChoix == ""Aide"") JOptionPane.showMessageDialog(this, ""Vous trouverez les fichiers d'aide et tutoriaux dans le r�pertoire \""Aide\"" l� o� vous avez install� l'Editeur Donjon et Dragon."", ""A propos..."", JOptionPane.INFORMATION_MESSAGE);
        if (leChoix == ""Modifier la description"") saCarte.changeSaDescription();
    }","    public static Object[] arrayInsert(Object[] source, int start, int count, Object value) {
        Object[] result = source;
        if (count > 0) {
            result = (Object[]) Array.newInstance(source.getClass().getComponentType(), source.length + count);
            if (start > 0) System.arraycopy(source, 0, result, 0, start);
            int rem = source.length - start;
            if (rem > 0) System.arraycopy(source, start, result, start + count, rem);
            for (int i = start; i < start + count; i++) result[i] = value;
        }
        return result;
    }",0,0
"    public static SRPGAnimation makeObject(String fileName, int tileWidth, int tileHeight, LColor col) {
        String key = fileName.trim().toLowerCase();
        SRPGAnimation animation = (SRPGAnimation) animations.get(key);
        if (animation == null) {
            LImage image = GraphicsUtils.loadNotCacheImage(fileName);
            int c = col.getRGB();
            int wlength = image.getWidth() / tileWidth;
            int hlength = image.getHeight() / tileHeight;
            LImage[][] images = new LImage[wlength][hlength];
            Rect srcR = new Rect();
            Rect dstR = new Rect();
            Canvas canvas = GraphicsUtils.canvas;
            for (int y = 0; y < hlength; y++) {
                for (int x = 0; x < wlength; x++) {
                    Bitmap bitmap = Bitmap.createBitmap(tileWidth, tileHeight, Config.ARGB_4444);
                    srcR.set((x * tileWidth), (y * tileHeight), tileWidth + (x * tileWidth), tileHeight + (y * tileHeight));
                    dstR.set(0, 0, tileWidth, tileHeight);
                    canvas.setBitmap(bitmap);
                    canvas.drawBitmap(image.getBitmap(), srcR, dstR, null);
                    images[x][y] = new LImage(bitmap);
                    LImage tmp = images[x][y];
                    int[] pixels = tmp.getPixels();
                    int size = pixels.length;
                    for (int i = 0; i < size; i++) {
                        if (pixels[i] == c) {
                            pixels[i] = 0xffffff;
                        }
                    }
                    tmp.setPixels(pixels, tmp.getWidth(), tmp.getHeight());
                }
            }
            LImage[][] result = new LImage[hlength][wlength];
            for (int y = 0; y < wlength; y++) {
                for (int x = 0; x < hlength; x++) {
                    result[x][y] = images[y][x];
                }
            }
            images = null;
            animations.put(key, animation = makeObject(result[0], result[1], result[3], result[2]));
        }
        return animation;
    }","    public static void main(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""msgsend"";
        String file = null;
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-a"")) {
                file = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: msgsend [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-a attach-file] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            String text = collect(in);
            if (file != null) {
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setText(text);
                MimeBodyPart mbp2 = new MimeBodyPart();
                mbp2.attachFile(file);
                MimeMultipart mp = new MimeMultipart();
                mp.addBodyPart(mbp1);
                mp.addBodyPart(mbp2);
                msg.setContent(mp);
            } else {
                msg.setText(text);
            }
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0,0
"            @Override
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    if (Desktop.isDesktopSupported()) {
                        Desktop desktop = Desktop.getDesktop();
                        if (desktop.isSupported(Desktop.Action.BROWSE)) {
                            try {
                                URI uri = e.getURL().toURI();
                                desktop.browse(uri);
                            } catch (URISyntaxException ex) {
                                System.err.println(MessageFormat.format(Messages.getString(""dialog.about.uri.error""), e.getURL()));
                            } catch (IOException ex) {
                                System.err.println(Messages.getString(""dialog.about.navigate.error""));
                            }
                        }
                    }
                }
            }","    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }",0,0
"    public static AnimationHelper makeObject(String fileName, int row, int col, int tileWidth, int tileHeight) {
        String key = fileName.trim().toLowerCase();
        AnimationHelper animation = (AnimationHelper) animations.get(key);
        if (animation == null) {
            LImage[][] images = GraphicsUtils.getSplit2Images(fileName, tileWidth, tileHeight, true);
            LImage[][] result = new LImage[row][col];
            for (int y = 0; y < col; y++) {
                for (int x = 0; x < row; x++) {
                    result[x][y] = images[y][x];
                }
            }
            images = null;
            animations.put(key, animation = makeObject(result[0], result[1], result[2], result[3]));
        }
        return animation;
    }","        private Object[] toArray(Object[] dest, boolean copied) {
            int destIndex = 0;
            for (final Segment<K, V> segment : ConcurrentWeakKeyHashMap.this.segments) {
                for (HashEntry<K, V> e : segment.table) {
                    while (e != null) {
                        final V value = e.value;
                        if (value != null) {
                            if (destIndex == dest.length) {
                                final Object[] newDest = (Object[]) Array.newInstance(dest.getClass().getComponentType(), (destIndex == 0) ? 16 : (destIndex << 1));
                                System.arraycopy(dest, 0, newDest, 0, destIndex);
                                dest = newDest;
                                copied = true;
                            }
                            dest[destIndex++] = value;
                        }
                        e = e.next;
                    }
                }
            }
            if (destIndex < dest.length) {
                if (copied) {
                    final Object[] newDest = new Object[destIndex];
                    System.arraycopy(dest, 0, newDest, 0, destIndex);
                    dest = newDest;
                } else {
                    dest[destIndex] = null;
                }
            }
            return dest;
        }",0,0
"    @Override
    public void hyperlinkUpdate(HyperlinkEvent event) {
        if (event.getEventType() == HyperlinkEvent.EventType.ENTERED) {
        } else if (event.getEventType() == HyperlinkEvent.EventType.EXITED) {
        } else if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            try {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    desktop.browse(event.getURL().toURI());
                }
            } catch (URISyntaxException ex) {
                Exceptions.printStackTrace(ex);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }","    public DeskTopFrame() {
        setTitle(""DeskTop XML/ZIP Renderer"");
        setSize(DEFAULT_WIDTH, DEFAULT_HEIGHT);
        setLayout(new BorderLayout());
        setResizable(false);
        ActionListener validationListener = new ActionListener() {

            public void actionPerformed(ActionEvent event) {
                if (validation.isSelected()) validationMethod = ""ON""; else validationMethod = ""OFF"";
                if (strict.isSelected()) strictType = ""ON""; else strictType = ""OFF"";
            }
        };
        headerString = ""<html><center><h4>JAssess: A Java Implementation of IMS QTI Version 2</h4>"" + ""<h5>Developed by Graham Smith with support from UCLES and CARET </h5>"" + ""<h2>Desktop XML Test (MathAssess Version)</h2><h5>Developed by Graham Smith with support from JISC </h5></center></html>"";
        headerPanel = new JPanel();
        header = new JLabel(headerString);
        headerPanel.add(header);
        add(headerPanel, BorderLayout.NORTH);
        selectionPanel = new JPanel();
        selectionPanel.setLayout(new BorderLayout());
        selectionPanel.setSize(680, 20);
        border = BorderFactory.createLoweredBevelBorder();
        border2 = BorderFactory.createLineBorder(Color.BLACK, 2);
        selectionPanel.setBorder(border);
        Action = new JPanel();
        actionButton = new JButton(""Render XML File"");
        actionButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent event) {
                String InputFilename = fileNameField.getText();
                extension = getFileExtension(InputFilename).toUpperCase();
                inFile = new File(InputFilename);
                String testData = """";
                String testFileRoot = """";
                String testItemIdentifier = """";
                String homeDirectory = """";
                if (extension.equals(""XML"")) {
                    try {
                        XMLCaller = new XMLHandlercallerDT2();
                        output = XMLCaller.run(InputFilename, testItemIdentifier, IncludeInFilenamelist, validationMethod, strictType, testData, testFileRoot, homeDirectory);
                    } catch (gqtiexcept.VersionException e) {
                    }
                } else if (extension.equals(""ZIP"")) {
                    pkgeHandler = new PkgeHandlerDT();
                    PackageData packagedata = pkgeHandler.run(InputFilename, validationMethod, strictType, true);
                    String[] HTMFilePaths = packagedata.getFilePaths();
                    String[] HTMFileHrefs = packagedata.getFileHrefs();
                    for (int i2 = 0; i2 < HTMFilePaths.length; i2++) {
                        output = output + HTMFilePaths[i2] + ""\n"";
                        output = output + HTMFileHrefs[i2] + ""\n"";
                        output = output + ""\n\n"";
                    }
                } else if (inFile.isDirectory()) {
                    multipleHandler = new MultipleZipHandlerDT();
                    output = multipleHandler.run(InputFilename, validationMethod, strictType);
                } else {
                    JOptionPane.showMessageDialog(null, ""INVALID FILENAME: "" + fileNameField.getText(), ""Desktop XML Test"", JOptionPane.ERROR_MESSAGE);
                    output = ""INVALID FILENAME"" + InputFilename + "" "" + extension;
                }
                outputText.setText(output);
            }
        });
        Action.add(actionButton);
        XMLFilePanel = new JPanel();
        XMLFilePanel.setLayout(new BorderLayout());
        FileTypeSelectionPanel = new JPanel();
        typeGroup = new ButtonGroup();
        FileTypeSelectionPanel.add(new JLabel(""Type of File to be Rendered:""));
        addRadioButton(""XML"", true);
        addRadioButton(""ZIP (Content Packages and Packaged Tests)"", false);
        addRadioButton(""Directory"", false);
        MainXMLFilePanel = new JPanel();
        fileNameField = new JTextField(40);
        MainXMLFilePanel.add(new JLabel(""XML/ZIP File or Directory name:""));
        MainXMLFilePanel.add(fileNameField);
        fileOpenButton = new JButton(""Browse"");
        XMLFilechooser = new JFileChooser();
        XMLFilechooser.setCurrentDirectory(new File("".""));
        XMLFilechooser.addChoosableFileFilter(new XMLFilter());
        XMLFilechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        ZIPFilechooser = new JFileChooser();
        ZIPFilechooser.setCurrentDirectory(new File("".""));
        ZIPFilechooser.addChoosableFileFilter(new ZIPFilter());
        ZIPFilechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        Directorychooser = new JFileChooser();
        Directorychooser.setCurrentDirectory(new File("".""));
        Directorychooser.addChoosableFileFilter(new XMLFilter());
        Directorychooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileOpenButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent event) {
                if (fileType.equals(""XML"")) {
                    int result = XMLFilechooser.showOpenDialog(null);
                    if (result == JFileChooser.APPROVE_OPTION) {
                        InFilename = XMLFilechooser.getSelectedFile().getPath();
                        fileNameField.setText(InFilename);
                        actionButton.setEnabled(true);
                    }
                } else if (fileType.equals(""ZIP (Content Packages and Packaged Tests)"")) {
                    int result = ZIPFilechooser.showOpenDialog(null);
                    if (result == JFileChooser.APPROVE_OPTION) {
                        InFilename = ZIPFilechooser.getSelectedFile().getPath();
                        fileNameField.setText(InFilename);
                        actionButton.setEnabled(true);
                    }
                } else if (fileType.equals(""Directory"")) {
                    int result = Directorychooser.showOpenDialog(null);
                    if (result == JFileChooser.APPROVE_OPTION) {
                        InFilename = Directorychooser.getSelectedFile().getPath();
                        fileNameField.setText(InFilename);
                        actionButton.setEnabled(true);
                    }
                }
            }
        });
        MainXMLFilePanel.add(fileOpenButton);
        IncludeXMLFilePanel = new JPanel();
        IncludeFileNameField = new JTextField(40);
        IncludeXMLFilePanel.add(new JLabel(""IncludeXML File name(s) (if any):""));
        IncludeXMLFilePanel.add(IncludeFileNameField);
        IncludeFileOpenButton = new JButton(""Browse"");
        IncludeInFilename = """";
        IncludeInFilenamelist = """";
        IncludeFileOpenButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent event) {
                int result = XMLFilechooser.showOpenDialog(null);
                if (result == JFileChooser.APPROVE_OPTION) {
                    IncludeInFilename = XMLFilechooser.getSelectedFile().getPath();
                    IncludeInFilenamelist = IncludeInFilenamelist + IncludeInFilename + "";"";
                    IncludeFileNameField.setText(IncludeInFilenamelist);
                }
            }
        });
        IncludeXMLFilePanel.add(IncludeFileOpenButton);
        XMLFilePanel.add(FileTypeSelectionPanel, BorderLayout.NORTH);
        XMLFilePanel.add(MainXMLFilePanel, BorderLayout.CENTER);
        XMLFilePanel.add(IncludeXMLFilePanel, BorderLayout.SOUTH);
        selectionPanel.add(XMLFilePanel, BorderLayout.NORTH);
        validationPanel = new JPanel();
        validation = new JCheckBox(""Validation"");
        validation.addActionListener(validationListener);
        validationPanel.add(validation);
        strict = new JCheckBox(""Strict Type"");
        strict.addActionListener(validationListener);
        validationPanel.add(strict);
        selectionPanel.add(validationPanel, BorderLayout.CENTER);
        String notesString = ""<html><body><center><h4>Notes on Usage</h4></center>"" + ""1. The XML\\ZIP filename.<br>"" + ""<p>"" + ""The renderer will accept either a single XML file, a zip file with an IMS Content Package, or a directory containg ZIP files with ContentPackages. The operation of the renderer depends upon whether a file or directory is presented, and in the case of a file, the file extension '*.ZIP' or '*.XML'."" + ""<p><p>"" + ""2. The Include filename.<br>"" + ""Enter the name of the XML file(s) for any XInclude elements needed. More files can be added by using the 'Browse' button repeatedly. If adding files to the text box by hand, space the filenames with a semicolon';'."" + ""<p><p>"" + ""3. Validation.<br>"" + ""If this box is checked, the XML is validated against the Schema or DTD specified in the file. The Schema and DTD files are held locally to avoid the necessity of an internet connection. "" + ""Owing to the necessity to copy these large files, validation may take several seconds.<br>"" + ""In the case of package submission, note that it is only the XML of the submitted assessment items which is validated: the imsmanifest.xml is not. However malformed imsmanifest.xml will cause an error.<br>"" + ""<p><p>"" + ""5. StrictType Checking.<br>"" + ""The QTI specifications dictate stringent requirements for variable typing, particularly where expressions and operators are used."" + ""The rendering and responding engines in this version are very tolerant of type errors, but others are not. Checking this box submits the xml to type checking which other engines might demand. Type errors are notified by appending a 'WARNING' message to the returned HTML, either at the rendering or at the responding stage, depending upon where the error becomes significant."" + ""<p><p>"" + ""6. The Style and Appearance of the Rendered XML.<br>"" + ""The QTI version 2 specification provides means whereby authors can control the appearance of the rendered XML, through the inclusion of stylesheet references and certain XHTML tags. However, many XML examples, including those in the QTI documentation, contain very little, if any, style information."" + ""The HTML produced by the JAssess rendering engine used in this system contains no style information as such, other than that specified in the XML by these HTML tags. However, a number of the sections of the HTML are provided with '&lt;div&gt;' tags with 'class' attributes to provide means by which styles specified in a stylesheet may be added. 'View Source' of an example of the rendered HTML to examine these.<br />"" + ""The rendering engine of  has a number of built-in stylesheets available to it. By default, a stylesheet 'JAssessL.css' is used. However ,by using the Browser's View->Page Style menu item one of the other available stylesheets, or no stylesheet, may be selected. Using this requires that the stylesheet be re-selected for the reply after submitting the user's response."" + ""</p>"" + ""</body></html>"";
        final JDialog notesDialog = new JDialog(this, ""Notes on Usage"");
        JLabel notesPane = new JLabel(notesString);
        notesPane.setSize(595, 495);
        notesPane.setBorder(border);
        JButton closeButton = new JButton(""Close"");
        closeButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent event) {
                notesDialog.setVisible(false);
                notesDialog.dispose();
            }
        });
        JPanel notesContentPane = new JPanel();
        notesContentPane.setLayout(new BorderLayout(50, 50));
        notesContentPane.add(notesPane, BorderLayout.NORTH);
        notesContentPane.add(closeButton, BorderLayout.SOUTH);
        notesDialog.setContentPane(notesContentPane);
        notesDialog.setSize(650, 700);
        notesDialog.setVisible(false);
        notesButton = new JButton(""Notes on Usage"");
        notesButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent event) {
                notesDialog.setVisible(true);
            }
        });
        Action.add(notesButton);
        selectionPanel.add(Action, BorderLayout.SOUTH);
        add(selectionPanel, BorderLayout.CENTER);
        outputPanel = new JPanel();
        outputPanel.setLayout(new BorderLayout());
        outputPanel.add(new JLabel(""This text area contains diagnostic messages only.\n It will be removed in later versions""), BorderLayout.NORTH);
        Border titled = BorderFactory.createTitledBorder(border2, ""Output"");
        outputPanel.setBorder(titled);
        outputText = new JTextArea(15, 60);
        outputPane = new JScrollPane(outputText);
        outputPanel.add(outputPane, BorderLayout.SOUTH);
        add(outputPanel, BorderLayout.SOUTH);
    }",0,0
"    public boolean login() {
        if (super.isAuthenticated()) return true;
        try {
            if (client == null) {
                client = new FTPClient();
                FTPClientConfig config = new FTPClientConfig();
                client.configure(config);
            }
            if (!client.isConnected()) {
                client.connect(super.getStoreConfig().getServerName(), new Integer(super.getStoreConfig().getServerPort()).intValue());
            }
            if (client.login(super.getStoreConfig().getUserName(), super.getStoreConfig().getPassword(), super.getStoreConfig().getServerName())) {
                super.setAuthenticated(true);
                return true;
            }
            log.error(""Login ftp server error"");
        } catch (Exception e) {
            log.info(""FTPStore.login"", e);
        }
        return false;
    }","    public void open() {
        if (!java.awt.Desktop.isDesktopSupported()) {
            System.err.println(""Desktop is not supported (fatal)"");
            return;
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            System.err.println(""Desktop doesn't support the browse action (fatal)"");
            return;
        }
        try {
            java.net.URI uri = new java.net.URI(this.url);
            desktop.browse(uri);
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }",0,0
"    public void hyperlinkUpdate(HyperlinkEvent event) {
        URL url = event.getURL();
        if (event.getEventType() == HyperlinkEvent.EventType.ENTERED && !event.getDescription().equals(""login"") && !event.getDescription().startsWith(""copyUrl:"")) {
            urlsEditorPane.setToolTipText(url.toString());
        } else if (event.getEventType() == HyperlinkEvent.EventType.EXITED) {
            urlsEditorPane.setToolTipText(null);
        } else if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            if (event.getDescription().equals(""login"")) {
                if (loginWindow == null) {
                    loginWindow = new LoginWindow(this, keys, configManager, pdfDocument);
                } else {
                    loginWindow.setVisible(true);
                }
            } else if (event.getDescription().startsWith(""copyUrl:"")) {
                String toCopy = event.getDescription().replaceFirst(""copyUrl:"", """");
                StringSelection data = new StringSelection(toCopy);
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(data, data);
            } else {
                String browser = configManager.getBrowser();
                if (!Desktop.isDesktopSupported()) {
                    try {
                        if (!browser.equals("""")) {
                            Runtime.getRuntime().exec(browser + "" "" + url.toString());
                        } else {
                            Runtime.getRuntime().exec(""firefox "" + url.toString());
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ""Unable to find a web browser, "" + ""please set up one on settings window"", ""Web browser error"", JOptionPane.WARNING_MESSAGE);
                    }
                }
                try {
                    Desktop desktop = Desktop.getDesktop();
                    URI uri = new URI(url.toString());
                    desktop.browse(uri);
                } catch (Exception e) {
                    return;
                }
            }
        }
    }","    private String wikify(String content, RenderEngine renderEngine, InitialRenderContext renderContext) {
        if (content == null || content.length() == 0) {
            return """";
        }
        Pattern p = Pattern.compile(WIKI_START_TAG + "".+?"" + WIKI_END_TAG, Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
        Matcher m = p.matcher(content);
        while (m.find()) {
            int start = m.start();
            int end = m.end();
            String textToWikify = content.substring(start, end);
            textToWikify = textToWikify.substring(WIKI_START_TAG.length(), textToWikify.length() - WIKI_END_TAG.length());
            textToWikify = renderEngine.render(textToWikify, renderContext);
            content = content.substring(0, start) + textToWikify + content.substring(end, content.length());
            m = p.matcher(content);
        }
        return content;
    }",0,0
"    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == this.close) this.dispose(); else if (e.getSource() == this.openFile) {
            JFileChooser open = new JFileChooser();
            int option = open.showOpenDialog(this);
            if (option == JFileChooser.APPROVE_OPTION) {
                this.textArea.setText("""");
                try {
                    Scanner scan = new Scanner(new FileReader(open.getSelectedFile().getPath()));
                    while (scan.hasNext()) this.textArea.append(scan.nextLine() + ""\n"");
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                }
            }
        } else if (e.getSource() == this.saveFile) {
            JFileChooser save = new JFileChooser();
            int option = save.showSaveDialog(this);
            if (option == JFileChooser.APPROVE_OPTION) {
                try {
                    BufferedWriter out = new BufferedWriter(new FileWriter(save.getSelectedFile().getPath()));
                    out.write(this.textArea.getText());
                    out.close();
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                }
            }
        }
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] trim(T[] array, int newSize) {
        Assert.notNull(array);
        Assert.inRange(newSize, 0, Integer.MAX_VALUE, ""newSize may not be smaller than zero"");
        if (array.length > newSize) {
            Class<?> type = array.getClass().getComponentType();
            T[] newArray = (T[]) Array.newInstance(type, newSize);
            System.arraycopy(array, 0, newArray, 0, newSize);
            return newArray;
        } else return array;
    }",0,0
"    public static void replacePattern(SpannableStringBuilder ssb, String source, String pattern, PatternListener lsr) {
        if (pattern == null || pattern.length() == 0 || lsr == null) return;
        Pattern p = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE);
        Matcher m = p.matcher(source);
        int s = 0;
        while (m.find()) {
            ssb.append(source.subSequence(s, m.start()));
            lsr.onPatternMatch(m.group(), ssb);
            s = m.end();
        }
        ssb.append(source.substring(s));
        lsr.onEnd(ssb);
    }","        public void viewFile(int file_nx) {
            FTPClient ftp = new FTPClient();
            boolean error = false;
            try {
                int reply;
                ftp.connect(""tgftp.nws.noaa.gov"");
                ftp.login(""anonymous"", """");
                Log.d(""WXDroid"", ""Connected to tgftp.nws.noaa.gov."");
                Log.d(""WXDroid"", ftp.getReplyString());
                reply = ftp.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftp.disconnect();
                    System.err.println(""FTP server refused connection."");
                    System.exit(1);
                }
                ftp.changeWorkingDirectory(""fax"");
                Log.d(""WXDroid"", ""working directory: "" + ftp.printWorkingDirectory());
                ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
                InputStream img_file = ftp.retrieveFileStream(""PYAA10.gif"");
                Intent intent = new Intent();
                intent.setClass(WXdroid.this, showProgressFTP.class);
                startActivity(intent);
                String storage_state = Environment.getExternalStorageState();
                if (storage_state.contains(""mounted"")) {
                    String filepath = Environment.getExternalStorageDirectory().getAbsolutePath() + ""/NOAAWX/"";
                    File imageDirectory = new File(filepath);
                    File local_file = new File(filepath + ""PYAA10.gif"");
                    OutputStream out = new FileOutputStream(local_file);
                    byte[] buffer = new byte[1024];
                    int count;
                    while ((count = img_file.read(buffer)) != -1) {
                        if (Thread.interrupted() == true) {
                            String functionName = Thread.currentThread().getStackTrace()[2].getMethodName() + ""()"";
                            throw new InterruptedException(""The function "" + functionName + "" was interrupted."");
                        }
                        out.write(buffer, 0, count);
                    }
                    showImage();
                    out.flush();
                    out.close();
                    img_file.close();
                    Log.d(""WXDroid"", ""file saved: "" + filepath + "" "" + local_file);
                } else {
                    Log.d(""WXDroid"", ""The SD card is not mounted"");
                }
                ftp.logout();
                ftp.disconnect();
            } catch (IOException e) {
                error = true;
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            } finally {
                if (ftp.isConnected()) {
                    try {
                        ftp.disconnect();
                    } catch (IOException ioe) {
                    }
                }
            }
        }",0,0
"    public boolean openWebsite(String url) {
        if (!java.awt.Desktop.isDesktopSupported()) {
            logger.info(""Opening websites is not supported"");
            return false;
        }
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            logger.info(""Opening websites is not supported"");
            return false;
        }
        try {
            java.net.URI uri = new java.net.URI(url);
            desktop.browse(uri);
        } catch (Exception e) {
            logger.error(""Unable to open website: "" + e.getMessage());
            return false;
        }
        return true;
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] insert(T list[], T obj, int index) {
        if (list != null) {
            int ndx = ((index > list.length) || (index < 0)) ? list.length : index;
            Class type = list.getClass().getComponentType();
            int size = (list.length > ndx) ? (list.length + 1) : (ndx + 1);
            T array[] = (T[]) Array.newInstance(type, size);
            if (ndx > 0) {
                int maxLen = (list.length >= ndx) ? ndx : list.length;
                System.arraycopy(list, 0, array, 0, maxLen);
            }
            array[ndx] = obj;
            if (ndx < list.length) {
                int maxLen = list.length - ndx;
                System.arraycopy(list, ndx, array, ndx + 1, maxLen);
            }
            return array;
        } else {
            return null;
        }
    }",0,0
"    public static double[][] Kendall(double[][] X) {
        double[][] output = new double[X.length][X.length];
        try {
            for (int i = 0; i < X.length; i++) {
                output[i][i] = 1.0;
                for (int j = 0; j < i; j++) {
                    output[i][j] = GeneUtils.kendalltau(X[i], X[j]);
                    output[j][i] = output[i][j];
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Statistic.class.getName()).log(Level.SEVERE, null, ex);
        }
        return output;
    }","    public void initComponents() {
        labelAuthors = new JLabel(""Copyright (c) 2010, 2011 Jérémy Chevrier"");
        labelDescription = new JLabel(""Un logiciel de suivi de cohortes"");
        labelName = new JLabel(""JCohorte  0.3.3"");
        labelImage = new JLabel();
        labelImage.setIcon(new ImageIcon(LoadingFiles.getAbout()));
        labelName.setFont(new Font(""Ubuntu"", Font.BOLD, 30));
        labelDescription.setFont(new Font(""Ubuntu"", Font.BOLD, 16));
        labelSite = new JLabel(""<html><u><font color='blue'>Site de JCohorte</font></u></html>"");
        labelSite.addMouseListener(new MouseListener() {

            @Override
            public void mouseReleased(MouseEvent arg0) {
            }

            @Override
            public void mousePressed(MouseEvent arg0) {
            }

            @Override
            public void mouseExited(MouseEvent arg0) {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }

            @Override
            public void mouseEntered(MouseEvent arg0) {
                setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                labelSite.setBackground(Color.BLUE);
            }

            @Override
            public void mouseClicked(MouseEvent arg0) {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    if (desktop.isSupported(Desktop.Action.BROWSE)) {
                        try {
                            desktop.browse(new URI(""http://sourceforge.net/projects/jcohorte/""));
                        } catch (IOException e) {
                            e.printStackTrace();
                        } catch (URISyntaxException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        });
        labelSite.setToolTipText(""http://sourceforge.net/projects/jcohorte/"");
        buttonClose = new JButton(""Fermer"");
        buttonLicence = new JButton(""Licence"");
        buttonCredits = new JButton(""Crédits"");
        buttonClose.addActionListener(this);
        buttonLicence.addActionListener(this);
        buttonCredits.addActionListener(this);
        panelText = new JPanel();
        panelImage = new JPanel();
        panelAuthors = new JPanel();
        panelDescription = new JPanel();
        panelName = new JPanel();
        panelButtons = new JPanel();
        panelClose = new JPanel();
        panelCredit = new JPanel();
        panelLicence = new JPanel();
        panelSite = new JPanel();
        panelName.add(labelName);
        panelDescription.add(labelDescription);
        panelAuthors.add(labelAuthors);
        panelSite.add(labelSite);
        panelText.setLayout(new BoxLayout(panelText, BoxLayout.PAGE_AXIS));
        panelText.add(panelName);
        panelText.add(panelDescription);
        panelText.add(panelAuthors);
        panelText.add(panelSite);
        panelClose.setLayout(new FlowLayout(FlowLayout.CENTER));
        panelClose.add(buttonClose);
        panelCredit.setLayout(new FlowLayout(FlowLayout.CENTER));
        panelCredit.add(buttonCredits);
        panelLicence.setLayout(new FlowLayout(FlowLayout.CENTER));
        panelLicence.add(buttonLicence);
        panelButtons.setLayout(new GridLayout(1, 3));
        panelButtons.add(panelCredit);
        panelButtons.add(panelLicence);
        panelButtons.add(panelClose);
        panelImage.add(labelImage);
        container.setLayout(new BorderLayout());
        container.add(panelImage, BorderLayout.NORTH);
        container.add(panelText, BorderLayout.CENTER);
        container.add(panelButtons, BorderLayout.SOUTH);
    }",0,0
"    public CSolver(int maxR, int minR, int maxS, int minS, boolean u, ClusterManager cm, SolutionFactory f) {
        this.model = new CPModel();
        this.solver = null;
        this.nFound = 0;
        this.maxRosters = maxR;
        this.minRosters = minR;
        this.maxSize = maxS;
        this.minSize = minS;
        this.useAll = u;
        this.mgr = cm;
        this.nClusters = cm.getClusterCount();
        this.capacity = cm.getCapacities();
        this.singletons = cm.getSingletons();
        this.factory = f;
        this.result = Result.UNSOLVED;
        if (useAll) {
            int all = 0;
            for (int c : capacity) {
                all += c;
            }
            int m = (int) Math.round(Math.ceil(((double) all) / maxSize));
            minRosters = Math.max(minRosters, m);
        }
        assign = new IntegerVariable[nClusters][maxRosters + 1];
        transpose = new IntegerVariable[maxRosters + 1][nClusters];
        for (int c = 0; c < nClusters; c++) {
            int x = capacity[c];
            for (int r = 1; r <= maxRosters; r++) {
                assign[c][r] = Choco.makeIntVar(""assign_"" + c + ""_"" + r, 0, x);
                model.addVariable(assign[c][r]);
                transpose[r][c] = assign[c][r];
            }
            assign[c][0] = Choco.makeIntVar(""unassigned_"" + c, 0, (useAll) ? 0 : x);
            model.addVariable(assign[c][0]);
            transpose[0][c] = assign[c][0];
        }
        size = new IntegerVariable[maxRosters + 1];
        used = new IntegerVariable[maxRosters + 1];
        int[] temp = new int[maxSize - minSize + 2];
        temp[0] = 0;
        for (int i = 0; i <= maxSize - minSize; i++) {
            temp[i + 1] = minSize + i;
        }
        for (int r = 1; r <= minRosters; r++) {
            size[r] = Choco.makeIntVar(""size_"" + r, minSize, maxSize);
            used[r] = Choco.makeIntVar(""used_"" + r, 1, 1);
        }
        for (int r = minRosters + 1; r <= maxRosters; r++) {
            size[r] = Choco.makeIntVar(""size_"" + r, temp);
            used[r] = Choco.makeIntVar(""used_"" + r, 0, 1);
        }
        int h = (useAll) ? 1 : 0;
        used[0] = Choco.makeIntVar(""used_0"", 0, 0);
        assignTo = new IntegerVariable[nClusters];
        for (int i : singletons) {
            assignTo[i] = Choco.makeIntVar(""assign_"" + i + ""_to"", h, maxRosters);
        }
        nUsed = Choco.makeIntVar(""nRosters"", minRosters, maxRosters);
        model.addVariable(nUsed);
        for (int c = 0; c < nClusters; c++) {
            model.addConstraint(Choco.eq(Choco.sum(assign[c]), capacity[c]));
        }
        for (int r = 1; r <= maxRosters; r++) {
            model.addConstraint(Choco.eq(Choco.sum(transpose[r]), size[r]));
        }
        for (int r = 1; r <= maxRosters; r++) {
            model.addConstraint(Choco.reifiedIntConstraint(used[r], Choco.gt(size[r], 0)));
        }
        model.addConstraint(Choco.eq(Choco.sum(used), nUsed));
        for (int i : singletons) {
            model.addConstraint(Choco.domainConstraint(assignTo[i], assign[i]));
        }
        Set<HashSet<Integer>> cliques = mgr.getCliques();
        for (Set<Integer> c : cliques) {
            if (c.size() < 2) {
                continue;
            }
            Integer[] clist = c.toArray(new Integer[1]);
            for (int i = 1; i < clist.length; i++) {
                model.addConstraint(Choco.eq(assignTo[clist[0]], assignTo[clist[i]]));
            }
        }
        Map<Integer, ArrayList<Integer>> incompatible = mgr.getIncompatible();
        if (incompatible != null) {
            for (int i0 : incompatible.keySet()) {
                for (int i1 : incompatible.get(i0)) {
                    if (i0 < i1) {
                        model.addConstraint(Choco.or(Choco.eq(assignTo[i0], 0), Choco.neq(assignTo[i0], assignTo[i1])));
                    }
                }
            }
        }
        for (int r = 1; r < maxRosters; r++) {
            model.addConstraint(Choco.lexeq(transpose[r + 1], transpose[r]));
        }
        for (int r = minRosters; r < maxRosters; r++) {
            model.addConstraint(Choco.leq(used[r + 1], used[r]));
        }
    }","    private static String sort(final String item) {
        final char[] chars = item.toCharArray();
        for (int i = 1; i < chars.length; i++) {
            for (int j = 0; j < chars.length - 1; j++) {
                if (chars[j] > chars[j + 1]) {
                    final char temp = chars[j];
                    chars[j] = chars[j + 1];
                    chars[j + 1] = temp;
                }
            }
        }
        return String.valueOf(chars);
    }",0,0
"    public RobotList<Location> sort_incr_Location(RobotList<Location> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        Location cur_loc = this.getLocation();
        for (int i = 0; i < length; i++) {
            enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i)));
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value > enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Location> new_location_list = new RobotList<Location>(Location.class);
        for (int i = 0; i < length; i++) {
            new_location_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_location_list;
    }","    private String[] execSingleLineOutputCmd(String cmdWithParams) {
        String result = """";
        try {
            Process p = Runtime.getRuntime().exec(cmdWithParams.split("" ""));
            BufferedReader sin = new BufferedReader(new InputStreamReader(p.getInputStream()));
            result = sin.readLine();
            sin.close();
            return result.split("" "");
        } catch (Exception ex) {
            System.out.println(""ERROR: "" + ex.getMessage());
            return null;
        }
    }",0,0
"    public static <A> A[] composeArray(A[] base, A postfix) {
        @SuppressWarnings(""unchecked"") final A[] result = (A[]) Array.newInstance(base.getClass().getComponentType(), base.length + 1);
        System.arraycopy(base, 0, result, 0, base.length);
        result[base.length] = postfix;
        return result;
    }","    public osid.shared.Id ingest(String fileName, String templateFileName, String fileType, File file, Properties properties) throws osid.repository.RepositoryException, java.net.SocketException, java.io.IOException, osid.shared.SharedException, javax.xml.rpc.ServiceException {
        long sTime = System.currentTimeMillis();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA:fileName ="" + fileName + ""fileType ="" + fileType + ""t = 0"");
        String host = FedoraUtils.getFedoraProperty(this, ""admin.ftp.address"");
        String url = FedoraUtils.getFedoraProperty(this, ""admin.ftp.url"");
        int port = Integer.parseInt(FedoraUtils.getFedoraProperty(this, ""admin.ftp.port""));
        String userName = FedoraUtils.getFedoraProperty(this, ""admin.ftp.username"");
        String password = FedoraUtils.getFedoraProperty(this, ""admin.ftp.password"");
        String directory = FedoraUtils.getFedoraProperty(this, ""admin.ftp.directory"");
        FTPClient client = new FTPClient();
        client.connect(host, port);
        client.login(userName, password);
        client.changeWorkingDirectory(directory);
        client.setFileType(FTP.BINARY_FILE_TYPE);
        client.storeFile(fileName, new FileInputStream(file));
        client.logout();
        client.disconnect();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Writting to FTP Server:"" + (System.currentTimeMillis() - sTime));
        fileName = url + fileName;
        int BUFFER_SIZE = 10240;
        StringBuffer sb = new StringBuffer();
        String s = new String();
        BufferedInputStream fis = new BufferedInputStream(new FileInputStream(new File(getResource(templateFileName).getFile().replaceAll(""%20"", "" ""))));
        byte[] buf = new byte[BUFFER_SIZE];
        int ch;
        int len;
        while ((len = fis.read(buf)) > 0) {
            s = s + new String(buf);
        }
        fis.close();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Read Mets File:"" + (System.currentTimeMillis() - sTime));
        String r = updateMetadata(s, fileName, file.getName(), fileType, properties);
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Resplaced Metadata:"" + (System.currentTimeMillis() - sTime));
        File METSfile = File.createTempFile(""vueMETSMap"", "".xml"");
        FileOutputStream fos = new FileOutputStream(METSfile);
        fos.write(r.getBytes());
        fos.close();
        AutoIngestor a = new AutoIngestor(address.getHost(), address.getPort(), FedoraUtils.getFedoraProperty(this, ""admin.fedora.username""), FedoraUtils.getFedoraProperty(this, ""admin.fedora.username""));
        String pid = a.ingestAndCommit(new FileInputStream(METSfile), ""Test Ingest"");
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Ingest complete:"" + (System.currentTimeMillis() - sTime));
        System.out.println("" METSfile= "" + METSfile.getPath() + "" PID = "" + pid);
        return new PID(pid);
    }",0,0
"    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"    public static void main(String[] args) throws Exception {
        Class.forName(""com.mysql.jdbc.Driver"").newInstance();
        Connection conn = DriverManager.getConnection(""jdbc:mysql://127.0.0.1:3306/mysql"", ""root"", ""admin"");
        new DataStorm().show(conn, ""SELECT * FROM help_topic h;"");
    }","    private String parseTags(String string) {
        string = string.replaceAll(""</(.+?)>"", ""\\\\textag $0"");
        Pattern pattern = Pattern.compile(""(?s)(?i)(<\\w.*?)(~(?:.*?))?(/?>)"");
        Matcher matcher = pattern.matcher(string);
        String output = """";
        int lastend = 0;
        while (matcher.find()) {
            output += string.substring(lastend, matcher.start(1));
            output += ""\\textag "";
            output += matcher.group(1);
            if (matcher.group(2) != null) {
                output += parseAttribs(matcher.group(2));
                output += ""\\textag "";
            }
            output += matcher.group(3);
            lastend = matcher.end(3);
        }
        output += string.substring(lastend);
        return output;
    }",0,0
"    private void find() {
        this.expressions = null;
        Pattern p = Pattern.compile(regExpr);
        Matcher m = p.matcher(text);
        while (m.find()) {
            if (this.stopped) {
                System.out.println(""Finder was stopped."");
                this.expressions = null;
                return;
            }
            int start = m.start();
            int end = m.end();
            if (expressions == null) {
                expressions = new FoundExpressions();
            }
            Selection selection = new Selection();
            selection.setStart(start);
            selection.setEnd(end);
            expressions.add(selection);
        }
    }","        @Override
        public void execute() {
            if (includes != null && includes.trim().isEmpty()) return;
            DirectoryScanner s = getDirectoryScanner(srcDir);
            String[] files = s.getIncludedFiles();
            files = filter(srcDir, destDir, files);
            if (files.length == 0) return;
            System.out.println(""Generating "" + files.length + "" stub files to "" + destDir);
            List<String> classNames = new ArrayList<String>();
            for (String file : files) {
                classNames.add(file.replaceAll("".java$"", """").replace('/', '.'));
            }
            if (!fork) {
                GenStubs m = new GenStubs();
                boolean ok = m.run(srcDir.getPath(), destDir, classNames);
                if (!ok) throw new BuildException(""genstubs failed"");
            } else {
                List<String> cmd = new ArrayList<String>();
                String java_home = System.getProperty(""java.home"");
                cmd.add(new File(new File(java_home, ""bin""), ""java"").getPath());
                if (classpath != null) cmd.add(""-Xbootclasspath/p:"" + classpath);
                cmd.add(GenStubs.class.getName());
                cmd.add(""-sourcepath"");
                cmd.add(srcDir.getPath());
                cmd.add(""-s"");
                cmd.add(destDir.getPath());
                cmd.addAll(classNames);
                ProcessBuilder pb = new ProcessBuilder(cmd);
                pb.redirectErrorStream(true);
                try {
                    Process p = pb.start();
                    BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
                    try {
                        String line;
                        while ((line = in.readLine()) != null) System.out.println(line);
                    } finally {
                        in.close();
                    }
                    int rc = p.waitFor();
                    if (rc != 0) throw new BuildException(""genstubs failed"");
                } catch (IOException e) {
                    throw new BuildException(""genstubs failed"", e);
                } catch (InterruptedException e) {
                    throw new BuildException(""genstubs failed"", e);
                }
            }
        }",0,0
"    public Node eval(Node startAt) throws Exception {
        startAt.isGoodArgsCnt(4);
        String xnode = startAt.getSubNode(3, Node.VTYPE_STRINGS).getString();
        Node ynode = Node.createEmptyList();
        String regex = startAt.getSubNode(1, Node.VTYPE_STRINGS).getString();
        startAt.requirePCode(2, PCoder.PC_IN);
        try {
            Pattern pattern = Pattern.compile(regex);
            Matcher matcher = pattern.matcher(xnode);
            while (matcher.find()) {
                ynode.addElement(new Node(xnode.substring(matcher.start(), matcher.end())));
            }
        } catch (Exception ex) {
            if (Interpreter.isDebugMode()) {
                ex.printStackTrace();
            }
            throw new InterpreterException(StdErrors.extend(StdErrors.Regex_error, regex));
        }
        return ynode;
    }","    void sort(int a[]) throws Exception {
        for (int i = a.length; --i >= 0; ) {
            boolean flipped = false;
            for (int j = 0; j < i; j++) {
                if (stopRequested) {
                    return;
                }
                if (a[j] > a[j + 1]) {
                    int T = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = T;
                    flipped = true;
                }
                pause(i, j);
            }
            if (!flipped) {
                return;
            }
        }
    }",0,0
"    public static String[] separate(String str, String reg) {
        List<String> list = new ArrayList<String>();
        Pattern pattern = Pattern.compile(reg);
        Matcher matcher = pattern.matcher(str);
        while (matcher.find()) list.add(str.substring(matcher.start(), matcher.end()));
        return list.toArray(new String[list.size()]);
    }","    public static Object[] append(Object[] oldArray, Object o) {
        NullArgumentException.check(oldArray);
        NullArgumentException.check(o);
        Object[] newArray = (Object[]) Array.newInstance(oldArray.getClass().getComponentType(), oldArray.length + 1);
        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);
        newArray[oldArray.length] = o;
        return newArray;
    }",0,0
"    public static File takeAPictureAndSaveIt(int wait, String dir) {
        try {
            Thread.sleep(wait);
            boolean wasVisible = false;
            if (dir == null && Context.wind != null) {
                if (Context.wind.isVisible()) {
                    Context.wind.setVisible(false);
                    wasVisible = true;
                }
            }
            Robot robot = new Robot();
            BufferedImage image = robot.createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
            String imagefile = ""img"" + ORDER++ + "".gif"";
            if (dir != null) {
                imagefile = dir + ""/snd"" + ORDER + "".nk"";
            }
            File file = new File(imagefile);
            ImageIO.write(image, ""gif"", file);
            if (dir == null && wasVisible && Context.wind != null) {
                Context.wind.setVisible(true);
            }
            return file;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }","    public ImageDisplay(ImageDisplayApplet applet, GraphicsConfiguration gc) {
        this.applet = applet;
        if (applet == null) {
            frame = new JFrame(gc);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(PREFERRED_WIDTH, PREFERRED_HEIGHT));
        Action openAction = new AbstractAction(""Open File"", new ImageIcon(getClass().getResource(""/open.gif""))) {

            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }
        };
        JToolBar bar = new JToolBar();
        bar.add(new ToolBarButton(openAction));
        add(bar, BorderLayout.NORTH);
        if (applet == null) {
            frame.setTitle(""Image Display - Control Panel"");
            frame.getContentPane().add(this, BorderLayout.CENTER);
            frame.pack();
            frame.show();
        }
    }",0,0
"    public File getFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.CANCEL_OPTION) return null; else return fileChooser.getSelectedFile();
    }","    private int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }",0,0
"    public sendhtml(String[] argv) {
        String to, subject = null, from = null, cc = null, bcc = null, url = null;
        String mailhost = null;
        String mailer = ""sendhtml"";
        String protocol = null, host = null, user = null, password = null;
        String record = null;
        boolean debug = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int optind;
        for (optind = 0; optind < argv.length; optind++) {
            if (argv[optind].equals(""-T"")) {
                protocol = argv[++optind];
            } else if (argv[optind].equals(""-H"")) {
                host = argv[++optind];
            } else if (argv[optind].equals(""-U"")) {
                user = argv[++optind];
            } else if (argv[optind].equals(""-P"")) {
                password = argv[++optind];
            } else if (argv[optind].equals(""-M"")) {
                mailhost = argv[++optind];
            } else if (argv[optind].equals(""-f"")) {
                record = argv[++optind];
            } else if (argv[optind].equals(""-s"")) {
                subject = argv[++optind];
            } else if (argv[optind].equals(""-o"")) {
                from = argv[++optind];
            } else if (argv[optind].equals(""-c"")) {
                cc = argv[++optind];
            } else if (argv[optind].equals(""-b"")) {
                bcc = argv[++optind];
            } else if (argv[optind].equals(""-L"")) {
                url = argv[++optind];
            } else if (argv[optind].equals(""-d"")) {
                debug = true;
            } else if (argv[optind].equals(""--"")) {
                optind++;
                break;
            } else if (argv[optind].startsWith(""-"")) {
                System.out.println(""Usage: sendhtml [[-L store-url] | [-T prot] [-H host] [-U user] [-P passwd]]"");
                System.out.println(""\t[-s subject] [-o from-address] [-c cc-addresses] [-b bcc-addresses]"");
                System.out.println(""\t[-f record-mailbox] [-M transport-host] [-d] [address]"");
                System.exit(1);
            } else {
                break;
            }
        }
        try {
            if (optind < argv.length) {
                to = argv[optind];
                System.out.println(""To: "" + to);
            } else {
                System.out.print(""To: "");
                System.out.flush();
                to = in.readLine();
            }
            if (subject == null) {
                System.out.print(""Subject: "");
                System.out.flush();
                subject = in.readLine();
            } else {
                System.out.println(""Subject: "" + subject);
            }
            Properties props = System.getProperties();
            if (mailhost != null) props.put(""mail.smtp.host"", mailhost);
            Session session = Session.getInstance(props, null);
            if (debug) session.setDebug(true);
            Message msg = new MimeMessage(session);
            if (from != null) msg.setFrom(new InternetAddress(from)); else msg.setFrom();
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
            if (cc != null) msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc, false));
            if (bcc != null) msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc, false));
            msg.setSubject(subject);
            collect(in, msg);
            msg.setHeader(""X-Mailer"", mailer);
            msg.setSentDate(new Date());
            Transport.send(msg);
            System.out.println(""\nMail was sent successfully."");
            if (record != null) {
                Store store = null;
                if (url != null) {
                    URLName urln = new URLName(url);
                    store = session.getStore(urln);
                    store.connect();
                } else {
                    if (protocol != null) store = session.getStore(protocol); else store = session.getStore();
                    if (host != null || user != null || password != null) store.connect(host, user, password); else store.connect();
                }
                Folder folder = store.getFolder(record);
                if (folder == null) {
                    System.err.println(""Can't get record folder."");
                    System.exit(1);
                }
                if (!folder.exists()) folder.create(Folder.HOLDS_MESSAGES);
                Message[] msgs = new Message[1];
                msgs[0] = msg;
                folder.appendMessages(msgs);
                System.out.println(""Mail was recorded successfully."");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public static void main(String args[]) {
        int i, j, l;
        short NUMNUMBERS = 100;
        short numbers[] = new short[NUMNUMBERS];
        printIntro();
        int time = (int) System.currentTimeMillis();
        for (i = 0; i < NUMNUMBERS; i++) {
            numbers[i] = (short) (NUMNUMBERS - 1 - i);
        }
        for (i = 0; i < NUMNUMBERS; i++) {
            for (j = 0; j < NUMNUMBERS - i - 1; j++) {
                if (numbers[j] > numbers[j + 1]) {
                    short temp = numbers[j];
                    numbers[j] = numbers[j + 1];
                    numbers[j + 1] = temp;
                }
            }
            if (WANT_PROGRESS) {
                printProgress();
            }
        }
        time = (int) System.currentTimeMillis() - time;
        System.out.print(time);
        System.out.print(""End\n"");
    }",0,0
"    public void testMySqlCall() {
        Runtime runtime = Runtime.getRuntime();
        try {
            Process process = runtime.exec(""ping localhost"");
            DataOutputStream dataOutputStream = new DataOutputStream(process.getOutputStream());
            BufferedReader inputStream = new BufferedReader(new InputStreamReader(process.getInputStream()));
            for (String outptFromPrc = inputStream.readLine(); (outptFromPrc = inputStream.readLine()) != null; ) {
                System.out.println(outptFromPrc);
            }
            BufferedReader errorInputStream = new BufferedReader(new InputStreamReader(process.getErrorStream()));
            for (String outptFromPrc = errorInputStream.readLine(); (outptFromPrc = errorInputStream.readLine()) != null; ) {
                System.out.println(outptFromPrc);
            }
            System.out.println(process.exitValue());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }","    public void deleteSynchrnServerFile(SynchrnServerVO synchrnServerVO) throws Exception {
        FTPClient ftpClient = new FTPClient();
        ftpClient.setControlEncoding(""euc-kr"");
        if (!EgovWebUtil.isIPAddress(synchrnServerVO.getServerIp())) {
            throw new RuntimeException(""IP is needed. ("" + synchrnServerVO.getServerIp() + "")"");
        }
        InetAddress host = InetAddress.getByName(synchrnServerVO.getServerIp());
        ftpClient.connect(host, Integer.parseInt(synchrnServerVO.getServerPort()));
        ftpClient.login(synchrnServerVO.getFtpId(), synchrnServerVO.getFtpPassword());
        FTPFile[] fTPFile = null;
        try {
            ftpClient.changeWorkingDirectory(synchrnServerVO.getSynchrnLc());
            fTPFile = ftpClient.listFiles(synchrnServerVO.getSynchrnLc());
            for (int i = 0; i < fTPFile.length; i++) {
                if (synchrnServerVO.getDeleteFileNm().equals(fTPFile[i].getName())) ftpClient.deleteFile(fTPFile[i].getName());
            }
            SynchrnServer synchrnServer = new SynchrnServer();
            synchrnServer.setServerId(synchrnServerVO.getServerId());
            synchrnServer.setReflctAt(""N"");
            synchrnServerDAO.processSynchrn(synchrnServer);
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            ftpClient.logout();
        }
    }",0,0
"            public void actionPerformed(ActionEvent e) {
                String sql = ""delete from jadwalUjian where MP='"" + FieldNim.getText().trim() + ""'"";
                if (FieldNim.getText().trim().equals("""")) {
                    JOptionPane.showMessageDialog(frame, ""Nama Mata_Pelajaran Wajib di Isi"", ""Simpan Data"", JOptionPane.WARNING_MESSAGE);
                    FieldNim.requestFocus();
                } else {
                    try {
                        Connection connection = DriverManager.getConnection(""jdbc:odbc:db_Sekolah"");
                        Statement statement = connection.createStatement();
                        statement.executeUpdate(sql);
                        statement.close();
                        connection.close();
                        FieldNim.setText("""");
                        FieldNama.setText("""");
                        FieldTtl.setText("""");
                        FieldJk.setText("""");
                        FieldNim.requestFocus();
                    } catch (Exception exc) {
                        System.err.println(sql);
                        System.err.println(""Error: "" + exc);
                    }
                }
            }","    public static String compileTemplateFile(HashMap<String, String> variables, Reader source) throws IOException {
        String tag = ""\\{%([\\w _-]+)%\\}"";
        Pattern patternTag = Pattern.compile(tag);
        StringBuilder builder = new StringBuilder();
        BufferedReader reader = new BufferedReader(source);
        String line = null;
        while ((line = reader.readLine()) != null) {
            Matcher matcher = patternTag.matcher(line);
            int lastIndex = 0;
            while (matcher.find()) {
                String key = matcher.group(1).trim();
                builder.append(line.substring(lastIndex, matcher.start()));
                builder.append(variables.get(key));
                lastIndex = matcher.end();
            }
            builder.append(line.substring(lastIndex));
            builder.append(""\n"");
        }
        return builder.toString();
    }",0,0
"    private String matchPattern(String string, String regex, String tag) {
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(string);
        int lastend = 0;
        String output = """";
        while (matcher.find()) {
            output += string.substring(lastend, matcher.start(1));
            output += colorize(matcher, tag);
            lastend = matcher.end(1);
        }
        output += string.substring(lastend);
        return output;
    }","    public void retrieveFiles() throws DataSyncException {
        try {
            ftp.connect(hostname, port);
            boolean success = ftp.login(username, password);
            log.info(""FTP Login:"" + success);
            if (success) {
                System.out.println(directory);
                ftp.changeWorkingDirectory(directory);
                ftp.setFileType(FTP.ASCII_FILE_TYPE);
                ftp.enterLocalPassiveMode();
                ftp.setRemoteVerificationEnabled(false);
                FTPFile[] files = ftp.listFiles();
                for (FTPFile file : files) {
                    ftp.setFileType(file.getType());
                    log.debug(file.getName() + "","" + file.getSize());
                    FileOutputStream output = new FileOutputStream(localDirectory + file.getName());
                    try {
                        ftp.retrieveFile(file.getName(), output);
                    } finally {
                        IOUtils.closeQuietly(output);
                    }
                }
            }
        } catch (Exception e) {
            throw new DataSyncException(e);
        } finally {
            try {
                ftp.disconnect();
            } catch (IOException e) {
            }
        }
    }",0,0
"    private ZipEntry createZipEntry(String name, byte bytes[], int method) {
        ZipEntry ze = new ZipEntry(name);
        ze.setMethod(method);
        ze.setSize(bytes.length);
        CRC32 crc = new CRC32();
        crc.reset();
        crc.update(bytes);
        ze.setCrc(crc.getValue());
        ze.setTime(System.currentTimeMillis());
        return ze;
    }","        @Override
        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
            if (args == null) args = new Object[0];
            if (method.isAnnotationPresent(Ignore.class)) return null;
            synchronized (lock) {
                if (method.isAnnotationPresent(Filter.class)) {
                    Filter annotation = method.getAnnotation(Filter.class);
                    if (annotation.parameterFilter() != ParameterFilter.class) {
                        ParameterFilter filter = parameterFilterSingletons.get(annotation.parameterFilter());
                        if (filter == null) {
                            filter = annotation.parameterFilter().newInstance();
                            parameterFilterSingletons.put(annotation.parameterFilter(), filter);
                        }
                        args = filter.filter(instance, args);
                    }
                }
                if (method.getName().equalsIgnoreCase(""addChangeListener"") || method.getName().equalsIgnoreCase(""removeChangeListener"")) {
                    String property = (String) args[0];
                    PropertyChangeListener listener = (PropertyChangeListener) args[1];
                    HashMap<String, ArrayList<PropertyChangeListener>> beanMap = beanListeners.get(targetId);
                    if (beanMap == null) {
                        beanMap = new HashMap<String, ArrayList<PropertyChangeListener>>();
                        beanListeners.put(targetId, beanMap);
                    }
                    ArrayList listenerList = beanMap.get(property);
                    if (listenerList == null) {
                        listenerList = new ArrayList<PropertyChangeListener>();
                        beanMap.put(property, listenerList);
                    }
                    if (method.getName().equalsIgnoreCase(""addChangeListener"") && !listenerList.contains(listener)) listenerList.add(listener);
                    if (method.getName().equalsIgnoreCase(""removeChangeListener"") && listenerList.contains(listener)) listenerList.remove(listener);
                    return null;
                }
                if (method.getName().equalsIgnoreCase(""getProxyStorageId"") && method.getReturnType() == Long.TYPE) return targetId;
                if (method.getName().equalsIgnoreCase(""getProxyStorageClass"") && method.getReturnType() == Class.class) return targetClass;
                if (method.getName().equalsIgnoreCase(""finalize"")) {
                    System.out.println(""proxystorage object "" + targetId + "" finalized."");
                    return null;
                }
                if (method.getName().equalsIgnoreCase(""isProxyStoragePresent"") && method.getReturnType() == Boolean.TYPE) return isTargetIdPresent(targetId, targetClass);
                if (method.getName().equalsIgnoreCase(""equals"") && args.length == 1) {
                    Object compare = args[0];
                    if (!(compare instanceof ProxyObject)) return false;
                    ProxyObject object = (ProxyObject) compare;
                    long objectId = object.getProxyStorageId();
                    return objectId == targetId;
                }
                if (method.isAnnotationPresent(Search.class)) {
                    Search annotation = method.getAnnotation(Search.class);
                    String listProperty = annotation.listProperty();
                    String searchProperty = annotation.searchProperty();
                    PreparedStatement lst = connection.prepareStatement(""select "" + listProperty + "" from "" + getTargetTableName(targetClass) + "" where proxystorage_id = ?"");
                    opcount++;
                    lst.setLong(1, targetId);
                    ResultSet lrs = lst.executeQuery();
                    if (!lrs.next()) throw new RuntimeException(""mismatched object with id "" + targetId + "" and class "" + targetClass.getName());
                    long listId = lrs.getLong(1);
                    if (lrs.wasNull()) {
                        lrs.close();
                        lst.close();
                        if (method.getReturnType().isArray()) return Array.newInstance(method.getReturnType().getComponentType(), 0); else return null;
                    }
                    lrs.close();
                    lst.close();
                    String capitalizedListProperty = listProperty.substring(0, 1).toUpperCase() + listProperty.substring(1);
                    String capitalizedSearchProperty = searchProperty.substring(0, 1).toUpperCase() + searchProperty.substring(1);
                    Method listGetterMethod = method.getDeclaringClass().getMethod(""get"" + capitalizedListProperty, new Class[0]);
                    ListType listTypeAnnotation = listGetterMethod.getAnnotation(ListType.class);
                    if (listTypeAnnotation == null) throw new RuntimeException(""@ListType annotation is not present on stored list getter "" + listGetterMethod.getName() + "" for class "" + listGetterMethod.getDeclaringClass().getName());
                    Class listType = listTypeAnnotation.value();
                    Method searchGetterMethod;
                    try {
                        searchGetterMethod = listType.getMethod(""get"" + capitalizedSearchProperty, new Class[0]);
                    } catch (NoSuchMethodException ex) {
                        searchGetterMethod = listType.getMethod(""is"" + capitalizedSearchProperty, new Class[0]);
                    }
                    PreparedStatement st = connection.prepareStatement(""select value from proxystorage_collections "" + ""where id = ? and value in (select proxystorage_id from "" + getTargetTableName(listType) + "" where "" + searchProperty + "" "" + (annotation.exact() ? ""="" : ""like"") + "" ?) order by index asc"");
                    st.setLong(1, listId);
                    Object searchValue = args[0];
                    if (!annotation.exact()) {
                        searchValue = (annotation.anywhere() ? ""%"" : """") + ((String) searchValue).replace(""*"", ""%"") + (annotation.anywhere() ? ""%"" : """");
                    }
                    st.setObject(2, searchValue);
                    opcount++;
                    ResultSet rs = st.executeQuery();
                    ArrayList<Long> resultIds = new ArrayList<Long>();
                    while (rs.next()) {
                        resultIds.add(rs.getLong(1));
                    }
                    rs.close();
                    st.close();
                    Object[] results = new Object[resultIds.size()];
                    int index = 0;
                    for (long resultId : resultIds) {
                        results[index++] = getById(resultId, listType);
                    }
                    if (method.getReturnType().isArray()) {
                        Object resultArray = Array.newInstance(method.getReturnType().getComponentType(), results.length);
                        System.arraycopy(results, 0, resultArray, 0, results.length);
                        return resultArray;
                    } else {
                        if (results.length == 0) return null; else return results[0];
                    }
                }
                if (method.isAnnotationPresent(CompoundSearch.class)) {
                    CompoundSearch annotation = method.getAnnotation(CompoundSearch.class);
                    String listProperty = annotation.listProperty();
                    String[] searchProperties = annotation.searchProperties();
                    PreparedStatement lst = connection.prepareStatement(""select "" + listProperty + "" from "" + getTargetTableName(targetClass) + "" where proxystorage_id = ?"");
                    lst.setLong(1, targetId);
                    opcount++;
                    ResultSet lrs = lst.executeQuery();
                    if (!lrs.next()) throw new RuntimeException(""mismatched object with id "" + targetId + "" and class "" + targetClass.getName());
                    long listId = lrs.getLong(1);
                    if (lrs.wasNull()) {
                        lrs.close();
                        lst.close();
                        if (method.getReturnType().isArray()) return Array.newInstance(method.getReturnType().getComponentType(), 0); else return null;
                    }
                    lrs.close();
                    lst.close();
                    String capitalizedListProperty = listProperty.substring(0, 1).toUpperCase() + listProperty.substring(1);
                    Method listGetterMethod = method.getDeclaringClass().getMethod(""get"" + capitalizedListProperty, new Class[0]);
                    ListType listTypeAnnotation = listGetterMethod.getAnnotation(ListType.class);
                    if (listTypeAnnotation == null) throw new RuntimeException(""@ListType annotation is not present on stored list getter "" + listGetterMethod.getName() + "" for class "" + listGetterMethod.getDeclaringClass().getName());
                    Class listType = listTypeAnnotation.value();
                    String[] searchQueryStrings = new String[searchProperties.length];
                    Method[] searchQueryMethods = new Method[searchProperties.length];
                    for (int i = 0; i < searchProperties.length; i++) {
                        String capitalizedSearchProperty = searchProperties[i].substring(0, 1).toUpperCase() + searchProperties[i].substring(1);
                        Method searchGetterMethod;
                        try {
                            searchGetterMethod = listType.getMethod(""get"" + capitalizedSearchProperty, new Class[0]);
                        } catch (NoSuchMethodException ex) {
                            searchGetterMethod = listType.getMethod(""is"" + capitalizedSearchProperty, new Class[0]);
                        }
                        searchQueryMethods[i] = searchGetterMethod;
                        searchQueryStrings[i] = searchProperties[i] + "" "" + (annotation.exact()[i] ? ""="" : ""like"") + "" ?"";
                    }
                    String searchQuery = StringUtils.delimited(searchQueryStrings, "" and "");
                    String searchSql = ""select value from proxystorage_collections "" + ""where id = ? and value in (select proxystorage_id from "" + getTargetTableName(listType) + "" where "" + searchQuery + "") order by index asc"";
                    PreparedStatement st = connection.prepareStatement(searchSql);
                    opcount++;
                    st.setLong(1, listId);
                    for (int i = 0; i < searchProperties.length; i++) {
                        Object searchValue = args[i];
                        if (!annotation.exact()[i]) {
                            searchValue = (annotation.anywhere()[i] ? ""%"" : """") + ((String) searchValue).replace(""*"", ""%"") + (annotation.anywhere()[i] ? ""%"" : """");
                        }
                        st.setObject(i + 2, searchValue);
                    }
                    ResultSet rs = st.executeQuery();
                    ArrayList<Long> resultIds = new ArrayList<Long>();
                    while (rs.next()) {
                        resultIds.add(rs.getLong(1));
                    }
                    rs.close();
                    st.close();
                    Object[] results = new Object[resultIds.size()];
                    int index = 0;
                    for (long resultId : resultIds) {
                        results[index++] = getById(resultId, listType);
                    }
                    if (method.getReturnType().isArray()) {
                        Object resultArray = Array.newInstance(method.getReturnType().getComponentType(), results.length);
                        System.arraycopy(results, 0, resultArray, 0, results.length);
                        return resultArray;
                    } else {
                        if (results.length == 0) return null; else return results[0];
                    }
                }
                if (method.getName().equalsIgnoreCase(""hashCode"") && args.length == 0) {
                    return (int) targetId * 31;
                }
                if (method.isAnnotationPresent(Constructor.class)) {
                    return ProxyStorage.this.create(method.getReturnType());
                }
                if (method.isAnnotationPresent(CustomProperty.class)) {
                    CustomProperty annotation = method.getAnnotation(CustomProperty.class);
                    Class<? extends Delegate> delegateClass = annotation.value();
                    Delegate delegate = delegateSingletons.get(delegateClass);
                    if (delegate == null) {
                        delegate = delegateClass.newInstance();
                        delegateSingletons.put(delegateClass, delegate);
                    }
                    return delegate.get(instance, method.getReturnType(), propertyNameFromAccessor(method.getName()));
                }
                if (method.getName().equals(""toString"")) {
                    return ""ProxyStorage-id"" + targetId;
                }
                if (isPropertyMethod(method)) {
                    if (method.getName().startsWith(""get"") || method.getName().startsWith(""is"")) {
                        String propertyName = propertyNameFromAccessor(method.getName());
                        BeanPropertyKey cacheKey = new BeanPropertyKey();
                        cacheKey.id = targetId;
                        cacheKey.property = propertyName;
                        Map cacheMap;
                        if (method.getReturnType().equals(String.class)) cacheMap = stringCache; else cacheMap = propertyCache;
                        Object cachedObject = cacheMap.get(cacheKey);
                        Object result;
                        if (cachedObject != null) result = cachedObject; else {
                            PreparedStatement st = connection.prepareStatement(""select "" + propertyName + "" from "" + getTargetTableName(targetClass) + "" where proxystorage_id = ?"");
                            opcount++;
                            st.setLong(1, targetId);
                            ResultSet rs = st.executeQuery();
                            boolean isPresent = rs.next();
                            if (!isPresent) {
                                rs.close();
                                st.close();
                                throw new IllegalStateException(""The object that was queried has been deleted "" + ""from the database."");
                            }
                            result = rs.getObject(propertyName);
                            if (result != null) cacheMap.put(cacheKey, result);
                            rs.close();
                            st.close();
                        }
                        if (method.getReturnType() == Integer.TYPE || method.getReturnType() == Integer.class || method.getReturnType() == Long.TYPE || method.getReturnType() == Long.class || method.getReturnType() == Double.TYPE || method.getReturnType() == Double.class || method.getReturnType() == Boolean.TYPE || method.getReturnType() == Boolean.class || method.getReturnType() == String.class) {
                            if (result == null) {
                                if (method.isAnnotationPresent(Default.class)) {
                                    Default values = method.getAnnotation(Default.class);
                                    if (method.getReturnType() == Integer.TYPE) result = values.intValue();
                                    if (method.getReturnType() == Long.TYPE) result = values.longValue();
                                    if (method.getReturnType() == Double.TYPE) result = values.doubleValue();
                                    if (method.getReturnType() == Boolean.TYPE) result = values.booleanValue();
                                    if (method.getReturnType() == String.class) result = values.stringValue();
                                } else {
                                    if (method.getReturnType() == Integer.TYPE) result = (int) 0;
                                    if (method.getReturnType() == Long.TYPE) result = (long) 0;
                                    if (method.getReturnType() == Double.TYPE) result = (double) 0;
                                    if (method.getReturnType() == Boolean.TYPE) result = false;
                                }
                            }
                            return result;
                        }
                        if (method.getReturnType() == BigInteger.class) {
                            if (result == null) return null;
                            return new BigInteger(((String) result), 16);
                        }
                        if (method.getReturnType() == StoredList.class) {
                            if (result == null) {
                                result = new Long(nextId());
                                PreparedStatement ist = connection.prepareStatement(""update "" + getTargetTableName(targetClass) + "" set "" + propertyName + "" = ? where proxystorage_id = ?"");
                                opcount++;
                                ist.setLong(1, (Long) result);
                                ist.setLong(2, targetId);
                                ist.execute();
                                ist.close();
                            }
                            return new StoredList(ProxyStorage.this, ((ListType) method.getAnnotation(ListType.class)).value(), (Long) result);
                        }
                        if (method.getReturnType().isAnnotationPresent(ProxyBean.class)) {
                            boolean isRequired = method.isAnnotationPresent(Required.class);
                            if (result == null) {
                                if (!isRequired) return null;
                                ProxyObject newObject = (ProxyObject) create(method.getReturnType());
                                long newId = newObject.getProxyStorageId();
                                PreparedStatement ust = connection.prepareStatement(""update "" + getTargetTableName(targetClass) + "" set "" + propertyName + "" = ? where proxystorage_id = ?"");
                                opcount++;
                                ust.setLong(1, newId);
                                ust.setLong(2, targetId);
                                ust.executeUpdate();
                                ust.close();
                                result = newId;
                            }
                            return getById((Long) result, method.getReturnType());
                        }
                        throw new IllegalArgumentException(""The method is a getter, but it's return "" + ""type is not a proper type."");
                    } else {
                        String propertyName = propertyNameFromAccessor(method.getName());
                        PreparedStatement st = connection.prepareStatement(""update "" + getTargetTableName(targetClass) + "" set "" + propertyName + "" = ? where proxystorage_id = ?"");
                        st.setLong(2, targetId);
                        Object inputObject = args[0];
                        if (inputObject != null) {
                            if (inputObject.getClass() == StoredList.class) {
                                throw new IllegalArgumentException(""Setters for stored lists are not allowed."");
                            }
                            if (inputObject.getClass() == BigInteger.class) {
                                inputObject = ((BigInteger) inputObject).toString(16);
                            }
                            if (inputObject instanceof ProxyObject) {
                                inputObject = new Long(((ProxyObject) inputObject).getProxyStorageId());
                            }
                        }
                        st.setObject(1, inputObject);
                        opcount++;
                        st.execute();
                        st.close();
                        BeanPropertyKey key = new BeanPropertyKey();
                        key.id = targetId;
                        key.property = propertyName;
                        if (inputObject == null) {
                            stringCache.remove(key);
                            propertyCache.remove(key);
                        } else {
                            if (inputObject instanceof String) stringCache.put(key, inputObject); else propertyCache.put(key, inputObject);
                        }
                        HashMap<String, ArrayList<PropertyChangeListener>> beanMap = beanListeners.get(targetId);
                        if (beanMap != null) {
                            ArrayList<PropertyChangeListener> listenerList = beanMap.get(propertyName);
                            if (listenerList != null) {
                                PropertyChangeEvent event = new PropertyChangeEvent(instance, propertyName, null, null);
                                for (PropertyChangeListener listener : listenerList) {
                                    listenerExecutor.execute(new PropertyChanged(listener, event));
                                }
                            }
                        }
                        return null;
                    }
                }
                throw new UnsupportedOperationException(""The method "" + method.getName() + "" is not supported for the proxy type "" + targetClass.getName());
            }
        }",0,0
"    public static long checksum(File file) throws java.io.IOException, FileNotFoundException {
        FileInputStream fis = null;
        byte[] bytes = new byte[16384];
        int len;
        try {
            fis = new FileInputStream(file);
            CRC32 chkSum = new CRC32();
            len = fis.read(bytes);
            while (len != -1) {
                chkSum.update(bytes, 0, len);
                len = fis.read(bytes);
            }
            return chkSum.getValue();
        } finally {
            quietClose(fis);
        }
    }","    private void scanWords(QDomNode node) {
        String value = node.nodeValue();
        QDomDocumentFragment fragment = doc.createDocumentFragment();
        boolean matchFound = false;
        int previousPosition = 0;
        String valueEnd = """";
        String regex = buildRegex();
        Pattern pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(value);
        while (matcher.find()) {
            matchFound = true;
            String valueStart = """";
            int start = matcher.start();
            int end = matcher.end();
            if (value.substring(start).startsWith("" "")) start++;
            if (value.substring(start, end).endsWith("" "")) end--;
            if (matcher.start() > 0) {
                valueStart = value.substring(previousPosition, start);
            }
            String valueMiddle = value.substring(start, end);
            valueEnd = """";
            if (matcher.end() < value.length()) {
                valueEnd = value.substring(end);
            }
            previousPosition = end;
            if (!valueStart.equals("""")) {
                QDomText startText = doc.createTextNode(valueStart);
                fragment.appendChild(startText);
            }
            QDomElement hilight = doc.createElement(""en-hilight"");
            hilight.appendChild(doc.createTextNode(valueMiddle));
            fragment.appendChild(hilight);
        }
        if (matchFound) {
            if (previousPosition != value.length()) {
                QDomText endText = doc.createTextNode(valueEnd);
                fragment.appendChild(endText);
            }
            newNodes.add(fragment);
            oldNodes.add(node);
        }
    }",0,0
"    @Constraint(""post: s.get().size>0"")
    protected static void removeNewlinesForAssertStyleHandler(@Constraint(""post: s.get().size<=s@pre.get().size"") final IDocument s) {
        String checkMethodName = ""assert(Pre|Post)Condition_(\\w*)_for_method_(\\w*)"";
        String checkMethodParameters = ""([^\\)]*)"";
        Pattern pattern = Pattern.compile(""if\\s*\\(\\s*!\\s*"" + checkMethodName + ""\\s*\\("" + checkMethodParameters + ""\\)\\s*\\)\\s*\\{"" + ""\\s*org.ocl4java.ConstraintFailedHandlerManager.handleConstraintFailed\\(\\s*(.*)\\s*\\)\\s*;"" + ""\\s*}\\s*"");
        Matcher matcher = pattern.matcher(s.get());
        try {
            int lengthDifference = 0;
            while (matcher.find()) {
                String replacement = ""if(!assert"" + Matcher.quoteReplacement(matcher.group(1)) + ""Condition_"" + Matcher.quoteReplacement(matcher.group(2)) + ""_for_method_"" + Matcher.quoteReplacement(matcher.group(3)) + ""("" + Matcher.quoteReplacement(matcher.group(4)) + "")){org.ocl4java.ConstraintFailedHandlerManager.handleConstraintFailed("" + Matcher.quoteReplacement(matcher.group(5)) + "");}"";
                int lengthOfMatchedString = matcher.end() - matcher.start();
                s.replace(lengthDifference + matcher.start(), lengthOfMatchedString, replacement);
                lengthDifference -= lengthOfMatchedString - replacement.length();
            }
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }","    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }",0,0
"    public Matrix transpose() {
        final int array[][] = new int[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new IntegerSquareMatrix(array);
    }","    public static void main(String[] args) {
        if (args.length != 5) {
            System.out.println(""usage: java sendfile <to> <from> <smtp> <file> true|false"");
            System.exit(1);
        }
        String to = args[0];
        String from = args[1];
        String host = args[2];
        String filename = args[3];
        boolean debug = Boolean.valueOf(args[4]).booleanValue();
        String msgText1 = ""Sending a file.\n"";
        String subject = ""Sending a file"";
        Properties props = System.getProperties();
        props.put(""mail.smtp.host"", host);
        Session session = Session.getInstance(props, null);
        session.setDebug(debug);
        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(from));
            InternetAddress[] address = { new InternetAddress(to) };
            msg.setRecipients(Message.RecipientType.TO, address);
            msg.setSubject(subject);
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setText(msgText1);
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.attachFile(filename);
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp1);
            mp.addBodyPart(mbp2);
            msg.setContent(mp);
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (MessagingException mex) {
            mex.printStackTrace();
            Exception ex = null;
            if ((ex = mex.getNextException()) != null) {
                ex.printStackTrace();
            }
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }",0,0
"    private static int executeCommand(final String commandName, final List<String> arguments) {
        System.out.println(""executing ["" + commandName.toString() + ""] with arguments: "" + Arrays.toString(arguments.toArray()));
        try {
            final List<String> pbArgs = new LinkedList<String>(arguments);
            pbArgs.add(0, commandName);
            final ProcessBuilder pb = new ProcessBuilder(pbArgs);
            System.out.println(""starting ..."");
            final Process process = pb.start();
            InputStream inputStream = process.getInputStream();
            InputStream errorStream = process.getErrorStream();
            ThreadedStreamHandler outputStreamHandler = ThreadedStreamHandler.newSimple(""OUT"", inputStream);
            ThreadedStreamHandler errorStreamHandler = ThreadedStreamHandler.newSimple(""ERR"", errorStream);
            outputStreamHandler.start();
            errorStreamHandler.start();
            System.out.println(""command running"");
            final int exitValue = process.waitFor();
            outputStreamHandler.interrupt();
            errorStreamHandler.interrupt();
            outputStreamHandler.join();
            errorStreamHandler.join();
            System.out.println(""finished. exitValue: "" + exitValue);
            return exitValue;
        } catch (final Exception e) {
            throw new RuntimeException(""executing command failed"", e);
        }
    }","    private void checkForUpdates() {
        ok.setEnabled(false);
        SwingWorker<String, Object> worker = new SwingWorker<String, Object>() {

            public String doInBackground() {
                BufferedReader in = null;
                try {
                    URL url = new URL(net.mjrz.fm.ui.utils.UIDefaults.LATEST_VERSION_URL);
                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                    int status = conn.getResponseCode();
                    if (status == 200) {
                        in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                        StringBuilder str = new StringBuilder();
                        while (true) {
                            String line = in.readLine();
                            if (line == null) break;
                            str.append(line);
                        }
                        return str.toString();
                    } else {
                        logger.error(""Unable to retrieve latest version: HTTP ERROR CODE: "" + status);
                        return """";
                    }
                } catch (Exception e) {
                    logger.error(""Unable to retrieve latest version: HTTP ERROR CODE: "" + e.getMessage());
                    return null;
                } finally {
                    if (in != null) {
                        try {
                            in.close();
                        } catch (Exception e) {
                        }
                    }
                }
            }

            public void done() {
                try {
                    dispose();
                    String str = get();
                    if (str == null || str.length() == 0) {
                        JOptionPane.showMessageDialog(frame, tr(""Unable to retrieve version information.\nPlease check network connectivity""), tr(""Error""), JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    net.mjrz.fm.Version v = net.mjrz.fm.Version.getVersion();
                    if (v.isVersionGreater(str.toString())) {
                        String[] args = { str };
                        String msg = form.format(args);
                        int n = JOptionPane.showConfirmDialog(frame, msg + ""\n"" + tr(""Do you want to download the latest version?""), tr(""Message""), JOptionPane.YES_NO_OPTION);
                        if (n == JOptionPane.YES_OPTION) {
                            java.awt.Desktop d = Desktop.getDesktop();
                            if (Desktop.isDesktopSupported()) {
                                d.browse(new URI(UIDefaults.PRODUCT_DOWNLOAD_URL));
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(frame, tr(""No new updates are available""));
                    }
                } catch (Exception e) {
                    logger.error(MiscUtils.stackTrace2String(e));
                } finally {
                    frame.hideSheet();
                }
            }
        };
        worker.execute();
    }",0,0
"    public static void openURL(String url) {
        URI uri = null;
        try {
            uri = new URI(url.toString());
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
        if (Desktop.isDesktopSupported()) {
            desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }","    public AniPlayer() {
        AniPlayerWindow.setFocusable(true);
        AniPlayerWindow.setPreferredSize(new Dimension(640, 480));
        BrowseWindow = new CBrowseWindow();
        BrowseWindow.setLocation(0, 0);
        BrowseWindow.setPreferredSize(new Dimension(640, 480));
        AniPlayerWindow.add(BrowseWindow);
        fc = new JFileChooser();
        AniPlayerWindow.addKeyListener(new KeyAdapter() {

            @Override
            public void keyTyped(KeyEvent e) {
                super.keyTyped(e);
                if (toLowerCase(e.getKeyChar()) == 'o') {
                    int returnVal = fc.showOpenDialog(AniPlayerWindow);
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        BufferedImage img = null;
                        try {
                            img = ImageIO.read(fc.getSelectedFile());
                        } catch (IOException ie) {
                        }
                        BrowseWindow.setImg(img);
                        AniPlayerWindow.repaint();
                    }
                }
            }
        });
        AniPlayerWindow.addComponentListener(new ComponentAdapter() {

            @Override
            public void componentResized(ComponentEvent e) {
                super.componentResized(e);
                BrowseWindow.setLocation(0, 0);
                BrowseWindow.setSize(AniPlayerWindow.getSize());
            }
        });
    }",0,0
"    public static void postMail(String hostAddr, String recipients[], String subject, String message, String from) throws MessagingException {
        boolean debug = false;
        Properties props = new Properties();
        props.put(""mail.host"", hostAddr);
        Session session = Session.getDefaultInstance(props, null);
        session.setDebug(debug);
        Message msg = new MimeMessage(session);
        InternetAddress addressFrom = new InternetAddress(from);
        msg.setFrom(addressFrom);
        InternetAddress[] addressTo = new InternetAddress[recipients.length];
        for (int i = 0; i < recipients.length; i++) {
            addressTo[i] = new InternetAddress(recipients[i]);
        }
        msg.setRecipients(Message.RecipientType.TO, addressTo);
        msg.setSubject(subject);
        msg.setContent(message, ""text/plain"");
        Transport.send(msg);
    }","    @SuppressWarnings(""rawtypes"")
    public Object remove(Object arrayOrCollection, Object item) {
        if (arrayOrCollection == null) {
            throw new NlsIllegalArgumentException(null);
        }
        Class<?> type = arrayOrCollection.getClass();
        if (type.isArray()) {
            int size = Array.getLength(arrayOrCollection);
            for (int index = 0; index < size; index++) {
                Object currentItem = Array.get(arrayOrCollection, index);
                if ((item == currentItem) || ((item != null) && (item.equals(currentItem)))) {
                    Object newArray = Array.newInstance(type.getComponentType(), size - 1);
                    System.arraycopy(arrayOrCollection, 0, newArray, 0, index);
                    System.arraycopy(arrayOrCollection, index + 1, newArray, index, size - index - 1);
                    return newArray;
                }
            }
            return null;
        } else if (Collection.class.isAssignableFrom(type)) {
            Collection collection = (Collection) arrayOrCollection;
            boolean removed = collection.remove(item);
            if (removed) {
                return arrayOrCollection;
            } else {
                return null;
            }
        } else {
            throw new NlsIllegalArgumentException(arrayOrCollection);
        }
    }",0,0
"    public static <T> T[] add(T[] anArray, T anElement, int anIndex) {
        T[] ret;
        if (anArray == null) {
            if (anIndex != 0) throw new ArrayIndexOutOfBoundsException(""Cannot set "" + anIndex + "" element in a null array"");
            ret = (T[]) Array.newInstance(anElement.getClass(), 1);
            ret[0] = anElement;
            return ret;
        }
        ret = (T[]) Array.newInstance(anArray.getClass().getComponentType(), anArray.length + 1);
        System.arraycopy(anArray, 0, ret, 0, anIndex);
        put(ret, anElement, anIndex);
        System.arraycopy(anArray, anIndex, ret, anIndex + 1, anArray.length - anIndex);
        return ret;
    }","    public ImageDisplay(ImageDisplayApplet applet, GraphicsConfiguration gc) {
        this.applet = applet;
        if (applet == null) {
            frame = new JFrame(gc);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(PREFERRED_WIDTH, PREFERRED_HEIGHT));
        Action openAction = new AbstractAction(""Open File"", new ImageIcon(getClass().getResource(""/open.gif""))) {

            public void actionPerformed(ActionEvent e) {
                if (filechooser == null) {
                    filechooser = new JFileChooser();
                    filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                }
                if (filechooser.showOpenDialog(ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {
                    open(filechooser.getSelectedFile());
                }
            }
        };
        JToolBar bar = new JToolBar();
        bar.add(new ToolBarButton(openAction));
        add(bar, BorderLayout.NORTH);
        if (applet == null) {
            frame.setTitle(""Image Display - Control Panel"");
            frame.getContentPane().add(this, BorderLayout.CENTER);
            frame.pack();
            frame.show();
        }
    }",0,0
"    public Matrix transpose() {
        Matrix X = new Matrix(n, m);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[j][i] = A[i][j];
            }
        }
        return X;
    }","    public static Map<String, List<int[]>> findUnboundVars(String sqlStmt) {
        Map<String, List<int[]>> notReplaced = new HashMap<String, List<int[]>>();
        String variable;
        Pattern pattern = null;
        String regex = SQL_VAR_BIND_REGEX;
        try {
            pattern = Pattern.compile(regex);
        } catch (PatternSyntaxException pex) {
            pex.printStackTrace();
        }
        Matcher matcher = pattern.matcher(sqlStmt);
        while (matcher.find()) {
            variable = matcher.group().substring(1);
            List<int[]> boundsList = notReplaced.get(variable);
            if (boundsList == null) {
                boundsList = new ArrayList<int[]>();
                notReplaced.put(variable, boundsList);
            }
            int[] bounds = { matcher.start(), matcher.end() };
            boundsList.add(bounds);
        }
        return notReplaced;
    }",0,0
"    public static void main(String[] args) throws Exception {
        Class.forName(""com.mysql.jdbc.Driver"").newInstance();
        Connection conn = DriverManager.getConnection(""jdbc:mysql://127.0.0.1:3306/mysql"", ""root"", ""admin"");
        new DataStorm().show(conn, ""SELECT * FROM help_topic h;"");
    }","    public ArrayList<ReferenceEntity> extractSpot(String regex, char rcoat) {
        spotCount = 0;
        Pattern p = Pattern.compile(regex);
        Matcher m = p.matcher(fullText);
        int openIdx = 0;
        int closeIdx;
        int fullTextLength = fullText.length();
        ArrayList<Integer> idList = new ArrayList<Integer>();
        suplList = new ArrayList<ReferenceEntity>();
        while (m.find(openIdx) && m.start() < fullTextLength) {
            closeIdx = fullText.indexOf(rcoat, m.start() + 1);
            if (closeIdx == -1 || m.start() == -1 || m.start() + 1 > closeIdx) break;
            String fieldCand = fullText.substring(m.start() + 1, closeIdx);
            if (!fieldCand.equals("""")) idList = checkField(fieldCand, m.start(), m.end(), fullText);
            String context = StringUtil.getContext(fullText, m.start(), m.end(), 15);
            if (idList.size() != 0) {
                spotCount += idList.size();
                for (Integer num : idList) {
                    boolean flag = false;
                    for (ReferenceEntity entity : rEntList) {
                        if (entity.getIdInRef().equals(String.valueOf(num))) {
                            entity.getContextList().add(context);
                            flag = true;
                            break;
                        }
                    }
                    if (!flag) addToSuplList(num, context);
                }
            } else System.err.println(""No referece for the field : "" + fieldCand);
            openIdx = closeIdx;
        }
        System.out.println(""\nspotCount="" + spotCount);
        return rEntList;
    }",0,0
"    public static byte[][] transpose(byte[][] m) {
        byte[][] n = new byte[m[0].length][m.length];
        for (int j = 0; j < m.length; j++) for (int i = 0; i < m[0].length; i++) n[i][j] = m[j][i];
        return n;
    }","    public static List<String> matchesToList(String pattern, String input) {
        Pattern p = Pattern.compile(pattern);
        Matcher matcher = p.matcher(input);
        List<String> results = new ArrayList<String>();
        while (matcher.find()) {
            results.add(input.substring(matcher.start(), matcher.end()));
        }
        return results;
    }",0,0
"    public CSolver(int maxR, int minR, int maxS, int minS, boolean u, ClusterManager cm, SolutionFactory f) {
        this.model = new CPModel();
        this.solver = null;
        this.nFound = 0;
        this.maxRosters = maxR;
        this.minRosters = minR;
        this.maxSize = maxS;
        this.minSize = minS;
        this.useAll = u;
        this.mgr = cm;
        this.nClusters = cm.getClusterCount();
        this.capacity = cm.getCapacities();
        this.singletons = cm.getSingletons();
        this.factory = f;
        this.result = Result.UNSOLVED;
        if (useAll) {
            int all = 0;
            for (int c : capacity) {
                all += c;
            }
            int m = (int) Math.round(Math.ceil(((double) all) / maxSize));
            minRosters = Math.max(minRosters, m);
        }
        assign = new IntegerVariable[nClusters][maxRosters + 1];
        transpose = new IntegerVariable[maxRosters + 1][nClusters];
        for (int c = 0; c < nClusters; c++) {
            int x = capacity[c];
            for (int r = 1; r <= maxRosters; r++) {
                assign[c][r] = Choco.makeIntVar(""assign_"" + c + ""_"" + r, 0, x);
                model.addVariable(assign[c][r]);
                transpose[r][c] = assign[c][r];
            }
            assign[c][0] = Choco.makeIntVar(""unassigned_"" + c, 0, (useAll) ? 0 : x);
            model.addVariable(assign[c][0]);
            transpose[0][c] = assign[c][0];
        }
        size = new IntegerVariable[maxRosters + 1];
        used = new IntegerVariable[maxRosters + 1];
        int[] temp = new int[maxSize - minSize + 2];
        temp[0] = 0;
        for (int i = 0; i <= maxSize - minSize; i++) {
            temp[i + 1] = minSize + i;
        }
        for (int r = 1; r <= minRosters; r++) {
            size[r] = Choco.makeIntVar(""size_"" + r, minSize, maxSize);
            used[r] = Choco.makeIntVar(""used_"" + r, 1, 1);
        }
        for (int r = minRosters + 1; r <= maxRosters; r++) {
            size[r] = Choco.makeIntVar(""size_"" + r, temp);
            used[r] = Choco.makeIntVar(""used_"" + r, 0, 1);
        }
        int h = (useAll) ? 1 : 0;
        used[0] = Choco.makeIntVar(""used_0"", 0, 0);
        assignTo = new IntegerVariable[nClusters];
        for (int i : singletons) {
            assignTo[i] = Choco.makeIntVar(""assign_"" + i + ""_to"", h, maxRosters);
        }
        nUsed = Choco.makeIntVar(""nRosters"", minRosters, maxRosters);
        model.addVariable(nUsed);
        for (int c = 0; c < nClusters; c++) {
            model.addConstraint(Choco.eq(Choco.sum(assign[c]), capacity[c]));
        }
        for (int r = 1; r <= maxRosters; r++) {
            model.addConstraint(Choco.eq(Choco.sum(transpose[r]), size[r]));
        }
        for (int r = 1; r <= maxRosters; r++) {
            model.addConstraint(Choco.reifiedIntConstraint(used[r], Choco.gt(size[r], 0)));
        }
        model.addConstraint(Choco.eq(Choco.sum(used), nUsed));
        for (int i : singletons) {
            model.addConstraint(Choco.domainConstraint(assignTo[i], assign[i]));
        }
        Set<HashSet<Integer>> cliques = mgr.getCliques();
        for (Set<Integer> c : cliques) {
            if (c.size() < 2) {
                continue;
            }
            Integer[] clist = c.toArray(new Integer[1]);
            for (int i = 1; i < clist.length; i++) {
                model.addConstraint(Choco.eq(assignTo[clist[0]], assignTo[clist[i]]));
            }
        }
        Map<Integer, ArrayList<Integer>> incompatible = mgr.getIncompatible();
        if (incompatible != null) {
            for (int i0 : incompatible.keySet()) {
                for (int i1 : incompatible.get(i0)) {
                    if (i0 < i1) {
                        model.addConstraint(Choco.or(Choco.eq(assignTo[i0], 0), Choco.neq(assignTo[i0], assignTo[i1])));
                    }
                }
            }
        }
        for (int r = 1; r < maxRosters; r++) {
            model.addConstraint(Choco.lexeq(transpose[r + 1], transpose[r]));
        }
        for (int r = minRosters; r < maxRosters; r++) {
            model.addConstraint(Choco.leq(used[r + 1], used[r]));
        }
    }","    @SuppressWarnings(""unchecked"")
    public static <T> T[] add(T[] array, T element) {
        final T[] result;
        if (array != null) {
            result = Arrays.createArray((Class<? extends T>) array.getClass().getComponentType(), array.length + 1);
            System.arraycopy(array, 0, result, 0, array.length);
        } else {
            Validations.isTrue(element != null, ""Both array and element are null"");
            assert element != null;
            result = Arrays.createArray((Class<? extends T>) element.getClass(), 1);
        }
        result[result.length - 1] = element;
        return result;
    }",0,0
