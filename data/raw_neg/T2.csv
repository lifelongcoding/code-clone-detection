FUNCTION_ONE,FUNCTION_TWO,LABEL
"    public static LImage[][] reversalXandY(final LImage[][] array) {
        int col = array[0].length;
        int row = array.length;
        LImage[][] result = new LImage[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","    public void test(TestHarness harness) {
        harness.checkPoint(""TestOfMD4"");
        try {
            Security.addProvider(new JarsyncProvider());
            algorithm = MessageDigest.getInstance(""BrokenMD4"", ""JARSYNC"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.provider"");
            throw new Error(x);
        }
        try {
            for (int i = 0; i < 64; i++) algorithm.update((byte) 'a');
            byte[] md = algorithm.digest();
            String exp = ""755cd64425f260e356f5303ee82a2d5f"";
            harness.check(exp.equals(Util.toHexString(md)), ""testSixtyFourA"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.provider"");
        }
        try {
            harness.verbose(""NOTE: This test may take a while."");
            for (int i = 0; i < 536870913; i++) algorithm.update((byte) 'a');
            byte[] md = algorithm.digest();
            String exp = ""b6cea9f528a85963f7529a9e3a2153db"";
            harness.check(exp.equals(Util.toHexString(md)), ""test536870913A"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.provider"");
        }
        try {
            byte[] md = algorithm.digest(""a"".getBytes());
            String exp = ""bde52cb31de33e46245e05fbdbd6fb24"";
            harness.check(exp.equals(Util.toHexString(md)), ""testA"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testA"");
        }
        try {
            byte[] md = algorithm.digest(""abc"".getBytes());
            String exp = ""a448017aaf21d8525fc10ae87aa6729d"";
            harness.check(exp.equals(Util.toHexString(md)), ""testABC"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testABC"");
        }
        try {
            byte[] md = algorithm.digest(""message digest"".getBytes());
            String exp = ""d9130a8164549fe818874806e1c7014b"";
            harness.check(exp.equals(Util.toHexString(md)), ""testMessageDigest"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testMessageDigest"");
        }
        try {
            byte[] md = algorithm.digest(""abcdefghijklmnopqrstuvwxyz"".getBytes());
            String exp = ""d79e1c308aa5bbcdeea8ed63df412da9"";
            harness.check(exp.equals(Util.toHexString(md)), ""testAlphabet"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testAlphabet"");
        }
        try {
            byte[] md = algorithm.digest(""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"".getBytes());
            String exp = ""043f8582f241db351ce627e153e7f0e4"";
            harness.check(exp.equals(Util.toHexString(md)), ""testAsciiSubset"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testAsciiSubset"");
        }
        try {
            byte[] md = algorithm.digest(""12345678901234567890123456789012345678901234567890123456789012345678901234567890"".getBytes());
            String exp = ""e33b4ddc9c38f2199c3e7b164fcc0536"";
            harness.check(exp.equals(Util.toHexString(md)), ""testEightyNumerics"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testEightyNumerics"");
        }
        try {
            algorithm.update(""a"".getBytes(), 0, 1);
            clone = (MessageDigest) algorithm.clone();
            byte[] md = algorithm.digest();
            String exp = ""bde52cb31de33e46245e05fbdbd6fb24"";
            harness.check(exp.equals(Util.toHexString(md)), ""testCloning #1"");
            clone.update(""bc"".getBytes(), 0, 2);
            md = clone.digest();
            exp = ""a448017aaf21d8525fc10ae87aa6729d"";
            harness.check(exp.equals(Util.toHexString(md)), ""testCloning #2"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testCloning"");
        }
    }",0
"    private static String simpleCompute(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""utf-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static void add100RowsToSourceDB(int block) {
        Scanner source = null;
        Connection connection = null;
        try {
            try {
                Class.forName(""sun.jdbc.odbc.JdbcOdbcDriver"");
                String dbUrl = ""jdbc:odbc:conn"";
                connection = DriverManager.getConnection(dbUrl);
                source = new Scanner(new File(""D:/Priyanka/My/Data/SourceData.csv""));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            int counter = 0;
            source.nextLine();
            int cursor = block * 100;
            while (cursor != 0) {
                cursor--;
                source.nextLine();
            }
            while (source.hasNextLine() && counter < 100) {
                Scanner ls = new Scanner(source.nextLine());
                ls.useDelimiter("","");
                String query = ""INSERT INTO [CompSource].[dbo].[Reading]([hours],[lread],[lwrite],[scall],[sread],[swrite],[fork],[execCalls],[rchar],[wchar],[readingNumber]) VALUES "";
                query += ""( '"" + ls.next() + ""', "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + +ls.nextInt() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pks + "")"";
                String query2 = ""INSERT INTO [CompSource].[dbo].[PageReading]([pgout],[ppgout],[pgfree],[pgscan],[atch],[pgin],[readingNumber],[pageReadingNumber]) VALUES"";
                query2 += ""( "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pks + "", "" + spks + "")"";
                pks++;
                spks++;
                Statement statement = ((Connection) connection).createStatement();
                try {
                    statement.executeQuery(query);
                } catch (SQLException e) {
                }
                try {
                    Statement statement2 = ((Connection) connection).createStatement();
                    statement2.executeQuery(query2);
                } catch (SQLException e) {
                }
                counter++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0
"    public void sendMail(String smtpHost, String username, String password, String senderAddress, String recipientsAddress, String subject, String text) {
        MailAuthenticator auth = new MailAuthenticator(username, password);
        Properties properties = new Properties();
        properties.put(""mail.smtp.host"", smtpHost);
        properties.put(""mail.smtp.auth"", ""true"");
        Session session = Session.getDefaultInstance(properties, auth);
        try {
            Message msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(senderAddress));
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientsAddress, false));
            msg.setSubject(subject);
            msg.setText(text);
            msg.setHeader(""Test"", ""Test"");
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static String getMD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private boolean deleteLocalDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteLocalDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }","    private void colorizeEdit(StyledText edit) {
        String findResult = edit.getText();
        final Color COLOR_BLUE = dialog.getDisplay().getSystemColor(SWT.COLOR_BLUE);
        int start = 0;
        int index = findResult.indexOf(""\n"");
        while (index != -1) {
            String subString = findResult.substring(start, index);
            if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.underline = true;
                ((StyledText) editResult).setStyleRange(style);
            } else {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.foreground = COLOR_BLUE;
                ((StyledText) editResult).setStyleRange(style);
            }
            start = index + 1;
            index = findResult.indexOf(""\n"", index + 1);
        }
        String subString = findResult.substring(start).replace(""\n"", """");
        if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.underline = true;
            ((StyledText) editResult).setStyleRange(style);
        } else {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.foreground = COLOR_BLUE;
            ((StyledText) editResult).setStyleRange(style);
        }
        if (!WorkspaceSaveContainerGlobal.findCurrent.equals("""")) {
            final Color COLOR_RED = dialog.getDisplay().getSystemColor(SWT.COLOR_RED);
            if (WorkspaceSaveContainerGlobal.regularExpression) {
                Pattern pattern = null;
                try {
                    if (WorkspaceSaveContainerGlobal.caseSensitive) pattern = Pattern.compile(WorkspaceSaveContainerGlobal.findCurrent); else pattern = Pattern.compile(WorkspaceSaveContainerGlobal.findCurrent, Pattern.CASE_INSENSITIVE);
                } catch (PatternSyntaxException e) {
                    return;
                }
                String[] findResultList = findResult.split(""\n"");
                int findResultListCount = findResultList.length;
                int findResultListIndex;
                int offset = 0;
                for (findResultListIndex = 0; findResultListIndex < findResultListCount; findResultListIndex++) {
                    Matcher matcher = pattern.matcher(findResultList[findResultListIndex]);
                    while (matcher.find()) {
                        int startIndex = matcher.start();
                        int endIndex = matcher.end();
                        StyleRange style = new StyleRange();
                        style.start = startIndex + offset;
                        style.length = endIndex - startIndex;
                        style.fontStyle = SWT.BOLD;
                        style.foreground = COLOR_RED;
                        ((StyledText) editResult).setStyleRange(style);
                    }
                    offset += findResultList[findResultListIndex].length() + 1;
                }
            } else {
                String findCurrentLowerCase = WorkspaceSaveContainerGlobal.findCurrent.toLowerCase();
                String findResultLowerCase = findResult.toLowerCase();
                if (WorkspaceSaveContainerGlobal.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainerGlobal.findCurrent); else index = findResultLowerCase.indexOf(findCurrentLowerCase);
                while (index != -1) {
                    StyleRange style = new StyleRange();
                    style.start = index;
                    style.length = WorkspaceSaveContainerGlobal.findCurrent.length();
                    style.fontStyle = SWT.BOLD;
                    style.foreground = COLOR_RED;
                    ((StyledText) editResult).setStyleRange(style);
                    if (WorkspaceSaveContainerGlobal.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainerGlobal.findCurrent, index + 1); else index = findResultLowerCase.indexOf(findCurrentLowerCase, index + 1);
                }
            }
        }
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(MasteryCards.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
            }
        }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public RealSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static double[][] transpose(double[][] a) {
        int rows = a.length;
        int cols = a[0].length;
        double[][] res = new double[cols][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                res[j][i] = a[i][j];
            }
        }
        return res;
    }",0
"    public RealSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }","    public static String replaceTokens(String text, Map<String, String> values) {
        Pattern pattern = Pattern.compile(""\\$\\{(.+?)\\}"");
        Matcher matcher = pattern.matcher(text);
        StringBuilder builder = new StringBuilder();
        int i = 0;
        while (matcher.find()) {
            String replacement = values.get(matcher.group(1));
            builder.append(text.substring(i, matcher.start()));
            if (replacement == null) builder.append(matcher.group(0)); else builder.append(replacement);
            i = matcher.end();
        }
        builder.append(text.substring(i, text.length()));
        return builder.toString();
    }",0
"    public static void copyFiles(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }","    static void addFile(String entryName, String fileName, ZipOutputStream zout) throws IOException {
        ZipEntry mf = new ZipEntry(entryName);
        File mfm = new File(fileName);
        mf.setSize(mfm.length());
        mf.setTime(mfm.lastModified());
        zout.putNextEntry(mf);
        zout.write(IOUtils.load(mfm));
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }",0
"    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }","    private void getGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }",0
"    public static void main(String[] args) {
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapterX/tooltip2.pdf""));
            document.open();
            writer.setPageEvent(new TooltipExample2());
            Paragraph p = new Paragraph(""Hello World "");
            Chunk c = new Chunk(""tooltip"");
            c.setGenericTag(""This is my tooltip."");
            p.add(c);
            document.add(p);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private static int binarySearchAlbum(Vector<MusicOutputDesign> v, int low, int high) {
        if (high < low) {
            return -1;
        }
        int mid = (high + low) / 2;
        String s = v.elementAt(mid).getAlbum().replace(""\\"", ""/"");
        if (s.compareToIgnoreCase(artist) > 0) {
            return binarySearchAlbum(v, low, mid - 1);
        } else if (s.compareToIgnoreCase(artist) < 0) {
            return binarySearchAlbum(v, mid + 1, high);
        } else {
            return mid;
        }
    }","    public static BufferedReader getUserSolveStream(String name) throws IOException {
        BufferedReader in;
        try {
            URL url = new URL(""http://www.spoj.pl/status/"" + name.toLowerCase() + ""/signedlist/"");
            in = new BufferedReader(new InputStreamReader(url.openStream()));
        } catch (MalformedURLException e) {
            in = null;
            throw e;
        }
        return in;
    }",0
"    public static void copy(FileInputStream in, FileOutputStream out) throws IOException {
        FileChannel fcIn = in.getChannel();
        FileChannel fcOut = out.getChannel();
        fcIn.transferTo(0, fcIn.size(), fcOut);
    }","    public static void main(String[] args) {
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapterX/tooltip2.pdf""));
            document.open();
            writer.setPageEvent(new TooltipExample2());
            Paragraph p = new Paragraph(""Hello World "");
            Chunk c = new Chunk(""tooltip"");
            c.setGenericTag(""This is my tooltip."");
            p.add(c);
            document.add(p);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0
"    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                fileBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"    public static PZKSRenderer createRenderer(PZKSGraph graph) {
        PZKSRenderer renderer = null;
        String className = System.getProperty(""renderer"");
        Class<?> clazz = null;
        try {
            clazz = Class.forName(className);
            Constructor<?> constructor = clazz.getConstructor(PZKSGraph.class);
            renderer = (PZKSRenderer) constructor.newInstance(graph);
        } catch (Exception e) {
            System.out.println(""Error during creating renderer "" + className + "". Default renderer will be used"");
            System.out.println(e.getMessage());
            renderer = new PZKSLamaoRenderer(graph);
        }
        return renderer;
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    @Override
    public void close() throws IOException {
        super.close();
        byte[] signatureData = toByteArray();
        ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream);
        ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(this.originalZipFile));
        ZipEntry zipEntry;
        while (null != (zipEntry = zipInputStream.getNextEntry())) {
            if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) {
                ZipEntry newZipEntry = new ZipEntry(zipEntry.getName());
                zipOutputStream.putNextEntry(newZipEntry);
                LOG.debug(""copying "" + zipEntry.getName());
                IOUtils.copy(zipInputStream, zipOutputStream);
            }
        }
        zipInputStream.close();
        zipEntry = new ZipEntry(ASiCUtil.SIGNATURE_FILE);
        LOG.debug(""writing "" + zipEntry.getName());
        zipOutputStream.putNextEntry(zipEntry);
        IOUtils.write(signatureData, zipOutputStream);
        zipOutputStream.close();
    }","    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }",0
"    protected static void saveRom(E4Device device) throws IOException {
        File file = new File(device.remote.getDeviceLocalDir(), LAST_ROM_SESSION_FILENAME + ""."" + SESSION_EXT);
        Object[] rom = device.sampleDB.getRomSnapshot();
        ZipOutputStream zos = null;
        ObjectOutputStream oos = null;
        zos = new ZipOutputStream(new FileOutputStream(file));
        zos.setMethod(ZipOutputStream.DEFLATED);
        zos.setLevel(Deflater.BEST_SPEED);
        zos.putNextEntry(new ZipEntry(FLASH_SESSION_CONTENT_ENTRY));
        oos = new ObjectOutputStream(zos);
        oos.writeObject(rom);
        oos.close();
    }","    public ThreadChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            ThreadInfo tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public boolean ponerColorxRonda(int idJugadorDiv, int idRonda, int dato) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET color = "" + dato + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String SHA512(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-512"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public void sendMail(String smtpHost, String username, String password, String senderAddress, String recipientsAddress, String subject, String text) {
        EMailAuthenticator auth = new EMailAuthenticator(username, password);
        Properties properties = new Properties();
        properties.put(""mail.smtp.host"", smtpHost);
        properties.put(""mail.smtp.auth"", ""true"");
        Session session = Session.getDefaultInstance(properties, auth);
        try {
            Message msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(senderAddress));
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientsAddress, false));
            msg.setSubject(subject);
            msg.setText(text);
            msg.setHeader(""Test"", ""Test"");
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public void imdb_search(String input) throws URISyntaxException {
        try {
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
            }
            URI uri;
            uri = new URI(""http://www.imdb.com/find?s=all&q="" + input.replace(' ', '+') + ""&x=0&y=0"");
            desktop.browse(uri);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }",0
"    public void youtube_search(String input) throws URISyntaxException {
        try {
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
            }
            URI uri;
            uri = new URI(""http://www.youtube.com/results?search_query="" + input.replace(' ', '+') + ""&search_type=&aq=f"");
            desktop.browse(uri);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                fileBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"    public static void copy_file(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
            System.out.print(""Overwrite existing file "" + toFile.getName() + ""? (Y/N): "");
            System.out.flush();
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            String response = in.readLine();
            if (!response.equals(""Y"") && !response.equals(""y"")) throw new IOException(""FileCopy: "" + ""existing file was not overwritten."");
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }","    public static double[][] transp(double[][] m1) {
        int m = m1.length;
        int n = m1[0].length;
        double[][] ret = new double[n][m];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ret[j][i] = m1[i][j];
            }
        }
        return ret;
    }",0
"    public static String md5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""utf-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static void copyFiles(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public boolean crear() {
        int result = 0;
        String sql = ""insert into jugadorxdivxronda"" + ""(jugadorxDivision_idJugadorxDivision, ronda_numeroRonda, resultado, idPareoRival, color, flotante, puntajeRonda, idPareo) "" + ""values (?, ?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(unjxdxr);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                webBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static void main(String[] args) {
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapterX/tooltip2.pdf""));
            document.open();
            writer.setPageEvent(new TooltipExample2());
            Paragraph p = new Paragraph(""Hello World "");
            Chunk c = new Chunk(""tooltip"");
            c.setGenericTag(""This is my tooltip."");
            p.add(c);
            document.add(p);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0
"    public synchronized String encrypt(String plaintext) throws PasswordException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new PasswordException(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new PasswordException(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new Base64Encoder()).encode(raw);
        return hash;
    }","    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                shoutcastPlayer.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public static String hashStringMD5(String string) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(string.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String shaEncrypt(final String txt) {
        String enTxt = txt;
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""Error:"", e);
        }
        if (null != md) {
            byte[] shahash = new byte[32];
            try {
                md.update(txt.getBytes(""UTF-8""), 0, txt.length());
            } catch (UnsupportedEncodingException e) {
                logger.error(""Error:"", e);
            }
            shahash = md.digest();
            StringBuffer md5StrBuff = new StringBuffer();
            for (int i = 0; i < shahash.length; i++) {
                if (Integer.toHexString(0xFF & shahash[i]).length() == 1) {
                    md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & shahash[i]));
                } else {
                    md5StrBuff.append(Integer.toHexString(0xFF & shahash[i]));
                }
            }
            enTxt = md5StrBuff.toString();
        }
        return enTxt;
    }",0
"    private static boolean loadClasses() {
        switch(jvm) {
            case MRJ_2_0:
                try {
                    Class aeTargetClass = Class.forName(""com.apple.MacOS.AETarget"");
                    Class osUtilsClass = Class.forName(""com.apple.MacOS.OSUtils"");
                    Class appleEventClass = Class.forName(""com.apple.MacOS.AppleEvent"");
                    Class aeClass = Class.forName(""com.apple.MacOS.ae"");
                    aeDescClass = Class.forName(""com.apple.MacOS.AEDesc"");
                    aeTargetConstructor = aeTargetClass.getDeclaredConstructor(new Class[] { int.class });
                    appleEventConstructor = appleEventClass.getDeclaredConstructor(new Class[] { int.class, int.class, aeTargetClass, int.class, int.class });
                    aeDescConstructor = aeDescClass.getDeclaredConstructor(new Class[] { String.class });
                    makeOSType = osUtilsClass.getDeclaredMethod(""makeOSType"", new Class[] { String.class });
                    putParameter = appleEventClass.getDeclaredMethod(""putParameter"", new Class[] { int.class, aeDescClass });
                    sendNoReply = appleEventClass.getDeclaredMethod(""sendNoReply"", new Class[] {});
                    Field keyDirectObjectField = aeClass.getDeclaredField(""keyDirectObject"");
                    keyDirectObject = (Integer) keyDirectObjectField.get(null);
                    Field autoGenerateReturnIDField = appleEventClass.getDeclaredField(""kAutoGenerateReturnID"");
                    kAutoGenerateReturnID = (Integer) autoGenerateReturnIDField.get(null);
                    Field anyTransactionIDField = appleEventClass.getDeclaredField(""kAnyTransactionID"");
                    kAnyTransactionID = (Integer) anyTransactionIDField.get(null);
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_2_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    mrjOSTypeClass = Class.forName(""com.apple.mrj.MRJOSType"");
                    Field systemFolderField = mrjFileUtilsClass.getDeclaredField(""kSystemFolderType"");
                    kSystemFolderType = systemFolderField.get(null);
                    findFolder = mrjFileUtilsClass.getDeclaredMethod(""findFolder"", new Class[] { mrjOSTypeClass });
                    getFileCreator = mrjFileUtilsClass.getDeclaredMethod(""getFileCreator"", new Class[] { File.class });
                    getFileType = mrjFileUtilsClass.getDeclaredMethod(""getFileType"", new Class[] { File.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (SecurityException se) {
                    errorMessage = se.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_0:
                try {
                    Class linker = Class.forName(""com.apple.mrj.jdirect.Linker"");
                    Constructor constructor = linker.getConstructor(new Class[] { Class.class });
                    linkage = constructor.newInstance(new Object[] { BrowserLauncher.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (InvocationTargetException ite) {
                    errorMessage = ite.getMessage();
                    return false;
                } catch (InstantiationException ie) {
                    errorMessage = ie.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    openURL = mrjFileUtilsClass.getDeclaredMethod(""openURL"", new Class[] { String.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                }
                break;
            default:
                break;
        }
        return true;
    }","    public static void copyFiles(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }",0
"    public void testReaderWriterUC2() throws Exception {
        String inFile = ""test_data/mri.png"";
        String outFile = ""test_output/mri__smooth_testReaderWriter.png"";
        itkImageFileReaderUC2_Pointer reader = itkImageFileReaderUC2.itkImageFileReaderUC2_New();
        itkImageFileWriterUC2_Pointer writer = itkImageFileWriterUC2.itkImageFileWriterUC2_New();
        reader.SetFileName(inFile);
        writer.SetFileName(outFile);
        writer.SetInput(reader.GetOutput());
        writer.Update();
    }","    public static Object[] addObjectToArray(Object[] array, Object obj) {
        Class<?> compType = Object.class;
        if (array != null) {
            compType = array.getClass().getComponentType();
        } else if (obj != null) {
            compType = obj.getClass();
        }
        int newArrLength = (array != null ? array.length + 1 : 1);
        Object[] newArr = (Object[]) Array.newInstance(compType, newArrLength);
        if (array != null) {
            System.arraycopy(array, 0, newArr, 0, array.length);
        }
        newArr[newArr.length - 1] = obj;
        return newArr;
    }",0
"    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Bill bill = (Bill) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_BILL""));
            pst.setInt(1, bill.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }","    private static final void makeWF_BasicJavaWriterFormat_jwf(Hashtable pWriterFormats) {
        pWriterFormats.put(""BasicJavaWriterFormat.jwf"", ""!<header>\n\n\n\n$<{java.CodeWriter.package>package $<java.CodeWriter.package>;$<}java.CodeWriter.package>\n\n\n\nimport java.io.*;\nimport java.util.*;\n\n\n\n\n!<{import>// section:import\n!<import>!<}import>\n\n\n\npublic class $<main.CodeWriter> \n$<{java.CodeWriter.extends>  extends $<java.CodeWriter.extends> $<}java.CodeWriter.extends> \n$<{java.CodeWriter.implements>  implements $<java.CodeWriter.implements> $<}java.CodeWriter.implements>\n{\n\n  /* Constants << */\n \n  // Command line arguments\n  public static final String WRITER__ARGUMENT_CONTROL_PREFIX = \""$<main.CodeWriter.argument.ControlPrefix>\"";\n  public static final String WRITER__ARGUMENT_OutputFolder   = \""$<main.CodeWriter.argument.name.OutputFolder>\"";\n  public static final String WRITER__ARGUMENT_MetaPropFile   = \""$<main.CodeWriter.argument.name.MetaPropFile>$<main.CodeWriter.argument.name.BuildPropFile>\"";\n  public static final String WRITER__ARGUMENT_BackupFolder   = \""$<main.CodeWriter.argument.name.BackupFolder>\"";\n  public static final String WRITER__ARGUMENT_NoBackup       = \""$<main.CodeWriter.argument.name.NoBackup>\"";\n\n  // User Interface text message parts\n  public static final String WRITER__UITEXT_Method                     = \""method \"";\n  public static final String WRITER__UITEXT_Main                       = \""main \"";\n  public static final String WRITER__UITEXT_ExceptionIn                = \""Exception in \"";\n  public static final String WRITER__UITEXT_ColonNewLine               = \"":\\n\"";\n  public static final String WRITER__UITEXT_NewLine                    = \""\\n\"";\n  public static final String WRITER__UITEXT_Section                    = \""section \"";\n  public static final String WRITER__UITEXT_SavedFile                  = \""Saved file:       \"";\n  public static final String WRITER__UITEXT_UnableToSaveFile           = \""Unable to save file: \"";\n  public static final String WRITER__UITEXT_UnableToBackupFile         = \""Unable to backup file: \"";\n  public static final String WRITER__UITEXT_ToBackupFolder             = \"" to backup folder: \"";\n  public static final String WRITER__UITEXT_BackupFolderColon          = \""Backup folder: \"";\n  public static final String WRITER__UITEXT_BackupFolderExistFailure   = \"" does not exist and cannot be created.\"";\n  public static final String WRITER__UITEXT_BackupFolderNotAFolder     = \"" is not a folder.\"";\n  public static final String WRITER__UITEXT_BackupFolderNotWritable    = \"" is not writable.\"";\n  public static final String WRITER__UITEXT_CodeWriterState            = \""Code Writer State: \"";\n  public static final String WRITER__UITEXT_GetFileIndexEquals         = \""\\n_getFileIndex()    = \"";\n  public static final String WRITER__UITEXT_GetFullFileNameEquals      = \""\\n_getFullFileName() = \"";\n  public static final String WRITER__UITEXT_GetOutputFolderEquals      = \""\\n_getOutputFolder() = \"";\n  public static final String WRITER__UITEXT_ErrorHeader                = \""\\n\\n--- CodeWriter Error Description Start ---\\n\\n\"";\n  public static final String WRITER__UITEXT_ErrorFooter                = \""\\n--- CodeWriter Error Description End -----\\n\\n\"";\n  public static final String WRITER__UITEXT_UnableToLoadMetaProps      = \""Unable to load metadata from file: \"";\n  public static final String WRITER__UITEXT_UndefinedProperty          = \""Undefined property: \"";\n  public static final String WRITER__UITEXT_UnableToCreateOutputFolder = \""Unable to create output folder: \"";\n  public static final String WRITER__UITEXT_PlaceHolderException \n    = \""This placeholder Exception should never be thrown: there is an error in the WriterFormat.\"";\n\n  // String constants \n  public static final String WRITER__STRING_empty                    = \""\"";\n  public static final String WRITER__STRING_dot                      = \"".\"";\n  public static final String WRITER__STRING_separator                = File.separator;\n\n  public static final int WRITER__FILE_BUFFER_SIZE                   = 4096;  // initial size of StringBuffer\n\n  /* Constants >> */\n\n\n\n\n  /* Writer Variables << */\n\n  protected String[]     writer__iFileNameRoots    = new String[] {};      // generated file name roots\n  protected int          writer__iNumFiles         = 0;                    // number of generated files\n  \n  protected String       writer__iFileNamePrefix   = WRITER__STRING_empty; // failsafe default\n  protected String       writer__iFileNameSuffix   = WRITER__STRING_empty; // failsafe default\n\n  protected String       writer__iBackupPrefix     = WRITER__STRING_empty; // failsafe default\n  protected String       writer__iBackupSuffix     = WRITER__STRING_empty; // failsafe default\n\n  protected StringBuffer writer__iCurrentText      = new StringBuffer();   // current text\n  protected int          writer__iCurrentFileIndex = 0;                    // current file index\n\n  protected String[]     writer__iArgs             = new String[0];        // cmd line args\n  protected int          writer__iNumArgs          = 0;                    // number of cmd line args\n  protected String[]     writer__iUserArgs         = new String[0];        // user cmd line args\n  protected int          writer__iNumUserArgs      = 0;                    // number of user cmd line args\n\n  protected boolean      writer__iSave             = true;                 // save generated code to disk\n  protected boolean      writer__iBackup           = true;                 // make backups\n\n  protected String       writer__iOutputFolder     = WRITER__STRING_dot;   // written code is output to this folder\n  protected String       writer__iBackupFolder     = WRITER__STRING_dot;   // overwritten files are placed here\n  protected String       writer__iMetaPropFile     = null;                 // metadata properties file path\n\n  protected Properties   writer__iProperties       = null;                 // build properties\n  protected boolean      writer__iPropertiesInit   = false;                // true => lookup table initialiased\n\n  protected Object       writer__iContext          = null;                 // context object\n  protected Object       writer__iResult           = null;                 // result object\n\n  protected boolean      writer__iThrow            = false;                // throw Exceptions\n\n  /* Writer Variables >> */\n\n\n  !<{support>\n  // version 0.1 compatibility\n  // section:support\n  !<support>!<}support>\n\n\n\n  !<{declare>// section:declare\n  !<declare>!<}declare>\n\n\n\n\n  /** Execute. */\n  public static void main( String pArgs[] ) {\n    $<main.CodeWriter> cw = new $<main.CodeWriter>();\n    Object result = cw._generate( pArgs, false );\n    \n    int exitvalue = 0;\n    if( result instanceof Integer ) {\n      exitvalue = ((Integer)result).intValue();\n    }\n\n    System.exit( exitvalue );\n  }\n\n\n\n\n  /* Writer Services << */\n\n  /** Generate. */\n  public Object _generate( String[] pArgs ) {\n    return _generate( pArgs, false );\n  }\n\n\n  /** Generate. */\n  public Object _generate( String[] pArgs, boolean pThrow ) {\n     writer__iThrow = pThrow;\n\n    try {\n      writer__initialize();\n      writer__handleArgs( pArgs );\n      writer__write();    \n\n      Object result = _getResult();\n      if( null == result ) {\n        result = _getText();\n        _setResult( result );\n      }\n\n      return result;\n    } \n    catch( RuntimeException re ) { throw re; }\n    catch( Exception e ) {\n      writer__handleException( WRITER__UITEXT_ExceptionIn + WRITER__UITEXT_Method + WRITER__UITEXT_Main, e );\n      return new Integer(1);\n    }\n  }\n\n\n  /* Initialize. */\n  public void writer__initialize() {\n    writer__iCurrentFileIndex = 0;\n    writer__setDefaults();\n  }\n\n\n\n  /** Main file generation loop. Template script is placed here in the body section. */\n  public void writer__write() {\n    if( false ) { throw new RuntimeException( WRITER__UITEXT_PlaceHolderException ); }\n\n    // initialize\n    String writer__currentSection = \""init\"";\n\n    try {\n      if( false ) { throw new RuntimeException( WRITER__UITEXT_PlaceHolderException ); }\n\n      !<{init>// section:init\n      !<init>!<}init>\n\n\n      // write files loop\n      int      writer__numFiles = _getNumFiles();\n      int      writer__fileI    = 0;\n      writer__next_file: for( writer__fileI = 0; writer__fileI < writer__numFiles; writer__fileI = writer__fileI + 1 ) {\n\n        try {\n          if( false ) { throw new RuntimeException( WRITER__UITEXT_PlaceHolderException ); }\n\n\n          !<{prewrite>// section:prewrite\n          writer__currentSection = \""prewrite\"";\n          !<prewrite>!<}prewrite>\n\n\n          if( ! writer__startFile() ) { continue writer__next_file; }\n\n\n          !<{body>// section:body\n          writer__currentSection = \""body\"";\n          !<body>!<}body>\n\n\n          if( ! writer__endFile() ) { continue writer__next_file; }\n\n\n          !<{postwrite>// section:postwrite\n          writer__currentSection = \""postwrite\"";\n          !<postwrite>!<}postwrite>\n\n\n        } \n        catch( RuntimeException re ) { throw re; }\n        catch( Exception e ) {\n           writer__handleException( WRITER__UITEXT_ExceptionIn + WRITER__UITEXT_Section + writer__currentSection, e );\n        }\n\n        writer__nextFile();       \n      }\n \n\n      !<{cleanup>// section:cleanup\n      writer__currentSection = \""cleanup\"";\n      !<cleanup>!<}cleanup>\n\n    } \n    catch( RuntimeException re ) { throw re; }\n    catch( Exception e ) {\n      writer__handleException( WRITER__UITEXT_ExceptionIn + WRITER__UITEXT_Section + writer__currentSection, e );\n    }\n  }\n\n\n\n  /** Start writing a file. */\n  public boolean writer__startFile() {\n    writer__iCurrentText = new StringBuffer( WRITER__FILE_BUFFER_SIZE );\n    return true;\n  }\n\n\n\n  /** End writing a file. */\n  public boolean writer__endFile() {\n    boolean endOK = true;\n  \n    String filePath = \""output-file-path\"";\n\n    if( endOK ) {\n      String fileName = _getFullFileName();\n      filePath \n        = writer__iOutputFolder\n        + WRITER__STRING_separator\n        + fileName;\n\n      if( writer__iBackup ) {\n        try {\n          writer__backup( filePath, fileName, writer__iBackupFolder );\n        } \n        catch( RuntimeException re ) { throw re; }\n        catch( Exception e ) {\n          writer__handleException( WRITER__UITEXT_UnableToBackupFile \n                                   + filePath \n                                   + WRITER__UITEXT_ToBackupFolder\n                                   + writer__iBackupFolder\n                                   ,e );\n          endOK = false;\n        }\n      }\n    }\n\n    File outputFolder = null;\n    try {\n      outputFolder = new File( filePath ).getParentFile();\n      if( null != outputFolder && !outputFolder.exists() ) {\n        outputFolder.mkdirs();\n      }\n    }\n    catch( RuntimeException re ) { throw re; }\n    catch( Exception e ) {\n      writer__handleException( WRITER__UITEXT_UnableToCreateOutputFolder \n                               + outputFolder\n                               ,e );\n      endOK = false;\n    }\n\n\n    if( endOK && writer__iSave ) {\n      try {\n        _saveTextFile( filePath, writer__iCurrentText.toString() );\n        writer__userMessage( WRITER__UITEXT_SavedFile + filePath + WRITER__UITEXT_NewLine, false );\n      } \n      catch( RuntimeException re ) { throw re; }\n      catch( Exception e ) {\n        writer__handleException( WRITER__UITEXT_UnableToSaveFile + filePath, e );\n        endOK = false;\n      }\n    }\n\n    return endOK;\n  }\n\n\n\n  /** Move to next file. */\n  public void writer__nextFile() {\n    writer__iCurrentFileIndex = writer__iCurrentFileIndex + 1;\n  }\n\n\n\n  /** Handle command line arguments to CodeWriter. */\n  public void writer__handleArgs( String[] pArgs ) {\n\n    // set arg names\n    String argName_OutputFolder     = WRITER__ARGUMENT_CONTROL_PREFIX + WRITER__ARGUMENT_OutputFolder;\n    String argName_MetaPropFile     = WRITER__ARGUMENT_CONTROL_PREFIX + WRITER__ARGUMENT_MetaPropFile;\n    String argName_BackupFolder     = WRITER__ARGUMENT_CONTROL_PREFIX + WRITER__ARGUMENT_BackupFolder;\n    String argName_NoBackup         = WRITER__ARGUMENT_CONTROL_PREFIX + WRITER__ARGUMENT_NoBackup;\n\n    // parse\n    int numArgs = pArgs.length;\n    for(int argI = 0; argI < numArgs; argI = argI + 1 ) {\n      if( 0 < argName_OutputFolder.length() && pArgs[argI].startsWith( argName_OutputFolder ) ) {\n        _setOutputFolder( pArgs[ argI ].substring( argName_OutputFolder.length() ) );\n      }\n      else if( 0 < argName_MetaPropFile.length() && pArgs[argI].startsWith( argName_MetaPropFile ) ) {\n        _setMetaPropFile( pArgs[ argI ].substring( argName_MetaPropFile.length() ) );\n      }\n      else if( 0 < argName_BackupFolder.length() && pArgs[argI].startsWith( argName_BackupFolder ) ) {\n        _setBackupFolder( pArgs[ argI ].substring( argName_BackupFolder.length() ) );\n      }\n      else if( 0 < argName_NoBackup.length() && argName_NoBackup.equals( pArgs[ argI ] ) ) {\n        _backup( $<lang.FalseString> ); // NOTE: -B => don't make backups\n      }\n    }\n\n    writer__initArgs( pArgs.length, pArgs );\n  }\n\n\n\n  /** Set defaults from configuration property set. */\n  public void writer__setDefaults() {\n\n    $<{main.FileNameRoot>_setFileNameRoot( \""$<\\main.FileNameRoot>\"" );$<}main.FileNameRoot>\n    $<{main.FileNamePrefix>_setFileNamePrefix( \""$<\\main.FileNamePrefix>\"" );$<}main.FileNamePrefix>\n    $<{main.FileNameSuffix>_setFileNameSuffix( \""$<\\main.FileNameSuffix>\"" );$<}main.FileNameSufffix>\n\n    $<{main.OutputFolder>_setOutputFolder( \""$<\\main.OutputFolder>\"" );$<}main.OutputFolder>\n\n    $<{main.BackupFolder>_setBackupFolder( \""$<\\main.BackupFolder>\"" );$<}main.BackupFolder>\n    $<{main.BackupPrefix>_setBackupPrefix( \""$<\\main.BackupPrefix>\"" );$<}main.BackupPrefix>\n    $<{main.BackupSuffix>_setBackupSuffix( \""$<\\main.BackupSuffix>\"" );$<}main.BackupSufffix>\n    _backup( \""$<lang.TrueString>\"".equals( \""$<jostraca.MakeBackup>\"" ) );\n\n  }\n\n\n\n  /** Initialize command line arguments. */\n  public void writer__initArgs( int pNumArgs, String[] pArgs ) {\n    int      argI        = 0;\n    int      userArgI    = 0;\n\n    writer__iNumArgs     = pNumArgs;\n    writer__iArgs        = pArgs;\n    writer__iNumUserArgs = writer__iNumArgs;\n\n    for( argI = 0; argI < writer__iNumArgs; argI = argI + 1 ) {\n      if( writer__iArgs[argI].startsWith( WRITER__ARGUMENT_CONTROL_PREFIX ) ) {\n        writer__iNumUserArgs = writer__iNumUserArgs - 1;\n      }\n    }\n\n    writer__iUserArgs = new String[ writer__iNumUserArgs ];\n    for( argI = 0; argI < writer__iNumArgs; argI = argI + 1 ) {\n      if( !writer__iArgs[argI].startsWith( WRITER__ARGUMENT_CONTROL_PREFIX ) ) {\n        writer__iUserArgs[ userArgI ] = writer__iArgs[ argI ];\n        userArgI = userArgI + 1;\n      }\n    }\n  }\n\n\n\n  /** Print a user readable message. */\n  public void writer__userMessage( String pMessage, boolean pIsError ) {\n    (pIsError?System.err:System.out).print( pMessage );\n  }\n\n\n\n  /** Handle exceptions: print an explanation for user. */\n  public void writer__handleException( String pMessage, Exception pException ) {\n\n    StringBuffer userMsg = new StringBuffer();\n\n    userMsg.append( WRITER__UITEXT_ErrorHeader );\n\n    userMsg.append( writer__describeState() + pMessage + WRITER__UITEXT_ColonNewLine );\n\n    StringWriter stringWriter = new StringWriter();\n    pException.printStackTrace( new PrintWriter( stringWriter) );\n    userMsg.append( stringWriter.toString() );\n\n    userMsg.append( WRITER__UITEXT_ErrorFooter );\n\n    if( writer__iThrow ) {\n      throw new RuntimeException( userMsg.toString() );\n    }\n    else {\n      writer__userMessage( userMsg.toString(), true );\n    }\n  }\n\n\n\n  /** Provide a concise description of the state of the CodeWriter. */\n  public String writer__describeState() {\n    String currentState \n      = WRITER__UITEXT_CodeWriterState\n      + WRITER__UITEXT_GetFileIndexEquals    + _getFileIndex() \n      + WRITER__UITEXT_GetFullFileNameEquals + _getFullFileName()\n      + WRITER__UITEXT_GetOutputFolderEquals + _getOutputFolder()\n      + WRITER__UITEXT_NewLine\n      ; \n    return currentState;\n  }\n\n\n\n  /** Backup overwritten files, if they exist.\n   *  Backups have the format: [YYYYMMDDhhmmss][prefix][filename][suffix].\n   */ \n  public void writer__backup( String pFilePath, String pFileName, String pBackupFolder ) {\n\n    File backupFolder = new File( pBackupFolder );\n\n    // check backup folder ( create if necessary )\n    if( ! backupFolder.exists() ) {\n      if( ! backupFolder.mkdirs() ) {\n        throw new RuntimeException( WRITER__UITEXT_BackupFolderColon\n                                    + backupFolder\n                                    + WRITER__UITEXT_BackupFolderExistFailure );\n      }\n    }\n    if( ! backupFolder.isDirectory() ) {\n      throw new RuntimeException( WRITER__UITEXT_BackupFolderColon \n                                  + backupFolder\n                                  + WRITER__UITEXT_BackupFolderNotAFolder );\n    }\n    if( ! backupFolder.canWrite() ) {\n      throw new RuntimeException( WRITER__UITEXT_BackupFolderColon\n                                  + backupFolder\n                                  + WRITER__UITEXT_BackupFolderNotWritable );\n    }\n\n    // create backup file path\n    Calendar calendar = Calendar.getInstance();\n    String year_yyyy = _align( String.valueOf( calendar.get(Calendar.YEAR) ),         \""0\"", 4, 'r' );\n    String month_mm  = _align( String.valueOf( (1+calendar.get(Calendar.MONTH)) ),    \""0\"", 2, 'r' );\n    String day_dd    = _align( String.valueOf( calendar.get(Calendar.DAY_OF_MONTH) ), \""0\"", 2, 'r' );\n    String hour_hh   = _align( String.valueOf( calendar.get(Calendar.HOUR_OF_DAY) ),  \""0\"", 2, 'r' );\n    String minute_mm = _align( String.valueOf( calendar.get(Calendar.MINUTE) ),       \""0\"", 2, 'r' );\n    String second_ss = _align( String.valueOf( calendar.get(Calendar.SECOND) ),       \""0\"", 2, 'r' );\n    String dateTime       = year_yyyy+month_mm+day_dd+hour_hh+minute_mm+second_ss;\n    String backupFileName = dateTime + writer__iBackupPrefix + pFileName + writer__iBackupSuffix;\n    File   backupFilePath = new File( pBackupFolder, backupFileName );\n    \n    File   fullBackupFolder = backupFilePath.getParentFile();\n    if( null != fullBackupFolder && !fullBackupFolder.exists() ) {\n      if( ! fullBackupFolder.mkdirs() ) {\n        throw new RuntimeException( WRITER__UITEXT_BackupFolderColon\n                                    + fullBackupFolder\n                                    + WRITER__UITEXT_BackupFolderExistFailure );\n      }\n    }\n\n\n    // save backup file\n    File fileToBackup = new File( pFilePath );\n    if( fileToBackup.exists() ) {\n      String fileContents = _loadTextFile( pFilePath );\n      _saveTextFile( backupFilePath.getPath(), fileContents );\n    }\n  }\n\n\n\n  /** Load build properties. */\n  public void writer__initProperties() {\n\n    String metaPropFile = _getMetaPropFile();\n    if( null != metaPropFile ) {\n      writer__iProperties = new Properties();\n      \n      try {\n        FileInputStream fis = new FileInputStream( _getMetaPropFile() );\n        writer__iProperties.load( fis );\n        fis.close();\n      }\n      catch( RuntimeException re ) { throw re; }\n      catch( Exception e ) {\n        writer__handleException( WRITER__UITEXT_UnableToLoadMetaProps+_getMetaPropFile(), e );\n      }\n\n      writer__iPropertiesInit = true;\n    }\n  }\n\n  /* Writer Services >> */\n \n\n\n\n  /* Template Services (File Generation) << */\n\n  /** Set the prefix of the files to be generated. */\n  public void _setFileNamePrefix( String pPrefix ) {\n    if( null == pPrefix ) {\n      return; // ignore\n    }\n    writer__iFileNamePrefix = pPrefix;\n  }\n\n\n\n  /** Get prefix of files to be generated. */\n  public String _getFileNamePrefix() {\n    return writer__iFileNamePrefix;\n  }\n\n\n\n  /** Set the suffix of the files to be generated. */\n  public void _setFileNameSuffix( String pSuffix ) {\n    if( null == pSuffix ) {\n      return; // ignore\n    }\n    writer__iFileNameSuffix = pSuffix;\n  }\n\n\n\n  /** Get suffix of files to be generated. */\n  public String _getFileNameSuffix() {\n    return writer__iFileNameSuffix;\n  }\n\n\n\n  /** Set the full name of the file to be generated. \n   *  Prefix and Suffix are set to empty.\n   */\n  public void _setFullFileName( String pName ) {\n    _setFileNamePrefix( WRITER__STRING_empty );\n    _setFileNameRoot(   pName );\n    _setFileNameSuffix( WRITER__STRING_empty );\n  }\n\n\n\n  /** Get the full name of current file being generated. */\n  public String _getFullFileName() {\n    return _getFileNamePrefix() + _getFileNameRoot() + _getFileNameSuffix();\n  }\n\n\n\n  /** Set the names of the files to be generated. \n   *  Prefix and Suffix are set to empty.\n   */\n  public void _setFullFileNames( String[] pNames ) {\n    _setFileNamePrefix( WRITER__STRING_empty );\n    _setFileNameRoots(  pNames );\n    _setFileNameSuffix( WRITER__STRING_empty );\n  }\n\n\n\n  /** Get the full names of the files to be generated. */\n  public String[] _getFullFileNames() {\n\n    String[] fileNameRoots  = _getFileNameRoots();\n    int      numFiles       = fileNameRoots.length;\n    String[] fullFileNames  = new String[ numFiles ];\n    String   fileNamePrefix = _getFileNamePrefix();\n    String   fileNameSuffix = _getFileNameSuffix();\n\n    for( int fileI = 0; fileI < numFiles; fileI = fileI + 1 ) {\n      fullFileNames[ fileI ] = fileNamePrefix + fileNameRoots[ fileI ] + fileNameSuffix;\n    }\n\n    return fullFileNames;\n  }\n\n\n\n  /** Set the root of the name of the file to be generated. */\n  public void _setFileNameRoot( String pFileNameRoot ) {\n    if( null == pFileNameRoot ) {\n      return; // ignore\n    }\n    _setFileNameRoots( new String[] { pFileNameRoot } );\n  }\n\n\n\n  /** Get the root of the name of the current file being generated. */\n  public String _getFileNameRoot() {\n    if( 0 < writer__iFileNameRoots.length ) {\n      return writer__iFileNameRoots[ writer__iCurrentFileIndex ];\n    }\n    return WRITER__STRING_empty;\n  }\n\n\n\n  /** Set the roots of the names of the files to be generated. */\n  public void _setFileNameRoots( String[] pFileNameRoots ) {\n    if( null == pFileNameRoots ) {\n      return; // ignore\n    }\n\n    // copy\n    String[] roots = (String[]) pFileNameRoots.clone();\n\n    // normalize - replace nulls\n    int numRoots = roots.length;\n    for(int rootI = 0; rootI < numRoots; rootI = rootI + 1 ) {\n      if( null == roots[ rootI ] ) {\n        roots[ rootI ] = WRITER__STRING_empty;\n      }\n    }\n\n    // save roots\n    writer__iFileNameRoots = roots;\n    writer__iNumFiles      = numRoots;\n  }\n\n\n\n  /** Get roots of the names of files to be generated. */\n  public String[] _getFileNameRoots() {\n    return writer__iFileNameRoots;\n  }\n\n\n\n  /** Get index of file currently being generated. */\n  public int _getFileIndex() {\n    return writer__iCurrentFileIndex;\n  }\n\n\n\n  /** Get number of files to generate. */\n  public int _getNumFiles() {\n    return writer__iNumFiles;\n  }\n\n\n\n  /** Set output folder. */\n  public void _setOutputFolder( String pOutputFolder ) {\n    writer__iOutputFolder = pOutputFolder;\n  }\n\n\n\n  /** Get output folder. */\n  public String _getOutputFolder() {\n    return writer__iOutputFolder;\n  }\n\n\n\n  /** Set backup folder. */\n  public void _setBackupFolder( String pBackupFolder ) {\n    writer__iBackupFolder = pBackupFolder;\n  }\n\n\n\n  /** Get backup folder. */\n  public String _getBackupFolder() {\n    return writer__iBackupFolder;\n  }\n\n\n\n  /** Set the prefix of backup files. */\n  public void _setBackupPrefix( String pPrefix ) {\n    if( null == pPrefix ) {\n      return; // ignore\n    }\n    writer__iBackupPrefix = pPrefix;\n  }\n\n\n\n  /** Set the suffix of backup files. */\n  public void _setBackupSuffix( String pSuffix ) {\n    if( null == pSuffix ) {\n      return; // ignore\n    }\n    writer__iBackupSuffix = pSuffix;\n  }\n\n\n\n  /** Set to true if generated files are to be backed up to disk automatically. */\n  public void _backup( boolean pBackup ) {\n    writer__iBackup = pBackup;\n  }\n\n\n\n  /** Set to true if generated files are to be saved to disk automatically. */\n  public void _save( boolean pSave ) {\n    writer__iSave = pSave;\n  }\n\n\n\n  /** Save a text file. */\n  public void _saveTextFile( String pFilePath, String pContent ) {\n    try {\n      StringReader   sr = new StringReader( pContent );\n      BufferedReader br = new BufferedReader( sr );\n      FileWriter     fw = new FileWriter( pFilePath );\n      BufferedWriter bw = new BufferedWriter( fw );\n\n      String line;\n      while( null != (line = br.readLine()) ) {\n        bw.write( line );\n        bw.newLine();\n      }\n\n      bw.close();\n      br.close();\n    }\n    catch( RuntimeException re ) { throw re; }\n    catch( Exception e ) {\n      throw new RuntimeException( e.getMessage() );\n    }\n  }\n\n\n\n  /** Load a text file. */\n  public String _loadTextFile( String pFilePath ) {\n    try {\n      File       file       = new File( pFilePath );\n      FileReader in         = new FileReader( file );\n      int        size       = (int) file.length();\n      char[]     data       = new char[size];\n      int        charsRead  = 0;\n\n      while( charsRead < size ) {\n        charsRead += in.read( data, charsRead, size - charsRead );\n      }\n\n      return new String( data );\n    }\n    catch( RuntimeException re ) { throw re; }\n    catch( Exception e ) {\n      throw new RuntimeException( e.getMessage() );\n    }\n  }\n\n\n  /** Set build properties file. */\n  public void _setMetaPropFile( String pMetaPropFile ) {\n    writer__iMetaPropFile  = pMetaPropFile;\n    writer__iPropertiesInit = false;\n  }\n\n\n\n  /** Get build properties file. */\n  public String _getMetaPropFile() {\n    return writer__iMetaPropFile;\n  }\n\n\n  /* Template Services (File Generation) >> */\n\n\n\n\n  /* Template Services (Control) << */\n\n  /** Get the value of a compile-time property. */\n  public String _getProperty( String pName ) {\n    String result = WRITER__STRING_empty;\n\n    if( ! writer__iPropertiesInit ) {\n      writer__initProperties();\n    }\n\n    if( writer__iProperties.containsKey( pName ) ) {\n      result = writer__iProperties.getProperty( pName );\n    }\n    else {\n      throw new RuntimeException( WRITER__UITEXT_UndefinedProperty+pName );\n    }\n\n    return result;\n  }\n\n\n\n  /** Get first user arg. */\n  public String _getFirstUserArg() {\n    return _getUserArg(0);\n  }\n\n\n\n  /** Get second user arg. */\n  public String _getSecondUserArg() {\n    return _getUserArg(1);\n  }\n\n\n\n  /** Get third user arg. */\n  public String _getThirdUserArg() {\n    return _getUserArg(2);\n  }\n\n\n\n  /** Get nth (n=0,1,2,...) user arg (the nth arg with no WRITER__ARGUMENT_CONTROL_PREFIX). */\n  public String _getUserArg( int pOrdinal ) {\n    if( pOrdinal < _getNumUserArgs() ) {\n      String[] userargs =  _getUserArgs();\n      return userargs[ pOrdinal ];\n    }\n    else {\n      return WRITER__STRING_empty;\n    }\n  }\n\n\n\n  /** Get user command line arguments to CodeWriter. */\n  public String[] _getUserArgs() {\n    return writer__iUserArgs;\n  }\n\n\n\n  /** Get number of user command line arguments to CodeWriter. */\n  public int _getNumUserArgs() {\n    return writer__iNumUserArgs;\n  }\n\n\n\n  /** Get all command line arguments to CodeWriter. */\n  public String[] _getArgs() {\n    return writer__iArgs;\n  }\n\n\n\n  /** Get total number of command line arguments to CodeWriter. */\n  public int _getNumArgs() {\n    return writer__iNumArgs;\n  }\n\n\n  \n  /** Set a context object for the template to use. */\n  public void _setContext( Object pContext) {\n    writer__iContext = pContext;\n  }\n\n\n\n  /** Get the context object if set. NOTE: may return null. */\n  public Object _getContext() {\n    return writer__iContext;\n  }\n\n  /* Template Services (Control) >> */\n\n\n\n\n  /* Template Services (Text Production) << */\n\n  // inserts\n  // ...\n\n  public void _insert( String pText ) {\n    writer__iCurrentText.append( pText );\n  }\n\n  public void _insert( Object pObject ) {\n    writer__iCurrentText.append( String.valueOf(pObject) );\n  }\n\n  public void _insert( int pInt ) {\n    writer__iCurrentText.append( pInt );\n  }\n\n  public void _insert( long pLong ) {\n    writer__iCurrentText.append( pLong );\n  }\n\n  public void _insert( short pShort ) {\n    writer__iCurrentText.append( pShort );\n  }\n\n  public void _insert( byte pByte ) {\n    writer__iCurrentText.append( pByte );\n  }\n\n  public void _insert( double pDouble ) {\n    writer__iCurrentText.append( pDouble );\n  }\n\n  public void _insert( float pFloat ) {\n    writer__iCurrentText.append( pFloat );\n  }\n\n  public void _insert( char pChar ) {\n    writer__iCurrentText.append( pChar );\n  }\n\n  public void _insert( boolean pBoolean ) {\n    writer__iCurrentText.append( pBoolean );\n  }\n\n\n\n  /** Create a String containing specified number of spaces. */\n  public String _spaces( int pNumSpaces ) {\n    int numSpaces = pNumSpaces;\n    if( 0 > numSpaces ) { numSpaces *= -1; }\n    StringBuffer spaces = new StringBuffer( numSpaces );\n    for(int spaceI = 0; spaceI < numSpaces; spaceI = spaceI + 1 ) {\n      spaces.append(\"" \"");\n    }\n    return spaces.toString();\n  }\n\n\n\n  /** Left align String with spaces. */ \n  public String _left( String pText, int pColWidth ) {\n    return _align( pText, \"" \"", pColWidth, 'l' );\n  } \n\n\n\n  /** Right align String with spaces. */ \n  public String _right( String pText, int pColWidth ) {\n    return _align( pText, \"" \"", pColWidth, 'r' );\n  } \n\n\n\n  /** Center align String with spaces. */ \n  public String _center( String pText, int pColWidth ) {\n    return _align( pText, \"" \"", pColWidth, 'c' );\n  } \n\n\n\n  /** Align text within background text to specified column width. \n   *  Alignment can be 'l': left, 'c': center, 'r': right.\n   */\n  public String _align( String pText, String pBackText, int pColWidth, char pAlignment ) {\n    String result = pText;\n \n    if( null == pText ) { \n       result = WRITER__STRING_empty; \n    }\n    else if( null != pBackText ) {\n      try {\n        int textLen = pText.length();\n        if( pColWidth > textLen ) {\n          int    backTextLen     = pBackText.length();\n          int    remainWidth     = pColWidth - textLen;\n          int    backTextRepeats = remainWidth / backTextLen;\n          int    backTextRemain  = remainWidth % backTextLen;\n          String back            = WRITER__STRING_empty;\n          for( int backTextI = 0; backTextI < backTextRepeats; backTextI = backTextI + 1 ) {\n            back = back + pBackText;\n          }\n          back = back + pBackText.substring( 0, backTextRemain );\n \n          switch( pAlignment ) {\n          case 'l':\n            result = result + back;\n            break;\n          case 'c':\n            result = back.substring( 0, (back.length()/2) ) + result + back.substring( (back.length()/2) );\n            break;\n          case 'r':\n            result = back + result;\n            break;\n          }\n        }\n      } \n      catch( RuntimeException re ) { throw re; }\n      catch( Exception e ) {\n        result = pText;\n      }\n    }\n    return result;\n  }\n\n\n\n  /** Set the text of file currently being generated. */\n  public void _setText( String pText) {\n    writer__iCurrentText = new StringBuffer( pText );\n  }\n\n\n\n  /** Get the text of file currently being generated. */\n  public String _getText() {\n    return writer__iCurrentText.toString();\n  }\n\n\n  /** Set result object (optional). */\n  public void _setResult( Object pResult ) {\n    writer__iResult = pResult;\n  }\n\n\n\n  /** Get the result object (may be null). */\n  public Object _getResult() {\n    return writer__iResult;\n  }\n\n  /* Template Services (Text Production) >> */\n\n}\n\n\n!<footer>\n"");
    }",0
"    public static void add100RowsToSourceDB(int block) {
        Scanner source = null;
        Connection connection = null;
        try {
            try {
                Class.forName(""sun.jdbc.odbc.JdbcOdbcDriver"");
                String dbUrl = ""jdbc:odbc:conn"";
                connection = DriverManager.getConnection(dbUrl);
                source = new Scanner(new File(""D:/Priyanka/My/Data/SourceData.csv""));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            int counter = 0;
            source.nextLine();
            int cursor = block * 100;
            while (cursor != 0) {
                cursor--;
                source.nextLine();
            }
            while (source.hasNextLine() && counter < 100) {
                Scanner ls = new Scanner(source.nextLine());
                ls.useDelimiter("","");
                String query = ""INSERT INTO [CompSource].[dbo].[Reading]([hours],[lread],[lwrite],[scall],[sread],[swrite],[fork],[execCalls],[rchar],[wchar],[readingNumber]) VALUES "";
                query += ""( '"" + ls.next() + ""', "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + +ls.nextInt() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pks + "")"";
                String query2 = ""INSERT INTO [CompSource].[dbo].[PageReading]([pgout],[ppgout],[pgfree],[pgscan],[atch],[pgin],[readingNumber],[pageReadingNumber]) VALUES"";
                query2 += ""( "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pks + "", "" + spks + "")"";
                pks++;
                spks++;
                Statement statement = ((Connection) connection).createStatement();
                try {
                    statement.executeQuery(query);
                } catch (SQLException e) {
                }
                try {
                    Statement statement2 = ((Connection) connection).createStatement();
                    statement2.executeQuery(query2);
                } catch (SQLException e) {
                }
                counter++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private static List retrieveQuotes(Report report, Symbol symbol, String prefix, TradingDate startDate, TradingDate endDate) throws ImportExportException {
        List quotes = new ArrayList();
        String URLString = constructURL(symbol, prefix, startDate, endDate);
        EODQuoteFilter filter = new GoogleEODQuoteFilter(symbol);
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.getProxySettings();
        try {
            URL url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line = bufferedInput.readLine();
            while (line != null) {
                line = bufferedInput.readLine();
                if (line != null) {
                    try {
                        EODQuote quote = filter.toEODQuote(line);
                        quotes.add(quote);
                        verify(report, quote);
                    } catch (QuoteFormatException e) {
                        report.addError(Locale.getString(""GOOGLE_DISPLAY_URL"") + "":"" + symbol + "":"" + Locale.getString(""ERROR"") + "": "" + e.getMessage());
                    }
                }
            }
            bufferedInput.close();
        } catch (BindException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (ConnectException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (UnknownHostException e) {
            throw new ImportExportException(Locale.getString(""UNKNOWN_HOST_ERROR"", e.getMessage()));
        } catch (NoRouteToHostException e) {
            throw new ImportExportException(Locale.getString(""DESTINATION_UNREACHABLE_ERROR"", e.getMessage()));
        } catch (MalformedURLException e) {
            throw new ImportExportException(Locale.getString(""INVALID_PROXY_ERROR"", proxyPreferences.host, proxyPreferences.port));
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
            throw new ImportExportException(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
        }
        return quotes;
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                fileBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    @Override
    public KSA00 getEstimate() {
        int probe_count = getData().getModel().getProbes().size();
        int ch_length = getData().getModel().getChromosomeLength();
        int clone_length = getData().getModel().getCloneLength();
        int clone_count = getData().getSampleSize();
        int counter = 0;
        byte[][] scores = new byte[clone_count][];
        for (KSA00Data.Hybridization val : getData()) {
            scores[counter++] = val.getScore();
        }
        int[] probeOrder = ArrayUtil.createSequence(getData().getModel().getProbes().size(), false);
        int[][] joint = new int[probe_count][probe_count];
        for (int probeIndex1 = 0; probeIndex1 < probe_count; probeIndex1++) {
            for (int probeIndex2 = probeIndex1 + 1; probeIndex2 < probe_count; probeIndex2++) {
                for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
                    if ((scores[cloneIndex][probeIndex1] == 1) && (scores[cloneIndex][probeIndex2] == 1)) {
                        joint[probeIndex1][probeIndex2]++;
                    }
                }
                joint[probeIndex2][probeIndex1] = joint[probeIndex1][probeIndex2];
            }
        }
        int gap = ch_length - (probe_count * clone_length);
        double[] y = Initial_Ys(probeOrder, probe_count, clone_count, clone_length, gap, joint);
        return getData().getModel().create(Arrays.asList(ArrayUtils.toObject(y)));
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    private void findGTK(java.awt.event.ActionEvent evt) {
        final javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File theme = fc.getSelectedFile();
            gtkTheme = theme.toString();
            gtkField.setText(themePack);
        }
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public ThreadChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            ThreadInfo tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }",0
"    public IntSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static void copy(FileInputStream inputStream, FileOutputStream outputStream) throws IOException {
        FileChannel input = inputStream.getChannel();
        FileChannel output = outputStream.getChannel();
        input.transferTo(0, input.size(), output);
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                fileBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String toPWD(String pwd) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.reset();
            messageDigest.update(pwd.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""NoSuchAlgorithmException caught!"");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }",0
"    private static final void makeWF_JavaComponent_jwf(Hashtable pWriterFormats) {
        pWriterFormats.put(""JavaComponent.jwf"", ""!<header>\n\n\n\n$<{java.CodeWriter.package>package $<java.CodeWriter.package>;$<}java.CodeWriter.package>\n\n\n\nimport java.io.FileOutputStream;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.io.StringReader;\nimport java.io.BufferedReader;\nimport java.io.FileWriter;\nimport java.io.BufferedWriter;\n\nimport java.util.Vector;\nimport java.util.Hashtable;\nimport java.util.Calendar;\n\n\n\n!<{import>/* section:import << */\n//\n\n!<import>\n\n//\n/* section:import >> */!<}import>\n\n\n\npublic class $<main.CodeWriter> \n$<{java.CodeWriter.extends>  extends $<java.CodeWriter.extends> $<}java.CodeWriter.extends> \n$<{java.CodeWriter.implements>  implements $<java.CodeWriter.implements> $<}java.CodeWriter.implements>\n{\n\n  /* Constants << */\n \n  // User Interface text message parts\n  public static final String writer__UITEXT_Method                   = \""method \"";\n  public static final String writer__UITEXT_Main                     = \""main \"";\n  public static final String writer__UITEXT_ExceptionIn              = \""Exception in \"";\n  public static final String writer__UITEXT_ColonNewLine             = \"":\\n\"";\n  public static final String writer__UITEXT_NewLine                  = \""\\n\"";\n  public static final String writer__UITEXT_Section                  = \""section \"";\n  public static final String writer__UITEXT_SavedFile                = \""Saved file:       \"";\n  public static final String writer__UITEXT_UnableToSaveFile         = \""Unable to save file: \"";\n  public static final String writer__UITEXT_UnableToBackupFile       = \""Unable to backup file: \"";\n  public static final String writer__UITEXT_ToBackupFolder           = \"" to backup folder: \"";\n  public static final String writer__UITEXT_BackupFolderColon        = \""Backup folder: \"";\n  public static final String writer__UITEXT_BackupFolderExistFailure = \"" does not exist and cannot be created.\"";\n  public static final String writer__UITEXT_BackupFolderNotAFolder   = \"" is not a folder.\"";\n  public static final String writer__UITEXT_BackupFolderNotWritable  = \"" is not writable.\"";\n  public static final String writer__UITEXT_CodeWriterState          = \""Code Writer State: \"";\n  public static final String writer__UITEXT_GetFileIndexEquals       = \""\\n_getFileIndex()    = \"";\n  public static final String writer__UITEXT_GetFullFileNameEquals    = \""\\n_getFullFileName() = \"";\n  public static final String writer__UITEXT_GetOutputFolderEquals    = \""\\n_getOutputFolder() = \"";\n  public static final String writer__UITEXT_ErrorHeader              = \""\\n\\n--- CodeWriter Error Description Start ---\\n\\n\"";\n  public static final String writer__UITEXT_ErrorFooter              = \""\\n--- CodeWriter Error Description End -----\\n\\n\"";\n  public static final String writer__UITEXT_PlaceHolderException \n    = \""This placeholder Exception should never be thrown: there is an error in the WriterFormat.\"";\n\n  public static final int writer__FILE_BUFFER_SIZE  = 4096;                // initial size of StringBuffer\n\n  /* Constants >> */\n\n\n  /* Writer Variables << */\n\n  protected String[]     writer__iFileNameRoots     = new String[] {};     // generated file name roots\n  protected int          writer__iNumFiles          = 0;                   // number of generated files\n  \n  protected String       writer__iFileNamePrefix    = \""\"";                  // failsafe default\n  protected String       writer__iFileNameSuffix    = \""\"";                  // failsafe default\n\n  protected String       writer__iBackupPrefix      = \""\"";                  // failsafe default\n  protected String       writer__iBackupSuffix      = \""\"";                  // failsafe default\n\n  protected StringBuffer writer__iCurrentText       = new StringBuffer();  // current text\n  protected int          writer__iCurrentFileIndex  = 0;                   // current file index\n\n  protected boolean      writer__iSave              = true;                // save generated code to disk\n  protected boolean      writer__iBackup            = true;                // make backups\n\n  protected String       writer__iOutputFolder      = \"".\"";                 // written code is output to this folder\n  protected String       writer__iBackupFolder      = \"".\"";                 // overwritten files are placed here\n\n  protected Hashtable    writer__iProperties            = new Hashtable(); // lookup table for compile time properties\n  protected boolean      writer__iPropertiesInitialised = false;           // true => lookup table initialiased\n\n  /* Writer Variables >> */\n\n\n  !<{declare>/* section:declare << */\n  //\n\n  !<declare>\n\n  //\n  /* section:declare >> */!<}declare>\n\n\n\n  /* Writer Services << */\n\n  /* Initialize. */\n  public void writer__initialize() {\n    writer__iCurrentFileIndex = 0;\n    writer__setDefaults();\n  }\n\n\n\n  /** Main loop.\n   *  Template script is placed here in the @body section.\n   */\n  public void writer__write() throws Exception {\n\n    // initialize\n    String writer__currentSection = \""init\"";\n\n    try {\n      !<{init>/* section:init << */\n      //\n\n      !<init>\n\n      //\n      /* section:init >> */!<}init>\n\n\n      // write files loop\n      int      writer__numFiles = _getNumFiles();\n      int      writer__fileI    = 0;\n      writer__next_file: for( writer__fileI = 0; writer__fileI < writer__numFiles; writer__fileI++ ) {\n\n        !<{prewrite>/* section:prewrite << */\n        // \n\n        writer__currentSection = \""prewrite\"";\n        !<prewrite>\n\n        //\n        /* section:prewrite >> */!<}prewrite>\n\n\n        if( ! writer__startFile() ) { continue writer__next_file; }\n\n\n        !<{body>/* section:body << */\n        //\n\n        writer__currentSection = \""body\"";\n        !<body>\n\n        //\n        /* section:body >> */!<}body>\n\n\n        if( ! writer__endFile() ) { continue writer__next_file; }\n\n\n        !<{postwrite>/* section:postwrite << */\n        // \n\n        writer__currentSection = \""postwrite\"";\n        !<postwrite>\n\n        //\n        /* section:postwrite >> */!<}postwrite>\n\n        writer__nextFile();       \n      }\n \n\n      !<{cleanup>/* section:cleanup << */\n      //\n \n      writer__currentSection = \""cleanup\"";\n      !<cleanup>\n\n      //\n      /* section:cleanup >> */!<}cleanup>\n\n\n    } \n    catch( Exception e ) {\n      writer__handleException( writer__UITEXT_ExceptionIn + writer__UITEXT_Section + writer__currentSection, e );\n    }\n\n  }\n\n\n\n  /** Start writing a file. */\n  public boolean writer__startFile() {\n    writer__iCurrentText = new StringBuffer( writer__FILE_BUFFER_SIZE );\n    return true;\n  }\n\n\n\n  /** End writing a file. */\n  public boolean writer__endFile() throws Exception {\n    boolean endOK = true;\n\n    String fileName = _getFullFileName();\n    String filePath \n      = writer__iOutputFolder\n      + \""$<\\jostraca.system.fileSeparator>\""\n      + fileName\n      ;\n\n    if( writer__iBackup ) {\n      try {\n        writer__backup( filePath, fileName, writer__iBackupFolder );\n\n      } \n      catch( Exception e ) {\n        writer__handleException( writer__UITEXT_UnableToBackupFile \n                                + filePath \n                                + writer__UITEXT_ToBackupFolder\n                                + writer__iBackupFolder\n                                ,e \n                              );\n        endOK = false;\n      }\n    }\n \n    if( endOK && writer__iSave ) {\n      try {\n        writer__save( filePath, writer__iCurrentText.toString() );\n      } \n      catch( Exception e ) {\n        writer__handleException( writer__UITEXT_UnableToSaveFile + filePath, e );\n        endOK = false;\n      }\n    }\n\n    return endOK;\n  }\n\n\n\n  /** Move to next file. */\n  public void writer__nextFile() {\n    writer__iCurrentFileIndex = writer__iCurrentFileIndex + 1;\n  }\n\n\n\n  /** Set defaults from configuration property set. */\n  public void writer__setDefaults() {\n\n    $<{main.FileNameRoot>_setFileNameRoot( \""$<\\main.FileNameRoot>\"" );$<}main.FileNameRoot>\n    $<{main.FileNamePrefix>_setFileNamePrefix( \""$<\\main.FileNamePrefix>\"" );$<}main.FileNamePrefix>\n    $<{main.FileNameSuffix>_setFileNameSuffix( \""$<\\main.FileNameSuffix>\"" );$<}main.FileNameSufffix>\n\n    $<{main.OutputFolder>_setOutputFolder( \""$<\\main.OutputFolder>\"" );$<}main.OutputFolder>\n\n    $<{main.BackupFolder>_setBackupFolder( \""$<\\main.BackupFolder>\"" );$<}main.BackupFolder>\n    $<{main.BackupPrefix>_setBackupPrefix( \""$<\\main.BackupPrefix>\"" );$<}main.BackupPrefix>\n    $<{main.BackupSuffix>_setBackupSuffix( \""$<\\main.BackupSuffix>\"" );$<}main.BackupSufffix>\n    _backup( \""$<lang.TrueString>\"".equals( \""$<jostraca.MakeBackup>\"" ) );\n\n  }\n\n\n\n  /** Handle exceptions: print an explanation for user. */\n  public void writer__handleException( String rMessage, Exception rException ) throws Exception {\n\n    StringBuffer userMsg = new StringBuffer( 111 );\n\n    userMsg.append( writer__UITEXT_ErrorHeader );\n\n    userMsg.append( writer__describeState() + rMessage + writer__UITEXT_ColonNewLine );\n\n    StringWriter stringWriter = new StringWriter();\n    rException.printStackTrace( new PrintWriter( stringWriter) );\n    userMsg.append( stringWriter.toString() );\n\n    userMsg.append( writer__UITEXT_ErrorFooter );\n\n    throw new Exception( userMsg.toString() );\n  }\n\n\n\n  /** Provide a concise description of the state of the CodeWriter. */\n  public String writer__describeState() {\n    String currentState \n      = writer__UITEXT_CodeWriterState\n      + writer__UITEXT_GetFileIndexEquals    + _getFileIndex() \n      + writer__UITEXT_GetFullFileNameEquals + _getFullFileName()\n      + writer__UITEXT_GetOutputFolderEquals + _getOutputFolder()\n      + writer__UITEXT_NewLine\n      ; \n    return currentState;\n  }\n\n\n\n  /** Save written files to disk. \n   *  @param rFilePath Save location.\n   *  @param rContent  File content.\n   */\n  public void writer__save( String rFilePath, String rContent ) throws Exception {\n    StringReader   sr = new StringReader( rContent );\n    BufferedReader br = new BufferedReader( sr );\n    FileWriter     fw = new FileWriter( rFilePath );\n    BufferedWriter bw = new BufferedWriter( fw );\n\n    String line;\n    while( null != (line = br.readLine()) ) {\n      bw.write( line );\n      bw.newLine();\n    }\n\n    bw.close();\n    br.close();\n\n  }\n\n\n\n  /** Read file from disk.\n   *  @param rFilePath.\n   */\n  public String writer__read( String rFilePath ) throws Exception {\n    File       file       = new File( rFilePath );\n    FileReader in         = new FileReader( file );\n    int        size       = (int) file.length();\n    char[]     data       = new char[size];\n    int        charsRead  = 0;\n\n    while( charsRead < size ) {\n      charsRead += in.read( data, charsRead, size - charsRead );\n    }\n\n    return new String( data );\n  }\n\n\n\n  /** Backup overwritten files, if they exist.\n   *  Backups have the format:\n   *  [YYYYMMDDhhmmss][prefix][filename][suffix]\n   *  @param rFilePath     Full Path of File to backup (including name).\n   *  @param rFileName     Name of File to backup.\n   *  @param rBackupFolder Folder to place backups in.\n   */ \n  public void writer__backup( String rFilePath, String rFileName, String rBackupFolder ) throws Exception {\n\n    File backupFolder = new File( rBackupFolder );\n\n    // check backup folder ( create if necessary )\n    // ...\n\n    if( ! backupFolder.exists() ) {\n      if( ! backupFolder.mkdir() ) {\n        throw new Exception( writer__UITEXT_BackupFolderColon\n                             + backupFolder\n                             + writer__UITEXT_BackupFolderExistFailure );\n      }\n    }\n    if( ! backupFolder.isDirectory() ) {\n      throw new Exception( writer__UITEXT_BackupFolderColon \n                           + backupFolder\n                           + writer__UITEXT_BackupFolderNotAFolder );\n    }\n    if( ! backupFolder.canWrite() ) {\n      throw new Exception( writer__UITEXT_BackupFolderColon\n                           + backupFolder\n                           + writer__UITEXT_BackupFolderNotWritable );\n    }\n\n    // create backup file path\n    Calendar calendar = Calendar.getInstance();\n    String year_yyyy = _align( String.valueOf( calendar.get(Calendar.YEAR) ),         \""0\"", 4, 'r' );\n    String month_mm  = _align( String.valueOf( (1+calendar.get(Calendar.MONTH)) ),    \""0\"", 2, 'r' );\n    String day_dd    = _align( String.valueOf( calendar.get(Calendar.DAY_OF_MONTH) ), \""0\"", 2, 'r' );\n    String hour_hh   = _align( String.valueOf( calendar.get(Calendar.HOUR_OF_DAY) ),  \""0\"", 2, 'r' );\n    String minute_mm = _align( String.valueOf( calendar.get(Calendar.MINUTE) ),       \""0\"", 2, 'r' );\n    String second_ss = _align( String.valueOf( calendar.get(Calendar.SECOND) ),       \""0\"", 2, 'r' );\n    String dateTime       = year_yyyy+month_mm+day_dd+hour_hh+minute_mm+second_ss;\n    String backupFileName = dateTime + writer__iBackupPrefix + rFileName + writer__iBackupSuffix;\n    File   backupFilePath = new File( rBackupFolder, backupFileName );\n    \n    // save backup file\n    File fileToBackup = new File( rFilePath );\n    if( fileToBackup.exists() ) {\n      String fileContents = writer__read( rFilePath );\n      writer__save( backupFilePath.getPath(), fileContents );\n    }\n  }\n\n\n\n  /** Set compile time properties. */\n  public void writer__initProperties() {\n    $<{jostraca.properties.NameValueList>\n    String[] propertyList = new String[] { $<jostraca.properties.NameValueList> };\n    int numProperties = propertyList.length;\n    for( int propI = 0; propI < numProperties; propI += 2 ) {\n      writer__iProperties.put( propertyList[ propI ], propertyList[ propI+1 ] );\n    }\n    writer__iPropertiesInitialised = true;\n    $<}jostraca.properties.NameValueList>\n  }\n\n\n  /* Writer Services >> */\n \n\n\n\n  /* Template Services (File Generation) << */\n\n  /** Set the prefix of the files to be written. \n   *  @param rPrefix Written files prefix.\n   */\n  public void _setFileNamePrefix( String rPrefix ) {\n    if( null == rPrefix ) {\n      return; // ignore\n    }\n    writer__iFileNamePrefix = rPrefix;\n  }\n\n\n\n  /** Get prefix of files to be written. */\n  public String _getFileNamePrefix() {\n    return writer__iFileNamePrefix;\n  }\n\n\n\n  /** Set the suffix of the files to be written. \n   *  @param rSuffix Written files suffix.\n   */\n  public void _setFileNameSuffix( String rSuffix ) {\n    if( null == rSuffix ) {\n      return; // ignore\n    }\n    writer__iFileNameSuffix = rSuffix;\n  }\n\n\n\n  /** Get suffix of files to be written. */\n  public String _getFileNameSuffix() {\n    return writer__iFileNameSuffix;\n  }\n\n\n\n  /** Set the full name of the file to be written. \n   *  Prefix and Suffix are set to empty\n   *  @param rName Full name of the file to write.\n   */\n  public void _setFullFileName( String rName ) {\n    _setFileNamePrefix( \""\"" );\n    _setFileNameRoot(   rName );\n    _setFileNameSuffix( \""\"" );\n  }\n\n\n\n  /** Get the full name of current file being generated. */\n  public String _getFullFileName() {\n    return _getFileNamePrefix() + _getFileNameRoot() + _getFileNameSuffix();\n  }\n\n\n\n  /** Set the names of the files to be written. \n   *  Prefix and Suffix are set to empty\n   *  @param rName Full name of the file to write.\n   */\n  public void _setFullFileNames( String[] rNames ) {\n    _setFileNamePrefix( \""\"" );\n    _setFileNameRoots(  rNames );\n    _setFileNameSuffix( \""\"" );\n  }\n\n\n\n  /** Get the full names of the files to be written. */\n  public String[] _getFullFileNames() {\n\n    String[] fileNameRoots  = _getFileNameRoots();\n    int      numFiles       = fileNameRoots.length;\n    String[] fullFileNames  = new String[ numFiles ];\n    String   fileNamePrefix = _getFileNamePrefix();\n    String   fileNameSuffix = _getFileNameSuffix();\n\n    for( int fileI = 0; fileI < numFiles; fileI++ ) {\n      fullFileNames[ fileI ] = fileNamePrefix + fileNameRoots[ fileI ] + fileNameSuffix;\n    }\n\n    return fullFileNames;\n  }\n\n\n\n  /** Set the root of the name of the file to be written. \n   *  @param rFileNameRoot Root of the name of file to be written.\n   */\n  public void _setFileNameRoot( String rFileNameRoot ) {\n    if( null == rFileNameRoot ) {\n      return; // ignore\n    }\n    _setFileNameRoots( new String[] { rFileNameRoot } );\n  }\n\n\n\n  /** Get the root of the name of current file being generated. */\n  public String _getFileNameRoot() {\n    if( 0 < writer__iFileNameRoots.length ) {\n      return writer__iFileNameRoots[ writer__iCurrentFileIndex ];\n    }\n    return \""\"";\n  }\n\n\n\n  /** Set the roots of the names of the files to be written. \n   *  @param rFileNameRoots Roots of names of files to be written.\n   */\n  public void _setFileNameRoots( String[] rFileNameRoots ) {\n    if( null == rFileNameRoots ) {\n      return; // ignore\n    }\n\n    // copy\n    String[] roots = (String[]) rFileNameRoots.clone();\n\n    // normalize - replace nulls\n    int numRoots = roots.length;\n    for(int rootI = 0; rootI < numRoots; rootI++) {\n      if( null == roots[ rootI ] ) {\n        roots[ rootI ] = \""\"";\n      }\n    }\n\n    // save roots\n    writer__iFileNameRoots = roots;\n    writer__iNumFiles      = numRoots;\n  }\n\n\n\n  /** Get roots of the names of files to be written. */\n  public String[] _getFileNameRoots() {\n    return writer__iFileNameRoots;\n  }\n\n\n\n  /** Get index of file currently being generated. */\n  public int _getFileIndex() {\n    return writer__iCurrentFileIndex;\n  }\n\n\n\n  /** Get number of generated files. */\n  public int _getNumFiles() {\n    return writer__iNumFiles;\n  }\n\n\n\n  /** Set output folder.\n   *  @param rOutputFolder Folder to output generated code to.\n   */\n  public void _setOutputFolder( String rOutputFolder ) {\n    writer__iOutputFolder = rOutputFolder;\n  }\n\n\n\n  /** Get output folder. */\n  public String _getOutputFolder() {\n    return writer__iOutputFolder;\n  }\n\n\n\n  /** Set backup folder.\n   *  @param rBackupFolder Folder to backup overwritten files to.\n   */\n  public void _setBackupFolder( String rBackupFolder ) {\n    writer__iBackupFolder = writer__iOutputFolder + \""$<\\jostraca.system.fileSeparator>\"" + rBackupFolder;\n  }\n\n\n\n  /** Get backup folder. */\n  public String _getBackupFolder() {\n    return writer__iBackupFolder;\n  }\n\n\n\n  /** Set the suffix of backup files.\n   *  @param rSuffix Backup files suffix.\n   */\n  public void _setBackupSuffix( String rSuffix ) {\n    if( null == rSuffix ) {\n      return; // ignore\n    }\n    writer__iBackupSuffix = rSuffix;\n  }\n\n\n\n  /** Set the prefix of backup files.\n   *  @param rPrefix Backup files prefix.\n   */\n  public void _setBackupPrefix( String rPrefix ) {\n    if( null == rPrefix ) {\n      return; // ignore\n    }\n    writer__iBackupPrefix = rPrefix;\n  }\n\n\n\n  /** Set to true if written files are to be backed up to disk automatically. \n   *  @param rBackup True => Backup files to disk.\n   */\n  public void _backup( boolean rBackup ) {\n    writer__iBackup = rBackup;\n  }\n\n\n\n  /** Set to true if written files are to be saved to disk automatically. \n   *  @param rSave True => Save written files to disk.\n   */\n  public void _save( boolean rSave ) {\n    writer__iSave = rSave;\n  }\n\n\n  /* Template Services (File Generation) >> */\n\n\n\n\n  /* Template Services (Control) << */\n\n  /** Get compile time property\n   *  @param rName Name of property to get.\n   */\n  public String _getProperty( String rName ) {\n    String result = \""\"";\n\n    if( ! writer__iPropertiesInitialised ) {\n      writer__initProperties();\n    }\n\n    if( writer__iProperties.containsKey( rName ) ) {\n      result = (String) writer__iProperties.get( rName );\n    }\n\n    return result;\n  }\n\n  /* Template Services (Control) >> */\n\n\n\n  /* Template Services (Text Production) << */\n\n\n  // inserts\n  // ...\n\n  /** Insert text into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rText Text to insert.\n   */\n  public void _insert( String rText ) {\n    writer__iCurrentText.append( rText );\n  }\n\n  /** Insert string representation of object into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rObject Object to insert.\n   */\n  public void _insert( Object rObject ) {\n    writer__iCurrentText.append( \""\""+rObject );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rInt int to insert\n   */\n  public void _insert( int rInt ) {\n    writer__iCurrentText.append( rInt );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rLong long to insert\n   */\n  public void _insert( long rLong ) {\n    writer__iCurrentText.append( rLong );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rShort short to insert\n   */\n  public void _insert( short rShort ) {\n    writer__iCurrentText.append( rShort );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rByte byte to insert\n   */\n  public void _insert( byte rByte ) {\n    writer__iCurrentText.append( rByte );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rDouble double to insert\n   */\n  public void _insert( double rDouble ) {\n    writer__iCurrentText.append( rDouble );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rFloat float to insert\n   */\n  public void _insert( float rFloat ) {\n    writer__iCurrentText.append( rFloat );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rChar char to insert\n   */\n  public void _insert( char rChar ) {\n    writer__iCurrentText.append( rChar );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rBoolean boolean to insert\n   */\n  public void _insert( boolean rBoolean ) {\n    writer__iCurrentText.append( rBoolean );\n  }\n\n\n\n  /** Create a String containing specified number of spaces.\n   *  @param rNumSpaces Number of spaces to place in String\n   */\n  public String _spaces( int rNumSpaces ) {\n    int numSpaces = rNumSpaces;\n    if( 0 > numSpaces ) { numSpaces *= -1; }\n    StringBuffer spaces = new StringBuffer( numSpaces );\n    for(int spaceI = 0; spaceI < numSpaces; spaceI++) {\n      spaces.append(\"" \"");\n    }\n    return spaces.toString();\n  }\n\n\n\n  /** Left align String with spaces. */ \n  public String _left( String rText, int rColWidth ) {\n    return _align( rText, \"" \"", rColWidth, 'l' );\n  } \n\n\n\n  /** Right align String with spaces. */ \n  public String _right( String rText, int rColWidth ) {\n    return _align( rText, \"" \"", rColWidth, 'r' );\n  } \n\n\n\n  /** Center align String with spaces. */ \n  public String _center( String rText, int rColWidth ) {\n    return _align( rText, \"" \"", rColWidth, 'c' );\n  } \n\n\n\n  /** Align text within background text to specified column width. \n   *  Alignment can be 'l': left, 'c': center, 'r': right\n   */\n  public String _align( String rText, String rBackText, int rColWidth, char rAlignment ) {\n    String result = rText;\n \n    if( null == rText ) { \n       result = \""\""; \n    }\n    else if( null != rBackText ) {\n      try {\n        int textLen = rText.length();\n        if( rColWidth > textLen ) {\n          int    backTextLen     = rBackText.length();\n          int    remainWidth     = rColWidth - textLen;\n          int    backTextRepeats = remainWidth / backTextLen;\n          int    backTextRemain  = remainWidth % backTextLen;\n          String back            = \""\"";\n          for( int backTextI = 0; backTextI < backTextRepeats; backTextI++ ) {\n            back = back + rBackText;\n          }\n          back = back + rBackText.substring( 0, backTextRemain );\n \n          switch( rAlignment ) {\n          case 'l':\n            result = result + back;\n            break;\n          case 'c':\n            result = back.substring( 0, (back.length()/2) ) + result + back.substring( (back.length()/2) );\n            break;\n          case 'r':\n            result = back + result;\n            break;\n          }\n        }\n      } \n      catch( Exception e ) {\n        result = rText;\n      }\n    }\n    return result;\n  }\n\n\n\n  /** Set current text of file currently being generated. */\n  public void _setText( String rText) {\n    writer__iCurrentText = new StringBuffer( rText );\n  }\n\n\n\n  /** Get current text of file currently being generated. */\n  public String _getText() {\n    return writer__iCurrentText.toString();\n  }\n\n  /* Template Services (Text Production) << */\n\n}\n\n\n!<footer>\n"");
    }","    private boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }",0
"    public QMatrix transposed() {
        QMatrix m = new QMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }","    private void doAboutWeb() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(KlangConstants.KLANGEDITOR_URL_PROJECT));
                } catch (Exception err) {
                    err.printStackTrace();
                }
            }
        }
    }",0
"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }","    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }",0
"    public void start(Gedcom gedcom) {
        String cmd = getValueFromUser(""executables"", translate(""WhichExecutable""), new String[0]);
        if (cmd == null) return;
        try {
            Process process = Runtime.getRuntime().exec(cmd);
            BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while (true) {
                String line = in.readLine();
                if (line == null) break;
                println(line);
            }
        } catch (IOException ioe) {
            println(translate(""Error"") + ioe.getMessage());
        }
    }","        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(JCards.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + JCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + JCards.GPL_URL + ""' to view GPL"");
            }
        }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static void main(String[] args) {
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapterX/tooltip3.pdf""));
            document.open();
            writer.setPageEvent(new TooltipExample3());
            Paragraph p = new Paragraph(""Hello World "");
            Chunk c = new Chunk(""tooltip"");
            c.setGenericTag(""This is my tooltip."");
            p.add(c);
            document.add(p);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    static void addFile(String entryName, String file, ZipOutputStream zout) throws IOException {
        ZipEntry mf = new ZipEntry(entryName);
        File mfm = new File(file);
        mf.setSize(mfm.length());
        mf.setTime(mfm.lastModified());
        zout.putNextEntry(mf);
        zout.write(IOUtils.load(mfm));
    }",0
"    public static Object[] append(Object[] source, Object obj) {
        Object[] copy = (Object[]) Array.newInstance(source.getClass().getComponentType(), source.length + 1);
        System.arraycopy(source, 0, copy, 0, source.length);
        copy[source.length] = obj;
        return copy;
    }","    public static Image[][] reversalXandY(final Image[][] array) {
        int col = array[0].length;
        int row = array.length;
        Image[][] result = new Image[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }",0
"    public QMatrix transposed() {
        QMatrix m = new QMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }","    private void doAboutDonate() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(KlangConstants.KLANGEDITOR_URL_DONATE));
                } catch (Exception err) {
                    err.printStackTrace();
                }
            }
        }
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public void youtube_search(String input) throws URISyntaxException {
        try {
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
            }
            URI uri;
            uri = new URI(""http://www.youtube.com/results?search_query="" + input.replace(' ', '+') + ""&search_type=&aq=f"");
            desktop.browse(uri);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    private static String simpleCompute(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""utf-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","	public static File chooseFileSave(JFrame frame) {
		File retval;

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(false);

		//Show dialog and wait for user input
		int status = fc.showSaveDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFile();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}",0
"    public static BufferedReader getUserSolveStream(String name) throws IOException {
        BufferedReader in;
        try {
            URL url = new URL(""http://www.spoj.pl/status/"" + name.toLowerCase() + ""/signedlist/"");
            in = new BufferedReader(new InputStreamReader(url.openStream()));
        } catch (MalformedURLException e) {
            in = null;
            throw e;
        }
        return in;
    }","    @Override
    public KSA00 getEstimate() {
        int probe_count = getData().getModel().getProbes().size();
        int ch_length = getData().getModel().getChromosomeLength();
        int clone_length = getData().getModel().getCloneLength();
        int clone_count = getData().getSampleSize();
        int counter = 0;
        byte[][] scores = new byte[clone_count][];
        for (KSA00Data.Hybridization val : getData()) {
            scores[counter++] = val.getScore();
        }
        int[] probeOrder = ArrayUtil.createSequence(getData().getModel().getProbes().size(), false);
        int[][] joint = new int[probe_count][probe_count];
        for (int probeIndex1 = 0; probeIndex1 < probe_count; probeIndex1++) {
            for (int probeIndex2 = probeIndex1 + 1; probeIndex2 < probe_count; probeIndex2++) {
                for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
                    if ((scores[cloneIndex][probeIndex1] == 1) && (scores[cloneIndex][probeIndex2] == 1)) {
                        joint[probeIndex1][probeIndex2]++;
                    }
                }
                joint[probeIndex2][probeIndex1] = joint[probeIndex1][probeIndex2];
            }
        }
        int gap = ch_length - (probe_count * clone_length);
        double[] y = Initial_Ys(probeOrder, probe_count, clone_count, clone_length, gap, joint);
        return getData().getModel().create(Arrays.asList(ArrayUtils.toObject(y)));
    }",0
"    private static int binarySearchArtist(Vector<MusicOutputDesign> v, int low, int high) {
        if (high < low) {
            return -1;
        }
        int mid = (high + low) / 2;
        String s = v.elementAt(mid).getArtist().replace(""\\"", ""/"");
        if (s.compareToIgnoreCase(artist) > 0) {
            return binarySearchArtist(v, low, mid - 1);
        } else if (s.compareToIgnoreCase(artist) < 0) {
            return binarySearchArtist(v, mid + 1, high);
        } else {
            return mid;
        }
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","	public static File[] chooseFileOpenMultiple(JFrame frame) {
		File retval[];

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(true);

		//Show dialog and wait for user input
		int status = fc.showSaveDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFiles();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}",0
"    @Override
    public KSA00 getEstimate() {
        int probe_count = getData().getModel().getProbes().size();
        int ch_length = getData().getModel().getChromosomeLength();
        int clone_length = getData().getModel().getCloneLength();
        int clone_count = getData().getSampleSize();
        int counter = 0;
        byte[][] scores = new byte[clone_count][];
        for (KSA00Data.Hybridization val : getData()) {
            scores[counter++] = val.getScore();
        }
        int[] probeOrder = ArrayUtil.createSequence(getData().getModel().getProbes().size(), false);
        int[][] joint = new int[probe_count][probe_count];
        for (int probeIndex1 = 0; probeIndex1 < probe_count; probeIndex1++) {
            for (int probeIndex2 = probeIndex1 + 1; probeIndex2 < probe_count; probeIndex2++) {
                for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
                    if ((scores[cloneIndex][probeIndex1] == 1) && (scores[cloneIndex][probeIndex2] == 1)) {
                        joint[probeIndex1][probeIndex2]++;
                    }
                }
                joint[probeIndex2][probeIndex1] = joint[probeIndex1][probeIndex2];
            }
        }
        int gap = ch_length - (probe_count * clone_length);
        double[] y = Initial_Ys(probeOrder, probe_count, clone_count, clone_length, gap, joint);
        return getData().getModel().create(Arrays.asList(ArrayUtils.toObject(y)));
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    private static int binarySearchAlbum(Vector<MusicOutputDesign> v, int low, int high) {
        if (high < low) {
            return -1;
        }
        int mid = (high + low) / 2;
        String s = v.elementAt(mid).getAlbum().replace(""\\"", ""/"");
        if (s.compareToIgnoreCase(artist) > 0) {
            return binarySearchAlbum(v, low, mid - 1);
        } else if (s.compareToIgnoreCase(artist) < 0) {
            return binarySearchAlbum(v, mid + 1, high);
        } else {
            return mid;
        }
    }",0
"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public void run(IAction action) {
        int style = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getStyle();
        Shell shell = new Shell((style & SWT.MIRRORED) != 0 ? SWT.RIGHT_TO_LEFT : SWT.NONE);
        GraphicalViewer viewer = new ScrollingGraphicalViewer();
        viewer.createControl(shell);
        viewer.setEditDomain(new DefaultEditDomain(null));
        viewer.setRootEditPart(new ScalableFreeformRootEditPart());
        viewer.setEditPartFactory(new TableEditPartFactory());
        viewer.setContents(getContents());
        viewer.flush();
        int printMode = new PrintModeDialog(shell).open();
        if (printMode == -1) return;
        PrintDialog dialog = new PrintDialog(shell, SWT.NULL);
        PrinterData data = dialog.open();
        if (data != null) {
            PrintGraphicalViewerOperation op = new PrintGraphicalViewerOperation(new Printer(data), viewer);
            op.setPrintMode(printMode);
            op.run(selectedFile.getName());
        }
    }","    public Matrix transpose() {
        final double array[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new DoubleSquareMatrix(array);
    }",0
"    public void sendMail(String smtpHost, String username, String password, String senderAddress, String recipientsAddress, String subject, String text) {
        MailAuthenticator auth = new MailAuthenticator(username, password);
        Properties properties = new Properties();
        properties.put(""mail.smtp.host"", smtpHost);
        properties.put(""mail.smtp.auth"", ""true"");
        Session session = Session.getDefaultInstance(properties, auth);
        try {
            Message msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(senderAddress));
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientsAddress, false));
            msg.setSubject(subject);
            msg.setText(text);
            msg.setHeader(""Test"", ""Test"");
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                ripperPathField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                fileBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public static String replaceTokens(String text, Map<String, String> replacements) {
        Pattern pattern = Pattern.compile(""\\{(.+?)\\}"");
        Matcher matcher = pattern.matcher(text);
        StringBuilder builder = new StringBuilder();
        int i = 0;
        while (matcher.find()) {
            String replacement = replacements.get(matcher.group(1));
            builder.append(text.substring(i, matcher.start()));
            if (replacement == null) builder.append(matcher.group(0)); else builder.append(replacement);
            i = matcher.end();
        }
        builder.append(text.substring(i, text.length()));
        return builder.toString();
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                shoutcastPlayer.setText(dirChooser.getSelectedFile().toString());
            }
        }","    private void weightAndPlaceClasses() {
        int rows = getRows();
        for (int curRow = _maxPackageRank; curRow < rows; curRow++) {
            xPos = getHGap() / 2;
            BOTLObjectSourceDiagramNode[] rowObject = getObjectsInRow(curRow);
            for (int i = 0; i < rowObject.length; i++) {
                if (curRow == _maxPackageRank) {
                    int nDownlinks = rowObject[i].getDownlinks().size();
                    rowObject[i].setWeight((nDownlinks > 0) ? (1 / nDownlinks) : 2);
                } else {
                    Vector uplinks = rowObject[i].getUplinks();
                    int nUplinks = uplinks.size();
                    if (nUplinks > 0) {
                        float average_col = 0;
                        for (int j = 0; j < uplinks.size(); j++) {
                            average_col += ((BOTLObjectSourceDiagramNode) (uplinks.elementAt(j))).getColumn();
                        }
                        average_col /= nUplinks;
                        rowObject[i].setWeight(average_col);
                    } else {
                        rowObject[i].setWeight(1000);
                    }
                }
            }
            int[] pos = new int[rowObject.length];
            for (int i = 0; i < pos.length; i++) {
                pos[i] = i;
            }
            boolean swapped = true;
            while (swapped) {
                swapped = false;
                for (int i = 0; i < pos.length - 1; i++) {
                    if (rowObject[pos[i]].getWeight() > rowObject[pos[i + 1]].getWeight()) {
                        int temp = pos[i];
                        pos[i] = pos[i + 1];
                        pos[i + 1] = temp;
                        swapped = true;
                    }
                }
            }
            for (int i = 0; i < pos.length; i++) {
                rowObject[pos[i]].setColumn(i);
                if ((i > _vMax) && (rowObject[pos[i]].getUplinks().size() == 0) && (rowObject[pos[i]].getDownlinks().size() == 0)) {
                    if (getColumns(rows - 1) > _vMax) {
                        rows++;
                    }
                    rowObject[pos[i]].setRank(rows - 1);
                } else {
                    rowObject[pos[i]].setLocation(new Point(xPos, yPos));
                    xPos += rowObject[pos[i]].getSize().getWidth() + getHGap();
                }
            }
            yPos += getRowHeight(curRow) + getVGap();
        }
    }",0
"    public static String encrypt(String str) {
        if (str == null || str.length() == 0) {
            throw new IllegalArgumentException(""String to encript cannot be null or zero length"");
        }
        StringBuffer hexString = new StringBuffer();
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        md.update(str.getBytes());
        byte[] hash = md.digest();
        for (int i = 0; i < hash.length; i++) {
            if ((0xff & hash[i]) < 0x10) {
                hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
            } else {
                hexString.append(Integer.toHexString(0xFF & hash[i]));
            }
        }
        return hexString.toString();
    }","    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Bill bill = (Bill) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_BILL""));
            pst.setInt(1, bill.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                ripperPathField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public Matrix transpose() {
        final double array[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new DoubleSquareMatrix(array);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public void youtube_search(String input) throws URISyntaxException {
        try {
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
            }
            URI uri;
            uri = new URI(""http://www.youtube.com/results?search_query="" + input.replace(' ', '+') + ""&search_type=&aq=f"");
            desktop.browse(uri);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String md5Encrypt(final String txt) {
        String enTxt = txt;
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""Error:"", e);
        }
        if (null != md) {
            byte[] md5hash = new byte[32];
            try {
                md.update(txt.getBytes(""UTF-8""), 0, txt.length());
            } catch (UnsupportedEncodingException e) {
                logger.error(""Error:"", e);
            }
            md5hash = md.digest();
            StringBuffer md5StrBuff = new StringBuffer();
            for (int i = 0; i < md5hash.length; i++) {
                if (Integer.toHexString(0xFF & md5hash[i]).length() == 1) {
                    md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & md5hash[i]));
                } else {
                    md5StrBuff.append(Integer.toHexString(0xFF & md5hash[i]));
                }
            }
            enTxt = md5StrBuff.toString();
        }
        return enTxt;
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }","    public String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (!java.awt.Desktop.isDesktopSupported()) {
            Lang.showMesg(trayPtn.getMpwdPtn(), LangRes.P30F7A0F, """");
        }
        try {
            java.awt.Desktop.getDesktop().browse(new java.net.URI(ConsEnv.MLOGSITE));
        } catch (Exception exp) {
            Logs.exception(exp);
        }
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, zaos, absolute);
            }
        } else if ((!file.getName().endsWith("".zip"")) && (!file.getName().endsWith("".ZIP""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            ZipArchiveEntry zae = new ZipArchiveEntry(filename);
            zae.setSize(file.length());
            zaos.putArchiveEntry(zae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, zaos);
            zaos.closeArchiveEntry();
        }
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }","    private void loadTaskList() {
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(new File(this.getProperty(""path.data"") + File.separator + ""Tasks.xml""));
            NodeList tasksNodes = doc.getElementsByTagName(""task"");
            tasks = new HashMap<String, TaskCommand>();
            for (int x = 0; x < tasksNodes.getLength(); x++) {
                Node item = tasksNodes.item(x);
                TaskCommand taskCommand = new TaskCommand(item);
                tasks.put(taskCommand.getName(), taskCommand);
            }
            System.out.println(""Tasks.xml found and loaded ("" + tasksNodes.getLength() + "")"");
        } catch (Exception e) {
            tasks = new HashMap<String, TaskCommand>();
            System.out.println(""Error loading Tasks.xml, starting with no tasks."");
        }
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    private void loadChannels() {
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(new File(this.getProperty(""path.data"") + File.separator + ""Channels.xml""));
            NodeList items = doc.getElementsByTagName(""channel"");
            channels = new HashMap<String, Channel>();
            for (int x = 0; x < items.getLength(); x++) {
                Node item = items.item(x);
                Channel chan = new Channel(item);
                channels.put(chan.getName(), chan);
            }
            System.out.println(""Channels.xml found and loaded ("" + items.getLength() + "")"");
        } catch (Exception e) {
            channels = new HashMap<String, Channel>();
            System.out.println(""Error loading Channels.xml, starting with blank channel list."");
        }
    }",0
"    public void testVowelsInner() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""H[a-z&&[aeiou]]llo"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""My name is berlin hallo what is up"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Vowel-Search \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }","    @Test
    public void testDocumentDownloadKnowledgeBase() throws IOException {
        if (uploadedKbDocumentID == null) {
            fail(""Document Upload Test should run first"");
        }
        String downloadLink = GoogleDownloadLinkGenerator.generateTextDownloadLink(uploadedKbDocumentID);
        URL url = new URL(downloadLink);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        InputStream input = url.openStream();
        FileWriter fw = new FileWriter(""tmpOutput.kb"");
        Reader reader = new InputStreamReader(input);
        BufferedReader bufferedReader = new BufferedReader(reader);
        String strLine = """";
        int count = 0;
        while (count < 10000) {
            strLine = bufferedReader.readLine();
            if (strLine != null && strLine != """") {
                fw.write(strLine);
            }
            count++;
        }
    }",0
"    public static String generate(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static void kopirujSoubor(File vstup, File vystup) throws IOException {
        FileChannel sourceChannel = new FileInputStream(vstup).getChannel();
        FileChannel destinationChannel = new FileOutputStream(vystup).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }","    public RealSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",0
"    private static boolean loadClasses() {
        switch(jvm) {
            case MRJ_2_0:
                try {
                    Class aeTargetClass = Class.forName(""com.apple.MacOS.AETarget"");
                    Class osUtilsClass = Class.forName(""com.apple.MacOS.OSUtils"");
                    Class appleEventClass = Class.forName(""com.apple.MacOS.AppleEvent"");
                    Class aeClass = Class.forName(""com.apple.MacOS.ae"");
                    aeDescClass = Class.forName(""com.apple.MacOS.AEDesc"");
                    aeTargetConstructor = aeTargetClass.getDeclaredConstructor(new Class[] { int.class });
                    appleEventConstructor = appleEventClass.getDeclaredConstructor(new Class[] { int.class, int.class, aeTargetClass, int.class, int.class });
                    aeDescConstructor = aeDescClass.getDeclaredConstructor(new Class[] { String.class });
                    makeOSType = osUtilsClass.getDeclaredMethod(""makeOSType"", new Class[] { String.class });
                    putParameter = appleEventClass.getDeclaredMethod(""putParameter"", new Class[] { int.class, aeDescClass });
                    sendNoReply = appleEventClass.getDeclaredMethod(""sendNoReply"", new Class[] {});
                    Field keyDirectObjectField = aeClass.getDeclaredField(""keyDirectObject"");
                    keyDirectObject = (Integer) keyDirectObjectField.get(null);
                    Field autoGenerateReturnIDField = appleEventClass.getDeclaredField(""kAutoGenerateReturnID"");
                    kAutoGenerateReturnID = (Integer) autoGenerateReturnIDField.get(null);
                    Field anyTransactionIDField = appleEventClass.getDeclaredField(""kAnyTransactionID"");
                    kAnyTransactionID = (Integer) anyTransactionIDField.get(null);
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_2_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    mrjOSTypeClass = Class.forName(""com.apple.mrj.MRJOSType"");
                    Field systemFolderField = mrjFileUtilsClass.getDeclaredField(""kSystemFolderType"");
                    kSystemFolderType = systemFolderField.get(null);
                    findFolder = mrjFileUtilsClass.getDeclaredMethod(""findFolder"", new Class[] { mrjOSTypeClass });
                    getFileCreator = mrjFileUtilsClass.getDeclaredMethod(""getFileCreator"", new Class[] { File.class });
                    getFileType = mrjFileUtilsClass.getDeclaredMethod(""getFileType"", new Class[] { File.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (SecurityException se) {
                    errorMessage = se.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_0:
                try {
                    Class linker = Class.forName(""com.apple.mrj.jdirect.Linker"");
                    Constructor constructor = linker.getConstructor(new Class[] { Class.class });
                    linkage = constructor.newInstance(new Object[] { BbrowserLauncher.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (InvocationTargetException ite) {
                    errorMessage = ite.getMessage();
                    return false;
                } catch (InstantiationException ie) {
                    errorMessage = ie.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    openURL = mrjFileUtilsClass.getDeclaredMethod(""openURL"", new Class[] { String.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                }
                break;
            default:
                break;
        }
        return true;
    }","    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileInputStream input = new FileInputStream(srcFile);
        try {
            FileOutputStream output = new FileOutputStream(destFile);
            try {
                IOUtils.copy(input, output);
            } finally {
                IOUtils.close(output);
            }
        } finally {
            IOUtils.close(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static void main(String[] args) {
        if (args.length < 2) {
            print(""Usage: \njava TestRegularExpression "" + ""characterSequence regularExpression+"");
            System.exit(0);
        }
        print(""Input: \"" "" + args[0] + ""\"""");
        for (String arg : args) {
            print(""Regular expression: \"" "" + arg + ""\"" "");
            Pattern p = Pattern.compile(arg);
            Matcher m = p.matcher(args[0]);
            while (m.find()) {
                print(""Match \"" "" + m.group() + ""\"" at positions "" + m.start() + ""-"" + (m.end() - 1));
            }
        }
    }",0
"    public static void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }","    private static boolean loadClasses() {
        switch(jvm) {
            case MRJ_2_0:
                try {
                    Class aeTargetClass = Class.forName(""com.apple.MacOS.AETarget"");
                    Class osUtilsClass = Class.forName(""com.apple.MacOS.OSUtils"");
                    Class appleEventClass = Class.forName(""com.apple.MacOS.AppleEvent"");
                    Class aeClass = Class.forName(""com.apple.MacOS.ae"");
                    aeDescClass = Class.forName(""com.apple.MacOS.AEDesc"");
                    aeTargetConstructor = aeTargetClass.getDeclaredConstructor(new Class[] { int.class });
                    appleEventConstructor = appleEventClass.getDeclaredConstructor(new Class[] { int.class, int.class, aeTargetClass, int.class, int.class });
                    aeDescConstructor = aeDescClass.getDeclaredConstructor(new Class[] { String.class });
                    makeOSType = osUtilsClass.getDeclaredMethod(""makeOSType"", new Class[] { String.class });
                    putParameter = appleEventClass.getDeclaredMethod(""putParameter"", new Class[] { int.class, aeDescClass });
                    sendNoReply = appleEventClass.getDeclaredMethod(""sendNoReply"", new Class[] {});
                    Field keyDirectObjectField = aeClass.getDeclaredField(""keyDirectObject"");
                    keyDirectObject = (Integer) keyDirectObjectField.get(null);
                    Field autoGenerateReturnIDField = appleEventClass.getDeclaredField(""kAutoGenerateReturnID"");
                    kAutoGenerateReturnID = (Integer) autoGenerateReturnIDField.get(null);
                    Field anyTransactionIDField = appleEventClass.getDeclaredField(""kAnyTransactionID"");
                    kAnyTransactionID = (Integer) anyTransactionIDField.get(null);
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_2_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    mrjOSTypeClass = Class.forName(""com.apple.mrj.MRJOSType"");
                    Field systemFolderField = mrjFileUtilsClass.getDeclaredField(""kSystemFolderType"");
                    kSystemFolderType = systemFolderField.get(null);
                    findFolder = mrjFileUtilsClass.getDeclaredMethod(""findFolder"", new Class[] { mrjOSTypeClass });
                    getFileCreator = mrjFileUtilsClass.getDeclaredMethod(""getFileCreator"", new Class[] { File.class });
                    getFileType = mrjFileUtilsClass.getDeclaredMethod(""getFileType"", new Class[] { File.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (SecurityException se) {
                    errorMessage = se.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_0:
                try {
                    Class linker = Class.forName(""com.apple.mrj.jdirect.Linker"");
                    Constructor constructor = linker.getConstructor(new Class[] { Class.class });
                    linkage = constructor.newInstance(new Object[] { BrowserLauncher.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (InvocationTargetException ite) {
                    errorMessage = ite.getMessage();
                    return false;
                } catch (InstantiationException ie) {
                    errorMessage = ie.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    openURL = mrjFileUtilsClass.getDeclaredMethod(""openURL"", new Class[] { String.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                }
                break;
            default:
                break;
        }
        return true;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static int deleteOrder(String likePatten) {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append("" DELETE FROM JHF_ALIVE_ORDER "").append("" WHERE   ORDER_ID LIKE  ? "");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            psmt.setString(1, ""%"" + likePatten + ""%"");
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println("" error when roll back !"");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println("" error  when psmt close or conn close ."");
            }
        }
        return deleted;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                shoutcastPlayer.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"    public static String hashStringMD5(String string) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(string.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }","    public static void copy(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }",0
"    public IntSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }","    public DoubleChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            String tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }",0
"    public static void add100RowsToSourceDB(int block) {
        Scanner source = null;
        Connection connection = null;
        try {
            try {
                Class.forName(""sun.jdbc.odbc.JdbcOdbcDriver"");
                String dbUrl = ""jdbc:odbc:conn"";
                connection = DriverManager.getConnection(dbUrl);
                source = new Scanner(new File(""D:/Priyanka/My/Data/SourceData.csv""));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            int counter = 0;
            source.nextLine();
            int cursor = block * 100;
            while (cursor != 0) {
                cursor--;
                source.nextLine();
            }
            while (source.hasNextLine() && counter < 100) {
                Scanner ls = new Scanner(source.nextLine());
                ls.useDelimiter("","");
                String query = ""INSERT INTO [CompSource].[dbo].[Reading]([hours],[lread],[lwrite],[scall],[sread],[swrite],[fork],[execCalls],[rchar],[wchar],[readingNumber]) VALUES "";
                query += ""( '"" + ls.next() + ""', "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + +ls.nextInt() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pks + "")"";
                String query2 = ""INSERT INTO [CompSource].[dbo].[PageReading]([pgout],[ppgout],[pgfree],[pgscan],[atch],[pgin],[readingNumber],[pageReadingNumber]) VALUES"";
                query2 += ""( "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pks + "", "" + spks + "")"";
                pks++;
                spks++;
                Statement statement = ((Connection) connection).createStatement();
                try {
                    statement.executeQuery(query);
                } catch (SQLException e) {
                }
                try {
                    Statement statement2 = ((Connection) connection).createStatement();
                    statement2.executeQuery(query2);
                } catch (SQLException e) {
                }
                counter++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public void shouldAllowClosingInputStreamTwice() throws IOException {
        OutputStream outputStream = fileSystem.createOutputStream(_(""hello""), OutputMode.OVERWRITE);
        outputStream.write(new byte[] { 1, 2, 3 });
        outputStream.close();
        InputStream inputStream = fileSystem.createInputStream(_(""hello""));
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        IOUtils.copy(inputStream, buffer);
        inputStream.close();
        inputStream.close();
    }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public HTMLDocument handleURL(String suburl, HTTPSession session, HTTPRequestHeader header) throws WebMailException {
        UserData user = ((WebMailSession) session).getUser();
        Document helpdoc = (Document) cache.get(user.getPreferredLocale().getLanguage() + ""/"" + user.getTheme());
        if (helpdoc == null) {
            String helpdocpath = ""file://"" + store.getBasePath(user.getPreferredLocale(), user.getTheme()) + ""help.xml"";
            try {
                DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();
                helpdoc = parser.parse(helpdocpath);
            } catch (Exception ex) {
                ex.printStackTrace();
                throw new WebMailException(""Could not parse "" + helpdocpath);
            }
            cache.put(user.getPreferredLocale().getLanguage() + ""/"" + user.getTheme(), helpdoc);
        }
        Node n = session.getModel().importNode(helpdoc.getDocumentElement(), true);
        session.getModel().getDocumentElement().appendChild(n);
        if (header.isContentSet(""helptopic"") && session instanceof WebMailSession) {
            ((WebMailSession) session).getUserModel().setStateVar(""helptopic"", header.getContent(""helptopic""));
        }
        HTMLDocument retdoc = new XHTMLDocument(session.getModel(), store.getStylesheet(""help.xsl"", user.getPreferredLocale(), user.getTheme()));
        session.getModel().getDocumentElement().removeChild(n);
        if (header.isContentSet(""helptopic"") && session instanceof WebMailSession) {
            ((WebMailSession) session).getUserModel().removeAllStateVars(""helptopic"");
        }
        return retdoc;
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                webBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    private void getRandomGuid(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = secureRandom.nextLong();
            } else {
                rand = random.nextLong();
            }
            sbValueBeforeMD5.append(id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }",0
"    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                fileBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    @Test
    public void testDocumentDownloadKnowledgeBase() throws IOException {
        if (uploadedKbDocumentID == null) {
            fail(""Document Upload Test should run first"");
        }
        String downloadLink = GoogleDownloadLinkGenerator.generateTextDownloadLink(uploadedKbDocumentID);
        URL url = new URL(downloadLink);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        InputStream input = url.openStream();
        FileWriter fw = new FileWriter(""tmpOutput.kb"");
        Reader reader = new InputStreamReader(input);
        BufferedReader bufferedReader = new BufferedReader(reader);
        String strLine = """";
        int count = 0;
        while (count < 10000) {
            strLine = bufferedReader.readLine();
            if (strLine != null && strLine != """") {
                fw.write(strLine);
            }
            count++;
        }
    }",0
"    public static String cryptSha(String target) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(""SHA"");
        md.update(target.getBytes(""UTF-16""));
        BigInteger res = new BigInteger(1, md.digest(key.getBytes()));
        return res.toString(16);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }","    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }",0
"    public static String toPWD(String pwd) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.reset();
            messageDigest.update(pwd.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""NoSuchAlgorithmException caught!"");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }","                        public Constructor run() throws Exception {
                            String path = ""META-INF/services/"" + BeanletApplicationContext.class.getName();
                            ClassLoader loader = Thread.currentThread().getContextClassLoader();
                            final Enumeration<URL> urls;
                            if (loader == null) {
                                urls = BeanletApplicationContext.class.getClassLoader().getResources(path);
                            } else {
                                urls = loader.getResources(path);
                            }
                            while (urls.hasMoreElements()) {
                                URL url = urls.nextElement();
                                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                                try {
                                    String className = null;
                                    while ((className = reader.readLine()) != null) {
                                        final String name = className.trim();
                                        if (!name.startsWith(""#"") && !name.startsWith("";"") && !name.startsWith(""//"")) {
                                            final Class<?> cls;
                                            if (loader == null) {
                                                cls = Class.forName(name);
                                            } else {
                                                cls = Class.forName(name, true, loader);
                                            }
                                            int m = cls.getModifiers();
                                            if (BeanletApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) {
                                                Constructor constructor = cls.getDeclaredConstructor();
                                                if (!Modifier.isPublic(constructor.getModifiers())) {
                                                    constructor.setAccessible(true);
                                                }
                                                return constructor;
                                            } else {
                                                throw new ClassCastException(cls.getName());
                                            }
                                        }
                                    }
                                } finally {
                                    reader.close();
                                }
                            }
                            throw new BeanletApplicationException(""No "" + ""BeanletApplicationContext implementation "" + ""found."");
                        }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        md.update(text.getBytes());
        byte byteData[] = md.digest();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuilder hexString = new StringBuilder();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }","        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(MasteryCards.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
            }
        }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public void testVowels() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""[a-z&&[aeiou]]"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""BerlinBrown"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Vowel-Search \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }",0
"                        public Constructor run() throws Exception {
                            String path = ""META-INF/services/"" + BeanletApplicationContext.class.getName();
                            ClassLoader loader = Thread.currentThread().getContextClassLoader();
                            final Enumeration<URL> urls;
                            if (loader == null) {
                                urls = BeanletApplicationContext.class.getClassLoader().getResources(path);
                            } else {
                                urls = loader.getResources(path);
                            }
                            while (urls.hasMoreElements()) {
                                URL url = urls.nextElement();
                                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                                try {
                                    String className = null;
                                    while ((className = reader.readLine()) != null) {
                                        final String name = className.trim();
                                        if (!name.startsWith(""#"") && !name.startsWith("";"") && !name.startsWith(""//"")) {
                                            final Class<?> cls;
                                            if (loader == null) {
                                                cls = Class.forName(name);
                                            } else {
                                                cls = Class.forName(name, true, loader);
                                            }
                                            int m = cls.getModifiers();
                                            if (BeanletApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) {
                                                Constructor constructor = cls.getDeclaredConstructor();
                                                if (!Modifier.isPublic(constructor.getModifiers())) {
                                                    constructor.setAccessible(true);
                                                }
                                                return constructor;
                                            } else {
                                                throw new ClassCastException(cls.getName());
                                            }
                                        }
                                    }
                                } finally {
                                    reader.close();
                                }
                            }
                            throw new BeanletApplicationException(""No "" + ""BeanletApplicationContext implementation "" + ""found."");
                        }","    public void start(Object context) {
        String cmd = getValueFromUser(""executables"", i18n(""WhichExecutable""), new String[0]);
        if (cmd == null) return;
        try {
            Process process = Runtime.getRuntime().exec(cmd);
            BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while (true) {
                String line = in.readLine();
                if (line == null) break;
                println(line);
            }
        } catch (IOException ioe) {
            println(i18n(""Error"") + ioe.getMessage());
        }
    }",0
"    public CMatrix transposed() {
        CMatrix m = new CMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }","            public void actionPerformed(final ActionEvent e) {
                if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                    try {
                        java.awt.Desktop.getDesktop().open(new File(""resources/hilfe/index.html""));
                    } catch (final IOException ex) {
                        System.err.println(""Die Hilfeseite von BAUS! konnte nicht gefunden werden"");
                    }
                }
            }",0
"    public static void main(String[] args) {
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapterX/tooltip3.pdf""));
            document.open();
            writer.setPageEvent(new TooltipExample3());
            Paragraph p = new Paragraph(""Hello World "");
            Chunk c = new Chunk(""tooltip"");
            c.setGenericTag(""This is my tooltip."");
            p.add(c);
            document.add(p);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }","    public static String SHA1(String text) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        md.update(text.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    private void loadChannels() {
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(new File(this.getProperty(""path.data"") + File.separator + ""Channels.xml""));
            NodeList items = doc.getElementsByTagName(""channel"");
            channels = new HashMap<String, Channel>();
            for (int x = 0; x < items.getLength(); x++) {
                Node item = items.item(x);
                Channel chan = new Channel(item);
                channels.put(chan.getName(), chan);
            }
            System.out.println(""Channels.xml found and loaded ("" + items.getLength() + "")"");
        } catch (Exception e) {
            channels = new HashMap<String, Channel>();
            System.out.println(""Error loading Channels.xml, starting with blank channel list."");
        }
    }",0
"    public Matrix transpose() {
        final double array[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new DoubleSquareMatrix(array);
    }","    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (!java.awt.Desktop.isDesktopSupported()) {
            Lang.showMesg(trayPtn.getMpwdPtn(), LangRes.P30F7A0F, """");
        }
        try {
            java.awt.Desktop.getDesktop().browse(new java.net.URI(ConsEnv.MLOGSITE));
        } catch (Exception exp) {
            Logs.exception(exp);
        }
    }",0
"    public static String SHA512(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-512"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static void uncompress(File srcFile, File destFile) throws IOException {
        InputStream input = null;
        OutputStream output = null;
        try {
            input = new GZIPInputStream(new FileInputStream(srcFile));
            output = new BufferedOutputStream(new FileOutputStream(destFile));
            IOUtils.copyLarge(input, output);
        } finally {
            IOUtils.closeQuietly(output);
            IOUtils.closeQuietly(input);
        }
    }","    private static String simpleCompute(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""utf-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                shoutcastPlayer.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static BufferedReader getUserInfoStream(String name) throws IOException {
        BufferedReader in;
        try {
            URL url = new URL(""http://www.spoj.pl/users/"" + name.toLowerCase() + ""/"");
            in = new BufferedReader(new InputStreamReader(url.openStream()));
        } catch (MalformedURLException e) {
            in = null;
            throw e;
        }
        return in;
    }",0
"    @Override
    public void close() throws IOException {
        super.close();
        byte[] signatureData = toByteArray();
        ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream);
        ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(this.originalZipFile));
        ZipEntry zipEntry;
        while (null != (zipEntry = zipInputStream.getNextEntry())) {
            if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) {
                ZipEntry newZipEntry = new ZipEntry(zipEntry.getName());
                zipOutputStream.putNextEntry(newZipEntry);
                LOG.debug(""copying "" + zipEntry.getName());
                IOUtils.copy(zipInputStream, zipOutputStream);
            }
        }
        zipInputStream.close();
        zipEntry = new ZipEntry(ODFUtil.SIGNATURE_FILE);
        LOG.debug(""writing "" + zipEntry.getName());
        zipOutputStream.putNextEntry(zipEntry);
        IOUtils.write(signatureData, zipOutputStream);
        zipOutputStream.close();
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }","    private static boolean loadClasses() {
        switch(jvm) {
            case MRJ_2_0:
                try {
                    Class aeTargetClass = Class.forName(""com.apple.MacOS.AETarget"");
                    Class osUtilsClass = Class.forName(""com.apple.MacOS.OSUtils"");
                    Class appleEventClass = Class.forName(""com.apple.MacOS.AppleEvent"");
                    Class aeClass = Class.forName(""com.apple.MacOS.ae"");
                    aeDescClass = Class.forName(""com.apple.MacOS.AEDesc"");
                    aeTargetConstructor = aeTargetClass.getDeclaredConstructor(new Class[] { int.class });
                    appleEventConstructor = appleEventClass.getDeclaredConstructor(new Class[] { int.class, int.class, aeTargetClass, int.class, int.class });
                    aeDescConstructor = aeDescClass.getDeclaredConstructor(new Class[] { String.class });
                    makeOSType = osUtilsClass.getDeclaredMethod(""makeOSType"", new Class[] { String.class });
                    putParameter = appleEventClass.getDeclaredMethod(""putParameter"", new Class[] { int.class, aeDescClass });
                    sendNoReply = appleEventClass.getDeclaredMethod(""sendNoReply"", new Class[] {});
                    Field keyDirectObjectField = aeClass.getDeclaredField(""keyDirectObject"");
                    keyDirectObject = (Integer) keyDirectObjectField.get(null);
                    Field autoGenerateReturnIDField = appleEventClass.getDeclaredField(""kAutoGenerateReturnID"");
                    kAutoGenerateReturnID = (Integer) autoGenerateReturnIDField.get(null);
                    Field anyTransactionIDField = appleEventClass.getDeclaredField(""kAnyTransactionID"");
                    kAnyTransactionID = (Integer) anyTransactionIDField.get(null);
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_2_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    mrjOSTypeClass = Class.forName(""com.apple.mrj.MRJOSType"");
                    Field systemFolderField = mrjFileUtilsClass.getDeclaredField(""kSystemFolderType"");
                    kSystemFolderType = systemFolderField.get(null);
                    findFolder = mrjFileUtilsClass.getDeclaredMethod(""findFolder"", new Class[] { mrjOSTypeClass });
                    getFileCreator = mrjFileUtilsClass.getDeclaredMethod(""getFileCreator"", new Class[] { File.class });
                    getFileType = mrjFileUtilsClass.getDeclaredMethod(""getFileType"", new Class[] { File.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (SecurityException se) {
                    errorMessage = se.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_0:
                try {
                    Class linker = Class.forName(""com.apple.mrj.jdirect.Linker"");
                    Constructor constructor = linker.getConstructor(new Class[] { Class.class });
                    linkage = constructor.newInstance(new Object[] { BrowserLauncher.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (InvocationTargetException ite) {
                    errorMessage = ite.getMessage();
                    return false;
                } catch (InstantiationException ie) {
                    errorMessage = ie.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    openURLm = mrjFileUtilsClass.getDeclaredMethod(""openURL"", new Class[] { String.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                }
                break;
            default:
                break;
        }
        return true;
    }",0
"    public int delete(BusinessObject o) throws DAOException {
        int delete = 0;
        Item item = (Item) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""DELETE_ITEM""));
            pst.setInt(1, item.getId());
            delete = pst.executeUpdate();
            if (delete <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (delete > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return delete;
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static BufferedReader getUserInfoStream(String name) throws IOException {
        BufferedReader in;
        try {
            URL url = new URL(""http://www.spoj.pl/users/"" + name.toLowerCase() + ""/"");
            in = new BufferedReader(new InputStreamReader(url.openStream()));
        } catch (MalformedURLException e) {
            in = null;
            throw e;
        }
        return in;
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static void copy(FileInputStream inputStream, FileOutputStream outputStream) throws IOException {
        FileChannel input = inputStream.getChannel();
        FileChannel output = outputStream.getChannel();
        input.transferTo(0, input.size(), output);
    }","    private void loadTaskList() {
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(new File(this.getProperty(""path.data"") + File.separator + ""Tasks.xml""));
            NodeList tasksNodes = doc.getElementsByTagName(""task"");
            tasks = new HashMap<String, TaskCommand>();
            for (int x = 0; x < tasksNodes.getLength(); x++) {
                Node item = tasksNodes.item(x);
                TaskCommand taskCommand = new TaskCommand(item);
                tasks.put(taskCommand.getName(), taskCommand);
            }
            System.out.println(""Tasks.xml found and loaded ("" + tasksNodes.getLength() + "")"");
        } catch (Exception e) {
            tasks = new HashMap<String, TaskCommand>();
            System.out.println(""Error loading Tasks.xml, starting with no tasks."");
        }
    }",0
"    public void doUpdateByLoginID() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByLoginID(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + ""ip_address = ?, mac_no = ? "" + ""WHERE  login_id= ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.ipAddress);
            ps.setString(5, this.macNO);
            ps.setString(6, this.loginID);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByLoginID(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }","    static void addFile(String entryName, String fileName, ZipOutputStream zout) throws IOException {
        ZipEntry mf = new ZipEntry(entryName);
        File mfm = new File(fileName);
        mf.setSize(mfm.length());
        mf.setTime(mfm.lastModified());
        zout.putNextEntry(mf);
        zout.write(IOUtils.load(mfm));
    }",0
"    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }","    public ThreadChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            ThreadInfo tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }",0
"    private boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }","	public static File[] chooseFileOpenMultiple(JFrame frame) {
		File retval[];

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(true);

		//Show dialog and wait for user input
		int status = fc.showSaveDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFiles();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}",0
"    public ThreadChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            ThreadInfo tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    public static void copyFile(File src, File dst) throws IOException {
        FileChannel sourceChannel = new FileInputStream(src).getChannel();
        FileChannel destinationChannel = new FileOutputStream(dst).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static Image[][] reversalXandY(final Image[][] array) {
        int col = array[0].length;
        int row = array.length;
        Image[][] result = new Image[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public void start(Object context) {
        String cmd = getValueFromUser(""executables"", i18n(""WhichExecutable""), new String[0]);
        if (cmd == null) return;
        try {
            Process process = Runtime.getRuntime().exec(cmd);
            BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while (true) {
                String line = in.readLine();
                if (line == null) break;
                println(line);
            }
        } catch (IOException ioe) {
            println(i18n(""Error"") + ioe.getMessage());
        }
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                fileBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public synchronized String encrypt(String plaintext) throws PasswordException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new PasswordException(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new PasswordException(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new Base64Encoder()).encode(raw);
        return hash;
    }","    @Override
    public KSA00 getEstimate() {
        int probe_count = getData().getModel().getProbes().size();
        int ch_length = getData().getModel().getChromosomeLength();
        int clone_length = getData().getModel().getCloneLength();
        int clone_count = getData().cloneCount();
        int counter = 0;
        byte[][] scores = new byte[clone_count][];
        for (KSA00Data.Hybridization val : getData()) {
            scores[counter++] = val.getScore();
        }
        int[] probeOrder = ArrayUtil.createSequence(getData().getModel().getProbes().size(), false);
        int[][] joint = new int[probe_count][probe_count];
        for (int probeIndex1 = 0; probeIndex1 < probe_count; probeIndex1++) {
            for (int probeIndex2 = probeIndex1 + 1; probeIndex2 < probe_count; probeIndex2++) {
                for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
                    if ((scores[cloneIndex][probeIndex1] == 1) && (scores[cloneIndex][probeIndex2] == 1)) {
                        joint[probeIndex1][probeIndex2]++;
                    }
                }
                joint[probeIndex2][probeIndex1] = joint[probeIndex1][probeIndex2];
            }
        }
        int gap = ch_length - (probe_count * clone_length);
        double[] y = Initial_Ys(probeOrder, probe_count, clone_count, clone_length, gap, joint);
        return getData().getModel().create(Arrays.asList(ArrayUtils.toObject(y)));
    }",0
"    public void start(Gedcom gedcom) {
        String cmd = getValueFromUser(""executables"", translate(""WhichExecutable""), new String[0]);
        if (cmd == null) return;
        try {
            Process process = Runtime.getRuntime().exec(cmd);
            BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while (true) {
                String line = in.readLine();
                if (line == null) break;
                println(line);
            }
        } catch (IOException ioe) {
            println(translate(""Error"") + ioe.getMessage());
        }
    }","    private void loadChannels() {
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(new File(this.getProperty(""path.data"") + File.separator + ""Channels.xml""));
            NodeList items = doc.getElementsByTagName(""channel"");
            channels = new HashMap<String, Channel>();
            for (int x = 0; x < items.getLength(); x++) {
                Node item = items.item(x);
                Channel chan = new Channel(item);
                channels.put(chan.getName(), chan);
            }
            System.out.println(""Channels.xml found and loaded ("" + items.getLength() + "")"");
        } catch (Exception e) {
            channels = new HashMap<String, Channel>();
            System.out.println(""Error loading Channels.xml, starting with blank channel list."");
        }
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static BufferedReader getUserInfoStream(String name) throws IOException {
        BufferedReader in;
        try {
            URL url = new URL(""http://www.spoj.pl/users/"" + name.toLowerCase() + ""/"");
            in = new BufferedReader(new InputStreamReader(url.openStream()));
        } catch (MalformedURLException e) {
            in = null;
            throw e;
        }
        return in;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public static void main(String[] args) {
        if (args.length < 2) {
            print(""Usage: \njava TestRegularExpression "" + ""characterSequence regularExpression+"");
            System.exit(0);
        }
        print(""Input: \"" "" + args[0] + ""\"""");
        for (String arg : args) {
            print(""Regular expression: \"" "" + arg + ""\"" "");
            Pattern p = Pattern.compile(arg);
            Matcher m = p.matcher(args[0]);
            while (m.find()) {
                print(""Match \"" "" + m.group() + ""\"" at positions "" + m.start() + ""-"" + (m.end() - 1));
            }
        }
    }","    private static List retrieveQuotes(Report report, Symbol symbol, String suffix, TradingDate startDate, TradingDate endDate) throws ImportExportException {
        List quotes = new ArrayList();
        String URLString = constructURL(symbol, suffix, startDate, endDate);
        EODQuoteFilter filter = new YahooEODQuoteFilter(symbol);
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.getProxySettings();
        try {
            URL url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line = bufferedInput.readLine();
            while (line != null) {
                line = bufferedInput.readLine();
                if (line != null) {
                    try {
                        EODQuote quote = filter.toEODQuote(line);
                        quotes.add(quote);
                        verify(report, quote);
                    } catch (QuoteFormatException e) {
                        report.addError(Locale.getString(""YAHOO_DISPLAY_URL"") + "":"" + symbol + "":"" + Locale.getString(""ERROR"") + "": "" + e.getMessage());
                    }
                }
            }
            bufferedInput.close();
        } catch (BindException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (ConnectException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (UnknownHostException e) {
            throw new ImportExportException(Locale.getString(""UNKNOWN_HOST_ERROR"", e.getMessage()));
        } catch (NoRouteToHostException e) {
            throw new ImportExportException(Locale.getString(""DESTINATION_UNREACHABLE_ERROR"", e.getMessage()));
        } catch (MalformedURLException e) {
            throw new ImportExportException(Locale.getString(""INVALID_PROXY_ERROR"", proxyPreferences.host, proxyPreferences.port));
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
            throw new ImportExportException(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
        }
        return quotes;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public void doUpdateByLoginID() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByLoginID(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + ""ip_address = ?, mac_no = ? "" + ""WHERE  login_id= ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.ipAddress);
            ps.setString(5, this.macNO);
            ps.setString(6, this.loginID);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByLoginID(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }",0
"    public void imdb_search(String input) throws URISyntaxException {
        try {
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
            }
            URI uri;
            uri = new URI(""http://www.imdb.com/find?s=all&q="" + input.replace(' ', '+') + ""&x=0&y=0"");
            desktop.browse(uri);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }","    public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }",0
"    public void testEnd() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""spiritbot\\W"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""spiritbot: how are you doing"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                webBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"    public static void copy(FileInputStream inputStream, FileOutputStream outputStream) throws IOException {
        FileChannel input = inputStream.getChannel();
        FileChannel output = outputStream.getChannel();
        input.transferTo(0, input.size(), output);
    }","	public static File[] chooseFileOpenMultiple(JFrame frame) {
		File retval[];

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(true);

		//Show dialog and wait for user input
		int status = fc.showSaveDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFiles();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}",0
"    public void addNonKMLFile(final byte[] file, final String inZipFilename) throws IOException {
        ZipEntry entry = new ZipEntry(inZipFilename);
        this.zipOut.putNextEntry(entry);
        this.zipOut.write(file);
        log.info(entry.getName() + "" added to kmz."");
    }","    private static int binarySearchAlbum(Vector<MusicOutputDesign> v, int low, int high) {
        if (high < low) {
            return -1;
        }
        int mid = (high + low) / 2;
        String s = v.elementAt(mid).getAlbum().replace(""\\"", ""/"");
        if (s.compareToIgnoreCase(artist) > 0) {
            return binarySearchAlbum(v, low, mid - 1);
        } else if (s.compareToIgnoreCase(artist) < 0) {
            return binarySearchAlbum(v, mid + 1, high);
        } else {
            return mid;
        }
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public HTMLDocument handleURL(String suburl, HTTPSession session, HTTPRequestHeader header) throws WebMailException {
        UserData user = ((WebMailSession) session).getUser();
        Document helpdoc = (Document) cache.get(user.getPreferredLocale().getLanguage() + ""/"" + user.getTheme());
        if (helpdoc == null) {
            String helpdocpath = ""file://"" + store.getBasePath(user.getPreferredLocale(), user.getTheme()) + ""help.xml"";
            try {
                DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();
                helpdoc = parser.parse(helpdocpath);
            } catch (Exception ex) {
                ex.printStackTrace();
                throw new WebMailException(""Could not parse "" + helpdocpath);
            }
            cache.put(user.getPreferredLocale().getLanguage() + ""/"" + user.getTheme(), helpdoc);
        }
        Node n = session.getModel().importNode(helpdoc.getDocumentElement(), true);
        session.getModel().getDocumentElement().appendChild(n);
        if (header.isContentSet(""helptopic"") && session instanceof WebMailSession) {
            ((WebMailSession) session).getUserModel().setStateVar(""helptopic"", header.getContent(""helptopic""));
        }
        HTMLDocument retdoc = new XHTMLDocument(session.getModel(), store.getStylesheet(""help.xsl"", user.getPreferredLocale(), user.getTheme()));
        session.getModel().getDocumentElement().removeChild(n);
        if (header.isContentSet(""helptopic"") && session instanceof WebMailSession) {
            ((WebMailSession) session).getUserModel().removeAllStateVars(""helptopic"");
        }
        return retdoc;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static double[][] transp(double[][] m1) {
        int m = m1.length;
        int n = m1[0].length;
        double[][] ret = new double[n][m];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ret[j][i] = m1[i][j];
            }
        }
        return ret;
    }",0
"    public void setPilot(PilotData pilotData) throws UsernameNotValidException {
        try {
            if (pilotData.username.trim().equals("""") || pilotData.password.trim().equals("""")) throw new UsernameNotValidException(1, ""Username or password missing"");
            PreparedStatement psta;
            if (pilotData.id == 0) {
                psta = jdbc.prepareStatement(""INSERT INTO pilot "" + ""(name, address1, address2, zip, city, state, country, birthdate, "" + ""pft_theory, pft, medical, passenger, instructor, loc_language, "" + ""loc_country, loc_variant, username, password, id) "" + ""VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,pilot_id_seq.nextval)"");
            } else {
                psta = jdbc.prepareStatement(""UPDATE pilot SET "" + ""name = ?, address1 = ?, address2 = ?, "" + ""zip = ?, city = ?, state = ?, country = ?, birthdate = ?, pft_theory = ?,"" + ""pft = ?, medical = ?, passenger = ?, instructor = ?, loc_language = ?, "" + ""loc_country = ?, loc_variant = ?, username = ?, password = ? "" + ""WHERE id = ?"");
            }
            psta.setString(1, pilotData.name);
            psta.setString(2, pilotData.address1);
            psta.setString(3, pilotData.address2);
            psta.setString(4, pilotData.zip);
            psta.setString(5, pilotData.city);
            psta.setString(6, pilotData.state);
            psta.setString(7, pilotData.country);
            if (pilotData.birthdate != null) psta.setLong(8, pilotData.birthdate.getTime()); else psta.setNull(8, java.sql.Types.INTEGER);
            if (pilotData.pft_theory != null) psta.setLong(9, pilotData.pft_theory.getTime()); else psta.setNull(9, java.sql.Types.INTEGER);
            if (pilotData.pft != null) psta.setLong(10, pilotData.pft.getTime()); else psta.setNull(10, java.sql.Types.INTEGER);
            if (pilotData.medical != null) psta.setLong(11, pilotData.medical.getTime()); else psta.setNull(11, java.sql.Types.INTEGER);
            if (pilotData.passenger) psta.setString(12, ""Y""); else psta.setString(12, ""N"");
            if (pilotData.instructor) psta.setString(13, ""Y""); else psta.setString(13, ""N"");
            psta.setString(14, pilotData.loc_language);
            psta.setString(15, pilotData.loc_country);
            psta.setString(16, pilotData.loc_variant);
            psta.setString(17, pilotData.username);
            psta.setString(18, pilotData.password);
            if (pilotData.id != 0) {
                psta.setInt(19, pilotData.id);
            }
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException sql) {
            jdbc.rollback();
            sql.printStackTrace();
            throw new UsernameNotValidException(2, ""Username allready exist"");
        }
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String crypt(String str) {
        if (str == null || str.length() == 0) {
            throw new IllegalArgumentException(""String to encript cannot be null or zero length"");
        }
        StringBuffer hexString = new StringBuffer();
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        md.update(str.getBytes());
        byte[] hash = md.digest();
        for (int i = 0; i < hash.length; i++) {
            if ((0xff & hash[i]) < 0x10) {
                hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
            } else {
                hexString.append(Integer.toHexString(0xFF & hash[i]));
            }
        }
        return hexString.toString();
    }",0
"    public static void add100RowsToTargetDB(int block) {
        Scanner source = null;
        Connection connection = null;
        try {
            try {
                Class.forName(""sun.jdbc.odbc.JdbcOdbcDriver"");
                String dbUrl = ""jdbc:odbc:conn"";
                connection = DriverManager.getConnection(dbUrl);
                source = new Scanner(new File(""D:/Priyanka/My/Data/TargetData.csv""));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            int counter = 0;
            source.nextLine();
            int cursor = block * 100;
            while (cursor != 0) {
                cursor--;
                source.nextLine();
            }
            while (source.hasNextLine() && counter < 100) {
                Scanner ls = new Scanner(source.nextLine());
                ls.useDelimiter("","");
                String query = ""INSERT INTO [CompTarget].[dbo].[ReadingsT] ([time],[reads],[writes],[sysCall],[sysRead],[sysWrite],[random1],[numExecs] ,[rchar],[wchar],[reading_id]) VALUES "";
                query += ""( '"" + ls.next() + ""', "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + +ls.nextInt() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pkt + "")"";
                String query2 = ""INSERT INTO [CompTarget].[dbo].[PageReadingT]([pageout],[pagedout],[pagefree],[pagescan],[pageattach],[pagein],[main_reading_id],[page_reading_id]) VALUES"";
                query2 += ""( "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pkt + "", "" + spkt + "")"";
                pkt++;
                spkt++;
                Statement statement = ((Connection) connection).createStatement();
                try {
                    statement.executeQuery(query);
                } catch (SQLException e) {
                }
                try {
                    Statement statement2 = ((Connection) connection).createStatement();
                    statement2.executeQuery(query2);
                } catch (SQLException e) {
                }
                counter++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public void doUpdateByIP() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByIP(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + "" mac_no = ?, login_id= ? "" + ""WHERE ip_address = ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.macNO);
            ps.setString(5, this.loginID);
            ps.setString(6, this.ipAddress);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByIP(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByIP(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }","    public IntChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            String tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public void doUpdateByLoginID() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByLoginID(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + ""ip_address = ?, mac_no = ? "" + ""WHERE  login_id= ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.ipAddress);
            ps.setString(5, this.macNO);
            ps.setString(6, this.loginID);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByLoginID(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }",0
"    public static Image[][] reversalXandY(final Image[][] array) {
        int col = array[0].length;
        int row = array.length;
        Image[][] result = new Image[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public void doUpdateByIP() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByIP(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + "" mac_no = ?, login_id= ? "" + ""WHERE ip_address = ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.macNO);
            ps.setString(5, this.loginID);
            ps.setString(6, this.ipAddress);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByIP(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByIP(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }","    public synchronized String encrypt(String p_plainText) throws ServiceUnavailableException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new ServiceUnavailableException(e.getMessage());
        }
        try {
            md.update(p_plainText.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new ServiceUnavailableException(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }",0
"    public static void fileCopy(String fromPath, String toPath) throws IOException {
        File inputFile = new File(fromPath);
        File outputFile = new File(toPath);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public synchronized String encrypt(String p_plainText) throws ServiceUnavailableException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new ServiceUnavailableException(e.getMessage());
        }
        try {
            md.update(p_plainText.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new ServiceUnavailableException(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }",0
"    public void importTaskList(String data, boolean append) throws Exception {
        HashMap<String, TaskCommand> importedTasks = new HashMap<String, TaskCommand>();
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        ByteArrayInputStream reader = new ByteArrayInputStream(data.toString().getBytes());
        Document doc = docBuilder.parse(reader);
        NodeList tasksNodes = doc.getElementsByTagName(""task"");
        for (int x = 0; x < tasksNodes.getLength(); x++) {
            Node item = tasksNodes.item(x);
            TaskCommand taskCommand = new TaskCommand(item);
            importedTasks.put(taskCommand.getName(), taskCommand);
        }
        if (append) {
            if (tasks == null) tasks = new HashMap<String, TaskCommand>();
            tasks.putAll(importedTasks);
        } else {
            tasks = importedTasks;
        }
        saveTaskList(null);
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private void findGTK(java.awt.event.ActionEvent evt) {
        final javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File theme = fc.getSelectedFile();
            gtkTheme = theme.toString();
            gtkField.setText(themePack);
        }
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static String generate(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public void testReaderWriterUC2() throws Exception {
        String inFile = ""test_data/mri.png"";
        String outFile = ""test_output/mri__smooth_testReaderWriter.png"";
        itkImageFileReaderUC2_Pointer reader = itkImageFileReaderUC2.itkImageFileReaderUC2_New();
        itkImageFileWriterUC2_Pointer writer = itkImageFileWriterUC2.itkImageFileWriterUC2_New();
        reader.SetFileName(inFile);
        writer.SetFileName(outFile);
        writer.SetInput(reader.GetOutput());
        writer.Update();
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0
"    public void importChannels(String data, boolean append) throws Exception {
        HashMap<String, Channel> importedChannels = new HashMap<String, Channel>();
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        ByteArrayInputStream reader = new ByteArrayInputStream(data.toString().getBytes());
        Document doc = docBuilder.parse(reader);
        NodeList items = doc.getElementsByTagName(""channel"");
        for (int x = 0; x < items.getLength(); x++) {
            Node item = items.item(x);
            Channel chan = new Channel(item);
            importedChannels.put(chan.getName(), chan);
        }
        if (append) {
            if (channels == null) channels = new HashMap<String, Channel>();
            channels.putAll(importedChannels);
        } else {
            channels = importedChannels;
        }
        saveChannels(null);
    }","    private void findGTK(java.awt.event.ActionEvent evt) {
        final javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File theme = fc.getSelectedFile();
            gtkTheme = theme.toString();
            gtkField.setText(themePack);
        }
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    protected static void saveRom(E4Device device) throws IOException {
        File file = new File(device.remote.getDeviceLocalDir(), LAST_ROM_SESSION_FILENAME + ""."" + SESSION_EXT);
        Object[] rom = device.sampleDB.getRomSnapshot();
        ZipOutputStream zos = null;
        ObjectOutputStream oos = null;
        zos = new ZipOutputStream(new FileOutputStream(file));
        zos.setMethod(ZipOutputStream.DEFLATED);
        zos.setLevel(Deflater.BEST_SPEED);
        zos.putNextEntry(new ZipEntry(FLASH_SESSION_CONTENT_ENTRY));
        oos = new ObjectOutputStream(zos);
        oos.writeObject(rom);
        oos.close();
    }",0
"    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }","    public static String toMd5(String str) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.reset();
            messageDigest.update(str.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""NoSuchAlgorithmException caught!"");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public void setPilot(PilotData pilotData) throws UsernameNotValidException {
        try {
            if (pilotData.username.trim().equals("""") || pilotData.password.trim().equals("""")) throw new UsernameNotValidException(1, ""Username or password missing"");
            PreparedStatement psta;
            if (pilotData.id == 0) {
                psta = jdbc.prepareStatement(""INSERT INTO pilot "" + ""(name, address1, address2, zip, city, state, country, birthdate, "" + ""pft_theory, pft, medical, passenger, instructor, loc_language, "" + ""loc_country, loc_variant, username, password, id) "" + ""VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,pilot_id_seq.nextval)"");
            } else {
                psta = jdbc.prepareStatement(""UPDATE pilot SET "" + ""name = ?, address1 = ?, address2 = ?, "" + ""zip = ?, city = ?, state = ?, country = ?, birthdate = ?, pft_theory = ?,"" + ""pft = ?, medical = ?, passenger = ?, instructor = ?, loc_language = ?, "" + ""loc_country = ?, loc_variant = ?, username = ?, password = ? "" + ""WHERE id = ?"");
            }
            psta.setString(1, pilotData.name);
            psta.setString(2, pilotData.address1);
            psta.setString(3, pilotData.address2);
            psta.setString(4, pilotData.zip);
            psta.setString(5, pilotData.city);
            psta.setString(6, pilotData.state);
            psta.setString(7, pilotData.country);
            if (pilotData.birthdate != null) psta.setLong(8, pilotData.birthdate.getTime()); else psta.setNull(8, java.sql.Types.INTEGER);
            if (pilotData.pft_theory != null) psta.setLong(9, pilotData.pft_theory.getTime()); else psta.setNull(9, java.sql.Types.INTEGER);
            if (pilotData.pft != null) psta.setLong(10, pilotData.pft.getTime()); else psta.setNull(10, java.sql.Types.INTEGER);
            if (pilotData.medical != null) psta.setLong(11, pilotData.medical.getTime()); else psta.setNull(11, java.sql.Types.INTEGER);
            if (pilotData.passenger) psta.setString(12, ""Y""); else psta.setString(12, ""N"");
            if (pilotData.instructor) psta.setString(13, ""Y""); else psta.setString(13, ""N"");
            psta.setString(14, pilotData.loc_language);
            psta.setString(15, pilotData.loc_country);
            psta.setString(16, pilotData.loc_variant);
            psta.setString(17, pilotData.username);
            psta.setString(18, pilotData.password);
            if (pilotData.id != 0) {
                psta.setInt(19, pilotData.id);
            }
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException sql) {
            jdbc.rollback();
            sql.printStackTrace();
            throw new UsernameNotValidException(2, ""Username allready exist"");
        }
    }","    public String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                webBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"	public static File[] chooseFileDirectory(JFrame frame) {
		File retval[];

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		fc.setMultiSelectionEnabled(false);

		//Show dialog and wait for user input
		int status = fc.showSaveDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFiles();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public Matrix transpose() {
        final double array[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new DoubleMatrix(array);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public Matrix transpose() {
        final double array[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new DoubleMatrix(array);
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    @Test
    public void testDocumentDownloadKnowledgeBase() throws IOException {
        if (uploadedKbDocumentID == null) {
            fail(""Document Upload Test should run first"");
        }
        String downloadLink = GoogleDownloadLinkGenerator.generateTextDownloadLink(uploadedKbDocumentID);
        URL url = new URL(downloadLink);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        InputStream input = url.openStream();
        FileWriter fw = new FileWriter(""tmpOutput.kb"");
        Reader reader = new InputStreamReader(input);
        BufferedReader bufferedReader = new BufferedReader(reader);
        String strLine = """";
        int count = 0;
        while (count < 10000) {
            strLine = bufferedReader.readLine();
            if (strLine != null && strLine != """") {
                fw.write(strLine);
            }
            count++;
        }
    }","    public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                generellPathField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }",0
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(Init.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + Init.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + Init.GPL_URL + ""' to view GPL"");
            }
        }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }",0
"    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Bill bill = (Bill) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_BILL""));
            pst.setInt(1, bill.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }","    public static PZKSAbstractGenerateDialog createGeneraetDialog(Frame owner) {
        PZKSAbstractGenerateDialog dialog = null;
        String className = System.getProperty(""generate-dialog"");
        Class<?> clazz = null;
        try {
            clazz = Class.forName(className);
            Constructor<?> constructor = clazz.getConstructor(Frame.class);
            dialog = (PZKSAbstractGenerateDialog) constructor.newInstance(owner);
        } catch (Exception e) {
            System.out.println(""Error during creating generate dialog "" + className + "". Default dialog will be used"");
            System.out.println(e.getMessage());
            dialog = new PZKSLamaoGenerateDialog(owner);
        }
        return dialog;
    }",0
"    public IntSquareMatrix copyUpperToLower() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[j][i] = flmat[i][j];
            }
        }
        return this;
    }","    public static void fileCopy(String fromPath, String toPath) throws IOException {
        File inputFile = new File(fromPath);
        File outputFile = new File(toPath);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }",0
"    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }","    public boolean crear() {
        int result = 0;
        String sql = ""insert into jugadorxdivxronda"" + ""(jugadorxDivision_idJugadorxDivision, ronda_numeroRonda, resultado, idPareoRival, color, flotante, puntajeRonda, idPareo) "" + ""values (?, ?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(unjxdxr);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public synchronized String encrypt(String plaintext) throws PasswordException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new PasswordException(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new PasswordException(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new Base64Encoder()).encode(raw);
        return hash;
    }",0
"    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Bill bill = (Bill) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_BILL""));
            pst.setInt(1, bill.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }","    public static Object[] addToArray(Object[] array, Object member) {
        Object[] newArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = member;
        return newArray;
    }",0
"    public static void copyFileByNIO(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }","    protected static void saveFlash(E4Device device) throws IOException {
        File file = new File(device.remote.getDeviceLocalDir(), LAST_FLASH_SESSION_FILENAME + ""."" + SESSION_EXT);
        Object[] flash = device.presetDB.getFlashSnapshot();
        ZipOutputStream zos = null;
        ObjectOutputStream oos = null;
        zos = new ZipOutputStream(new FileOutputStream(file));
        zos.setMethod(ZipOutputStream.DEFLATED);
        zos.setLevel(Deflater.BEST_SPEED);
        zos.putNextEntry(new ZipEntry(FLASH_SESSION_CONTENT_ENTRY));
        oos = new ObjectOutputStream(zos);
        oos.writeObject(flash);
        oos.close();
    }",0
"    public static String getHashCode(String text) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        md.update(text.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }","    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Bill bill = (Bill) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_BILL""));
            pst.setInt(1, bill.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String crypt(String target) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(target.getBytes(""UTF-16""));
        BigInteger res = new BigInteger(1, md.digest(key.getBytes()));
        return res.toString(16);
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static boolean deleteDir(File dir) {
        if (dir.exists()) {
            File[] files = dir.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDir(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (dir.delete());
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    private static boolean loadClasses() {
        switch(jvm) {
            case MRJ_2_0:
                try {
                    Class aeTargetClass = Class.forName(""com.apple.MacOS.AETarget"");
                    Class osUtilsClass = Class.forName(""com.apple.MacOS.OSUtils"");
                    Class appleEventClass = Class.forName(""com.apple.MacOS.AppleEvent"");
                    Class aeClass = Class.forName(""com.apple.MacOS.ae"");
                    aeDescClass = Class.forName(""com.apple.MacOS.AEDesc"");
                    aeTargetConstructor = aeTargetClass.getDeclaredConstructor(new Class[] { int.class });
                    appleEventConstructor = appleEventClass.getDeclaredConstructor(new Class[] { int.class, int.class, aeTargetClass, int.class, int.class });
                    aeDescConstructor = aeDescClass.getDeclaredConstructor(new Class[] { String.class });
                    makeOSType = osUtilsClass.getDeclaredMethod(""makeOSType"", new Class[] { String.class });
                    putParameter = appleEventClass.getDeclaredMethod(""putParameter"", new Class[] { int.class, aeDescClass });
                    sendNoReply = appleEventClass.getDeclaredMethod(""sendNoReply"", new Class[] {});
                    Field keyDirectObjectField = aeClass.getDeclaredField(""keyDirectObject"");
                    keyDirectObject = (Integer) keyDirectObjectField.get(null);
                    Field autoGenerateReturnIDField = appleEventClass.getDeclaredField(""kAutoGenerateReturnID"");
                    kAutoGenerateReturnID = (Integer) autoGenerateReturnIDField.get(null);
                    Field anyTransactionIDField = appleEventClass.getDeclaredField(""kAnyTransactionID"");
                    kAnyTransactionID = (Integer) anyTransactionIDField.get(null);
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_2_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    mrjOSTypeClass = Class.forName(""com.apple.mrj.MRJOSType"");
                    Field systemFolderField = mrjFileUtilsClass.getDeclaredField(""kSystemFolderType"");
                    kSystemFolderType = systemFolderField.get(null);
                    findFolder = mrjFileUtilsClass.getDeclaredMethod(""findFolder"", new Class[] { mrjOSTypeClass });
                    getFileCreator = mrjFileUtilsClass.getDeclaredMethod(""getFileCreator"", new Class[] { File.class });
                    getFileType = mrjFileUtilsClass.getDeclaredMethod(""getFileType"", new Class[] { File.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (SecurityException se) {
                    errorMessage = se.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_0:
                try {
                    Class linker = Class.forName(""com.apple.mrj.jdirect.Linker"");
                    Constructor constructor = linker.getConstructor(new Class[] { Class.class });
                    linkage = constructor.newInstance(new Object[] { BrowserLauncher.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (InvocationTargetException ite) {
                    errorMessage = ite.getMessage();
                    return false;
                } catch (InstantiationException ie) {
                    errorMessage = ie.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    openURL = mrjFileUtilsClass.getDeclaredMethod(""openURL"", new Class[] { String.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                }
                break;
            default:
                break;
        }
        return true;
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String toMd5(String str) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.reset();
            messageDigest.update(str.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""NoSuchAlgorithmException caught!"");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }",0
"    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (!java.awt.Desktop.isDesktopSupported()) {
            Lang.showMesg(trayPtn.getMpwdPtn(), LangRes.P30F7A0F, """");
        }
        try {
            java.awt.Desktop.getDesktop().browse(new java.net.URI(ConsEnv.BLOGSITE));
        } catch (Exception exp) {
            Logs.exception(exp);
        }
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    private static boolean loadClasses() {
        switch(jvm) {
            case MRJ_2_0:
                try {
                    Class aeTargetClass = Class.forName(""com.apple.MacOS.AETarget"");
                    Class osUtilsClass = Class.forName(""com.apple.MacOS.OSUtils"");
                    Class appleEventClass = Class.forName(""com.apple.MacOS.AppleEvent"");
                    Class aeClass = Class.forName(""com.apple.MacOS.ae"");
                    aeDescClass = Class.forName(""com.apple.MacOS.AEDesc"");
                    aeTargetConstructor = aeTargetClass.getDeclaredConstructor(new Class[] { int.class });
                    appleEventConstructor = appleEventClass.getDeclaredConstructor(new Class[] { int.class, int.class, aeTargetClass, int.class, int.class });
                    aeDescConstructor = aeDescClass.getDeclaredConstructor(new Class[] { String.class });
                    makeOSType = osUtilsClass.getDeclaredMethod(""makeOSType"", new Class[] { String.class });
                    putParameter = appleEventClass.getDeclaredMethod(""putParameter"", new Class[] { int.class, aeDescClass });
                    sendNoReply = appleEventClass.getDeclaredMethod(""sendNoReply"", new Class[] {});
                    Field keyDirectObjectField = aeClass.getDeclaredField(""keyDirectObject"");
                    keyDirectObject = (Integer) keyDirectObjectField.get(null);
                    Field autoGenerateReturnIDField = appleEventClass.getDeclaredField(""kAutoGenerateReturnID"");
                    kAutoGenerateReturnID = (Integer) autoGenerateReturnIDField.get(null);
                    Field anyTransactionIDField = appleEventClass.getDeclaredField(""kAnyTransactionID"");
                    kAnyTransactionID = (Integer) anyTransactionIDField.get(null);
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_2_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    mrjOSTypeClass = Class.forName(""com.apple.mrj.MRJOSType"");
                    Field systemFolderField = mrjFileUtilsClass.getDeclaredField(""kSystemFolderType"");
                    kSystemFolderType = systemFolderField.get(null);
                    findFolder = mrjFileUtilsClass.getDeclaredMethod(""findFolder"", new Class[] { mrjOSTypeClass });
                    getFileCreator = mrjFileUtilsClass.getDeclaredMethod(""getFileCreator"", new Class[] { File.class });
                    getFileType = mrjFileUtilsClass.getDeclaredMethod(""getFileType"", new Class[] { File.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (SecurityException se) {
                    errorMessage = se.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_0:
                try {
                    Class linker = Class.forName(""com.apple.mrj.jdirect.Linker"");
                    Constructor constructor = linker.getConstructor(new Class[] { Class.class });
                    linkage = constructor.newInstance(new Object[] { BrowserLauncher.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (InvocationTargetException ite) {
                    errorMessage = ite.getMessage();
                    return false;
                } catch (InstantiationException ie) {
                    errorMessage = ie.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    openURLm = mrjFileUtilsClass.getDeclaredMethod(""openURL"", new Class[] { String.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                }
                break;
            default:
                break;
        }
        return true;
    }","    @Override
    public KSA00 getEstimate() {
        int probe_count = getData().getModel().getProbes().size();
        int ch_length = getData().getModel().getChromosomeLength();
        int clone_length = getData().getModel().getCloneLength();
        int clone_count = getData().cloneCount();
        int counter = 0;
        byte[][] scores = new byte[clone_count][];
        for (KSA00Data.Hybridization val : getData()) {
            scores[counter++] = val.getScore();
        }
        int[] probeOrder = ArrayUtil.createSequence(getData().getModel().getProbes().size(), false);
        int[][] joint = new int[probe_count][probe_count];
        for (int probeIndex1 = 0; probeIndex1 < probe_count; probeIndex1++) {
            for (int probeIndex2 = probeIndex1 + 1; probeIndex2 < probe_count; probeIndex2++) {
                for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
                    if ((scores[cloneIndex][probeIndex1] == 1) && (scores[cloneIndex][probeIndex2] == 1)) {
                        joint[probeIndex1][probeIndex2]++;
                    }
                }
                joint[probeIndex2][probeIndex1] = joint[probeIndex1][probeIndex2];
            }
        }
        int gap = ch_length - (probe_count * clone_length);
        double[] y = Initial_Ys(probeOrder, probe_count, clone_count, clone_length, gap, joint);
        return getData().getModel().create(Arrays.asList(ArrayUtils.toObject(y)));
    }",0
"    public static String getHashCode(String text) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }",0
"    public boolean crear() {
        int result = 0;
        String sql = ""insert into ronda"" + ""(divisionxTorneo_idDivisionxTorneo, fechaRonda, nRonda, estado ) "" + ""values (?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(unaRonda);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }","    public static void copyFile(File source, File destination) throws IOException {
        FileChannel srcChannel = new FileInputStream(source).getChannel();
        FileChannel dstChannel = new FileOutputStream(destination).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }",0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""', 999, 999, 999 )"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }","    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public IntChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            String tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }",0
"    public static String md5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""utf-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public void doUpdateByLoginID() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByLoginID(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + ""ip_address = ?, mac_no = ? "" + ""WHERE  login_id= ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.ipAddress);
            ps.setString(5, this.macNO);
            ps.setString(6, this.loginID);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByLoginID(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }","    public static String getMD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public int delete(BusinessObject o) throws DAOException {
        int delete = 0;
        Project project = (Project) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""DELETE_PROJECT""));
            pst.setInt(1, project.getId());
            delete = pst.executeUpdate();
            if (delete <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (delete > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return delete;
    }",0
"    public static void copy(FileInputStream inputStream, FileOutputStream outputStream) throws IOException {
        FileChannel input = inputStream.getChannel();
        FileChannel output = outputStream.getChannel();
        input.transferTo(0, input.size(), output);
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(MasteryCards.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
            }
        }","    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileInputStream input = new FileInputStream(srcFile);
        try {
            FileOutputStream output = new FileOutputStream(destFile);
            try {
                IOUtils.copy(input, output);
            } finally {
                IOUtils.close(output);
            }
        } finally {
            IOUtils.close(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }",0
"    public void youtube_search(String input) throws URISyntaxException {
        try {
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
            }
            URI uri;
            uri = new URI(""http://www.youtube.com/results?search_query="" + input.replace(' ', '+') + ""&search_type=&aq=f"");
            desktop.browse(uri);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }","	public static File chooseFileSave(JFrame frame) {
		File retval;

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(false);

		//Show dialog and wait for user input
		int status = fc.showSaveDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFile();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}",0
"    public void run(IAction action) {
        int style = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getStyle();
        Shell shell = new Shell((style & SWT.MIRRORED) != 0 ? SWT.RIGHT_TO_LEFT : SWT.NONE);
        GraphicalViewer viewer = new ScrollingGraphicalViewer();
        viewer.createControl(shell);
        viewer.setEditDomain(new DefaultEditDomain(null));
        viewer.setRootEditPart(new ScalableFreeformRootEditPart());
        viewer.setEditPartFactory(new ProjectEditPartFactory());
        viewer.setContents(getContents());
        viewer.flush();
        int printMode = new PrintModeDialog(shell).open();
        if (printMode == -1) return;
        PrintDialog dialog = new PrintDialog(shell, SWT.NULL);
        PrinterData data = dialog.open();
        if (data != null) {
            PrintGraphicalViewerOperation op = new PrintGraphicalViewerOperation(new Printer(data), viewer);
            op.setPrintMode(printMode);
            op.run(selectedFile.getName());
        }
    }","    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }",0
"    public Matrix transpose() {
        final double array[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new DoubleMatrix(array);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public static Object[] addObjectToArray(Object[] array, Object object) {
        Class<?> compType = Object.class;
        if (array != null) {
            compType = array.getClass().getComponentType();
        } else if (object != null) {
            compType = object.getClass();
        }
        int newArrLength = (array != null ? array.length + 1 : 1);
        Object[] newArr = (Object[]) Array.newInstance(compType, newArrLength);
        if (array != null) {
            System.arraycopy(array, 0, newArr, 0, array.length);
        }
        newArr[newArr.length - 1] = object;
        return newArr;
    }","    public static String hashStringMD5(String string) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(string.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (!java.awt.Desktop.isDesktopSupported()) {
            Lang.showMesg(trayPtn.getMpwdPtn(), LangRes.P30F7A0F, """");
        }
        try {
            java.awt.Desktop.getDesktop().browse(new java.net.URI(ConsEnv.MLOGSITE));
        } catch (Exception exp) {
            Logs.exception(exp);
        }
    }",0
"    @Override
    public void close() throws IOException {
        super.close();
        byte[] signatureData = toByteArray();
        ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream);
        ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(this.originalZipFile));
        ZipEntry zipEntry;
        while (null != (zipEntry = zipInputStream.getNextEntry())) {
            if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) {
                ZipEntry newZipEntry = new ZipEntry(zipEntry.getName());
                zipOutputStream.putNextEntry(newZipEntry);
                LOG.debug(""copying "" + zipEntry.getName());
                IOUtils.copy(zipInputStream, zipOutputStream);
            }
        }
        zipInputStream.close();
        zipEntry = new ZipEntry(ASiCUtil.SIGNATURE_FILE);
        LOG.debug(""writing "" + zipEntry.getName());
        zipOutputStream.putNextEntry(zipEntry);
        IOUtils.write(signatureData, zipOutputStream);
        zipOutputStream.close();
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public boolean ponerColorxRonda(int idJugadorDiv, int idRonda, int dato) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET color = "" + dato + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                fileBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public boolean crear() {
        int result = 0;
        String sql = ""insert into jugador"" + ""(apellidoPaterno, apellidoMaterno, nombres, fechaNacimiento, pais, rating, sexo)"" + ""values (?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(elJugador);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }",0
"    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }","    public static int deleteOrderStatusHis(String likePatten) {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append("" DELETE FROM JHF_ORDER_STATUS_HISTORY "").append("" WHERE   ORDER_ID LIKE  ? "");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            psmt.setString(1, ""%"" + likePatten + ""%"");
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println("" error when roll back !"");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println("" error  when psmt close or conn close ."");
            }
        }
        return deleted;
    }",0
"    public int delete(BusinessObject o) throws DAOException {
        int delete = 0;
        Item item = (Item) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""DELETE_ITEM""));
            pst.setInt(1, item.getId());
            delete = pst.executeUpdate();
            if (delete <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (delete > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return delete;
    }","    public static String cryptSha(String target) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(""SHA"");
        md.update(target.getBytes(""UTF-16""));
        BigInteger res = new BigInteger(1, md.digest(key.getBytes()));
        return res.toString(16);
    }",0
"    public static boolean deleteDir(File dir) {
        if (dir.exists()) {
            File[] files = dir.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDir(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (dir.delete());
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public void doUpdateByIP() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByIP(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + "" mac_no = ?, login_id= ? "" + ""WHERE ip_address = ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.macNO);
            ps.setString(5, this.loginID);
            ps.setString(6, this.ipAddress);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByIP(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByIP(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }","    public static void fileCopy(String fromPath, String toPath) throws IOException {
        File inputFile = new File(fromPath);
        File outputFile = new File(toPath);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }",0
"    public static PZKSAbstractGenerateDialog createGeneraetDialog(Frame owner) {
        PZKSAbstractGenerateDialog dialog = null;
        String className = System.getProperty(""generate-dialog"");
        Class<?> clazz = null;
        try {
            clazz = Class.forName(className);
            Constructor<?> constructor = clazz.getConstructor(Frame.class);
            dialog = (PZKSAbstractGenerateDialog) constructor.newInstance(owner);
        } catch (Exception e) {
            System.out.println(""Error during creating generate dialog "" + className + "". Default dialog will be used"");
            System.out.println(e.getMessage());
            dialog = new PZKSLamaoGenerateDialog(owner);
        }
        return dialog;
    }","    public RealSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",0
"    public static void add100RowsToTargetDB(int block) {
        Scanner source = null;
        Connection connection = null;
        try {
            try {
                Class.forName(""sun.jdbc.odbc.JdbcOdbcDriver"");
                String dbUrl = ""jdbc:odbc:conn"";
                connection = DriverManager.getConnection(dbUrl);
                source = new Scanner(new File(""D:/Priyanka/My/Data/TargetData.csv""));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            int counter = 0;
            source.nextLine();
            int cursor = block * 100;
            while (cursor != 0) {
                cursor--;
                source.nextLine();
            }
            while (source.hasNextLine() && counter < 100) {
                Scanner ls = new Scanner(source.nextLine());
                ls.useDelimiter("","");
                String query = ""INSERT INTO [CompTarget].[dbo].[ReadingsT] ([time],[reads],[writes],[sysCall],[sysRead],[sysWrite],[random1],[numExecs] ,[rchar],[wchar],[reading_id]) VALUES "";
                query += ""( '"" + ls.next() + ""', "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + +ls.nextInt() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pkt + "")"";
                String query2 = ""INSERT INTO [CompTarget].[dbo].[PageReadingT]([pageout],[pagedout],[pagefree],[pagescan],[pageattach],[pagein],[main_reading_id],[page_reading_id]) VALUES"";
                query2 += ""( "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pkt + "", "" + spkt + "")"";
                pkt++;
                spkt++;
                Statement statement = ((Connection) connection).createStatement();
                try {
                    statement.executeQuery(query);
                } catch (SQLException e) {
                }
                try {
                    Statement statement2 = ((Connection) connection).createStatement();
                    statement2.executeQuery(query2);
                } catch (SQLException e) {
                }
                counter++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    private void loadChannels() {
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(new File(this.getProperty(""path.data"") + File.separator + ""Channels.xml""));
            NodeList items = doc.getElementsByTagName(""channel"");
            channels = new HashMap<String, Channel>();
            for (int x = 0; x < items.getLength(); x++) {
                Node item = items.item(x);
                Channel chan = new Channel(item);
                channels.put(chan.getName(), chan);
            }
            System.out.println(""Channels.xml found and loaded ("" + items.getLength() + "")"");
        } catch (Exception e) {
            channels = new HashMap<String, Channel>();
            System.out.println(""Error loading Channels.xml, starting with blank channel list."");
        }
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static void add100RowsToTargetDB(int block) {
        Scanner source = null;
        Connection connection = null;
        try {
            try {
                Class.forName(""sun.jdbc.odbc.JdbcOdbcDriver"");
                String dbUrl = ""jdbc:odbc:conn"";
                connection = DriverManager.getConnection(dbUrl);
                source = new Scanner(new File(""D:/Priyanka/My/Data/TargetData.csv""));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            int counter = 0;
            source.nextLine();
            int cursor = block * 100;
            while (cursor != 0) {
                cursor--;
                source.nextLine();
            }
            while (source.hasNextLine() && counter < 100) {
                Scanner ls = new Scanner(source.nextLine());
                ls.useDelimiter("","");
                String query = ""INSERT INTO [CompTarget].[dbo].[ReadingsT] ([time],[reads],[writes],[sysCall],[sysRead],[sysWrite],[random1],[numExecs] ,[rchar],[wchar],[reading_id]) VALUES "";
                query += ""( '"" + ls.next() + ""', "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + +ls.nextInt() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pkt + "")"";
                String query2 = ""INSERT INTO [CompTarget].[dbo].[PageReadingT]([pageout],[pagedout],[pagefree],[pagescan],[pageattach],[pagein],[main_reading_id],[page_reading_id]) VALUES"";
                query2 += ""( "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pkt + "", "" + spkt + "")"";
                pkt++;
                spkt++;
                Statement statement = ((Connection) connection).createStatement();
                try {
                    statement.executeQuery(query);
                } catch (SQLException e) {
                }
                try {
                    Statement statement2 = ((Connection) connection).createStatement();
                    statement2.executeQuery(query2);
                } catch (SQLException e) {
                }
                counter++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0
"    @Override
    public KSA00 getEstimate() {
        int probe_count = getData().getModel().getProbes().size();
        int ch_length = getData().getModel().getChromosomeLength();
        int clone_length = getData().getModel().getCloneLength();
        int clone_count = getData().cloneCount();
        int counter = 0;
        byte[][] scores = new byte[clone_count][];
        for (KSA00Data.Hybridization val : getData()) {
            scores[counter++] = val.getScore();
        }
        int[] probeOrder = ArrayUtil.createSequence(getData().getModel().getProbes().size(), false);
        int[][] joint = new int[probe_count][probe_count];
        for (int probeIndex1 = 0; probeIndex1 < probe_count; probeIndex1++) {
            for (int probeIndex2 = probeIndex1 + 1; probeIndex2 < probe_count; probeIndex2++) {
                for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
                    if ((scores[cloneIndex][probeIndex1] == 1) && (scores[cloneIndex][probeIndex2] == 1)) {
                        joint[probeIndex1][probeIndex2]++;
                    }
                }
                joint[probeIndex2][probeIndex1] = joint[probeIndex1][probeIndex2];
            }
        }
        int gap = ch_length - (probe_count * clone_length);
        double[] y = Initial_Ys(probeOrder, probe_count, clone_count, clone_length, gap, joint);
        return getData().getModel().create(Arrays.asList(ArrayUtils.toObject(y)));
    }","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }",0
"    public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }","    public void importTaskList(String data, boolean append) throws Exception {
        HashMap<String, TaskCommand> importedTasks = new HashMap<String, TaskCommand>();
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        ByteArrayInputStream reader = new ByteArrayInputStream(data.toString().getBytes());
        Document doc = docBuilder.parse(reader);
        NodeList tasksNodes = doc.getElementsByTagName(""task"");
        for (int x = 0; x < tasksNodes.getLength(); x++) {
            Node item = tasksNodes.item(x);
            TaskCommand taskCommand = new TaskCommand(item);
            importedTasks.put(taskCommand.getName(), taskCommand);
        }
        if (append) {
            if (tasks == null) tasks = new HashMap<String, TaskCommand>();
            tasks.putAll(importedTasks);
        } else {
            tasks = importedTasks;
        }
        saveTaskList(null);
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static void copy(FileInputStream inputStream, FileOutputStream outputStream) throws IOException {
        FileChannel input = inputStream.getChannel();
        FileChannel output = outputStream.getChannel();
        input.transferTo(0, input.size(), output);
    }",0
"    private static final void makeWF_JavaComponent_jwf(Hashtable pWriterFormats) {
        pWriterFormats.put(""JavaComponent.jwf"", ""!<header>\n\n\n\n$<{java.CodeWriter.package>package $<java.CodeWriter.package>;$<}java.CodeWriter.package>\n\n\n\nimport java.io.FileOutputStream;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.io.StringReader;\nimport java.io.BufferedReader;\nimport java.io.FileWriter;\nimport java.io.BufferedWriter;\n\nimport java.util.Vector;\nimport java.util.Hashtable;\nimport java.util.Calendar;\n\n\n\n!<{import>/* section:import << */\n//\n\n!<import>\n\n//\n/* section:import >> */!<}import>\n\n\n\npublic class $<main.CodeWriter> \n$<{java.CodeWriter.extends>  extends $<java.CodeWriter.extends> $<}java.CodeWriter.extends> \n$<{java.CodeWriter.implements>  implements $<java.CodeWriter.implements> $<}java.CodeWriter.implements>\n{\n\n  /* Constants << */\n \n  // User Interface text message parts\n  public static final String writer__UITEXT_Method                   = \""method \"";\n  public static final String writer__UITEXT_Main                     = \""main \"";\n  public static final String writer__UITEXT_ExceptionIn              = \""Exception in \"";\n  public static final String writer__UITEXT_ColonNewLine             = \"":\\n\"";\n  public static final String writer__UITEXT_NewLine                  = \""\\n\"";\n  public static final String writer__UITEXT_Section                  = \""section \"";\n  public static final String writer__UITEXT_SavedFile                = \""Saved file:       \"";\n  public static final String writer__UITEXT_UnableToSaveFile         = \""Unable to save file: \"";\n  public static final String writer__UITEXT_UnableToBackupFile       = \""Unable to backup file: \"";\n  public static final String writer__UITEXT_ToBackupFolder           = \"" to backup folder: \"";\n  public static final String writer__UITEXT_BackupFolderColon        = \""Backup folder: \"";\n  public static final String writer__UITEXT_BackupFolderExistFailure = \"" does not exist and cannot be created.\"";\n  public static final String writer__UITEXT_BackupFolderNotAFolder   = \"" is not a folder.\"";\n  public static final String writer__UITEXT_BackupFolderNotWritable  = \"" is not writable.\"";\n  public static final String writer__UITEXT_CodeWriterState          = \""Code Writer State: \"";\n  public static final String writer__UITEXT_GetFileIndexEquals       = \""\\n_getFileIndex()    = \"";\n  public static final String writer__UITEXT_GetFullFileNameEquals    = \""\\n_getFullFileName() = \"";\n  public static final String writer__UITEXT_GetOutputFolderEquals    = \""\\n_getOutputFolder() = \"";\n  public static final String writer__UITEXT_ErrorHeader              = \""\\n\\n--- CodeWriter Error Description Start ---\\n\\n\"";\n  public static final String writer__UITEXT_ErrorFooter              = \""\\n--- CodeWriter Error Description End -----\\n\\n\"";\n  public static final String writer__UITEXT_PlaceHolderException \n    = \""This placeholder Exception should never be thrown: there is an error in the WriterFormat.\"";\n\n  public static final int writer__FILE_BUFFER_SIZE  = 4096;                // initial size of StringBuffer\n\n  /* Constants >> */\n\n\n  /* Writer Variables << */\n\n  protected String[]     writer__iFileNameRoots     = new String[] {};     // generated file name roots\n  protected int          writer__iNumFiles          = 0;                   // number of generated files\n  \n  protected String       writer__iFileNamePrefix    = \""\"";                  // failsafe default\n  protected String       writer__iFileNameSuffix    = \""\"";                  // failsafe default\n\n  protected String       writer__iBackupPrefix      = \""\"";                  // failsafe default\n  protected String       writer__iBackupSuffix      = \""\"";                  // failsafe default\n\n  protected StringBuffer writer__iCurrentText       = new StringBuffer();  // current text\n  protected int          writer__iCurrentFileIndex  = 0;                   // current file index\n\n  protected boolean      writer__iSave              = true;                // save generated code to disk\n  protected boolean      writer__iBackup            = true;                // make backups\n\n  protected String       writer__iOutputFolder      = \"".\"";                 // written code is output to this folder\n  protected String       writer__iBackupFolder      = \"".\"";                 // overwritten files are placed here\n\n  protected Hashtable    writer__iProperties            = new Hashtable(); // lookup table for compile time properties\n  protected boolean      writer__iPropertiesInitialised = false;           // true => lookup table initialiased\n\n  /* Writer Variables >> */\n\n\n  !<{declare>/* section:declare << */\n  //\n\n  !<declare>\n\n  //\n  /* section:declare >> */!<}declare>\n\n\n\n  /* Writer Services << */\n\n  /* Initialize. */\n  public void writer__initialize() {\n    writer__iCurrentFileIndex = 0;\n    writer__setDefaults();\n  }\n\n\n\n  /** Main loop.\n   *  Template script is placed here in the @body section.\n   */\n  public void writer__write() throws Exception {\n\n    // initialize\n    String writer__currentSection = \""init\"";\n\n    try {\n      !<{init>/* section:init << */\n      //\n\n      !<init>\n\n      //\n      /* section:init >> */!<}init>\n\n\n      // write files loop\n      int      writer__numFiles = _getNumFiles();\n      int      writer__fileI    = 0;\n      writer__next_file: for( writer__fileI = 0; writer__fileI < writer__numFiles; writer__fileI++ ) {\n\n        !<{prewrite>/* section:prewrite << */\n        // \n\n        writer__currentSection = \""prewrite\"";\n        !<prewrite>\n\n        //\n        /* section:prewrite >> */!<}prewrite>\n\n\n        if( ! writer__startFile() ) { continue writer__next_file; }\n\n\n        !<{body>/* section:body << */\n        //\n\n        writer__currentSection = \""body\"";\n        !<body>\n\n        //\n        /* section:body >> */!<}body>\n\n\n        if( ! writer__endFile() ) { continue writer__next_file; }\n\n\n        !<{postwrite>/* section:postwrite << */\n        // \n\n        writer__currentSection = \""postwrite\"";\n        !<postwrite>\n\n        //\n        /* section:postwrite >> */!<}postwrite>\n\n        writer__nextFile();       \n      }\n \n\n      !<{cleanup>/* section:cleanup << */\n      //\n \n      writer__currentSection = \""cleanup\"";\n      !<cleanup>\n\n      //\n      /* section:cleanup >> */!<}cleanup>\n\n\n    } \n    catch( Exception e ) {\n      writer__handleException( writer__UITEXT_ExceptionIn + writer__UITEXT_Section + writer__currentSection, e );\n    }\n\n  }\n\n\n\n  /** Start writing a file. */\n  public boolean writer__startFile() {\n    writer__iCurrentText = new StringBuffer( writer__FILE_BUFFER_SIZE );\n    return true;\n  }\n\n\n\n  /** End writing a file. */\n  public boolean writer__endFile() throws Exception {\n    boolean endOK = true;\n\n    String fileName = _getFullFileName();\n    String filePath \n      = writer__iOutputFolder\n      + \""$<\\jostraca.system.fileSeparator>\""\n      + fileName\n      ;\n\n    if( writer__iBackup ) {\n      try {\n        writer__backup( filePath, fileName, writer__iBackupFolder );\n\n      } \n      catch( Exception e ) {\n        writer__handleException( writer__UITEXT_UnableToBackupFile \n                                + filePath \n                                + writer__UITEXT_ToBackupFolder\n                                + writer__iBackupFolder\n                                ,e \n                              );\n        endOK = false;\n      }\n    }\n \n    if( endOK && writer__iSave ) {\n      try {\n        writer__save( filePath, writer__iCurrentText.toString() );\n      } \n      catch( Exception e ) {\n        writer__handleException( writer__UITEXT_UnableToSaveFile + filePath, e );\n        endOK = false;\n      }\n    }\n\n    return endOK;\n  }\n\n\n\n  /** Move to next file. */\n  public void writer__nextFile() {\n    writer__iCurrentFileIndex = writer__iCurrentFileIndex + 1;\n  }\n\n\n\n  /** Set defaults from configuration property set. */\n  public void writer__setDefaults() {\n\n    $<{main.FileNameRoot>_setFileNameRoot( \""$<\\main.FileNameRoot>\"" );$<}main.FileNameRoot>\n    $<{main.FileNamePrefix>_setFileNamePrefix( \""$<\\main.FileNamePrefix>\"" );$<}main.FileNamePrefix>\n    $<{main.FileNameSuffix>_setFileNameSuffix( \""$<\\main.FileNameSuffix>\"" );$<}main.FileNameSufffix>\n\n    $<{main.OutputFolder>_setOutputFolder( \""$<\\main.OutputFolder>\"" );$<}main.OutputFolder>\n\n    $<{main.BackupFolder>_setBackupFolder( \""$<\\main.BackupFolder>\"" );$<}main.BackupFolder>\n    $<{main.BackupPrefix>_setBackupPrefix( \""$<\\main.BackupPrefix>\"" );$<}main.BackupPrefix>\n    $<{main.BackupSuffix>_setBackupSuffix( \""$<\\main.BackupSuffix>\"" );$<}main.BackupSufffix>\n    _backup( \""$<lang.TrueString>\"".equals( \""$<jostraca.MakeBackup>\"" ) );\n\n  }\n\n\n\n  /** Handle exceptions: print an explanation for user. */\n  public void writer__handleException( String rMessage, Exception rException ) throws Exception {\n\n    StringBuffer userMsg = new StringBuffer( 111 );\n\n    userMsg.append( writer__UITEXT_ErrorHeader );\n\n    userMsg.append( writer__describeState() + rMessage + writer__UITEXT_ColonNewLine );\n\n    StringWriter stringWriter = new StringWriter();\n    rException.printStackTrace( new PrintWriter( stringWriter) );\n    userMsg.append( stringWriter.toString() );\n\n    userMsg.append( writer__UITEXT_ErrorFooter );\n\n    throw new Exception( userMsg.toString() );\n  }\n\n\n\n  /** Provide a concise description of the state of the CodeWriter. */\n  public String writer__describeState() {\n    String currentState \n      = writer__UITEXT_CodeWriterState\n      + writer__UITEXT_GetFileIndexEquals    + _getFileIndex() \n      + writer__UITEXT_GetFullFileNameEquals + _getFullFileName()\n      + writer__UITEXT_GetOutputFolderEquals + _getOutputFolder()\n      + writer__UITEXT_NewLine\n      ; \n    return currentState;\n  }\n\n\n\n  /** Save written files to disk. \n   *  @param rFilePath Save location.\n   *  @param rContent  File content.\n   */\n  public void writer__save( String rFilePath, String rContent ) throws Exception {\n    StringReader   sr = new StringReader( rContent );\n    BufferedReader br = new BufferedReader( sr );\n    FileWriter     fw = new FileWriter( rFilePath );\n    BufferedWriter bw = new BufferedWriter( fw );\n\n    String line;\n    while( null != (line = br.readLine()) ) {\n      bw.write( line );\n      bw.newLine();\n    }\n\n    bw.close();\n    br.close();\n\n  }\n\n\n\n  /** Read file from disk.\n   *  @param rFilePath.\n   */\n  public String writer__read( String rFilePath ) throws Exception {\n    File       file       = new File( rFilePath );\n    FileReader in         = new FileReader( file );\n    int        size       = (int) file.length();\n    char[]     data       = new char[size];\n    int        charsRead  = 0;\n\n    while( charsRead < size ) {\n      charsRead += in.read( data, charsRead, size - charsRead );\n    }\n\n    return new String( data );\n  }\n\n\n\n  /** Backup overwritten files, if they exist.\n   *  Backups have the format:\n   *  [YYYYMMDDhhmmss][prefix][filename][suffix]\n   *  @param rFilePath     Full Path of File to backup (including name).\n   *  @param rFileName     Name of File to backup.\n   *  @param rBackupFolder Folder to place backups in.\n   */ \n  public void writer__backup( String rFilePath, String rFileName, String rBackupFolder ) throws Exception {\n\n    File backupFolder = new File( rBackupFolder );\n\n    // check backup folder ( create if necessary )\n    // ...\n\n    if( ! backupFolder.exists() ) {\n      if( ! backupFolder.mkdir() ) {\n        throw new Exception( writer__UITEXT_BackupFolderColon\n                             + backupFolder\n                             + writer__UITEXT_BackupFolderExistFailure );\n      }\n    }\n    if( ! backupFolder.isDirectory() ) {\n      throw new Exception( writer__UITEXT_BackupFolderColon \n                           + backupFolder\n                           + writer__UITEXT_BackupFolderNotAFolder );\n    }\n    if( ! backupFolder.canWrite() ) {\n      throw new Exception( writer__UITEXT_BackupFolderColon\n                           + backupFolder\n                           + writer__UITEXT_BackupFolderNotWritable );\n    }\n\n    // create backup file path\n    Calendar calendar = Calendar.getInstance();\n    String year_yyyy = _align( String.valueOf( calendar.get(Calendar.YEAR) ),         \""0\"", 4, 'r' );\n    String month_mm  = _align( String.valueOf( (1+calendar.get(Calendar.MONTH)) ),    \""0\"", 2, 'r' );\n    String day_dd    = _align( String.valueOf( calendar.get(Calendar.DAY_OF_MONTH) ), \""0\"", 2, 'r' );\n    String hour_hh   = _align( String.valueOf( calendar.get(Calendar.HOUR_OF_DAY) ),  \""0\"", 2, 'r' );\n    String minute_mm = _align( String.valueOf( calendar.get(Calendar.MINUTE) ),       \""0\"", 2, 'r' );\n    String second_ss = _align( String.valueOf( calendar.get(Calendar.SECOND) ),       \""0\"", 2, 'r' );\n    String dateTime       = year_yyyy+month_mm+day_dd+hour_hh+minute_mm+second_ss;\n    String backupFileName = dateTime + writer__iBackupPrefix + rFileName + writer__iBackupSuffix;\n    File   backupFilePath = new File( rBackupFolder, backupFileName );\n    \n    // save backup file\n    File fileToBackup = new File( rFilePath );\n    if( fileToBackup.exists() ) {\n      String fileContents = writer__read( rFilePath );\n      writer__save( backupFilePath.getPath(), fileContents );\n    }\n  }\n\n\n\n  /** Set compile time properties. */\n  public void writer__initProperties() {\n    $<{jostraca.properties.NameValueList>\n    String[] propertyList = new String[] { $<jostraca.properties.NameValueList> };\n    int numProperties = propertyList.length;\n    for( int propI = 0; propI < numProperties; propI += 2 ) {\n      writer__iProperties.put( propertyList[ propI ], propertyList[ propI+1 ] );\n    }\n    writer__iPropertiesInitialised = true;\n    $<}jostraca.properties.NameValueList>\n  }\n\n\n  /* Writer Services >> */\n \n\n\n\n  /* Template Services (File Generation) << */\n\n  /** Set the prefix of the files to be written. \n   *  @param rPrefix Written files prefix.\n   */\n  public void _setFileNamePrefix( String rPrefix ) {\n    if( null == rPrefix ) {\n      return; // ignore\n    }\n    writer__iFileNamePrefix = rPrefix;\n  }\n\n\n\n  /** Get prefix of files to be written. */\n  public String _getFileNamePrefix() {\n    return writer__iFileNamePrefix;\n  }\n\n\n\n  /** Set the suffix of the files to be written. \n   *  @param rSuffix Written files suffix.\n   */\n  public void _setFileNameSuffix( String rSuffix ) {\n    if( null == rSuffix ) {\n      return; // ignore\n    }\n    writer__iFileNameSuffix = rSuffix;\n  }\n\n\n\n  /** Get suffix of files to be written. */\n  public String _getFileNameSuffix() {\n    return writer__iFileNameSuffix;\n  }\n\n\n\n  /** Set the full name of the file to be written. \n   *  Prefix and Suffix are set to empty\n   *  @param rName Full name of the file to write.\n   */\n  public void _setFullFileName( String rName ) {\n    _setFileNamePrefix( \""\"" );\n    _setFileNameRoot(   rName );\n    _setFileNameSuffix( \""\"" );\n  }\n\n\n\n  /** Get the full name of current file being generated. */\n  public String _getFullFileName() {\n    return _getFileNamePrefix() + _getFileNameRoot() + _getFileNameSuffix();\n  }\n\n\n\n  /** Set the names of the files to be written. \n   *  Prefix and Suffix are set to empty\n   *  @param rName Full name of the file to write.\n   */\n  public void _setFullFileNames( String[] rNames ) {\n    _setFileNamePrefix( \""\"" );\n    _setFileNameRoots(  rNames );\n    _setFileNameSuffix( \""\"" );\n  }\n\n\n\n  /** Get the full names of the files to be written. */\n  public String[] _getFullFileNames() {\n\n    String[] fileNameRoots  = _getFileNameRoots();\n    int      numFiles       = fileNameRoots.length;\n    String[] fullFileNames  = new String[ numFiles ];\n    String   fileNamePrefix = _getFileNamePrefix();\n    String   fileNameSuffix = _getFileNameSuffix();\n\n    for( int fileI = 0; fileI < numFiles; fileI++ ) {\n      fullFileNames[ fileI ] = fileNamePrefix + fileNameRoots[ fileI ] + fileNameSuffix;\n    }\n\n    return fullFileNames;\n  }\n\n\n\n  /** Set the root of the name of the file to be written. \n   *  @param rFileNameRoot Root of the name of file to be written.\n   */\n  public void _setFileNameRoot( String rFileNameRoot ) {\n    if( null == rFileNameRoot ) {\n      return; // ignore\n    }\n    _setFileNameRoots( new String[] { rFileNameRoot } );\n  }\n\n\n\n  /** Get the root of the name of current file being generated. */\n  public String _getFileNameRoot() {\n    if( 0 < writer__iFileNameRoots.length ) {\n      return writer__iFileNameRoots[ writer__iCurrentFileIndex ];\n    }\n    return \""\"";\n  }\n\n\n\n  /** Set the roots of the names of the files to be written. \n   *  @param rFileNameRoots Roots of names of files to be written.\n   */\n  public void _setFileNameRoots( String[] rFileNameRoots ) {\n    if( null == rFileNameRoots ) {\n      return; // ignore\n    }\n\n    // copy\n    String[] roots = (String[]) rFileNameRoots.clone();\n\n    // normalize - replace nulls\n    int numRoots = roots.length;\n    for(int rootI = 0; rootI < numRoots; rootI++) {\n      if( null == roots[ rootI ] ) {\n        roots[ rootI ] = \""\"";\n      }\n    }\n\n    // save roots\n    writer__iFileNameRoots = roots;\n    writer__iNumFiles      = numRoots;\n  }\n\n\n\n  /** Get roots of the names of files to be written. */\n  public String[] _getFileNameRoots() {\n    return writer__iFileNameRoots;\n  }\n\n\n\n  /** Get index of file currently being generated. */\n  public int _getFileIndex() {\n    return writer__iCurrentFileIndex;\n  }\n\n\n\n  /** Get number of generated files. */\n  public int _getNumFiles() {\n    return writer__iNumFiles;\n  }\n\n\n\n  /** Set output folder.\n   *  @param rOutputFolder Folder to output generated code to.\n   */\n  public void _setOutputFolder( String rOutputFolder ) {\n    writer__iOutputFolder = rOutputFolder;\n  }\n\n\n\n  /** Get output folder. */\n  public String _getOutputFolder() {\n    return writer__iOutputFolder;\n  }\n\n\n\n  /** Set backup folder.\n   *  @param rBackupFolder Folder to backup overwritten files to.\n   */\n  public void _setBackupFolder( String rBackupFolder ) {\n    writer__iBackupFolder = writer__iOutputFolder + \""$<\\jostraca.system.fileSeparator>\"" + rBackupFolder;\n  }\n\n\n\n  /** Get backup folder. */\n  public String _getBackupFolder() {\n    return writer__iBackupFolder;\n  }\n\n\n\n  /** Set the suffix of backup files.\n   *  @param rSuffix Backup files suffix.\n   */\n  public void _setBackupSuffix( String rSuffix ) {\n    if( null == rSuffix ) {\n      return; // ignore\n    }\n    writer__iBackupSuffix = rSuffix;\n  }\n\n\n\n  /** Set the prefix of backup files.\n   *  @param rPrefix Backup files prefix.\n   */\n  public void _setBackupPrefix( String rPrefix ) {\n    if( null == rPrefix ) {\n      return; // ignore\n    }\n    writer__iBackupPrefix = rPrefix;\n  }\n\n\n\n  /** Set to true if written files are to be backed up to disk automatically. \n   *  @param rBackup True => Backup files to disk.\n   */\n  public void _backup( boolean rBackup ) {\n    writer__iBackup = rBackup;\n  }\n\n\n\n  /** Set to true if written files are to be saved to disk automatically. \n   *  @param rSave True => Save written files to disk.\n   */\n  public void _save( boolean rSave ) {\n    writer__iSave = rSave;\n  }\n\n\n  /* Template Services (File Generation) >> */\n\n\n\n\n  /* Template Services (Control) << */\n\n  /** Get compile time property\n   *  @param rName Name of property to get.\n   */\n  public String _getProperty( String rName ) {\n    String result = \""\"";\n\n    if( ! writer__iPropertiesInitialised ) {\n      writer__initProperties();\n    }\n\n    if( writer__iProperties.containsKey( rName ) ) {\n      result = (String) writer__iProperties.get( rName );\n    }\n\n    return result;\n  }\n\n  /* Template Services (Control) >> */\n\n\n\n  /* Template Services (Text Production) << */\n\n\n  // inserts\n  // ...\n\n  /** Insert text into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rText Text to insert.\n   */\n  public void _insert( String rText ) {\n    writer__iCurrentText.append( rText );\n  }\n\n  /** Insert string representation of object into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rObject Object to insert.\n   */\n  public void _insert( Object rObject ) {\n    writer__iCurrentText.append( \""\""+rObject );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rInt int to insert\n   */\n  public void _insert( int rInt ) {\n    writer__iCurrentText.append( rInt );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rLong long to insert\n   */\n  public void _insert( long rLong ) {\n    writer__iCurrentText.append( rLong );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rShort short to insert\n   */\n  public void _insert( short rShort ) {\n    writer__iCurrentText.append( rShort );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rByte byte to insert\n   */\n  public void _insert( byte rByte ) {\n    writer__iCurrentText.append( rByte );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rDouble double to insert\n   */\n  public void _insert( double rDouble ) {\n    writer__iCurrentText.append( rDouble );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rFloat float to insert\n   */\n  public void _insert( float rFloat ) {\n    writer__iCurrentText.append( rFloat );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rChar char to insert\n   */\n  public void _insert( char rChar ) {\n    writer__iCurrentText.append( rChar );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rBoolean boolean to insert\n   */\n  public void _insert( boolean rBoolean ) {\n    writer__iCurrentText.append( rBoolean );\n  }\n\n\n\n  /** Create a String containing specified number of spaces.\n   *  @param rNumSpaces Number of spaces to place in String\n   */\n  public String _spaces( int rNumSpaces ) {\n    int numSpaces = rNumSpaces;\n    if( 0 > numSpaces ) { numSpaces *= -1; }\n    StringBuffer spaces = new StringBuffer( numSpaces );\n    for(int spaceI = 0; spaceI < numSpaces; spaceI++) {\n      spaces.append(\"" \"");\n    }\n    return spaces.toString();\n  }\n\n\n\n  /** Left align String with spaces. */ \n  public String _left( String rText, int rColWidth ) {\n    return _align( rText, \"" \"", rColWidth, 'l' );\n  } \n\n\n\n  /** Right align String with spaces. */ \n  public String _right( String rText, int rColWidth ) {\n    return _align( rText, \"" \"", rColWidth, 'r' );\n  } \n\n\n\n  /** Center align String with spaces. */ \n  public String _center( String rText, int rColWidth ) {\n    return _align( rText, \"" \"", rColWidth, 'c' );\n  } \n\n\n\n  /** Align text within background text to specified column width. \n   *  Alignment can be 'l': left, 'c': center, 'r': right\n   */\n  public String _align( String rText, String rBackText, int rColWidth, char rAlignment ) {\n    String result = rText;\n \n    if( null == rText ) { \n       result = \""\""; \n    }\n    else if( null != rBackText ) {\n      try {\n        int textLen = rText.length();\n        if( rColWidth > textLen ) {\n          int    backTextLen     = rBackText.length();\n          int    remainWidth     = rColWidth - textLen;\n          int    backTextRepeats = remainWidth / backTextLen;\n          int    backTextRemain  = remainWidth % backTextLen;\n          String back            = \""\"";\n          for( int backTextI = 0; backTextI < backTextRepeats; backTextI++ ) {\n            back = back + rBackText;\n          }\n          back = back + rBackText.substring( 0, backTextRemain );\n \n          switch( rAlignment ) {\n          case 'l':\n            result = result + back;\n            break;\n          case 'c':\n            result = back.substring( 0, (back.length()/2) ) + result + back.substring( (back.length()/2) );\n            break;\n          case 'r':\n            result = back + result;\n            break;\n          }\n        }\n      } \n      catch( Exception e ) {\n        result = rText;\n      }\n    }\n    return result;\n  }\n\n\n\n  /** Set current text of file currently being generated. */\n  public void _setText( String rText) {\n    writer__iCurrentText = new StringBuffer( rText );\n  }\n\n\n\n  /** Get current text of file currently being generated. */\n  public String _getText() {\n    return writer__iCurrentText.toString();\n  }\n\n  /* Template Services (Text Production) << */\n\n}\n\n\n!<footer>\n"");
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public void shouldAllowClosingInputStreamTwice() throws IOException {
        OutputStream outputStream = fileSystem.createOutputStream(_(""hello""), OutputMode.OVERWRITE);
        outputStream.write(new byte[] { 1, 2, 3 });
        outputStream.close();
        InputStream inputStream = fileSystem.createInputStream(_(""hello""));
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        IOUtils.copy(inputStream, buffer);
        inputStream.close();
        inputStream.close();
    }","    public CMatrix transposed() {
        CMatrix m = new CMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static Object[] addObjectToArray(Object[] array, Object obj) {
        Class<?> compType = Object.class;
        if (array != null) {
            compType = array.getClass().getComponentType();
        } else if (obj != null) {
            compType = obj.getClass();
        }
        int newArrLength = (array != null ? array.length + 1 : 1);
        Object[] newArr = (Object[]) Array.newInstance(compType, newArrLength);
        if (array != null) {
            System.arraycopy(array, 0, newArr, 0, array.length);
        }
        newArr[newArr.length - 1] = obj;
        return newArr;
    }",0
"    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileInputStream input = new FileInputStream(srcFile);
        try {
            FileOutputStream output = new FileOutputStream(destFile);
            try {
                IOUtils.copy(input, output);
            } finally {
                IOUtils.close(output);
            }
        } finally {
            IOUtils.close(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }","    public static String SHA512(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-512"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public IntChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            String tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static int deleteOrder(String likePatten) {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append("" DELETE FROM JHF_ALIVE_ORDER "").append("" WHERE   ORDER_ID LIKE  ? "");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            psmt.setString(1, ""%"" + likePatten + ""%"");
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println("" error when roll back !"");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println("" error  when psmt close or conn close ."");
            }
        }
        return deleted;
    }","    public DoubleChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            String tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }",0
"    private void loadTaskList() {
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(new File(this.getProperty(""path.data"") + File.separator + ""Tasks.xml""));
            NodeList tasksNodes = doc.getElementsByTagName(""task"");
            tasks = new HashMap<String, TaskCommand>();
            for (int x = 0; x < tasksNodes.getLength(); x++) {
                Node item = tasksNodes.item(x);
                TaskCommand taskCommand = new TaskCommand(item);
                tasks.put(taskCommand.getName(), taskCommand);
            }
            System.out.println(""Tasks.xml found and loaded ("" + tasksNodes.getLength() + "")"");
        } catch (Exception e) {
            tasks = new HashMap<String, TaskCommand>();
            System.out.println(""Error loading Tasks.xml, starting with no tasks."");
        }
    }","    public static boolean deleteDir(File dir) {
        if (dir.exists()) {
            File[] files = dir.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDir(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (dir.delete());
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private static String simpleCompute(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""utf-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","            public void actionPerformed(final ActionEvent e) {
                if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                    try {
                        java.awt.Desktop.getDesktop().open(new File(""resources/hilfe/index.html""));
                    } catch (final IOException ex) {
                        System.err.println(""Die Hilfeseite von BAUS! konnte nicht gefunden werden"");
                    }
                }
            }",0
"    private static int binarySearchArtist(Vector<MusicOutputDesign> v, int low, int high) {
        if (high < low) {
            return -1;
        }
        int mid = (high + low) / 2;
        String s = v.elementAt(mid).getArtist().replace(""\\"", ""/"");
        if (s.compareToIgnoreCase(artist) > 0) {
            return binarySearchArtist(v, low, mid - 1);
        } else if (s.compareToIgnoreCase(artist) < 0) {
            return binarySearchArtist(v, mid + 1, high);
        } else {
            return mid;
        }
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static double[][] transp(double[][] m1) {
        int m = m1.length;
        int n = m1[0].length;
        double[][] ret = new double[n][m];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ret[j][i] = m1[i][j];
            }
        }
        return ret;
    }","    private void getRandomGuid(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = secureRandom.nextLong();
            } else {
                rand = random.nextLong();
            }
            sbValueBeforeMD5.append(id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static void main(String[] args) {
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapterX/tooltip3.pdf""));
            document.open();
            writer.setPageEvent(new TooltipExample3());
            Paragraph p = new Paragraph(""Hello World "");
            Chunk c = new Chunk(""tooltip"");
            c.setGenericTag(""This is my tooltip."");
            p.add(c);
            document.add(p);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0
"    public static String hash(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public int delete(BusinessObject o) throws DAOException {
        int delete = 0;
        Contact contact = (Contact) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""DELETE_CONTACT""));
            pst.setInt(1, contact.getId());
            delete = pst.executeUpdate();
            if (delete <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (delete > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return delete;
    }",0
"    private boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(Init.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + Init.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + Init.GPL_URL + ""' to view GPL"");
            }
        }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                shoutcastPlayer.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public Matrix transpose() {
        final double array[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new DoubleSquareMatrix(array);
    }",0
"    public void doUpdateByLoginID() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByLoginID(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + ""ip_address = ?, mac_no = ? "" + ""WHERE  login_id= ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.ipAddress);
            ps.setString(5, this.macNO);
            ps.setString(6, this.loginID);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByLoginID(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public Matrix transpose() {
        final double array[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new DoubleMatrix(array);
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    private void colorizeEdit(StyledText edit) {
        String findResult = edit.getText();
        final Color COLOR_BLUE = dialog.getDisplay().getSystemColor(SWT.COLOR_BLUE);
        int start = 0;
        int index = findResult.indexOf(""\n"");
        while (index != -1) {
            String subString = findResult.substring(start, index);
            if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.underline = true;
                ((StyledText) editResult).setStyleRange(style);
            } else {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.foreground = COLOR_BLUE;
                ((StyledText) editResult).setStyleRange(style);
            }
            start = index + 1;
            index = findResult.indexOf(""\n"", index + 1);
        }
        String subString = findResult.substring(start).replace(""\n"", """");
        if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.underline = true;
            ((StyledText) editResult).setStyleRange(style);
        } else {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.foreground = COLOR_BLUE;
            ((StyledText) editResult).setStyleRange(style);
        }
        if (!WorkspaceSaveContainer.findCurrent.equals("""")) {
            final Color COLOR_RED = dialog.getDisplay().getSystemColor(SWT.COLOR_RED);
            if (WorkspaceSaveContainer.regularExpression) {
                Pattern pattern = null;
                try {
                    if (WorkspaceSaveContainer.caseSensitive) pattern = Pattern.compile(WorkspaceSaveContainer.findCurrent); else pattern = Pattern.compile(WorkspaceSaveContainer.findCurrent, Pattern.CASE_INSENSITIVE);
                } catch (PatternSyntaxException e) {
                    return;
                }
                String[] findResultList = findResult.split(""\n"");
                int findResultListCount = findResultList.length;
                int findResultListIndex;
                int offset = 0;
                for (findResultListIndex = 0; findResultListIndex < findResultListCount; findResultListIndex++) {
                    Matcher matcher = pattern.matcher(findResultList[findResultListIndex]);
                    while (matcher.find()) {
                        int startIndex = matcher.start();
                        int endIndex = matcher.end();
                        StyleRange style = new StyleRange();
                        style.start = startIndex + offset;
                        style.length = endIndex - startIndex;
                        style.fontStyle = SWT.BOLD;
                        style.foreground = COLOR_RED;
                        ((StyledText) editResult).setStyleRange(style);
                    }
                    offset += findResultList[findResultListIndex].length() + 1;
                }
            } else {
                String findCurrentLowerCase = WorkspaceSaveContainer.findCurrent.toLowerCase();
                String findResultLowerCase = findResult.toLowerCase();
                if (WorkspaceSaveContainer.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainer.findCurrent); else index = findResultLowerCase.indexOf(findCurrentLowerCase);
                while (index != -1) {
                    StyleRange style = new StyleRange();
                    style.start = index;
                    style.length = WorkspaceSaveContainer.findCurrent.length();
                    style.fontStyle = SWT.BOLD;
                    style.foreground = COLOR_RED;
                    ((StyledText) editResult).setStyleRange(style);
                    if (WorkspaceSaveContainer.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainer.findCurrent, index + 1); else index = findResultLowerCase.indexOf(findCurrentLowerCase, index + 1);
                }
            }
        }
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public synchronized String encrypt(String p_plainText) throws ServiceUnavailableException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new ServiceUnavailableException(e.getMessage());
        }
        try {
            md.update(p_plainText.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new ServiceUnavailableException(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }",0
"    private static String simpleCompute(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""utf-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }",0
"    public static void copyFileByNIO(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }","    public static String getMD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public int delete(BusinessObject o) throws DAOException {
        int delete = 0;
        Project project = (Project) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""DELETE_PROJECT""));
            pst.setInt(1, project.getId());
            delete = pst.executeUpdate();
            if (delete <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (delete > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return delete;
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public void testEnd() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""spiritbot\\W"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""spiritbot: how are you doing"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }","            public void actionPerformed(final ActionEvent e) {
                if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.OPEN)) {
                    try {
                        java.awt.Desktop.getDesktop().open(new File(""auftraege/test.pdf""));
                    } catch (final IOException ex) {
                        System.err.println(""Der Auftrag konnte nicht angezeigt werden."");
                    }
                }
            }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public void testVowels() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""[a-z&&[aeiou]]"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""BerlinBrown"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Vowel-Search \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }",0
"    private void colorizeEdit(StyledText edit) {
        String findResult = edit.getText();
        final Color COLOR_BLUE = dialog.getDisplay().getSystemColor(SWT.COLOR_BLUE);
        int start = 0;
        int index = findResult.indexOf(""\n"");
        while (index != -1) {
            String subString = findResult.substring(start, index);
            if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.underline = true;
                ((StyledText) editResult).setStyleRange(style);
            } else {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.foreground = COLOR_BLUE;
                ((StyledText) editResult).setStyleRange(style);
            }
            start = index + 1;
            index = findResult.indexOf(""\n"", index + 1);
        }
        String subString = findResult.substring(start).replace(""\n"", """");
        if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.underline = true;
            ((StyledText) editResult).setStyleRange(style);
        } else {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.foreground = COLOR_BLUE;
            ((StyledText) editResult).setStyleRange(style);
        }
        if (!WorkspaceSaveContainer.findCurrent.equals("""")) {
            final Color COLOR_RED = dialog.getDisplay().getSystemColor(SWT.COLOR_RED);
            if (WorkspaceSaveContainer.regularExpression) {
                Pattern pattern = null;
                try {
                    if (WorkspaceSaveContainer.caseSensitive) pattern = Pattern.compile(WorkspaceSaveContainer.findCurrent); else pattern = Pattern.compile(WorkspaceSaveContainer.findCurrent, Pattern.CASE_INSENSITIVE);
                } catch (PatternSyntaxException e) {
                    return;
                }
                String[] findResultList = findResult.split(""\n"");
                int findResultListCount = findResultList.length;
                int findResultListIndex;
                int offset = 0;
                for (findResultListIndex = 0; findResultListIndex < findResultListCount; findResultListIndex++) {
                    Matcher matcher = pattern.matcher(findResultList[findResultListIndex]);
                    while (matcher.find()) {
                        int startIndex = matcher.start();
                        int endIndex = matcher.end();
                        StyleRange style = new StyleRange();
                        style.start = startIndex + offset;
                        style.length = endIndex - startIndex;
                        style.fontStyle = SWT.BOLD;
                        style.foreground = COLOR_RED;
                        ((StyledText) editResult).setStyleRange(style);
                    }
                    offset += findResultList[findResultListIndex].length() + 1;
                }
            } else {
                String findCurrentLowerCase = WorkspaceSaveContainer.findCurrent.toLowerCase();
                String findResultLowerCase = findResult.toLowerCase();
                if (WorkspaceSaveContainer.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainer.findCurrent); else index = findResultLowerCase.indexOf(findCurrentLowerCase);
                while (index != -1) {
                    StyleRange style = new StyleRange();
                    style.start = index;
                    style.length = WorkspaceSaveContainer.findCurrent.length();
                    style.fontStyle = SWT.BOLD;
                    style.foreground = COLOR_RED;
                    ((StyledText) editResult).setStyleRange(style);
                    if (WorkspaceSaveContainer.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainer.findCurrent, index + 1); else index = findResultLowerCase.indexOf(findCurrentLowerCase, index + 1);
                }
            }
        }
    }","    public static String MD5(String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            byte[] md5hash = new byte[32];
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            md5hash = md.digest();
            return convertToHex(md5hash);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }",0
"    public ThreadChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            ThreadInfo tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static int deleteOrder(String likePatten) {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append("" DELETE FROM JHF_ALIVE_ORDER "").append("" WHERE   ORDER_ID LIKE  ? "");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            psmt.setString(1, ""%"" + likePatten + ""%"");
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println("" error when roll back !"");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println("" error  when psmt close or conn close ."");
            }
        }
        return deleted;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static PZKSRenderer createRenderer(PZKSGraph graph) {
        PZKSRenderer renderer = null;
        String className = System.getProperty(""renderer"");
        Class<?> clazz = null;
        try {
            clazz = Class.forName(className);
            Constructor<?> constructor = clazz.getConstructor(PZKSGraph.class);
            renderer = (PZKSRenderer) constructor.newInstance(graph);
        } catch (Exception e) {
            System.out.println(""Error during creating renderer "" + className + "". Default renderer will be used"");
            System.out.println(e.getMessage());
            renderer = new PZKSLamaoRenderer(graph);
        }
        return renderer;
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    private void weightAndPlaceClasses() {
        int rows = getRows();
        for (int curRow = _maxPackageRank; curRow < rows; curRow++) {
            xPos = getHGap() / 2;
            BOTLObjectSourceDiagramNode[] rowObject = getObjectsInRow(curRow);
            for (int i = 0; i < rowObject.length; i++) {
                if (curRow == _maxPackageRank) {
                    int nDownlinks = rowObject[i].getDownlinks().size();
                    rowObject[i].setWeight((nDownlinks > 0) ? (1 / nDownlinks) : 2);
                } else {
                    Vector uplinks = rowObject[i].getUplinks();
                    int nUplinks = uplinks.size();
                    if (nUplinks > 0) {
                        float average_col = 0;
                        for (int j = 0; j < uplinks.size(); j++) {
                            average_col += ((BOTLObjectSourceDiagramNode) (uplinks.elementAt(j))).getColumn();
                        }
                        average_col /= nUplinks;
                        rowObject[i].setWeight(average_col);
                    } else {
                        rowObject[i].setWeight(1000);
                    }
                }
            }
            int[] pos = new int[rowObject.length];
            for (int i = 0; i < pos.length; i++) {
                pos[i] = i;
            }
            boolean swapped = true;
            while (swapped) {
                swapped = false;
                for (int i = 0; i < pos.length - 1; i++) {
                    if (rowObject[pos[i]].getWeight() > rowObject[pos[i + 1]].getWeight()) {
                        int temp = pos[i];
                        pos[i] = pos[i + 1];
                        pos[i + 1] = temp;
                        swapped = true;
                    }
                }
            }
            for (int i = 0; i < pos.length; i++) {
                rowObject[pos[i]].setColumn(i);
                if ((i > _vMax) && (rowObject[pos[i]].getUplinks().size() == 0) && (rowObject[pos[i]].getDownlinks().size() == 0)) {
                    if (getColumns(rows - 1) > _vMax) {
                        rows++;
                    }
                    rowObject[pos[i]].setRank(rows - 1);
                } else {
                    rowObject[pos[i]].setLocation(new Point(xPos, yPos));
                    xPos += rowObject[pos[i]].getSize().getWidth() + getHGap();
                }
            }
            yPos += getRowHeight(curRow) + getVGap();
        }
    }",0
"    private static boolean loadClasses() {
        switch(jvm) {
            case MRJ_2_0:
                try {
                    Class aeTargetClass = Class.forName(""com.apple.MacOS.AETarget"");
                    Class osUtilsClass = Class.forName(""com.apple.MacOS.OSUtils"");
                    Class appleEventClass = Class.forName(""com.apple.MacOS.AppleEvent"");
                    Class aeClass = Class.forName(""com.apple.MacOS.ae"");
                    aeDescClass = Class.forName(""com.apple.MacOS.AEDesc"");
                    aeTargetConstructor = aeTargetClass.getDeclaredConstructor(new Class[] { int.class });
                    appleEventConstructor = appleEventClass.getDeclaredConstructor(new Class[] { int.class, int.class, aeTargetClass, int.class, int.class });
                    aeDescConstructor = aeDescClass.getDeclaredConstructor(new Class[] { String.class });
                    makeOSType = osUtilsClass.getDeclaredMethod(""makeOSType"", new Class[] { String.class });
                    putParameter = appleEventClass.getDeclaredMethod(""putParameter"", new Class[] { int.class, aeDescClass });
                    sendNoReply = appleEventClass.getDeclaredMethod(""sendNoReply"", new Class[] {});
                    Field keyDirectObjectField = aeClass.getDeclaredField(""keyDirectObject"");
                    keyDirectObject = (Integer) keyDirectObjectField.get(null);
                    Field autoGenerateReturnIDField = appleEventClass.getDeclaredField(""kAutoGenerateReturnID"");
                    kAutoGenerateReturnID = (Integer) autoGenerateReturnIDField.get(null);
                    Field anyTransactionIDField = appleEventClass.getDeclaredField(""kAnyTransactionID"");
                    kAnyTransactionID = (Integer) anyTransactionIDField.get(null);
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_2_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    mrjOSTypeClass = Class.forName(""com.apple.mrj.MRJOSType"");
                    Field systemFolderField = mrjFileUtilsClass.getDeclaredField(""kSystemFolderType"");
                    kSystemFolderType = systemFolderField.get(null);
                    findFolder = mrjFileUtilsClass.getDeclaredMethod(""findFolder"", new Class[] { mrjOSTypeClass });
                    getFileCreator = mrjFileUtilsClass.getDeclaredMethod(""getFileCreator"", new Class[] { File.class });
                    getFileType = mrjFileUtilsClass.getDeclaredMethod(""getFileType"", new Class[] { File.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (SecurityException se) {
                    errorMessage = se.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_0:
                try {
                    Class linker = Class.forName(""com.apple.mrj.jdirect.Linker"");
                    Constructor constructor = linker.getConstructor(new Class[] { Class.class });
                    linkage = constructor.newInstance(new Object[] { BbrowserLauncher.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (InvocationTargetException ite) {
                    errorMessage = ite.getMessage();
                    return false;
                } catch (InstantiationException ie) {
                    errorMessage = ie.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    openURL = mrjFileUtilsClass.getDeclaredMethod(""openURL"", new Class[] { String.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                }
                break;
            default:
                break;
        }
        return true;
    }","    public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public void shouldAllowClosingInputStreamTwice() throws IOException {
        OutputStream outputStream = fileSystem.createOutputStream(_(""hello""), OutputMode.OVERWRITE);
        outputStream.write(new byte[] { 1, 2, 3 });
        outputStream.close();
        InputStream inputStream = fileSystem.createInputStream(_(""hello""));
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        IOUtils.copy(inputStream, buffer);
        inputStream.close();
        inputStream.close();
    }","    public synchronized String encrypt(String plaintext) throws PasswordException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new PasswordException(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new PasswordException(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new Base64Encoder()).encode(raw);
        return hash;
    }",0
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(Init.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + Init.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + Init.GPL_URL + ""' to view GPL"");
            }
        }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                shoutcastPlayer.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public boolean crear() {
        int result = 0;
        String sql = ""insert into jugadorxdivxronda"" + ""(jugadorxDivision_idJugadorxDivision, ronda_numeroRonda, resultado, idPareoRival, color, flotante, puntajeRonda, idPareo) "" + ""values (?, ?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(unjxdxr);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }",0
"    public static LImage[][] reversalXandY(final LImage[][] array) {
        int col = array[0].length;
        int row = array.length;
        LImage[][] result = new LImage[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    @Test
    public void testDocumentDownloadExcel() throws IOException {
        if (uploadedExcelDocumentID == null) {
            fail(""Document Upload Test should run first"");
        }
        String downloadLink = GoogleDownloadLinkGenerator.generateXlDownloadLink(uploadedExcelDocumentID);
        URL url = new URL(downloadLink);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        InputStream input = url.openStream();
        FileWriter fw = new FileWriter(""tmpOutput.kb"");
        Reader reader = new InputStreamReader(input);
        BufferedReader bufferedReader = new BufferedReader(reader);
        String strLine = """";
        int count = 0;
        while (count < 10000) {
            strLine = bufferedReader.readLine();
            if (strLine != null && strLine != """") {
                fw.write(strLine);
            }
            count++;
        }
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public void sendMail(String smtpHost, String username, String password, String senderAddress, String recipientsAddress, String subject, String text) {
        EMailAuthenticator auth = new EMailAuthenticator(username, password);
        Properties properties = new Properties();
        properties.put(""mail.smtp.host"", smtpHost);
        properties.put(""mail.smtp.auth"", ""true"");
        Session session = Session.getDefaultInstance(properties, auth);
        try {
            Message msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(senderAddress));
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientsAddress, false));
            msg.setSubject(subject);
            msg.setText(text);
            msg.setHeader(""Test"", ""Test"");
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public Matrix transpose() {
        final double array[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new DoubleSquareMatrix(array);
    }",0
"    public static double[][] transp(double[][] m1) {
        int m = m1.length;
        int n = m1[0].length;
        double[][] ret = new double[n][m];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ret[j][i] = m1[i][j];
            }
        }
        return ret;
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public void shouldAllowClosingInputStreamTwice() throws IOException {
        OutputStream outputStream = fileSystem.createOutputStream(_(""hello""), OutputMode.OVERWRITE);
        outputStream.write(new byte[] { 1, 2, 3 });
        outputStream.close();
        InputStream inputStream = fileSystem.createInputStream(_(""hello""));
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        IOUtils.copy(inputStream, buffer);
        inputStream.close();
        inputStream.close();
    }","    public static Object[] append(Object[] source, Object obj) {
        Object[] copy = (Object[]) Array.newInstance(source.getClass().getComponentType(), source.length + 1);
        System.arraycopy(source, 0, copy, 0, source.length);
        copy[source.length] = obj;
        return copy;
    }",0
"    public void writeTo(OutputStream out) throws IOException {
        if (!closed) {
            throw new IOException(""Stream not closed"");
        }
        if (isInMemory()) {
            memoryOutputStream.writeTo(out);
        } else {
            FileInputStream fis = new FileInputStream(outputFile);
            try {
                IOUtils.copy(fis, out);
            } finally {
                IOUtils.closeQuietly(fis);
            }
        }
    }","	public static File[] chooseFileOpenMultiple(JFrame frame) {
		File retval[];

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(true);

		//Show dialog and wait for user input
		int status = fc.showSaveDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFiles();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}",0
"    public static String hashStringMD5(String string) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(string.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }","    @Override
    public KSA00 getEstimate() {
        int probe_count = getData().getModel().getProbes().size();
        int ch_length = getData().getModel().getChromosomeLength();
        int clone_length = getData().getModel().getCloneLength();
        int clone_count = getData().cloneCount();
        int counter = 0;
        byte[][] scores = new byte[clone_count][];
        for (KSA00Data.Hybridization val : getData()) {
            scores[counter++] = val.getScore();
        }
        int[] probeOrder = ArrayUtil.createSequence(getData().getModel().getProbes().size(), false);
        int[][] joint = new int[probe_count][probe_count];
        for (int probeIndex1 = 0; probeIndex1 < probe_count; probeIndex1++) {
            for (int probeIndex2 = probeIndex1 + 1; probeIndex2 < probe_count; probeIndex2++) {
                for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
                    if ((scores[cloneIndex][probeIndex1] == 1) && (scores[cloneIndex][probeIndex2] == 1)) {
                        joint[probeIndex1][probeIndex2]++;
                    }
                }
                joint[probeIndex2][probeIndex1] = joint[probeIndex1][probeIndex2];
            }
        }
        int gap = ch_length - (probe_count * clone_length);
        double[] y = Initial_Ys(probeOrder, probe_count, clone_count, clone_length, gap, joint);
        return getData().getModel().create(Arrays.asList(ArrayUtils.toObject(y)));
    }",0
"    private boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }","    public static String MD5ToString(String md5) {
        String hashword = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(md5.getBytes());
            BigInteger hash = new BigInteger(1, md.digest());
            hashword = hash.toString(16);
        } catch (NoSuchAlgorithmException nsae) {
        }
        return hashword;
    }",0
"    @Test
    public void testDocumentDownloadKnowledgeBase() throws IOException {
        if (uploadedKbDocumentID == null) {
            fail(""Document Upload Test should run first"");
        }
        String downloadLink = GoogleDownloadLinkGenerator.generateTextDownloadLink(uploadedKbDocumentID);
        URL url = new URL(downloadLink);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        InputStream input = url.openStream();
        FileWriter fw = new FileWriter(""tmpOutput.kb"");
        Reader reader = new InputStreamReader(input);
        BufferedReader bufferedReader = new BufferedReader(reader);
        String strLine = """";
        int count = 0;
        while (count < 10000) {
            strLine = bufferedReader.readLine();
            if (strLine != null && strLine != """") {
                fw.write(strLine);
            }
            count++;
        }
    }","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }",0
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(MasteryCards.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
            }
        }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static boolean deleteDir(File dir) {
        if (dir.exists()) {
            File[] files = dir.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDir(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (dir.delete());
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }","    public boolean crear() {
        int result = 0;
        String sql = ""insert into torneo"" + ""(nombreTorneo, ciudad, fechaInicio, fechaFinal, organizador, numeroDivisiones, terminado)"" + ""values (?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(eltorneo);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static String crypt(String str) {
        if (str == null || str.length() == 0) {
            throw new IllegalArgumentException(""String to encript cannot be null or zero length"");
        }
        StringBuffer hexString = new StringBuffer();
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        md.update(str.getBytes());
        byte[] hash = md.digest();
        for (int i = 0; i < hash.length; i++) {
            if ((0xff & hash[i]) < 0x10) {
                hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
            } else {
                hexString.append(Integer.toHexString(0xFF & hash[i]));
            }
        }
        return hexString.toString();
    }","    public static void copyFileByNIO(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","	public static File chooseFileOpen(JFrame frame) {
		File retval;

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(false);

		//Show dialog and wait for user input
		int status = fc.showOpenDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFile();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}",0
"    public Matrix transpose() {
        final double array[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new DoubleMatrix(array);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        md.update(text.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }","    public static void main(String[] args) {
        if (args.length < 2) {
            print(""Usage:\njava TestRegularExpression "" + ""characterSequence regularExpression+"");
            System.exit(0);
        }
        print(""Input: \"""" + args[0] + ""\"""");
        for (String arg : args) {
            print(""Regular expression: \"""" + arg + ""\"""");
            Pattern p = Pattern.compile(arg);
            Matcher m = p.matcher(args[0]);
            while (m.find()) {
                print(""Match \"""" + m.group() + ""\"" at positions "" + m.start() + ""-"" + (m.end() - 1));
            }
        }
    }",0
"    public int delete(BusinessObject o) throws DAOException {
        int delete = 0;
        Contact contact = (Contact) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""DELETE_CONTACT""));
            pst.setInt(1, contact.getId());
            delete = pst.executeUpdate();
            if (delete <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (delete > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return delete;
    }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public void run(IAction action) {
        int style = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getStyle();
        Shell shell = new Shell((style & SWT.MIRRORED) != 0 ? SWT.RIGHT_TO_LEFT : SWT.NONE);
        GraphicalViewer viewer = new ScrollingGraphicalViewer();
        viewer.createControl(shell);
        viewer.setEditDomain(new DefaultEditDomain(null));
        viewer.setRootEditPart(new ScalableFreeformRootEditPart());
        viewer.setEditPartFactory(new TableEditPartFactory());
        viewer.setContents(getContents());
        viewer.flush();
        int printMode = new PrintModeDialog(shell).open();
        if (printMode == -1) return;
        PrintDialog dialog = new PrintDialog(shell, SWT.NULL);
        PrinterData data = dialog.open();
        if (data != null) {
            PrintGraphicalViewerOperation op = new PrintGraphicalViewerOperation(new Printer(data), viewer);
            op.setPrintMode(printMode);
            op.run(selectedFile.getName());
        }
    }","    public static void copy(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String toMd5(String str) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.reset();
            messageDigest.update(str.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""NoSuchAlgorithmException caught!"");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }",0
"    private void colorizeEdit(StyledText edit) {
        String findResult = edit.getText();
        final Color COLOR_BLUE = dialog.getDisplay().getSystemColor(SWT.COLOR_BLUE);
        int start = 0;
        int index = findResult.indexOf(""\n"");
        while (index != -1) {
            String subString = findResult.substring(start, index);
            if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.underline = true;
                ((StyledText) editResult).setStyleRange(style);
            } else {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.foreground = COLOR_BLUE;
                ((StyledText) editResult).setStyleRange(style);
            }
            start = index + 1;
            index = findResult.indexOf(""\n"", index + 1);
        }
        String subString = findResult.substring(start).replace(""\n"", """");
        if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.underline = true;
            ((StyledText) editResult).setStyleRange(style);
        } else {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.foreground = COLOR_BLUE;
            ((StyledText) editResult).setStyleRange(style);
        }
        if (!WorkspaceSaveContainerGlobal.findCurrent.equals("""")) {
            final Color COLOR_RED = dialog.getDisplay().getSystemColor(SWT.COLOR_RED);
            if (WorkspaceSaveContainerGlobal.regularExpression) {
                Pattern pattern = null;
                try {
                    if (WorkspaceSaveContainerGlobal.caseSensitive) pattern = Pattern.compile(WorkspaceSaveContainerGlobal.findCurrent); else pattern = Pattern.compile(WorkspaceSaveContainerGlobal.findCurrent, Pattern.CASE_INSENSITIVE);
                } catch (PatternSyntaxException e) {
                    return;
                }
                String[] findResultList = findResult.split(""\n"");
                int findResultListCount = findResultList.length;
                int findResultListIndex;
                int offset = 0;
                for (findResultListIndex = 0; findResultListIndex < findResultListCount; findResultListIndex++) {
                    Matcher matcher = pattern.matcher(findResultList[findResultListIndex]);
                    while (matcher.find()) {
                        int startIndex = matcher.start();
                        int endIndex = matcher.end();
                        StyleRange style = new StyleRange();
                        style.start = startIndex + offset;
                        style.length = endIndex - startIndex;
                        style.fontStyle = SWT.BOLD;
                        style.foreground = COLOR_RED;
                        ((StyledText) editResult).setStyleRange(style);
                    }
                    offset += findResultList[findResultListIndex].length() + 1;
                }
            } else {
                String findCurrentLowerCase = WorkspaceSaveContainerGlobal.findCurrent.toLowerCase();
                String findResultLowerCase = findResult.toLowerCase();
                if (WorkspaceSaveContainerGlobal.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainerGlobal.findCurrent); else index = findResultLowerCase.indexOf(findCurrentLowerCase);
                while (index != -1) {
                    StyleRange style = new StyleRange();
                    style.start = index;
                    style.length = WorkspaceSaveContainerGlobal.findCurrent.length();
                    style.fontStyle = SWT.BOLD;
                    style.foreground = COLOR_RED;
                    ((StyledText) editResult).setStyleRange(style);
                    if (WorkspaceSaveContainerGlobal.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainerGlobal.findCurrent, index + 1); else index = findResultLowerCase.indexOf(findCurrentLowerCase, index + 1);
                }
            }
        }
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static void copyFiles(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }","    private boolean deleteLocalDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteLocalDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static void copy(String fromFile, String toFile) throws IOException {
        File inputFile = new File(fromFile);
        File outputFile = new File(toFile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }",0
"    public static void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }","    public static String shaEncrypt(final String txt) {
        String enTxt = txt;
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""Error:"", e);
        }
        if (null != md) {
            byte[] shahash = new byte[32];
            try {
                md.update(txt.getBytes(""UTF-8""), 0, txt.length());
            } catch (UnsupportedEncodingException e) {
                logger.error(""Error:"", e);
            }
            shahash = md.digest();
            StringBuffer md5StrBuff = new StringBuffer();
            for (int i = 0; i < shahash.length; i++) {
                if (Integer.toHexString(0xFF & shahash[i]).length() == 1) {
                    md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & shahash[i]));
                } else {
                    md5StrBuff.append(Integer.toHexString(0xFF & shahash[i]));
                }
            }
            enTxt = md5StrBuff.toString();
        }
        return enTxt;
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static PZKSAbstractGenerateDialog createGeneraetDialog(Frame owner) {
        PZKSAbstractGenerateDialog dialog = null;
        String className = System.getProperty(""generate-dialog"");
        Class<?> clazz = null;
        try {
            clazz = Class.forName(className);
            Constructor<?> constructor = clazz.getConstructor(Frame.class);
            dialog = (PZKSAbstractGenerateDialog) constructor.newInstance(owner);
        } catch (Exception e) {
            System.out.println(""Error during creating generate dialog "" + className + "". Default dialog will be used"");
            System.out.println(e.getMessage());
            dialog = new PZKSLamaoGenerateDialog(owner);
        }
        return dialog;
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public void importTaskList(String data, boolean append) throws Exception {
        HashMap<String, TaskCommand> importedTasks = new HashMap<String, TaskCommand>();
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        ByteArrayInputStream reader = new ByteArrayInputStream(data.toString().getBytes());
        Document doc = docBuilder.parse(reader);
        NodeList tasksNodes = doc.getElementsByTagName(""task"");
        for (int x = 0; x < tasksNodes.getLength(); x++) {
            Node item = tasksNodes.item(x);
            TaskCommand taskCommand = new TaskCommand(item);
            importedTasks.put(taskCommand.getName(), taskCommand);
        }
        if (append) {
            if (tasks == null) tasks = new HashMap<String, TaskCommand>();
            tasks.putAll(importedTasks);
        } else {
            tasks = importedTasks;
        }
        saveTaskList(null);
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static Object[] addToArray(Object[] array, Object member) {
        Object[] newArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = member;
        return newArray;
    }",0
"    public static String getMD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static int deleteOrderStatusHis(String likePatten) {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append("" DELETE FROM JHF_ORDER_STATUS_HISTORY "").append("" WHERE   ORDER_ID LIKE  ? "");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            psmt.setString(1, ""%"" + likePatten + ""%"");
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println("" error when roll back !"");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println("" error  when psmt close or conn close ."");
            }
        }
        return deleted;
    }",0
"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }","    public void addNonKMLFile(final byte[] data, final String inZipFilename) throws IOException {
        ZipEntry entry = new ZipEntry(inZipFilename);
        this.zipOut.putNextEntry(entry);
        this.zipOut.write(data);
        log.debug(entry.getName() + "" added to kmz."");
    }",0
"    public static String md5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""utf-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static void main(String[] args) {
        if (args.length < 2) {
            print(""Usage: \njava TestRegularExpression "" + ""characterSequence regularExpression+"");
            System.exit(0);
        }
        print(""Input: \"" "" + args[0] + ""\"""");
        for (String arg : args) {
            print(""Regular expression: \"" "" + arg + ""\"" "");
            Pattern p = Pattern.compile(arg);
            Matcher m = p.matcher(args[0]);
            while (m.find()) {
                print(""Match \"" "" + m.group() + ""\"" at positions "" + m.start() + ""-"" + (m.end() - 1));
            }
        }
    }","    public static String shaEncrypt(final String txt) {
        String enTxt = txt;
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""Error:"", e);
        }
        if (null != md) {
            byte[] shahash = new byte[32];
            try {
                md.update(txt.getBytes(""UTF-8""), 0, txt.length());
            } catch (UnsupportedEncodingException e) {
                logger.error(""Error:"", e);
            }
            shahash = md.digest();
            StringBuffer md5StrBuff = new StringBuffer();
            for (int i = 0; i < shahash.length; i++) {
                if (Integer.toHexString(0xFF & shahash[i]).length() == 1) {
                    md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & shahash[i]));
                } else {
                    md5StrBuff.append(Integer.toHexString(0xFF & shahash[i]));
                }
            }
            enTxt = md5StrBuff.toString();
        }
        return enTxt;
    }",0
"    private void weightAndPlaceClasses() {
        int rows = getRows();
        for (int curRow = _maxPackageRank; curRow < rows; curRow++) {
            xPos = getHGap() / 2;
            BOTLObjectSourceDiagramNode[] rowObject = getObjectsInRow(curRow);
            for (int i = 0; i < rowObject.length; i++) {
                if (curRow == _maxPackageRank) {
                    int nDownlinks = rowObject[i].getDownlinks().size();
                    rowObject[i].setWeight((nDownlinks > 0) ? (1 / nDownlinks) : 2);
                } else {
                    Vector uplinks = rowObject[i].getUplinks();
                    int nUplinks = uplinks.size();
                    if (nUplinks > 0) {
                        float average_col = 0;
                        for (int j = 0; j < uplinks.size(); j++) {
                            average_col += ((BOTLObjectSourceDiagramNode) (uplinks.elementAt(j))).getColumn();
                        }
                        average_col /= nUplinks;
                        rowObject[i].setWeight(average_col);
                    } else {
                        rowObject[i].setWeight(1000);
                    }
                }
            }
            int[] pos = new int[rowObject.length];
            for (int i = 0; i < pos.length; i++) {
                pos[i] = i;
            }
            boolean swapped = true;
            while (swapped) {
                swapped = false;
                for (int i = 0; i < pos.length - 1; i++) {
                    if (rowObject[pos[i]].getWeight() > rowObject[pos[i + 1]].getWeight()) {
                        int temp = pos[i];
                        pos[i] = pos[i + 1];
                        pos[i + 1] = temp;
                        swapped = true;
                    }
                }
            }
            for (int i = 0; i < pos.length; i++) {
                rowObject[pos[i]].setColumn(i);
                if ((i > _vMax) && (rowObject[pos[i]].getUplinks().size() == 0) && (rowObject[pos[i]].getDownlinks().size() == 0)) {
                    if (getColumns(rows - 1) > _vMax) {
                        rows++;
                    }
                    rowObject[pos[i]].setRank(rows - 1);
                } else {
                    rowObject[pos[i]].setLocation(new Point(xPos, yPos));
                    xPos += rowObject[pos[i]].getSize().getWidth() + getHGap();
                }
            }
            yPos += getRowHeight(curRow) + getVGap();
        }
    }","    public static void main(String[] args) {
        if (args.length < 2) {
            print(""Usage: \njava TestRegularExpression "" + ""characterSequence regularExpression+"");
            System.exit(0);
        }
        print(""Input: \"" "" + args[0] + ""\"""");
        for (String arg : args) {
            print(""Regular expression: \"" "" + arg + ""\"" "");
            Pattern p = Pattern.compile(arg);
            Matcher m = p.matcher(args[0]);
            while (m.find()) {
                print(""Match \"" "" + m.group() + ""\"" at positions "" + m.start() + ""-"" + (m.end() - 1));
            }
        }
    }",0
"    private void weightAndPlaceClasses() {
        int rows = getRows();
        for (int curRow = _maxPackageRank; curRow < rows; curRow++) {
            xPos = getHGap() / 2;
            BOTLObjectSourceDiagramNode[] rowObject = getObjectsInRow(curRow);
            for (int i = 0; i < rowObject.length; i++) {
                if (curRow == _maxPackageRank) {
                    int nDownlinks = rowObject[i].getDownlinks().size();
                    rowObject[i].setWeight((nDownlinks > 0) ? (1 / nDownlinks) : 2);
                } else {
                    Vector uplinks = rowObject[i].getUplinks();
                    int nUplinks = uplinks.size();
                    if (nUplinks > 0) {
                        float average_col = 0;
                        for (int j = 0; j < uplinks.size(); j++) {
                            average_col += ((BOTLObjectSourceDiagramNode) (uplinks.elementAt(j))).getColumn();
                        }
                        average_col /= nUplinks;
                        rowObject[i].setWeight(average_col);
                    } else {
                        rowObject[i].setWeight(1000);
                    }
                }
            }
            int[] pos = new int[rowObject.length];
            for (int i = 0; i < pos.length; i++) {
                pos[i] = i;
            }
            boolean swapped = true;
            while (swapped) {
                swapped = false;
                for (int i = 0; i < pos.length - 1; i++) {
                    if (rowObject[pos[i]].getWeight() > rowObject[pos[i + 1]].getWeight()) {
                        int temp = pos[i];
                        pos[i] = pos[i + 1];
                        pos[i + 1] = temp;
                        swapped = true;
                    }
                }
            }
            for (int i = 0; i < pos.length; i++) {
                rowObject[pos[i]].setColumn(i);
                if ((i > _vMax) && (rowObject[pos[i]].getUplinks().size() == 0) && (rowObject[pos[i]].getDownlinks().size() == 0)) {
                    if (getColumns(rows - 1) > _vMax) {
                        rows++;
                    }
                    rowObject[pos[i]].setRank(rows - 1);
                } else {
                    rowObject[pos[i]].setLocation(new Point(xPos, yPos));
                    xPos += rowObject[pos[i]].getSize().getWidth() + getHGap();
                }
            }
            yPos += getRowHeight(curRow) + getVGap();
        }
    }","    private static int binarySearchArtist(Vector<MusicOutputDesign> v, int low, int high) {
        if (high < low) {
            return -1;
        }
        int mid = (high + low) / 2;
        String s = v.elementAt(mid).getArtist().replace(""\\"", ""/"");
        if (s.compareToIgnoreCase(artist) > 0) {
            return binarySearchArtist(v, low, mid - 1);
        } else if (s.compareToIgnoreCase(artist) < 0) {
            return binarySearchArtist(v, mid + 1, high);
        } else {
            return mid;
        }
    }",0
"    public static String replaceTokens(String text, Map<String, String> replacements) {
        Pattern pattern = Pattern.compile(""\\{(.+?)\\}"");
        Matcher matcher = pattern.matcher(text);
        StringBuilder builder = new StringBuilder();
        int i = 0;
        while (matcher.find()) {
            String replacement = replacements.get(matcher.group(1));
            builder.append(text.substring(i, matcher.start()));
            if (replacement == null) builder.append(matcher.group(0)); else builder.append(replacement);
            i = matcher.end();
        }
        builder.append(text.substring(i, text.length()));
        return builder.toString();
    }","    public synchronized String encrypt(String plaintext) throws ServiceRuntimeException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new ServiceRuntimeException(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new ServiceRuntimeException(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }",0
"    public static String shaEncrypt(final String txt) {
        String enTxt = txt;
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""Error:"", e);
        }
        if (null != md) {
            byte[] shahash = new byte[32];
            try {
                md.update(txt.getBytes(""UTF-8""), 0, txt.length());
            } catch (UnsupportedEncodingException e) {
                logger.error(""Error:"", e);
            }
            shahash = md.digest();
            StringBuffer md5StrBuff = new StringBuffer();
            for (int i = 0; i < shahash.length; i++) {
                if (Integer.toHexString(0xFF & shahash[i]).length() == 1) {
                    md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & shahash[i]));
                } else {
                    md5StrBuff.append(Integer.toHexString(0xFF & shahash[i]));
                }
            }
            enTxt = md5StrBuff.toString();
        }
        return enTxt;
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static int deleteOrderStatusHis(String likePatten) {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append("" DELETE FROM JHF_ORDER_STATUS_HISTORY "").append("" WHERE   ORDER_ID LIKE  ? "");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            psmt.setString(1, ""%"" + likePatten + ""%"");
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println("" error when roll back !"");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println("" error  when psmt close or conn close ."");
            }
        }
        return deleted;
    }",0
"            public void actionPerformed(final ActionEvent e) {
                if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.OPEN)) {
                    try {
                        java.awt.Desktop.getDesktop().open(new File(""auftraege/test.pdf""));
                    } catch (final IOException ex) {
                        System.err.println(""Der Auftrag konnte nicht angezeigt werden."");
                    }
                }
            }","    public static String SHA1(String text) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        md.update(text.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }",0
"    public static Object[] addObjectToArray(Object[] array, Object object) {
        Class<?> compType = Object.class;
        if (array != null) {
            compType = array.getClass().getComponentType();
        } else if (object != null) {
            compType = object.getClass();
        }
        int newArrLength = (array != null ? array.length + 1 : 1);
        Object[] newArr = (Object[]) Array.newInstance(compType, newArrLength);
        if (array != null) {
            System.arraycopy(array, 0, newArr, 0, array.length);
        }
        newArr[newArr.length - 1] = object;
        return newArr;
    }","    public boolean crear() {
        int result = 0;
        String sql = ""insert into jugador"" + ""(apellidoPaterno, apellidoMaterno, nombres, fechaNacimiento, pais, rating, sexo)"" + ""values (?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(elJugador);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","	public static File[] chooseFileOpenMultiple(JFrame frame) {
		File retval[];

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(true);

		//Show dialog and wait for user input
		int status = fc.showSaveDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFiles();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}",0
"    private void weightAndPlaceClasses() {
        int rows = getRows();
        for (int curRow = _maxPackageRank; curRow < rows; curRow++) {
            xPos = getHGap() / 2;
            BOTLObjectSourceDiagramNode[] rowObject = getObjectsInRow(curRow);
            for (int i = 0; i < rowObject.length; i++) {
                if (curRow == _maxPackageRank) {
                    int nDownlinks = rowObject[i].getDownlinks().size();
                    rowObject[i].setWeight((nDownlinks > 0) ? (1 / nDownlinks) : 2);
                } else {
                    Vector uplinks = rowObject[i].getUplinks();
                    int nUplinks = uplinks.size();
                    if (nUplinks > 0) {
                        float average_col = 0;
                        for (int j = 0; j < uplinks.size(); j++) {
                            average_col += ((BOTLObjectSourceDiagramNode) (uplinks.elementAt(j))).getColumn();
                        }
                        average_col /= nUplinks;
                        rowObject[i].setWeight(average_col);
                    } else {
                        rowObject[i].setWeight(1000);
                    }
                }
            }
            int[] pos = new int[rowObject.length];
            for (int i = 0; i < pos.length; i++) {
                pos[i] = i;
            }
            boolean swapped = true;
            while (swapped) {
                swapped = false;
                for (int i = 0; i < pos.length - 1; i++) {
                    if (rowObject[pos[i]].getWeight() > rowObject[pos[i + 1]].getWeight()) {
                        int temp = pos[i];
                        pos[i] = pos[i + 1];
                        pos[i + 1] = temp;
                        swapped = true;
                    }
                }
            }
            for (int i = 0; i < pos.length; i++) {
                rowObject[pos[i]].setColumn(i);
                if ((i > _vMax) && (rowObject[pos[i]].getUplinks().size() == 0) && (rowObject[pos[i]].getDownlinks().size() == 0)) {
                    if (getColumns(rows - 1) > _vMax) {
                        rows++;
                    }
                    rowObject[pos[i]].setRank(rows - 1);
                } else {
                    rowObject[pos[i]].setLocation(new Point(xPos, yPos));
                    xPos += rowObject[pos[i]].getSize().getWidth() + getHGap();
                }
            }
            yPos += getRowHeight(curRow) + getVGap();
        }
    }","    static void addFile(String entryName, String fileName, ZipOutputStream zout) throws IOException {
        ZipEntry mf = new ZipEntry(entryName);
        File mfm = new File(fileName);
        mf.setSize(mfm.length());
        mf.setTime(mfm.lastModified());
        zout.putNextEntry(mf);
        zout.write(IOUtils.load(mfm));
    }",0
"    private boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }","    public static void main(String[] args) {
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapterX/tooltip3.pdf""));
            document.open();
            writer.setPageEvent(new TooltipExample3());
            Paragraph p = new Paragraph(""Hello World "");
            Chunk c = new Chunk(""tooltip"");
            c.setGenericTag(""This is my tooltip."");
            p.add(c);
            document.add(p);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                shoutcastPlayer.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"	public static File chooseFileOpen(JFrame frame) {
		File retval;

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(false);

		//Show dialog and wait for user input
		int status = fc.showOpenDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFile();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                webBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public static void main(String[] args) {
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapterX/tooltip2.pdf""));
            document.open();
            writer.setPageEvent(new TooltipExample2());
            Paragraph p = new Paragraph(""Hello World "");
            Chunk c = new Chunk(""tooltip"");
            c.setGenericTag(""This is my tooltip."");
            p.add(c);
            document.add(p);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0
"    private static void addFile(File file, TarArchiveOutputStream taos) throws IOException {
        String filename = null;
        filename = file.getName();
        TarArchiveEntry tae = new TarArchiveEntry(filename);
        tae.setSize(file.length());
        taos.putArchiveEntry(tae);
        FileInputStream fis = new FileInputStream(file);
        IOUtils.copy(fis, taos);
        taos.closeArchiveEntry();
    }","    public static void main(String[] args) {
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapterX/tooltip3.pdf""));
            document.open();
            writer.setPageEvent(new TooltipExample3());
            Paragraph p = new Paragraph(""Hello World "");
            Chunk c = new Chunk(""tooltip"");
            c.setGenericTag(""This is my tooltip."");
            p.add(c);
            document.add(p);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                fileBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    private void findKDE(java.awt.event.ActionEvent evt) {
        final javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File theme = fc.getSelectedFile();
            kdeTheme = theme.toString();
            kdeField.setText(themePack);
        }
    }",0
"    public static void copy(String fromFile, String toFile) throws IOException {
        File inputFile = new File(fromFile);
        File outputFile = new File(toFile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }","    public boolean crear() {
        int result = 0;
        String sql = ""insert into jugadorxdivxronda"" + ""(jugadorxDivision_idJugadorxDivision, ronda_numeroRonda, resultado, idPareoRival, color, flotante, puntajeRonda, idPareo) "" + ""values (?, ?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(unjxdxr);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }",0
"    public DoubleChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            String tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    public static void main(String[] args) {
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapterX/tooltip2.pdf""));
            document.open();
            writer.setPageEvent(new TooltipExample2());
            Paragraph p = new Paragraph(""Hello World "");
            Chunk c = new Chunk(""tooltip"");
            c.setGenericTag(""This is my tooltip."");
            p.add(c);
            document.add(p);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0
"    public static void copyFile(File inputFile, File outputFile) throws IOException {
        FileChannel srcChannel = new FileInputStream(inputFile).getChannel();
        FileChannel dstChannel = new FileOutputStream(outputFile).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }","    private static void addFile(File file, TarArchiveOutputStream taos) throws IOException {
        String filename = null;
        filename = file.getName();
        TarArchiveEntry tae = new TarArchiveEntry(filename);
        tae.setSize(file.length());
        taos.putArchiveEntry(tae);
        FileInputStream fis = new FileInputStream(file);
        IOUtils.copy(fis, taos);
        taos.closeArchiveEntry();
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    private static boolean loadClasses() {
        switch(jvm) {
            case MRJ_2_0:
                try {
                    Class aeTargetClass = Class.forName(""com.apple.MacOS.AETarget"");
                    Class osUtilsClass = Class.forName(""com.apple.MacOS.OSUtils"");
                    Class appleEventClass = Class.forName(""com.apple.MacOS.AppleEvent"");
                    Class aeClass = Class.forName(""com.apple.MacOS.ae"");
                    aeDescClass = Class.forName(""com.apple.MacOS.AEDesc"");
                    aeTargetConstructor = aeTargetClass.getDeclaredConstructor(new Class[] { int.class });
                    appleEventConstructor = appleEventClass.getDeclaredConstructor(new Class[] { int.class, int.class, aeTargetClass, int.class, int.class });
                    aeDescConstructor = aeDescClass.getDeclaredConstructor(new Class[] { String.class });
                    makeOSType = osUtilsClass.getDeclaredMethod(""makeOSType"", new Class[] { String.class });
                    putParameter = appleEventClass.getDeclaredMethod(""putParameter"", new Class[] { int.class, aeDescClass });
                    sendNoReply = appleEventClass.getDeclaredMethod(""sendNoReply"", new Class[] {});
                    Field keyDirectObjectField = aeClass.getDeclaredField(""keyDirectObject"");
                    keyDirectObject = (Integer) keyDirectObjectField.get(null);
                    Field autoGenerateReturnIDField = appleEventClass.getDeclaredField(""kAutoGenerateReturnID"");
                    kAutoGenerateReturnID = (Integer) autoGenerateReturnIDField.get(null);
                    Field anyTransactionIDField = appleEventClass.getDeclaredField(""kAnyTransactionID"");
                    kAnyTransactionID = (Integer) anyTransactionIDField.get(null);
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_2_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    mrjOSTypeClass = Class.forName(""com.apple.mrj.MRJOSType"");
                    Field systemFolderField = mrjFileUtilsClass.getDeclaredField(""kSystemFolderType"");
                    kSystemFolderType = systemFolderField.get(null);
                    findFolder = mrjFileUtilsClass.getDeclaredMethod(""findFolder"", new Class[] { mrjOSTypeClass });
                    getFileCreator = mrjFileUtilsClass.getDeclaredMethod(""getFileCreator"", new Class[] { File.class });
                    getFileType = mrjFileUtilsClass.getDeclaredMethod(""getFileType"", new Class[] { File.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (SecurityException se) {
                    errorMessage = se.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_0:
                try {
                    Class linker = Class.forName(""com.apple.mrj.jdirect.Linker"");
                    Constructor constructor = linker.getConstructor(new Class[] { Class.class });
                    linkage = constructor.newInstance(new Object[] { BrowserLauncher.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (InvocationTargetException ite) {
                    errorMessage = ite.getMessage();
                    return false;
                } catch (InstantiationException ie) {
                    errorMessage = ie.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    openURL = mrjFileUtilsClass.getDeclaredMethod(""openURL"", new Class[] { String.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                }
                break;
            default:
                break;
        }
        return true;
    }",0
"    public static void kopirujSoubor(File vstup, File vystup) throws IOException {
        FileChannel sourceChannel = new FileInputStream(vstup).getChannel();
        FileChannel destinationChannel = new FileOutputStream(vystup).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }","    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    @Override
    public KSA00 getEstimate() {
        int probe_count = getData().getModel().getProbes().size();
        int ch_length = getData().getModel().getChromosomeLength();
        int clone_length = getData().getModel().getCloneLength();
        int clone_count = getData().getSampleSize();
        int counter = 0;
        byte[][] scores = new byte[clone_count][];
        for (KSA00Data.Hybridization val : getData()) {
            scores[counter++] = val.getScore();
        }
        int[] probeOrder = ArrayUtil.createSequence(getData().getModel().getProbes().size(), false);
        int[][] joint = new int[probe_count][probe_count];
        for (int probeIndex1 = 0; probeIndex1 < probe_count; probeIndex1++) {
            for (int probeIndex2 = probeIndex1 + 1; probeIndex2 < probe_count; probeIndex2++) {
                for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
                    if ((scores[cloneIndex][probeIndex1] == 1) && (scores[cloneIndex][probeIndex2] == 1)) {
                        joint[probeIndex1][probeIndex2]++;
                    }
                }
                joint[probeIndex2][probeIndex1] = joint[probeIndex1][probeIndex2];
            }
        }
        int gap = ch_length - (probe_count * clone_length);
        double[] y = Initial_Ys(probeOrder, probe_count, clone_count, clone_length, gap, joint);
        return getData().getModel().create(Arrays.asList(ArrayUtils.toObject(y)));
    }","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        md.update(text.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Bill bill = (Bill) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_BILL""));
            pst.setInt(1, bill.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }","    public static void copyFile(String fileName, String dstPath) throws IOException {
        FileChannel sourceChannel = new FileInputStream(fileName).getChannel();
        FileChannel destinationChannel = new FileOutputStream(dstPath).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public void start(Gedcom gedcom) {
        String cmd = getValueFromUser(""executables"", translate(""WhichExecutable""), new String[0]);
        if (cmd == null) return;
        try {
            Process process = Runtime.getRuntime().exec(cmd);
            BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while (true) {
                String line = in.readLine();
                if (line == null) break;
                println(line);
            }
        } catch (IOException ioe) {
            println(translate(""Error"") + ioe.getMessage());
        }
    }","    public static String hashMD5(String password) {
        String hashword = null;
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(password.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            hashword = hash.toString(16);
        } catch (NoSuchAlgorithmException nsae) {
        }
        return hashword;
    }",0
"    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }","    public static void main(String[] args) {
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapterX/tooltip3.pdf""));
            document.open();
            writer.setPageEvent(new TooltipExample3());
            Paragraph p = new Paragraph(""Hello World "");
            Chunk c = new Chunk(""tooltip"");
            c.setGenericTag(""This is my tooltip."");
            p.add(c);
            document.add(p);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public Matrix transpose() {
        final double array[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new DoubleMatrix(array);
    }",0
"    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }","    protected static void saveRom(E4Device device) throws IOException {
        File file = new File(device.remote.getDeviceLocalDir(), LAST_ROM_SESSION_FILENAME + ""."" + SESSION_EXT);
        Object[] rom = device.sampleDB.getRomSnapshot();
        ZipOutputStream zos = null;
        ObjectOutputStream oos = null;
        zos = new ZipOutputStream(new FileOutputStream(file));
        zos.setMethod(ZipOutputStream.DEFLATED);
        zos.setLevel(Deflater.BEST_SPEED);
        zos.putNextEntry(new ZipEntry(FLASH_SESSION_CONTENT_ENTRY));
        oos = new ObjectOutputStream(zos);
        oos.writeObject(rom);
        oos.close();
    }",0
"    public void addNonKMLFile(final byte[] data, final String inZipFilename) throws IOException {
        ZipEntry entry = new ZipEntry(inZipFilename);
        this.zipOut.putNextEntry(entry);
        this.zipOut.write(data);
        log.debug(entry.getName() + "" added to kmz."");
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public void testEnd() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""spiritbot\\W"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""spiritbot: how are you doing"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public void setPilot(PilotData pilotData) throws UsernameNotValidException {
        try {
            if (pilotData.username.trim().equals("""") || pilotData.password.trim().equals("""")) throw new UsernameNotValidException(1, ""Username or password missing"");
            PreparedStatement psta;
            if (pilotData.id == 0) {
                psta = jdbc.prepareStatement(""INSERT INTO pilot "" + ""(name, address1, address2, zip, city, state, country, birthdate, "" + ""pft_theory, pft, medical, passenger, instructor, loc_language, "" + ""loc_country, loc_variant, username, password, id) "" + ""VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,pilot_id_seq.nextval)"");
            } else {
                psta = jdbc.prepareStatement(""UPDATE pilot SET "" + ""name = ?, address1 = ?, address2 = ?, "" + ""zip = ?, city = ?, state = ?, country = ?, birthdate = ?, pft_theory = ?,"" + ""pft = ?, medical = ?, passenger = ?, instructor = ?, loc_language = ?, "" + ""loc_country = ?, loc_variant = ?, username = ?, password = ? "" + ""WHERE id = ?"");
            }
            psta.setString(1, pilotData.name);
            psta.setString(2, pilotData.address1);
            psta.setString(3, pilotData.address2);
            psta.setString(4, pilotData.zip);
            psta.setString(5, pilotData.city);
            psta.setString(6, pilotData.state);
            psta.setString(7, pilotData.country);
            if (pilotData.birthdate != null) psta.setLong(8, pilotData.birthdate.getTime()); else psta.setNull(8, java.sql.Types.INTEGER);
            if (pilotData.pft_theory != null) psta.setLong(9, pilotData.pft_theory.getTime()); else psta.setNull(9, java.sql.Types.INTEGER);
            if (pilotData.pft != null) psta.setLong(10, pilotData.pft.getTime()); else psta.setNull(10, java.sql.Types.INTEGER);
            if (pilotData.medical != null) psta.setLong(11, pilotData.medical.getTime()); else psta.setNull(11, java.sql.Types.INTEGER);
            if (pilotData.passenger) psta.setString(12, ""Y""); else psta.setString(12, ""N"");
            if (pilotData.instructor) psta.setString(13, ""Y""); else psta.setString(13, ""N"");
            psta.setString(14, pilotData.loc_language);
            psta.setString(15, pilotData.loc_country);
            psta.setString(16, pilotData.loc_variant);
            psta.setString(17, pilotData.username);
            psta.setString(18, pilotData.password);
            if (pilotData.id != 0) {
                psta.setInt(19, pilotData.id);
            }
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException sql) {
            jdbc.rollback();
            sql.printStackTrace();
            throw new UsernameNotValidException(2, ""Username allready exist"");
        }
    }","    private void loadChannels() {
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(new File(this.getProperty(""path.data"") + File.separator + ""Channels.xml""));
            NodeList items = doc.getElementsByTagName(""channel"");
            channels = new HashMap<String, Channel>();
            for (int x = 0; x < items.getLength(); x++) {
                Node item = items.item(x);
                Channel chan = new Channel(item);
                channels.put(chan.getName(), chan);
            }
            System.out.println(""Channels.xml found and loaded ("" + items.getLength() + "")"");
        } catch (Exception e) {
            channels = new HashMap<String, Channel>();
            System.out.println(""Error loading Channels.xml, starting with blank channel list."");
        }
    }",0
"    @Override
    public KSA00 getEstimate() {
        int probe_count = getData().getModel().getProbes().size();
        int ch_length = getData().getModel().getChromosomeLength();
        int clone_length = getData().getModel().getCloneLength();
        int clone_count = getData().cloneCount();
        int counter = 0;
        byte[][] scores = new byte[clone_count][];
        for (KSA00Data.Hybridization val : getData()) {
            scores[counter++] = val.getScore();
        }
        int[] probeOrder = ArrayUtil.createSequence(getData().getModel().getProbes().size(), false);
        int[][] joint = new int[probe_count][probe_count];
        for (int probeIndex1 = 0; probeIndex1 < probe_count; probeIndex1++) {
            for (int probeIndex2 = probeIndex1 + 1; probeIndex2 < probe_count; probeIndex2++) {
                for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
                    if ((scores[cloneIndex][probeIndex1] == 1) && (scores[cloneIndex][probeIndex2] == 1)) {
                        joint[probeIndex1][probeIndex2]++;
                    }
                }
                joint[probeIndex2][probeIndex1] = joint[probeIndex1][probeIndex2];
            }
        }
        int gap = ch_length - (probe_count * clone_length);
        double[] y = Initial_Ys(probeOrder, probe_count, clone_count, clone_length, gap, joint);
        return getData().getModel().create(Arrays.asList(ArrayUtils.toObject(y)));
    }","    public static String encrypt(String str) {
        if (str == null || str.length() == 0) {
            throw new IllegalArgumentException(""String to encript cannot be null or zero length"");
        }
        StringBuffer hexString = new StringBuffer();
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        md.update(str.getBytes());
        byte[] hash = md.digest();
        for (int i = 0; i < hash.length; i++) {
            if ((0xff & hash[i]) < 0x10) {
                hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
            } else {
                hexString.append(Integer.toHexString(0xFF & hash[i]));
            }
        }
        return hexString.toString();
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public void testVowels() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""[a-z&&[aeiou]]"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""BerlinBrown"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Vowel-Search \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static void copy(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }","        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(MasteryCards.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
            }
        }",0
"    private static List retrieveQuotes(Report report, Symbol symbol, String suffix, TradingDate startDate, TradingDate endDate) throws ImportExportException {
        List quotes = new ArrayList();
        String URLString = constructURL(symbol, suffix, startDate, endDate);
        EODQuoteFilter filter = new YahooEODQuoteFilter(symbol);
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.getProxySettings();
        try {
            URL url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line = bufferedInput.readLine();
            while (line != null) {
                line = bufferedInput.readLine();
                if (line != null) {
                    try {
                        EODQuote quote = filter.toEODQuote(line);
                        quotes.add(quote);
                        verify(report, quote);
                    } catch (QuoteFormatException e) {
                        report.addError(Locale.getString(""YAHOO_DISPLAY_URL"") + "":"" + symbol + "":"" + Locale.getString(""ERROR"") + "": "" + e.getMessage());
                    }
                }
            }
            bufferedInput.close();
        } catch (BindException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (ConnectException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (UnknownHostException e) {
            throw new ImportExportException(Locale.getString(""UNKNOWN_HOST_ERROR"", e.getMessage()));
        } catch (NoRouteToHostException e) {
            throw new ImportExportException(Locale.getString(""DESTINATION_UNREACHABLE_ERROR"", e.getMessage()));
        } catch (MalformedURLException e) {
            throw new ImportExportException(Locale.getString(""INVALID_PROXY_ERROR"", proxyPreferences.host, proxyPreferences.port));
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
            throw new ImportExportException(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
        }
        return quotes;
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public RealSquareMatrix copyLowerToUpper() {
        for (int i = 0; i < cols - 1; i++) {
            for (int j = i + 1; j < cols; j++) {
                flmat[i][j] = flmat[j][i];
            }
        }
        return this;
    }",0
"    public static void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static void add100RowsToTargetDB(int block) {
        Scanner source = null;
        Connection connection = null;
        try {
            try {
                Class.forName(""sun.jdbc.odbc.JdbcOdbcDriver"");
                String dbUrl = ""jdbc:odbc:conn"";
                connection = DriverManager.getConnection(dbUrl);
                source = new Scanner(new File(""D:/Priyanka/My/Data/TargetData.csv""));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            int counter = 0;
            source.nextLine();
            int cursor = block * 100;
            while (cursor != 0) {
                cursor--;
                source.nextLine();
            }
            while (source.hasNextLine() && counter < 100) {
                Scanner ls = new Scanner(source.nextLine());
                ls.useDelimiter("","");
                String query = ""INSERT INTO [CompTarget].[dbo].[ReadingsT] ([time],[reads],[writes],[sysCall],[sysRead],[sysWrite],[random1],[numExecs] ,[rchar],[wchar],[reading_id]) VALUES "";
                query += ""( '"" + ls.next() + ""', "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + +ls.nextInt() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pkt + "")"";
                String query2 = ""INSERT INTO [CompTarget].[dbo].[PageReadingT]([pageout],[pagedout],[pagefree],[pagescan],[pageattach],[pagein],[main_reading_id],[page_reading_id]) VALUES"";
                query2 += ""( "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pkt + "", "" + spkt + "")"";
                pkt++;
                spkt++;
                Statement statement = ((Connection) connection).createStatement();
                try {
                    statement.executeQuery(query);
                } catch (SQLException e) {
                }
                try {
                    Statement statement2 = ((Connection) connection).createStatement();
                    statement2.executeQuery(query2);
                } catch (SQLException e) {
                }
                counter++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static String replaceTokens(String text, Map<String, String> values) {
        Pattern pattern = Pattern.compile(""\\$\\{(.+?)\\}"");
        Matcher matcher = pattern.matcher(text);
        StringBuilder builder = new StringBuilder();
        int i = 0;
        while (matcher.find()) {
            String replacement = values.get(matcher.group(1));
            builder.append(text.substring(i, matcher.start()));
            if (replacement == null) builder.append(matcher.group(0)); else builder.append(replacement);
            i = matcher.end();
        }
        builder.append(text.substring(i, text.length()));
        return builder.toString();
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static String encrypt(String str) {
        if (str == null || str.length() == 0) {
            throw new IllegalArgumentException(""String to encript cannot be null or zero length"");
        }
        StringBuffer hexString = new StringBuffer();
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        md.update(str.getBytes());
        byte[] hash = md.digest();
        for (int i = 0; i < hash.length; i++) {
            if ((0xff & hash[i]) < 0x10) {
                hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
            } else {
                hexString.append(Integer.toHexString(0xFF & hash[i]));
            }
        }
        return hexString.toString();
    }","	public static File chooseFileOpen(JFrame frame) {
		File retval;

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(false);

		//Show dialog and wait for user input
		int status = fc.showOpenDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFile();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    private boolean deleteLocalDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteLocalDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }","    public static void copy(File src, File dest) throws IOException {
        FileChannel srcChannel = new FileInputStream(src).getChannel();
        FileChannel destChannel = new FileOutputStream(dest).getChannel();
        destChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        destChannel.close();
    }",0
"    public static void copy_file(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
            System.out.print(""Overwrite existing file "" + toFile.getName() + ""? (Y/N): "");
            System.out.flush();
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            String response = in.readLine();
            if (!response.equals(""Y"") && !response.equals(""y"")) throw new IOException(""FileCopy: "" + ""existing file was not overwritten."");
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public int delete(BusinessObject o) throws DAOException {
        int delete = 0;
        Project project = (Project) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""DELETE_PROJECT""));
            pst.setInt(1, project.getId());
            delete = pst.executeUpdate();
            if (delete <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (delete > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return delete;
    }","    public static String MD5(String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            byte[] md5hash = new byte[32];
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            md5hash = md.digest();
            return convertToHex(md5hash);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public boolean crear() {
        int result = 0;
        String sql = ""insert into jugadorxdivxronda"" + ""(jugadorxDivision_idJugadorxDivision, ronda_numeroRonda, resultado, idPareoRival, color, flotante, puntajeRonda, idPareo) "" + ""values (?, ?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(unjxdxr);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public int delete(BusinessObject o) throws DAOException {
        int delete = 0;
        Project project = (Project) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""DELETE_PROJECT""));
            pst.setInt(1, project.getId());
            delete = pst.executeUpdate();
            if (delete <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (delete > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return delete;
    }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public IntChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            String tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private void doAboutDonate() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(KlangConstants.KLANGEDITOR_URL_DONATE));
                } catch (Exception err) {
                    err.printStackTrace();
                }
            }
        }
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public boolean ponerRivalxRonda(int idJugadorDiv, int idRonda, int dato) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + dato + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }","    public static BufferedReader getUserInfoStream(String name) throws IOException {
        BufferedReader in;
        try {
            URL url = new URL(""http://www.spoj.pl/users/"" + name.toLowerCase() + ""/"");
            in = new BufferedReader(new InputStreamReader(url.openStream()));
        } catch (MalformedURLException e) {
            in = null;
            throw e;
        }
        return in;
    }",0
"    public static PZKSRenderer createRenderer(PZKSGraph graph) {
        PZKSRenderer renderer = null;
        String className = System.getProperty(""renderer"");
        Class<?> clazz = null;
        try {
            clazz = Class.forName(className);
            Constructor<?> constructor = clazz.getConstructor(PZKSGraph.class);
            renderer = (PZKSRenderer) constructor.newInstance(graph);
        } catch (Exception e) {
            System.out.println(""Error during creating renderer "" + className + "". Default renderer will be used"");
            System.out.println(e.getMessage());
            renderer = new PZKSLamaoRenderer(graph);
        }
        return renderer;
    }","    public static void copyFile(File fileIn, File fileOut) throws IOException {
        FileChannel chIn = new FileInputStream(fileIn).getChannel();
        FileChannel chOut = new FileOutputStream(fileOut).getChannel();
        try {
            chIn.transferTo(0, chIn.size(), chOut);
        } catch (IOException e) {
            throw e;
        } finally {
            if (chIn != null) chIn.close();
            if (chOut != null) chOut.close();
        }
    }",0
"    private void colorizeEdit(StyledText edit) {
        String findResult = edit.getText();
        final Color COLOR_BLUE = dialog.getDisplay().getSystemColor(SWT.COLOR_BLUE);
        int start = 0;
        int index = findResult.indexOf(""\n"");
        while (index != -1) {
            String subString = findResult.substring(start, index);
            if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.underline = true;
                ((StyledText) editResult).setStyleRange(style);
            } else {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.foreground = COLOR_BLUE;
                ((StyledText) editResult).setStyleRange(style);
            }
            start = index + 1;
            index = findResult.indexOf(""\n"", index + 1);
        }
        String subString = findResult.substring(start).replace(""\n"", """");
        if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.underline = true;
            ((StyledText) editResult).setStyleRange(style);
        } else {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.foreground = COLOR_BLUE;
            ((StyledText) editResult).setStyleRange(style);
        }
        if (!WorkspaceSaveContainer.findCurrent.equals("""")) {
            final Color COLOR_RED = dialog.getDisplay().getSystemColor(SWT.COLOR_RED);
            if (WorkspaceSaveContainer.regularExpression) {
                Pattern pattern = null;
                try {
                    if (WorkspaceSaveContainer.caseSensitive) pattern = Pattern.compile(WorkspaceSaveContainer.findCurrent); else pattern = Pattern.compile(WorkspaceSaveContainer.findCurrent, Pattern.CASE_INSENSITIVE);
                } catch (PatternSyntaxException e) {
                    return;
                }
                String[] findResultList = findResult.split(""\n"");
                int findResultListCount = findResultList.length;
                int findResultListIndex;
                int offset = 0;
                for (findResultListIndex = 0; findResultListIndex < findResultListCount; findResultListIndex++) {
                    Matcher matcher = pattern.matcher(findResultList[findResultListIndex]);
                    while (matcher.find()) {
                        int startIndex = matcher.start();
                        int endIndex = matcher.end();
                        StyleRange style = new StyleRange();
                        style.start = startIndex + offset;
                        style.length = endIndex - startIndex;
                        style.fontStyle = SWT.BOLD;
                        style.foreground = COLOR_RED;
                        ((StyledText) editResult).setStyleRange(style);
                    }
                    offset += findResultList[findResultListIndex].length() + 1;
                }
            } else {
                String findCurrentLowerCase = WorkspaceSaveContainer.findCurrent.toLowerCase();
                String findResultLowerCase = findResult.toLowerCase();
                if (WorkspaceSaveContainer.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainer.findCurrent); else index = findResultLowerCase.indexOf(findCurrentLowerCase);
                while (index != -1) {
                    StyleRange style = new StyleRange();
                    style.start = index;
                    style.length = WorkspaceSaveContainer.findCurrent.length();
                    style.fontStyle = SWT.BOLD;
                    style.foreground = COLOR_RED;
                    ((StyledText) editResult).setStyleRange(style);
                    if (WorkspaceSaveContainer.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainer.findCurrent, index + 1); else index = findResultLowerCase.indexOf(findCurrentLowerCase, index + 1);
                }
            }
        }
    }","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }",0
"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }","    public void shouldAllowClosingInputStreamTwice() throws IOException {
        OutputStream outputStream = fileSystem.createOutputStream(_(""hello""), OutputMode.OVERWRITE);
        outputStream.write(new byte[] { 1, 2, 3 });
        outputStream.close();
        InputStream inputStream = fileSystem.createInputStream(_(""hello""));
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        IOUtils.copy(inputStream, buffer);
        inputStream.close();
        inputStream.close();
    }",0
"    private void doAboutDonate() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(KlangConstants.KLANGEDITOR_URL_DONATE));
                } catch (Exception err) {
                    err.printStackTrace();
                }
            }
        }
    }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                generellPathField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                webBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                ripperPathField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }","    public static void copyFile(File src, File dst) throws IOException {
        FileChannel sourceChannel = new FileInputStream(src).getChannel();
        FileChannel destinationChannel = new FileOutputStream(dst).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }",0
"    public static boolean deleteDir(File dir) {
        if (dir.exists()) {
            File[] files = dir.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDir(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (dir.delete());
    }","    public static String getMD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                generellPathField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    private void colorizeEdit(StyledText edit) {
        String findResult = edit.getText();
        final Color COLOR_BLUE = dialog.getDisplay().getSystemColor(SWT.COLOR_BLUE);
        int start = 0;
        int index = findResult.indexOf(""\n"");
        while (index != -1) {
            String subString = findResult.substring(start, index);
            if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.underline = true;
                ((StyledText) editResult).setStyleRange(style);
            } else {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.foreground = COLOR_BLUE;
                ((StyledText) editResult).setStyleRange(style);
            }
            start = index + 1;
            index = findResult.indexOf(""\n"", index + 1);
        }
        String subString = findResult.substring(start).replace(""\n"", """");
        if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.underline = true;
            ((StyledText) editResult).setStyleRange(style);
        } else {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.foreground = COLOR_BLUE;
            ((StyledText) editResult).setStyleRange(style);
        }
        if (!WorkspaceSaveContainer.findCurrent.equals("""")) {
            final Color COLOR_RED = dialog.getDisplay().getSystemColor(SWT.COLOR_RED);
            if (WorkspaceSaveContainer.regularExpression) {
                Pattern pattern = null;
                try {
                    if (WorkspaceSaveContainer.caseSensitive) pattern = Pattern.compile(WorkspaceSaveContainer.findCurrent); else pattern = Pattern.compile(WorkspaceSaveContainer.findCurrent, Pattern.CASE_INSENSITIVE);
                } catch (PatternSyntaxException e) {
                    return;
                }
                String[] findResultList = findResult.split(""\n"");
                int findResultListCount = findResultList.length;
                int findResultListIndex;
                int offset = 0;
                for (findResultListIndex = 0; findResultListIndex < findResultListCount; findResultListIndex++) {
                    Matcher matcher = pattern.matcher(findResultList[findResultListIndex]);
                    while (matcher.find()) {
                        int startIndex = matcher.start();
                        int endIndex = matcher.end();
                        StyleRange style = new StyleRange();
                        style.start = startIndex + offset;
                        style.length = endIndex - startIndex;
                        style.fontStyle = SWT.BOLD;
                        style.foreground = COLOR_RED;
                        ((StyledText) editResult).setStyleRange(style);
                    }
                    offset += findResultList[findResultListIndex].length() + 1;
                }
            } else {
                String findCurrentLowerCase = WorkspaceSaveContainer.findCurrent.toLowerCase();
                String findResultLowerCase = findResult.toLowerCase();
                if (WorkspaceSaveContainer.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainer.findCurrent); else index = findResultLowerCase.indexOf(findCurrentLowerCase);
                while (index != -1) {
                    StyleRange style = new StyleRange();
                    style.start = index;
                    style.length = WorkspaceSaveContainer.findCurrent.length();
                    style.fontStyle = SWT.BOLD;
                    style.foreground = COLOR_RED;
                    ((StyledText) editResult).setStyleRange(style);
                    if (WorkspaceSaveContainer.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainer.findCurrent, index + 1); else index = findResultLowerCase.indexOf(findCurrentLowerCase, index + 1);
                }
            }
        }
    }",0
"    public synchronized String encrypt(String plaintext) throws PasswordException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new PasswordException(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new PasswordException(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new Base64Encoder()).encode(raw);
        return hash;
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    @Override
    public KSA00 getEstimate() {
        int probe_count = getData().getModel().getProbes().size();
        int ch_length = getData().getModel().getChromosomeLength();
        int clone_length = getData().getModel().getCloneLength();
        int clone_count = getData().cloneCount();
        int counter = 0;
        byte[][] scores = new byte[clone_count][];
        for (KSA00Data.Hybridization val : getData()) {
            scores[counter++] = val.getScore();
        }
        int[] probeOrder = ArrayUtil.createSequence(getData().getModel().getProbes().size(), false);
        int[][] joint = new int[probe_count][probe_count];
        for (int probeIndex1 = 0; probeIndex1 < probe_count; probeIndex1++) {
            for (int probeIndex2 = probeIndex1 + 1; probeIndex2 < probe_count; probeIndex2++) {
                for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
                    if ((scores[cloneIndex][probeIndex1] == 1) && (scores[cloneIndex][probeIndex2] == 1)) {
                        joint[probeIndex1][probeIndex2]++;
                    }
                }
                joint[probeIndex2][probeIndex1] = joint[probeIndex1][probeIndex2];
            }
        }
        int gap = ch_length - (probe_count * clone_length);
        double[] y = Initial_Ys(probeOrder, probe_count, clone_count, clone_length, gap, joint);
        return getData().getModel().create(Arrays.asList(ArrayUtils.toObject(y)));
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                shoutcastPlayer.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"    public static String getMD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static void copy_file(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
            System.out.print(""Overwrite existing file "" + toFile.getName() + ""? (Y/N): "");
            System.out.flush();
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            String response = in.readLine();
            if (!response.equals(""Y"") && !response.equals(""y"")) throw new IOException(""FileCopy: "" + ""existing file was not overwritten."");
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }",0
"    public void start(Object context) {
        String cmd = getValueFromUser(""executables"", i18n(""WhichExecutable""), new String[0]);
        if (cmd == null) return;
        try {
            Process process = Runtime.getRuntime().exec(cmd);
            BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while (true) {
                String line = in.readLine();
                if (line == null) break;
                println(line);
            }
        } catch (IOException ioe) {
            println(i18n(""Error"") + ioe.getMessage());
        }
    }","            public void actionPerformed(final ActionEvent e) {
                if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.OPEN)) {
                    try {
                        java.awt.Desktop.getDesktop().open(new File(""auftraege/test.pdf""));
                    } catch (final IOException ex) {
                        System.err.println(""Der Auftrag konnte nicht angezeigt werden."");
                    }
                }
            }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    private void findKDE(java.awt.event.ActionEvent evt) {
        final javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File theme = fc.getSelectedFile();
            kdeTheme = theme.toString();
            kdeField.setText(themePack);
        }
    }",0
"    private static boolean loadClasses() {
        switch(jvm) {
            case MRJ_2_0:
                try {
                    Class aeTargetClass = Class.forName(""com.apple.MacOS.AETarget"");
                    Class osUtilsClass = Class.forName(""com.apple.MacOS.OSUtils"");
                    Class appleEventClass = Class.forName(""com.apple.MacOS.AppleEvent"");
                    Class aeClass = Class.forName(""com.apple.MacOS.ae"");
                    aeDescClass = Class.forName(""com.apple.MacOS.AEDesc"");
                    aeTargetConstructor = aeTargetClass.getDeclaredConstructor(new Class[] { int.class });
                    appleEventConstructor = appleEventClass.getDeclaredConstructor(new Class[] { int.class, int.class, aeTargetClass, int.class, int.class });
                    aeDescConstructor = aeDescClass.getDeclaredConstructor(new Class[] { String.class });
                    makeOSType = osUtilsClass.getDeclaredMethod(""makeOSType"", new Class[] { String.class });
                    putParameter = appleEventClass.getDeclaredMethod(""putParameter"", new Class[] { int.class, aeDescClass });
                    sendNoReply = appleEventClass.getDeclaredMethod(""sendNoReply"", new Class[] {});
                    Field keyDirectObjectField = aeClass.getDeclaredField(""keyDirectObject"");
                    keyDirectObject = (Integer) keyDirectObjectField.get(null);
                    Field autoGenerateReturnIDField = appleEventClass.getDeclaredField(""kAutoGenerateReturnID"");
                    kAutoGenerateReturnID = (Integer) autoGenerateReturnIDField.get(null);
                    Field anyTransactionIDField = appleEventClass.getDeclaredField(""kAnyTransactionID"");
                    kAnyTransactionID = (Integer) anyTransactionIDField.get(null);
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_2_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    mrjOSTypeClass = Class.forName(""com.apple.mrj.MRJOSType"");
                    Field systemFolderField = mrjFileUtilsClass.getDeclaredField(""kSystemFolderType"");
                    kSystemFolderType = systemFolderField.get(null);
                    findFolder = mrjFileUtilsClass.getDeclaredMethod(""findFolder"", new Class[] { mrjOSTypeClass });
                    getFileCreator = mrjFileUtilsClass.getDeclaredMethod(""getFileCreator"", new Class[] { File.class });
                    getFileType = mrjFileUtilsClass.getDeclaredMethod(""getFileType"", new Class[] { File.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (SecurityException se) {
                    errorMessage = se.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_0:
                try {
                    Class linker = Class.forName(""com.apple.mrj.jdirect.Linker"");
                    Constructor constructor = linker.getConstructor(new Class[] { Class.class });
                    linkage = constructor.newInstance(new Object[] { BrowserLauncher.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (InvocationTargetException ite) {
                    errorMessage = ite.getMessage();
                    return false;
                } catch (InstantiationException ie) {
                    errorMessage = ie.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    openURL = mrjFileUtilsClass.getDeclaredMethod(""openURL"", new Class[] { String.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                }
                break;
            default:
                break;
        }
        return true;
    }","    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (!java.awt.Desktop.isDesktopSupported()) {
            Lang.showMesg(trayPtn.getMpwdPtn(), LangRes.P30F7A0F, """");
        }
        try {
            java.awt.Desktop.getDesktop().browse(new java.net.URI(ConsEnv.MLOGSITE));
        } catch (Exception exp) {
            Logs.exception(exp);
        }
    }",0
"                        public Constructor run() throws Exception {
                            String path = ""META-INF/services/"" + ComponentApplicationContext.class.getName();
                            ClassLoader loader = Thread.currentThread().getContextClassLoader();
                            final Enumeration<URL> urls;
                            if (loader == null) {
                                urls = ComponentApplicationContext.class.getClassLoader().getResources(path);
                            } else {
                                urls = loader.getResources(path);
                            }
                            while (urls.hasMoreElements()) {
                                URL url = urls.nextElement();
                                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                                try {
                                    String className = null;
                                    while ((className = reader.readLine()) != null) {
                                        final String name = className.trim();
                                        if (!name.startsWith(""#"") && !name.startsWith("";"") && !name.startsWith(""//"")) {
                                            final Class<?> cls;
                                            if (loader == null) {
                                                cls = Class.forName(name);
                                            } else {
                                                cls = Class.forName(name, true, loader);
                                            }
                                            int m = cls.getModifiers();
                                            if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) {
                                                Constructor constructor = cls.getDeclaredConstructor();
                                                if (!Modifier.isPublic(constructor.getModifiers())) {
                                                    constructor.setAccessible(true);
                                                }
                                                return constructor;
                                            } else {
                                                throw new ClassCastException(cls.getName());
                                            }
                                        }
                                    }
                                } finally {
                                    reader.close();
                                }
                            }
                            throw new ComponentApplicationException(""No "" + ""ComponentApplicationContext implementation "" + ""found."");
                        }","    public static void kopirujSoubor(File vstup, File vystup) throws IOException {
        FileChannel sourceChannel = new FileInputStream(vstup).getChannel();
        FileChannel destinationChannel = new FileOutputStream(vystup).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                fileBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"    public HTMLDocument handleURL(String suburl, HTTPSession session, HTTPRequestHeader header) throws WebMailException {
        UserData user = ((UserSession) session).getUser();
        Document helpdoc = (Document) cache.get(user.getPreferredLocale().getLanguage() + ""/"" + user.getTheme());
        if (helpdoc == null) {
            String helpdocpath = ""file://"" + store.getBasePath(user.getPreferredLocale(), user.getTheme()) + ""help.xml"";
            try {
                DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();
                helpdoc = parser.parse(helpdocpath);
            } catch (Exception ex) {
                ex.printStackTrace();
                throw new WebMailException(""Could not parse "" + helpdocpath);
            }
            cache.put(user.getPreferredLocale().getLanguage() + ""/"" + user.getTheme(), helpdoc);
        }
        Node n = session.getModel().importNode(helpdoc.getDocumentElement(), true);
        session.getModel().getDocumentElement().appendChild(n);
        if (header.isContentSet(""helptopic"") && session instanceof UserSession) {
            ((UserSession) session).getUserModel().setStateVar(""helptopic"", header.getContent(""helptopic""));
        }
        HTMLDocument retdoc = new XHTMLDocument(session.getModel(), store.getStylesheet(""help.xsl"", user.getPreferredLocale(), user.getTheme()));
        session.getModel().getDocumentElement().removeChild(n);
        if (header.isContentSet(""helptopic"") && session instanceof UserSession) {
            ((UserSession) session).getUserModel().removeAllStateVars(""helptopic"");
        }
        return retdoc;
    }","    public void doUpdateByLoginID() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByLoginID(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + ""ip_address = ?, mac_no = ? "" + ""WHERE  login_id= ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.ipAddress);
            ps.setString(5, this.macNO);
            ps.setString(6, this.loginID);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByLoginID(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }",0
"    public static void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }","    protected static void saveFlash(E4Device device) throws IOException {
        File file = new File(device.remote.getDeviceLocalDir(), LAST_FLASH_SESSION_FILENAME + ""."" + SESSION_EXT);
        Object[] flash = device.presetDB.getFlashSnapshot();
        ZipOutputStream zos = null;
        ObjectOutputStream oos = null;
        zos = new ZipOutputStream(new FileOutputStream(file));
        zos.setMethod(ZipOutputStream.DEFLATED);
        zos.setLevel(Deflater.BEST_SPEED);
        zos.putNextEntry(new ZipEntry(FLASH_SESSION_CONTENT_ENTRY));
        oos = new ObjectOutputStream(zos);
        oos.writeObject(flash);
        oos.close();
    }",0
"    public ThreadChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            ThreadInfo tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    private void loadChannels() {
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(new File(this.getProperty(""path.data"") + File.separator + ""Channels.xml""));
            NodeList items = doc.getElementsByTagName(""channel"");
            channels = new HashMap<String, Channel>();
            for (int x = 0; x < items.getLength(); x++) {
                Node item = items.item(x);
                Channel chan = new Channel(item);
                channels.put(chan.getName(), chan);
            }
            System.out.println(""Channels.xml found and loaded ("" + items.getLength() + "")"");
        } catch (Exception e) {
            channels = new HashMap<String, Channel>();
            System.out.println(""Error loading Channels.xml, starting with blank channel list."");
        }
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    private void weightAndPlaceClasses() {
        int rows = getRows();
        for (int curRow = _maxPackageRank; curRow < rows; curRow++) {
            xPos = getHGap() / 2;
            BOTLObjectSourceDiagramNode[] rowObject = getObjectsInRow(curRow);
            for (int i = 0; i < rowObject.length; i++) {
                if (curRow == _maxPackageRank) {
                    int nDownlinks = rowObject[i].getDownlinks().size();
                    rowObject[i].setWeight((nDownlinks > 0) ? (1 / nDownlinks) : 2);
                } else {
                    Vector uplinks = rowObject[i].getUplinks();
                    int nUplinks = uplinks.size();
                    if (nUplinks > 0) {
                        float average_col = 0;
                        for (int j = 0; j < uplinks.size(); j++) {
                            average_col += ((BOTLObjectSourceDiagramNode) (uplinks.elementAt(j))).getColumn();
                        }
                        average_col /= nUplinks;
                        rowObject[i].setWeight(average_col);
                    } else {
                        rowObject[i].setWeight(1000);
                    }
                }
            }
            int[] pos = new int[rowObject.length];
            for (int i = 0; i < pos.length; i++) {
                pos[i] = i;
            }
            boolean swapped = true;
            while (swapped) {
                swapped = false;
                for (int i = 0; i < pos.length - 1; i++) {
                    if (rowObject[pos[i]].getWeight() > rowObject[pos[i + 1]].getWeight()) {
                        int temp = pos[i];
                        pos[i] = pos[i + 1];
                        pos[i + 1] = temp;
                        swapped = true;
                    }
                }
            }
            for (int i = 0; i < pos.length; i++) {
                rowObject[pos[i]].setColumn(i);
                if ((i > _vMax) && (rowObject[pos[i]].getUplinks().size() == 0) && (rowObject[pos[i]].getDownlinks().size() == 0)) {
                    if (getColumns(rows - 1) > _vMax) {
                        rows++;
                    }
                    rowObject[pos[i]].setRank(rows - 1);
                } else {
                    rowObject[pos[i]].setLocation(new Point(xPos, yPos));
                    xPos += rowObject[pos[i]].getSize().getWidth() + getHGap();
                }
            }
            yPos += getRowHeight(curRow) + getVGap();
        }
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                generellPathField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public boolean ponerColorxRonda(int idJugadorDiv, int idRonda, int dato) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET color = "" + dato + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }",0
"    public int delete(BusinessObject o) throws DAOException {
        int delete = 0;
        Project project = (Project) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""DELETE_PROJECT""));
            pst.setInt(1, project.getId());
            delete = pst.executeUpdate();
            if (delete <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (delete > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return delete;
    }","    public static String encrypt(String str) {
        if (str == null || str.length() == 0) {
            throw new IllegalArgumentException(""String to encript cannot be null or zero length"");
        }
        StringBuffer hexString = new StringBuffer();
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        md.update(str.getBytes());
        byte[] hash = md.digest();
        for (int i = 0; i < hash.length; i++) {
            if ((0xff & hash[i]) < 0x10) {
                hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
            } else {
                hexString.append(Integer.toHexString(0xFF & hash[i]));
            }
        }
        return hexString.toString();
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                webBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"    public static String hashMD5(String password) {
        String hashword = null;
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(password.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            hashword = hash.toString(16);
        } catch (NoSuchAlgorithmException nsae) {
        }
        return hashword;
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private static boolean loadClasses() {
        switch(jvm) {
            case MRJ_2_0:
                try {
                    Class aeTargetClass = Class.forName(""com.apple.MacOS.AETarget"");
                    Class osUtilsClass = Class.forName(""com.apple.MacOS.OSUtils"");
                    Class appleEventClass = Class.forName(""com.apple.MacOS.AppleEvent"");
                    Class aeClass = Class.forName(""com.apple.MacOS.ae"");
                    aeDescClass = Class.forName(""com.apple.MacOS.AEDesc"");
                    aeTargetConstructor = aeTargetClass.getDeclaredConstructor(new Class[] { int.class });
                    appleEventConstructor = appleEventClass.getDeclaredConstructor(new Class[] { int.class, int.class, aeTargetClass, int.class, int.class });
                    aeDescConstructor = aeDescClass.getDeclaredConstructor(new Class[] { String.class });
                    makeOSType = osUtilsClass.getDeclaredMethod(""makeOSType"", new Class[] { String.class });
                    putParameter = appleEventClass.getDeclaredMethod(""putParameter"", new Class[] { int.class, aeDescClass });
                    sendNoReply = appleEventClass.getDeclaredMethod(""sendNoReply"", new Class[] {});
                    Field keyDirectObjectField = aeClass.getDeclaredField(""keyDirectObject"");
                    keyDirectObject = (Integer) keyDirectObjectField.get(null);
                    Field autoGenerateReturnIDField = appleEventClass.getDeclaredField(""kAutoGenerateReturnID"");
                    kAutoGenerateReturnID = (Integer) autoGenerateReturnIDField.get(null);
                    Field anyTransactionIDField = appleEventClass.getDeclaredField(""kAnyTransactionID"");
                    kAnyTransactionID = (Integer) anyTransactionIDField.get(null);
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_2_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    mrjOSTypeClass = Class.forName(""com.apple.mrj.MRJOSType"");
                    Field systemFolderField = mrjFileUtilsClass.getDeclaredField(""kSystemFolderType"");
                    kSystemFolderType = systemFolderField.get(null);
                    findFolder = mrjFileUtilsClass.getDeclaredMethod(""findFolder"", new Class[] { mrjOSTypeClass });
                    getFileCreator = mrjFileUtilsClass.getDeclaredMethod(""getFileCreator"", new Class[] { File.class });
                    getFileType = mrjFileUtilsClass.getDeclaredMethod(""getFileType"", new Class[] { File.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (SecurityException se) {
                    errorMessage = se.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_0:
                try {
                    Class linker = Class.forName(""com.apple.mrj.jdirect.Linker"");
                    Constructor constructor = linker.getConstructor(new Class[] { Class.class });
                    linkage = constructor.newInstance(new Object[] { BrowserLauncher.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (InvocationTargetException ite) {
                    errorMessage = ite.getMessage();
                    return false;
                } catch (InstantiationException ie) {
                    errorMessage = ie.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    openURL = mrjFileUtilsClass.getDeclaredMethod(""openURL"", new Class[] { String.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                }
                break;
            default:
                break;
        }
        return true;
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public static void copy(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }","    private void findKDE(java.awt.event.ActionEvent evt) {
        final javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File theme = fc.getSelectedFile();
            kdeTheme = theme.toString();
            kdeField.setText(themePack);
        }
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public static BufferedReader getUserInfoStream(String name) throws IOException {
        BufferedReader in;
        try {
            URL url = new URL(""http://www.spoj.pl/users/"" + name.toLowerCase() + ""/"");
            in = new BufferedReader(new InputStreamReader(url.openStream()));
        } catch (MalformedURLException e) {
            in = null;
            throw e;
        }
        return in;
    }","    public static String generate(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public static void copy(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
            System.out.print(""Overwrite existing file "" + toFile.getName() + ""? (Y/N): "");
            System.out.flush();
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            String response = in.readLine();
            if (!response.equals(""Y"") && !response.equals(""y"")) throw new IOException(""FileCopy: "" + ""existing file was not overwritten."");
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }","    public boolean crear() {
        int result = 0;
        String sql = ""insert into jugador"" + ""(apellidoPaterno, apellidoMaterno, nombres, fechaNacimiento, pais, rating, sexo)"" + ""values (?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(elJugador);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static void fileCopy(String fromPath, String toPath) throws IOException {
        File inputFile = new File(fromPath);
        File outputFile = new File(toPath);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private static String simpleCompute(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""utf-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(Init.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + Init.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + Init.GPL_URL + ""' to view GPL"");
            }
        }",0
"    public static boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }","    private static List retrieveQuotes(Report report, Symbol symbol, String prefix, TradingDate startDate, TradingDate endDate) throws ImportExportException {
        List quotes = new ArrayList();
        String URLString = constructURL(symbol, prefix, startDate, endDate);
        EODQuoteFilter filter = new GoogleEODQuoteFilter(symbol);
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.getProxySettings();
        try {
            URL url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line = bufferedInput.readLine();
            while (line != null) {
                line = bufferedInput.readLine();
                if (line != null) {
                    try {
                        EODQuote quote = filter.toEODQuote(line);
                        quotes.add(quote);
                        verify(report, quote);
                    } catch (QuoteFormatException e) {
                        report.addError(Locale.getString(""GOOGLE_DISPLAY_URL"") + "":"" + symbol + "":"" + Locale.getString(""ERROR"") + "": "" + e.getMessage());
                    }
                }
            }
            bufferedInput.close();
        } catch (BindException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (ConnectException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (UnknownHostException e) {
            throw new ImportExportException(Locale.getString(""UNKNOWN_HOST_ERROR"", e.getMessage()));
        } catch (NoRouteToHostException e) {
            throw new ImportExportException(Locale.getString(""DESTINATION_UNREACHABLE_ERROR"", e.getMessage()));
        } catch (MalformedURLException e) {
            throw new ImportExportException(Locale.getString(""INVALID_PROXY_ERROR"", proxyPreferences.host, proxyPreferences.port));
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
            throw new ImportExportException(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
        }
        return quotes;
    }",0
"    public static void copy(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
            System.out.print(""Overwrite existing file "" + toFile.getName() + ""? (Y/N): "");
            System.out.flush();
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            String response = in.readLine();
            if (!response.equals(""Y"") && !response.equals(""y"")) throw new IOException(""FileCopy: "" + ""existing file was not overwritten."");
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }","    private static int binarySearchArtist(Vector<MusicOutputDesign> v, int low, int high) {
        if (high < low) {
            return -1;
        }
        int mid = (high + low) / 2;
        String s = v.elementAt(mid).getArtist().replace(""\\"", ""/"");
        if (s.compareToIgnoreCase(artist) > 0) {
            return binarySearchArtist(v, low, mid - 1);
        } else if (s.compareToIgnoreCase(artist) < 0) {
            return binarySearchArtist(v, mid + 1, high);
        } else {
            return mid;
        }
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                fileBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"            public void actionPerformed(final ActionEvent e) {
                if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.OPEN)) {
                    try {
                        java.awt.Desktop.getDesktop().open(new File(""auftraege/test.pdf""));
                    } catch (final IOException ex) {
                        System.err.println(""Der Auftrag konnte nicht angezeigt werden."");
                    }
                }
            }","        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(MasteryCards.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + MasteryCards.GPL_URL + ""' to view GPL"");
            }
        }",0
"    private static boolean loadClasses() {
        switch(jvm) {
            case MRJ_2_0:
                try {
                    Class aeTargetClass = Class.forName(""com.apple.MacOS.AETarget"");
                    Class osUtilsClass = Class.forName(""com.apple.MacOS.OSUtils"");
                    Class appleEventClass = Class.forName(""com.apple.MacOS.AppleEvent"");
                    Class aeClass = Class.forName(""com.apple.MacOS.ae"");
                    aeDescClass = Class.forName(""com.apple.MacOS.AEDesc"");
                    aeTargetConstructor = aeTargetClass.getDeclaredConstructor(new Class[] { int.class });
                    appleEventConstructor = appleEventClass.getDeclaredConstructor(new Class[] { int.class, int.class, aeTargetClass, int.class, int.class });
                    aeDescConstructor = aeDescClass.getDeclaredConstructor(new Class[] { String.class });
                    makeOSType = osUtilsClass.getDeclaredMethod(""makeOSType"", new Class[] { String.class });
                    putParameter = appleEventClass.getDeclaredMethod(""putParameter"", new Class[] { int.class, aeDescClass });
                    sendNoReply = appleEventClass.getDeclaredMethod(""sendNoReply"", new Class[] {});
                    Field keyDirectObjectField = aeClass.getDeclaredField(""keyDirectObject"");
                    keyDirectObject = (Integer) keyDirectObjectField.get(null);
                    Field autoGenerateReturnIDField = appleEventClass.getDeclaredField(""kAutoGenerateReturnID"");
                    kAutoGenerateReturnID = (Integer) autoGenerateReturnIDField.get(null);
                    Field anyTransactionIDField = appleEventClass.getDeclaredField(""kAnyTransactionID"");
                    kAnyTransactionID = (Integer) anyTransactionIDField.get(null);
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_2_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    mrjOSTypeClass = Class.forName(""com.apple.mrj.MRJOSType"");
                    Field systemFolderField = mrjFileUtilsClass.getDeclaredField(""kSystemFolderType"");
                    kSystemFolderType = systemFolderField.get(null);
                    findFolder = mrjFileUtilsClass.getDeclaredMethod(""findFolder"", new Class[] { mrjOSTypeClass });
                    getFileCreator = mrjFileUtilsClass.getDeclaredMethod(""getFileCreator"", new Class[] { File.class });
                    getFileType = mrjFileUtilsClass.getDeclaredMethod(""getFileType"", new Class[] { File.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (SecurityException se) {
                    errorMessage = se.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_0:
                try {
                    Class linker = Class.forName(""com.apple.mrj.jdirect.Linker"");
                    Constructor constructor = linker.getConstructor(new Class[] { Class.class });
                    linkage = constructor.newInstance(new Object[] { BrowserLauncher.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (InvocationTargetException ite) {
                    errorMessage = ite.getMessage();
                    return false;
                } catch (InstantiationException ie) {
                    errorMessage = ie.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    openURL = mrjFileUtilsClass.getDeclaredMethod(""openURL"", new Class[] { String.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                }
                break;
            default:
                break;
        }
        return true;
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                fileBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    private boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                ripperPathField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public void start(Gedcom gedcom) {
        String cmd = getValueFromUser(""executables"", translate(""WhichExecutable""), new String[0]);
        if (cmd == null) return;
        try {
            Process process = Runtime.getRuntime().exec(cmd);
            BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while (true) {
                String line = in.readLine();
                if (line == null) break;
                println(line);
            }
        } catch (IOException ioe) {
            println(translate(""Error"") + ioe.getMessage());
        }
    }",0
"    public static String getHashCode(String text) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public void start(Object context) {
        String cmd = getValueFromUser(""executables"", i18n(""WhichExecutable""), new String[0]);
        if (cmd == null) return;
        try {
            Process process = Runtime.getRuntime().exec(cmd);
            BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while (true) {
                String line = in.readLine();
                if (line == null) break;
                println(line);
            }
        } catch (IOException ioe) {
            println(i18n(""Error"") + ioe.getMessage());
        }
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String SHA1(String text) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        md.update(text.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }",0
"    @Override
    public KSA00 getEstimate() {
        int probe_count = getData().getModel().getProbes().size();
        int ch_length = getData().getModel().getChromosomeLength();
        int clone_length = getData().getModel().getCloneLength();
        int clone_count = getData().cloneCount();
        int counter = 0;
        byte[][] scores = new byte[clone_count][];
        for (KSA00Data.Hybridization val : getData()) {
            scores[counter++] = val.getScore();
        }
        int[] probeOrder = ArrayUtil.createSequence(getData().getModel().getProbes().size(), false);
        int[][] joint = new int[probe_count][probe_count];
        for (int probeIndex1 = 0; probeIndex1 < probe_count; probeIndex1++) {
            for (int probeIndex2 = probeIndex1 + 1; probeIndex2 < probe_count; probeIndex2++) {
                for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
                    if ((scores[cloneIndex][probeIndex1] == 1) && (scores[cloneIndex][probeIndex2] == 1)) {
                        joint[probeIndex1][probeIndex2]++;
                    }
                }
                joint[probeIndex2][probeIndex1] = joint[probeIndex1][probeIndex2];
            }
        }
        int gap = ch_length - (probe_count * clone_length);
        double[] y = Initial_Ys(probeOrder, probe_count, clone_count, clone_length, gap, joint);
        return getData().getModel().create(Arrays.asList(ArrayUtils.toObject(y)));
    }","    public boolean crear() {
        int result = 0;
        String sql = ""insert into torneo"" + ""(nombreTorneo, ciudad, fechaInicio, fechaFinal, organizador, numeroDivisiones, terminado)"" + ""values (?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(eltorneo);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public boolean crear() {
        int result = 0;
        String sql = ""insert into jugador"" + ""(apellidoPaterno, apellidoMaterno, nombres, fechaNacimiento, pais, rating, sexo)"" + ""values (?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(elJugador);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                webBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public void testEnd() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""spiritbot\\W"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""spiritbot: how are you doing"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private static final void makeWF_JavaComponent_jwf(Hashtable pWriterFormats) {
        pWriterFormats.put(""JavaComponent.jwf"", ""!<header>\n\n\n\n$<{java.CodeWriter.package>package $<java.CodeWriter.package>;$<}java.CodeWriter.package>\n\n\n\nimport java.io.FileOutputStream;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.io.StringReader;\nimport java.io.BufferedReader;\nimport java.io.FileWriter;\nimport java.io.BufferedWriter;\n\nimport java.util.Vector;\nimport java.util.Hashtable;\nimport java.util.Calendar;\n\n\n\n!<{import>/* section:import << */\n//\n\n!<import>\n\n//\n/* section:import >> */!<}import>\n\n\n\npublic class $<main.CodeWriter> \n$<{java.CodeWriter.extends>  extends $<java.CodeWriter.extends> $<}java.CodeWriter.extends> \n$<{java.CodeWriter.implements>  implements $<java.CodeWriter.implements> $<}java.CodeWriter.implements>\n{\n\n  /* Constants << */\n \n  // User Interface text message parts\n  public static final String writer__UITEXT_Method                   = \""method \"";\n  public static final String writer__UITEXT_Main                     = \""main \"";\n  public static final String writer__UITEXT_ExceptionIn              = \""Exception in \"";\n  public static final String writer__UITEXT_ColonNewLine             = \"":\\n\"";\n  public static final String writer__UITEXT_NewLine                  = \""\\n\"";\n  public static final String writer__UITEXT_Section                  = \""section \"";\n  public static final String writer__UITEXT_SavedFile                = \""Saved file:       \"";\n  public static final String writer__UITEXT_UnableToSaveFile         = \""Unable to save file: \"";\n  public static final String writer__UITEXT_UnableToBackupFile       = \""Unable to backup file: \"";\n  public static final String writer__UITEXT_ToBackupFolder           = \"" to backup folder: \"";\n  public static final String writer__UITEXT_BackupFolderColon        = \""Backup folder: \"";\n  public static final String writer__UITEXT_BackupFolderExistFailure = \"" does not exist and cannot be created.\"";\n  public static final String writer__UITEXT_BackupFolderNotAFolder   = \"" is not a folder.\"";\n  public static final String writer__UITEXT_BackupFolderNotWritable  = \"" is not writable.\"";\n  public static final String writer__UITEXT_CodeWriterState          = \""Code Writer State: \"";\n  public static final String writer__UITEXT_GetFileIndexEquals       = \""\\n_getFileIndex()    = \"";\n  public static final String writer__UITEXT_GetFullFileNameEquals    = \""\\n_getFullFileName() = \"";\n  public static final String writer__UITEXT_GetOutputFolderEquals    = \""\\n_getOutputFolder() = \"";\n  public static final String writer__UITEXT_ErrorHeader              = \""\\n\\n--- CodeWriter Error Description Start ---\\n\\n\"";\n  public static final String writer__UITEXT_ErrorFooter              = \""\\n--- CodeWriter Error Description End -----\\n\\n\"";\n  public static final String writer__UITEXT_PlaceHolderException \n    = \""This placeholder Exception should never be thrown: there is an error in the WriterFormat.\"";\n\n  public static final int writer__FILE_BUFFER_SIZE  = 4096;                // initial size of StringBuffer\n\n  /* Constants >> */\n\n\n  /* Writer Variables << */\n\n  protected String[]     writer__iFileNameRoots     = new String[] {};     // generated file name roots\n  protected int          writer__iNumFiles          = 0;                   // number of generated files\n  \n  protected String       writer__iFileNamePrefix    = \""\"";                  // failsafe default\n  protected String       writer__iFileNameSuffix    = \""\"";                  // failsafe default\n\n  protected String       writer__iBackupPrefix      = \""\"";                  // failsafe default\n  protected String       writer__iBackupSuffix      = \""\"";                  // failsafe default\n\n  protected StringBuffer writer__iCurrentText       = new StringBuffer();  // current text\n  protected int          writer__iCurrentFileIndex  = 0;                   // current file index\n\n  protected boolean      writer__iSave              = true;                // save generated code to disk\n  protected boolean      writer__iBackup            = true;                // make backups\n\n  protected String       writer__iOutputFolder      = \"".\"";                 // written code is output to this folder\n  protected String       writer__iBackupFolder      = \"".\"";                 // overwritten files are placed here\n\n  protected Hashtable    writer__iProperties            = new Hashtable(); // lookup table for compile time properties\n  protected boolean      writer__iPropertiesInitialised = false;           // true => lookup table initialiased\n\n  /* Writer Variables >> */\n\n\n  !<{declare>/* section:declare << */\n  //\n\n  !<declare>\n\n  //\n  /* section:declare >> */!<}declare>\n\n\n\n  /* Writer Services << */\n\n  /* Initialize. */\n  public void writer__initialize() {\n    writer__iCurrentFileIndex = 0;\n    writer__setDefaults();\n  }\n\n\n\n  /** Main loop.\n   *  Template script is placed here in the @body section.\n   */\n  public void writer__write() throws Exception {\n\n    // initialize\n    String writer__currentSection = \""init\"";\n\n    try {\n      !<{init>/* section:init << */\n      //\n\n      !<init>\n\n      //\n      /* section:init >> */!<}init>\n\n\n      // write files loop\n      int      writer__numFiles = _getNumFiles();\n      int      writer__fileI    = 0;\n      writer__next_file: for( writer__fileI = 0; writer__fileI < writer__numFiles; writer__fileI++ ) {\n\n        !<{prewrite>/* section:prewrite << */\n        // \n\n        writer__currentSection = \""prewrite\"";\n        !<prewrite>\n\n        //\n        /* section:prewrite >> */!<}prewrite>\n\n\n        if( ! writer__startFile() ) { continue writer__next_file; }\n\n\n        !<{body>/* section:body << */\n        //\n\n        writer__currentSection = \""body\"";\n        !<body>\n\n        //\n        /* section:body >> */!<}body>\n\n\n        if( ! writer__endFile() ) { continue writer__next_file; }\n\n\n        !<{postwrite>/* section:postwrite << */\n        // \n\n        writer__currentSection = \""postwrite\"";\n        !<postwrite>\n\n        //\n        /* section:postwrite >> */!<}postwrite>\n\n        writer__nextFile();       \n      }\n \n\n      !<{cleanup>/* section:cleanup << */\n      //\n \n      writer__currentSection = \""cleanup\"";\n      !<cleanup>\n\n      //\n      /* section:cleanup >> */!<}cleanup>\n\n\n    } \n    catch( Exception e ) {\n      writer__handleException( writer__UITEXT_ExceptionIn + writer__UITEXT_Section + writer__currentSection, e );\n    }\n\n  }\n\n\n\n  /** Start writing a file. */\n  public boolean writer__startFile() {\n    writer__iCurrentText = new StringBuffer( writer__FILE_BUFFER_SIZE );\n    return true;\n  }\n\n\n\n  /** End writing a file. */\n  public boolean writer__endFile() throws Exception {\n    boolean endOK = true;\n\n    String fileName = _getFullFileName();\n    String filePath \n      = writer__iOutputFolder\n      + \""$<\\jostraca.system.fileSeparator>\""\n      + fileName\n      ;\n\n    if( writer__iBackup ) {\n      try {\n        writer__backup( filePath, fileName, writer__iBackupFolder );\n\n      } \n      catch( Exception e ) {\n        writer__handleException( writer__UITEXT_UnableToBackupFile \n                                + filePath \n                                + writer__UITEXT_ToBackupFolder\n                                + writer__iBackupFolder\n                                ,e \n                              );\n        endOK = false;\n      }\n    }\n \n    if( endOK && writer__iSave ) {\n      try {\n        writer__save( filePath, writer__iCurrentText.toString() );\n      } \n      catch( Exception e ) {\n        writer__handleException( writer__UITEXT_UnableToSaveFile + filePath, e );\n        endOK = false;\n      }\n    }\n\n    return endOK;\n  }\n\n\n\n  /** Move to next file. */\n  public void writer__nextFile() {\n    writer__iCurrentFileIndex = writer__iCurrentFileIndex + 1;\n  }\n\n\n\n  /** Set defaults from configuration property set. */\n  public void writer__setDefaults() {\n\n    $<{main.FileNameRoot>_setFileNameRoot( \""$<\\main.FileNameRoot>\"" );$<}main.FileNameRoot>\n    $<{main.FileNamePrefix>_setFileNamePrefix( \""$<\\main.FileNamePrefix>\"" );$<}main.FileNamePrefix>\n    $<{main.FileNameSuffix>_setFileNameSuffix( \""$<\\main.FileNameSuffix>\"" );$<}main.FileNameSufffix>\n\n    $<{main.OutputFolder>_setOutputFolder( \""$<\\main.OutputFolder>\"" );$<}main.OutputFolder>\n\n    $<{main.BackupFolder>_setBackupFolder( \""$<\\main.BackupFolder>\"" );$<}main.BackupFolder>\n    $<{main.BackupPrefix>_setBackupPrefix( \""$<\\main.BackupPrefix>\"" );$<}main.BackupPrefix>\n    $<{main.BackupSuffix>_setBackupSuffix( \""$<\\main.BackupSuffix>\"" );$<}main.BackupSufffix>\n    _backup( \""$<lang.TrueString>\"".equals( \""$<jostraca.MakeBackup>\"" ) );\n\n  }\n\n\n\n  /** Handle exceptions: print an explanation for user. */\n  public void writer__handleException( String rMessage, Exception rException ) throws Exception {\n\n    StringBuffer userMsg = new StringBuffer( 111 );\n\n    userMsg.append( writer__UITEXT_ErrorHeader );\n\n    userMsg.append( writer__describeState() + rMessage + writer__UITEXT_ColonNewLine );\n\n    StringWriter stringWriter = new StringWriter();\n    rException.printStackTrace( new PrintWriter( stringWriter) );\n    userMsg.append( stringWriter.toString() );\n\n    userMsg.append( writer__UITEXT_ErrorFooter );\n\n    throw new Exception( userMsg.toString() );\n  }\n\n\n\n  /** Provide a concise description of the state of the CodeWriter. */\n  public String writer__describeState() {\n    String currentState \n      = writer__UITEXT_CodeWriterState\n      + writer__UITEXT_GetFileIndexEquals    + _getFileIndex() \n      + writer__UITEXT_GetFullFileNameEquals + _getFullFileName()\n      + writer__UITEXT_GetOutputFolderEquals + _getOutputFolder()\n      + writer__UITEXT_NewLine\n      ; \n    return currentState;\n  }\n\n\n\n  /** Save written files to disk. \n   *  @param rFilePath Save location.\n   *  @param rContent  File content.\n   */\n  public void writer__save( String rFilePath, String rContent ) throws Exception {\n    StringReader   sr = new StringReader( rContent );\n    BufferedReader br = new BufferedReader( sr );\n    FileWriter     fw = new FileWriter( rFilePath );\n    BufferedWriter bw = new BufferedWriter( fw );\n\n    String line;\n    while( null != (line = br.readLine()) ) {\n      bw.write( line );\n      bw.newLine();\n    }\n\n    bw.close();\n    br.close();\n\n  }\n\n\n\n  /** Read file from disk.\n   *  @param rFilePath.\n   */\n  public String writer__read( String rFilePath ) throws Exception {\n    File       file       = new File( rFilePath );\n    FileReader in         = new FileReader( file );\n    int        size       = (int) file.length();\n    char[]     data       = new char[size];\n    int        charsRead  = 0;\n\n    while( charsRead < size ) {\n      charsRead += in.read( data, charsRead, size - charsRead );\n    }\n\n    return new String( data );\n  }\n\n\n\n  /** Backup overwritten files, if they exist.\n   *  Backups have the format:\n   *  [YYYYMMDDhhmmss][prefix][filename][suffix]\n   *  @param rFilePath     Full Path of File to backup (including name).\n   *  @param rFileName     Name of File to backup.\n   *  @param rBackupFolder Folder to place backups in.\n   */ \n  public void writer__backup( String rFilePath, String rFileName, String rBackupFolder ) throws Exception {\n\n    File backupFolder = new File( rBackupFolder );\n\n    // check backup folder ( create if necessary )\n    // ...\n\n    if( ! backupFolder.exists() ) {\n      if( ! backupFolder.mkdir() ) {\n        throw new Exception( writer__UITEXT_BackupFolderColon\n                             + backupFolder\n                             + writer__UITEXT_BackupFolderExistFailure );\n      }\n    }\n    if( ! backupFolder.isDirectory() ) {\n      throw new Exception( writer__UITEXT_BackupFolderColon \n                           + backupFolder\n                           + writer__UITEXT_BackupFolderNotAFolder );\n    }\n    if( ! backupFolder.canWrite() ) {\n      throw new Exception( writer__UITEXT_BackupFolderColon\n                           + backupFolder\n                           + writer__UITEXT_BackupFolderNotWritable );\n    }\n\n    // create backup file path\n    Calendar calendar = Calendar.getInstance();\n    String year_yyyy = _align( String.valueOf( calendar.get(Calendar.YEAR) ),         \""0\"", 4, 'r' );\n    String month_mm  = _align( String.valueOf( (1+calendar.get(Calendar.MONTH)) ),    \""0\"", 2, 'r' );\n    String day_dd    = _align( String.valueOf( calendar.get(Calendar.DAY_OF_MONTH) ), \""0\"", 2, 'r' );\n    String hour_hh   = _align( String.valueOf( calendar.get(Calendar.HOUR_OF_DAY) ),  \""0\"", 2, 'r' );\n    String minute_mm = _align( String.valueOf( calendar.get(Calendar.MINUTE) ),       \""0\"", 2, 'r' );\n    String second_ss = _align( String.valueOf( calendar.get(Calendar.SECOND) ),       \""0\"", 2, 'r' );\n    String dateTime       = year_yyyy+month_mm+day_dd+hour_hh+minute_mm+second_ss;\n    String backupFileName = dateTime + writer__iBackupPrefix + rFileName + writer__iBackupSuffix;\n    File   backupFilePath = new File( rBackupFolder, backupFileName );\n    \n    // save backup file\n    File fileToBackup = new File( rFilePath );\n    if( fileToBackup.exists() ) {\n      String fileContents = writer__read( rFilePath );\n      writer__save( backupFilePath.getPath(), fileContents );\n    }\n  }\n\n\n\n  /** Set compile time properties. */\n  public void writer__initProperties() {\n    $<{jostraca.properties.NameValueList>\n    String[] propertyList = new String[] { $<jostraca.properties.NameValueList> };\n    int numProperties = propertyList.length;\n    for( int propI = 0; propI < numProperties; propI += 2 ) {\n      writer__iProperties.put( propertyList[ propI ], propertyList[ propI+1 ] );\n    }\n    writer__iPropertiesInitialised = true;\n    $<}jostraca.properties.NameValueList>\n  }\n\n\n  /* Writer Services >> */\n \n\n\n\n  /* Template Services (File Generation) << */\n\n  /** Set the prefix of the files to be written. \n   *  @param rPrefix Written files prefix.\n   */\n  public void _setFileNamePrefix( String rPrefix ) {\n    if( null == rPrefix ) {\n      return; // ignore\n    }\n    writer__iFileNamePrefix = rPrefix;\n  }\n\n\n\n  /** Get prefix of files to be written. */\n  public String _getFileNamePrefix() {\n    return writer__iFileNamePrefix;\n  }\n\n\n\n  /** Set the suffix of the files to be written. \n   *  @param rSuffix Written files suffix.\n   */\n  public void _setFileNameSuffix( String rSuffix ) {\n    if( null == rSuffix ) {\n      return; // ignore\n    }\n    writer__iFileNameSuffix = rSuffix;\n  }\n\n\n\n  /** Get suffix of files to be written. */\n  public String _getFileNameSuffix() {\n    return writer__iFileNameSuffix;\n  }\n\n\n\n  /** Set the full name of the file to be written. \n   *  Prefix and Suffix are set to empty\n   *  @param rName Full name of the file to write.\n   */\n  public void _setFullFileName( String rName ) {\n    _setFileNamePrefix( \""\"" );\n    _setFileNameRoot(   rName );\n    _setFileNameSuffix( \""\"" );\n  }\n\n\n\n  /** Get the full name of current file being generated. */\n  public String _getFullFileName() {\n    return _getFileNamePrefix() + _getFileNameRoot() + _getFileNameSuffix();\n  }\n\n\n\n  /** Set the names of the files to be written. \n   *  Prefix and Suffix are set to empty\n   *  @param rName Full name of the file to write.\n   */\n  public void _setFullFileNames( String[] rNames ) {\n    _setFileNamePrefix( \""\"" );\n    _setFileNameRoots(  rNames );\n    _setFileNameSuffix( \""\"" );\n  }\n\n\n\n  /** Get the full names of the files to be written. */\n  public String[] _getFullFileNames() {\n\n    String[] fileNameRoots  = _getFileNameRoots();\n    int      numFiles       = fileNameRoots.length;\n    String[] fullFileNames  = new String[ numFiles ];\n    String   fileNamePrefix = _getFileNamePrefix();\n    String   fileNameSuffix = _getFileNameSuffix();\n\n    for( int fileI = 0; fileI < numFiles; fileI++ ) {\n      fullFileNames[ fileI ] = fileNamePrefix + fileNameRoots[ fileI ] + fileNameSuffix;\n    }\n\n    return fullFileNames;\n  }\n\n\n\n  /** Set the root of the name of the file to be written. \n   *  @param rFileNameRoot Root of the name of file to be written.\n   */\n  public void _setFileNameRoot( String rFileNameRoot ) {\n    if( null == rFileNameRoot ) {\n      return; // ignore\n    }\n    _setFileNameRoots( new String[] { rFileNameRoot } );\n  }\n\n\n\n  /** Get the root of the name of current file being generated. */\n  public String _getFileNameRoot() {\n    if( 0 < writer__iFileNameRoots.length ) {\n      return writer__iFileNameRoots[ writer__iCurrentFileIndex ];\n    }\n    return \""\"";\n  }\n\n\n\n  /** Set the roots of the names of the files to be written. \n   *  @param rFileNameRoots Roots of names of files to be written.\n   */\n  public void _setFileNameRoots( String[] rFileNameRoots ) {\n    if( null == rFileNameRoots ) {\n      return; // ignore\n    }\n\n    // copy\n    String[] roots = (String[]) rFileNameRoots.clone();\n\n    // normalize - replace nulls\n    int numRoots = roots.length;\n    for(int rootI = 0; rootI < numRoots; rootI++) {\n      if( null == roots[ rootI ] ) {\n        roots[ rootI ] = \""\"";\n      }\n    }\n\n    // save roots\n    writer__iFileNameRoots = roots;\n    writer__iNumFiles      = numRoots;\n  }\n\n\n\n  /** Get roots of the names of files to be written. */\n  public String[] _getFileNameRoots() {\n    return writer__iFileNameRoots;\n  }\n\n\n\n  /** Get index of file currently being generated. */\n  public int _getFileIndex() {\n    return writer__iCurrentFileIndex;\n  }\n\n\n\n  /** Get number of generated files. */\n  public int _getNumFiles() {\n    return writer__iNumFiles;\n  }\n\n\n\n  /** Set output folder.\n   *  @param rOutputFolder Folder to output generated code to.\n   */\n  public void _setOutputFolder( String rOutputFolder ) {\n    writer__iOutputFolder = rOutputFolder;\n  }\n\n\n\n  /** Get output folder. */\n  public String _getOutputFolder() {\n    return writer__iOutputFolder;\n  }\n\n\n\n  /** Set backup folder.\n   *  @param rBackupFolder Folder to backup overwritten files to.\n   */\n  public void _setBackupFolder( String rBackupFolder ) {\n    writer__iBackupFolder = writer__iOutputFolder + \""$<\\jostraca.system.fileSeparator>\"" + rBackupFolder;\n  }\n\n\n\n  /** Get backup folder. */\n  public String _getBackupFolder() {\n    return writer__iBackupFolder;\n  }\n\n\n\n  /** Set the suffix of backup files.\n   *  @param rSuffix Backup files suffix.\n   */\n  public void _setBackupSuffix( String rSuffix ) {\n    if( null == rSuffix ) {\n      return; // ignore\n    }\n    writer__iBackupSuffix = rSuffix;\n  }\n\n\n\n  /** Set the prefix of backup files.\n   *  @param rPrefix Backup files prefix.\n   */\n  public void _setBackupPrefix( String rPrefix ) {\n    if( null == rPrefix ) {\n      return; // ignore\n    }\n    writer__iBackupPrefix = rPrefix;\n  }\n\n\n\n  /** Set to true if written files are to be backed up to disk automatically. \n   *  @param rBackup True => Backup files to disk.\n   */\n  public void _backup( boolean rBackup ) {\n    writer__iBackup = rBackup;\n  }\n\n\n\n  /** Set to true if written files are to be saved to disk automatically. \n   *  @param rSave True => Save written files to disk.\n   */\n  public void _save( boolean rSave ) {\n    writer__iSave = rSave;\n  }\n\n\n  /* Template Services (File Generation) >> */\n\n\n\n\n  /* Template Services (Control) << */\n\n  /** Get compile time property\n   *  @param rName Name of property to get.\n   */\n  public String _getProperty( String rName ) {\n    String result = \""\"";\n\n    if( ! writer__iPropertiesInitialised ) {\n      writer__initProperties();\n    }\n\n    if( writer__iProperties.containsKey( rName ) ) {\n      result = (String) writer__iProperties.get( rName );\n    }\n\n    return result;\n  }\n\n  /* Template Services (Control) >> */\n\n\n\n  /* Template Services (Text Production) << */\n\n\n  // inserts\n  // ...\n\n  /** Insert text into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rText Text to insert.\n   */\n  public void _insert( String rText ) {\n    writer__iCurrentText.append( rText );\n  }\n\n  /** Insert string representation of object into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rObject Object to insert.\n   */\n  public void _insert( Object rObject ) {\n    writer__iCurrentText.append( \""\""+rObject );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rInt int to insert\n   */\n  public void _insert( int rInt ) {\n    writer__iCurrentText.append( rInt );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rLong long to insert\n   */\n  public void _insert( long rLong ) {\n    writer__iCurrentText.append( rLong );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rShort short to insert\n   */\n  public void _insert( short rShort ) {\n    writer__iCurrentText.append( rShort );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rByte byte to insert\n   */\n  public void _insert( byte rByte ) {\n    writer__iCurrentText.append( rByte );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rDouble double to insert\n   */\n  public void _insert( double rDouble ) {\n    writer__iCurrentText.append( rDouble );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rFloat float to insert\n   */\n  public void _insert( float rFloat ) {\n    writer__iCurrentText.append( rFloat );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rChar char to insert\n   */\n  public void _insert( char rChar ) {\n    writer__iCurrentText.append( rChar );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rBoolean boolean to insert\n   */\n  public void _insert( boolean rBoolean ) {\n    writer__iCurrentText.append( rBoolean );\n  }\n\n\n\n  /** Create a String containing specified number of spaces.\n   *  @param rNumSpaces Number of spaces to place in String\n   */\n  public String _spaces( int rNumSpaces ) {\n    int numSpaces = rNumSpaces;\n    if( 0 > numSpaces ) { numSpaces *= -1; }\n    StringBuffer spaces = new StringBuffer( numSpaces );\n    for(int spaceI = 0; spaceI < numSpaces; spaceI++) {\n      spaces.append(\"" \"");\n    }\n    return spaces.toString();\n  }\n\n\n\n  /** Left align String with spaces. */ \n  public String _left( String rText, int rColWidth ) {\n    return _align( rText, \"" \"", rColWidth, 'l' );\n  } \n\n\n\n  /** Right align String with spaces. */ \n  public String _right( String rText, int rColWidth ) {\n    return _align( rText, \"" \"", rColWidth, 'r' );\n  } \n\n\n\n  /** Center align String with spaces. */ \n  public String _center( String rText, int rColWidth ) {\n    return _align( rText, \"" \"", rColWidth, 'c' );\n  } \n\n\n\n  /** Align text within background text to specified column width. \n   *  Alignment can be 'l': left, 'c': center, 'r': right\n   */\n  public String _align( String rText, String rBackText, int rColWidth, char rAlignment ) {\n    String result = rText;\n \n    if( null == rText ) { \n       result = \""\""; \n    }\n    else if( null != rBackText ) {\n      try {\n        int textLen = rText.length();\n        if( rColWidth > textLen ) {\n          int    backTextLen     = rBackText.length();\n          int    remainWidth     = rColWidth - textLen;\n          int    backTextRepeats = remainWidth / backTextLen;\n          int    backTextRemain  = remainWidth % backTextLen;\n          String back            = \""\"";\n          for( int backTextI = 0; backTextI < backTextRepeats; backTextI++ ) {\n            back = back + rBackText;\n          }\n          back = back + rBackText.substring( 0, backTextRemain );\n \n          switch( rAlignment ) {\n          case 'l':\n            result = result + back;\n            break;\n          case 'c':\n            result = back.substring( 0, (back.length()/2) ) + result + back.substring( (back.length()/2) );\n            break;\n          case 'r':\n            result = back + result;\n            break;\n          }\n        }\n      } \n      catch( Exception e ) {\n        result = rText;\n      }\n    }\n    return result;\n  }\n\n\n\n  /** Set current text of file currently being generated. */\n  public void _setText( String rText) {\n    writer__iCurrentText = new StringBuffer( rText );\n  }\n\n\n\n  /** Get current text of file currently being generated. */\n  public String _getText() {\n    return writer__iCurrentText.toString();\n  }\n\n  /* Template Services (Text Production) << */\n\n}\n\n\n!<footer>\n"");
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                webBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"    private void colorizeEdit(StyledText edit) {
        String findResult = edit.getText();
        final Color COLOR_BLUE = dialog.getDisplay().getSystemColor(SWT.COLOR_BLUE);
        int start = 0;
        int index = findResult.indexOf(""\n"");
        while (index != -1) {
            String subString = findResult.substring(start, index);
            if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.underline = true;
                ((StyledText) editResult).setStyleRange(style);
            } else {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.foreground = COLOR_BLUE;
                ((StyledText) editResult).setStyleRange(style);
            }
            start = index + 1;
            index = findResult.indexOf(""\n"", index + 1);
        }
        String subString = findResult.substring(start).replace(""\n"", """");
        if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.underline = true;
            ((StyledText) editResult).setStyleRange(style);
        } else {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.foreground = COLOR_BLUE;
            ((StyledText) editResult).setStyleRange(style);
        }
        if (!WorkspaceSaveContainer.findCurrent.equals("""")) {
            final Color COLOR_RED = dialog.getDisplay().getSystemColor(SWT.COLOR_RED);
            if (WorkspaceSaveContainer.regularExpression) {
                Pattern pattern = null;
                try {
                    if (WorkspaceSaveContainer.caseSensitive) pattern = Pattern.compile(WorkspaceSaveContainer.findCurrent); else pattern = Pattern.compile(WorkspaceSaveContainer.findCurrent, Pattern.CASE_INSENSITIVE);
                } catch (PatternSyntaxException e) {
                    return;
                }
                String[] findResultList = findResult.split(""\n"");
                int findResultListCount = findResultList.length;
                int findResultListIndex;
                int offset = 0;
                for (findResultListIndex = 0; findResultListIndex < findResultListCount; findResultListIndex++) {
                    Matcher matcher = pattern.matcher(findResultList[findResultListIndex]);
                    while (matcher.find()) {
                        int startIndex = matcher.start();
                        int endIndex = matcher.end();
                        StyleRange style = new StyleRange();
                        style.start = startIndex + offset;
                        style.length = endIndex - startIndex;
                        style.fontStyle = SWT.BOLD;
                        style.foreground = COLOR_RED;
                        ((StyledText) editResult).setStyleRange(style);
                    }
                    offset += findResultList[findResultListIndex].length() + 1;
                }
            } else {
                String findCurrentLowerCase = WorkspaceSaveContainer.findCurrent.toLowerCase();
                String findResultLowerCase = findResult.toLowerCase();
                if (WorkspaceSaveContainer.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainer.findCurrent); else index = findResultLowerCase.indexOf(findCurrentLowerCase);
                while (index != -1) {
                    StyleRange style = new StyleRange();
                    style.start = index;
                    style.length = WorkspaceSaveContainer.findCurrent.length();
                    style.fontStyle = SWT.BOLD;
                    style.foreground = COLOR_RED;
                    ((StyledText) editResult).setStyleRange(style);
                    if (WorkspaceSaveContainer.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainer.findCurrent, index + 1); else index = findResultLowerCase.indexOf(findCurrentLowerCase, index + 1);
                }
            }
        }
    }","    public void google_search(String input) throws URISyntaxException {
        try {
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
            }
            URI uri;
            uri = new URI(""http://www.google.gr/search?hl=el&q="" + input.replace(' ', '+') + ""&btnG=%CE%91%CE%BD%CE%B1%CE%B6%CE%AE%CF%84%CE%B7%CF%83%CE%B7&meta="");
            desktop.browse(uri);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static void copy(String fromFile, String toFile) throws IOException {
        File inputFile = new File(fromFile);
        File outputFile = new File(toFile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }","    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public int delete(BusinessObject o) throws DAOException {
        int delete = 0;
        Item item = (Item) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""DELETE_ITEM""));
            pst.setInt(1, item.getId());
            delete = pst.executeUpdate();
            if (delete <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (delete > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return delete;
    }",0
"    public static String hashStringMD5(String string) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(string.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    static void addFile(String entryName, String fileName, ZipOutputStream zout) throws IOException {
        ZipEntry mf = new ZipEntry(entryName);
        File mfm = new File(fileName);
        mf.setSize(mfm.length());
        mf.setTime(mfm.lastModified());
        zout.putNextEntry(mf);
        zout.write(IOUtils.load(mfm));
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }","    @Test
    public void testDocumentDownloadKnowledgeBase() throws IOException {
        if (uploadedKbDocumentID == null) {
            fail(""Document Upload Test should run first"");
        }
        String downloadLink = GoogleDownloadLinkGenerator.generateTextDownloadLink(uploadedKbDocumentID);
        URL url = new URL(downloadLink);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        InputStream input = url.openStream();
        FileWriter fw = new FileWriter(""tmpOutput.kb"");
        Reader reader = new InputStreamReader(input);
        BufferedReader bufferedReader = new BufferedReader(reader);
        String strLine = """";
        int count = 0;
        while (count < 10000) {
            strLine = bufferedReader.readLine();
            if (strLine != null && strLine != """") {
                fw.write(strLine);
            }
            count++;
        }
    }",0
"    public void google_search(String input) throws URISyntaxException {
        try {
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
            }
            URI uri;
            uri = new URI(""http://www.google.gr/search?hl=el&q="" + input.replace(' ', '+') + ""&btnG=%CE%91%CE%BD%CE%B1%CE%B6%CE%AE%CF%84%CE%B7%CF%83%CE%B7&meta="");
            desktop.browse(uri);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }","    public static void copyFiles(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                generellPathField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0
"    @Test
    public void testDocumentDownloadExcel() throws IOException {
        if (uploadedExcelDocumentID == null) {
            fail(""Document Upload Test should run first"");
        }
        String downloadLink = GoogleDownloadLinkGenerator.generateXlDownloadLink(uploadedExcelDocumentID);
        URL url = new URL(downloadLink);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        InputStream input = url.openStream();
        FileWriter fw = new FileWriter(""tmpOutput.kb"");
        Reader reader = new InputStreamReader(input);
        BufferedReader bufferedReader = new BufferedReader(reader);
        String strLine = """";
        int count = 0;
        while (count < 10000) {
            strLine = bufferedReader.readLine();
            if (strLine != null && strLine != """") {
                fw.write(strLine);
            }
            count++;
        }
    }","    public boolean ponerRivalxRonda(int idJugadorDiv, int idRonda, int dato) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + dato + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }",0
"    private void findGTK(java.awt.event.ActionEvent evt) {
        final javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File theme = fc.getSelectedFile();
            gtkTheme = theme.toString();
            gtkField.setText(themePack);
        }
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""', 999, 999, 999 )"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0
"    public static String toMd5(String str) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.reset();
            messageDigest.update(str.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""NoSuchAlgorithmException caught!"");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }","    private void loadTaskList() {
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(new File(this.getProperty(""path.data"") + File.separator + ""Tasks.xml""));
            NodeList tasksNodes = doc.getElementsByTagName(""task"");
            tasks = new HashMap<String, TaskCommand>();
            for (int x = 0; x < tasksNodes.getLength(); x++) {
                Node item = tasksNodes.item(x);
                TaskCommand taskCommand = new TaskCommand(item);
                tasks.put(taskCommand.getName(), taskCommand);
            }
            System.out.println(""Tasks.xml found and loaded ("" + tasksNodes.getLength() + "")"");
        } catch (Exception e) {
            tasks = new HashMap<String, TaskCommand>();
            System.out.println(""Error loading Tasks.xml, starting with no tasks."");
        }
    }",0
"    public static double[][] transpose(double[][] a) {
        int rows = a.length;
        int cols = a[0].length;
        double[][] res = new double[cols][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                res[j][i] = a[i][j];
            }
        }
        return res;
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static void copy_file(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
            System.out.print(""Overwrite existing file "" + toFile.getName() + ""? (Y/N): "");
            System.out.flush();
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            String response = in.readLine();
            if (!response.equals(""Y"") && !response.equals(""y"")) throw new IOException(""FileCopy: "" + ""existing file was not overwritten."");
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }","    public static String SHA512(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-512"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    private void doAboutWeb() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(KlangConstants.KLANGEDITOR_URL_PROJECT));
                } catch (Exception err) {
                    err.printStackTrace();
                }
            }
        }
    }",0
"    public static String MD5ToString(String md5) {
        String hashword = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(md5.getBytes());
            BigInteger hash = new BigInteger(1, md.digest());
            hashword = hash.toString(16);
        } catch (NoSuchAlgorithmException nsae) {
        }
        return hashword;
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","                        public Constructor run() throws Exception {
                            String path = ""META-INF/services/"" + BeanletApplicationContext.class.getName();
                            ClassLoader loader = Thread.currentThread().getContextClassLoader();
                            final Enumeration<URL> urls;
                            if (loader == null) {
                                urls = BeanletApplicationContext.class.getClassLoader().getResources(path);
                            } else {
                                urls = loader.getResources(path);
                            }
                            while (urls.hasMoreElements()) {
                                URL url = urls.nextElement();
                                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                                try {
                                    String className = null;
                                    while ((className = reader.readLine()) != null) {
                                        final String name = className.trim();
                                        if (!name.startsWith(""#"") && !name.startsWith("";"") && !name.startsWith(""//"")) {
                                            final Class<?> cls;
                                            if (loader == null) {
                                                cls = Class.forName(name);
                                            } else {
                                                cls = Class.forName(name, true, loader);
                                            }
                                            int m = cls.getModifiers();
                                            if (BeanletApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) {
                                                Constructor constructor = cls.getDeclaredConstructor();
                                                if (!Modifier.isPublic(constructor.getModifiers())) {
                                                    constructor.setAccessible(true);
                                                }
                                                return constructor;
                                            } else {
                                                throw new ClassCastException(cls.getName());
                                            }
                                        }
                                    }
                                } finally {
                                    reader.close();
                                }
                            }
                            throw new BeanletApplicationException(""No "" + ""BeanletApplicationContext implementation "" + ""found."");
                        }",0
"    public static String replaceTokens(String text, Map<String, String> values) {
        Pattern pattern = Pattern.compile(""\\$\\{(.+?)\\}"");
        Matcher matcher = pattern.matcher(text);
        StringBuilder builder = new StringBuilder();
        int i = 0;
        while (matcher.find()) {
            String replacement = values.get(matcher.group(1));
            builder.append(text.substring(i, matcher.start()));
            if (replacement == null) builder.append(matcher.group(0)); else builder.append(replacement);
            i = matcher.end();
        }
        builder.append(text.substring(i, text.length()));
        return builder.toString();
    }","    public static Image[][] reversalXandY(final Image[][] array) {
        int col = array[0].length;
        int row = array.length;
        Image[][] result = new Image[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        md.update(text.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                shoutcastPlayer.setText(dirChooser.getSelectedFile().toString());
            }
        }","    public CMatrix transposed() {
        CMatrix m = new CMatrix(columns, rows);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[c][r] = coefficients[r][c];
            }
        }
        return m;
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public DoubleChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            String tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    public void imdb_search(String input) throws URISyntaxException {
        try {
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
            }
            URI uri;
            uri = new URI(""http://www.imdb.com/find?s=all&q="" + input.replace(' ', '+') + ""&x=0&y=0"");
            desktop.browse(uri);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }",0
"    private boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public static String generate(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    private static boolean loadClasses() {
        switch(jvm) {
            case MRJ_2_0:
                try {
                    Class aeTargetClass = Class.forName(""com.apple.MacOS.AETarget"");
                    Class osUtilsClass = Class.forName(""com.apple.MacOS.OSUtils"");
                    Class appleEventClass = Class.forName(""com.apple.MacOS.AppleEvent"");
                    Class aeClass = Class.forName(""com.apple.MacOS.ae"");
                    aeDescClass = Class.forName(""com.apple.MacOS.AEDesc"");
                    aeTargetConstructor = aeTargetClass.getDeclaredConstructor(new Class[] { int.class });
                    appleEventConstructor = appleEventClass.getDeclaredConstructor(new Class[] { int.class, int.class, aeTargetClass, int.class, int.class });
                    aeDescConstructor = aeDescClass.getDeclaredConstructor(new Class[] { String.class });
                    makeOSType = osUtilsClass.getDeclaredMethod(""makeOSType"", new Class[] { String.class });
                    putParameter = appleEventClass.getDeclaredMethod(""putParameter"", new Class[] { int.class, aeDescClass });
                    sendNoReply = appleEventClass.getDeclaredMethod(""sendNoReply"", new Class[] {});
                    Field keyDirectObjectField = aeClass.getDeclaredField(""keyDirectObject"");
                    keyDirectObject = (Integer) keyDirectObjectField.get(null);
                    Field autoGenerateReturnIDField = appleEventClass.getDeclaredField(""kAutoGenerateReturnID"");
                    kAutoGenerateReturnID = (Integer) autoGenerateReturnIDField.get(null);
                    Field anyTransactionIDField = appleEventClass.getDeclaredField(""kAnyTransactionID"");
                    kAnyTransactionID = (Integer) anyTransactionIDField.get(null);
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_2_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    mrjOSTypeClass = Class.forName(""com.apple.mrj.MRJOSType"");
                    Field systemFolderField = mrjFileUtilsClass.getDeclaredField(""kSystemFolderType"");
                    kSystemFolderType = systemFolderField.get(null);
                    findFolder = mrjFileUtilsClass.getDeclaredMethod(""findFolder"", new Class[] { mrjOSTypeClass });
                    getFileCreator = mrjFileUtilsClass.getDeclaredMethod(""getFileCreator"", new Class[] { File.class });
                    getFileType = mrjFileUtilsClass.getDeclaredMethod(""getFileType"", new Class[] { File.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (SecurityException se) {
                    errorMessage = se.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_0:
                try {
                    Class linker = Class.forName(""com.apple.mrj.jdirect.Linker"");
                    Constructor constructor = linker.getConstructor(new Class[] { Class.class });
                    linkage = constructor.newInstance(new Object[] { BrowserLauncher.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (InvocationTargetException ite) {
                    errorMessage = ite.getMessage();
                    return false;
                } catch (InstantiationException ie) {
                    errorMessage = ie.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    openURL = mrjFileUtilsClass.getDeclaredMethod(""openURL"", new Class[] { String.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                }
                break;
            default:
                break;
        }
        return true;
    }",0
"    private void colorizeEdit(StyledText edit) {
        String findResult = edit.getText();
        final Color COLOR_BLUE = dialog.getDisplay().getSystemColor(SWT.COLOR_BLUE);
        int start = 0;
        int index = findResult.indexOf(""\n"");
        while (index != -1) {
            String subString = findResult.substring(start, index);
            if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.underline = true;
                ((StyledText) editResult).setStyleRange(style);
            } else {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.foreground = COLOR_BLUE;
                ((StyledText) editResult).setStyleRange(style);
            }
            start = index + 1;
            index = findResult.indexOf(""\n"", index + 1);
        }
        String subString = findResult.substring(start).replace(""\n"", """");
        if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.underline = true;
            ((StyledText) editResult).setStyleRange(style);
        } else {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.foreground = COLOR_BLUE;
            ((StyledText) editResult).setStyleRange(style);
        }
        if (!WorkspaceSaveContainer.findCurrent.equals("""")) {
            final Color COLOR_RED = dialog.getDisplay().getSystemColor(SWT.COLOR_RED);
            if (WorkspaceSaveContainer.regularExpression) {
                Pattern pattern = null;
                try {
                    if (WorkspaceSaveContainer.caseSensitive) pattern = Pattern.compile(WorkspaceSaveContainer.findCurrent); else pattern = Pattern.compile(WorkspaceSaveContainer.findCurrent, Pattern.CASE_INSENSITIVE);
                } catch (PatternSyntaxException e) {
                    return;
                }
                String[] findResultList = findResult.split(""\n"");
                int findResultListCount = findResultList.length;
                int findResultListIndex;
                int offset = 0;
                for (findResultListIndex = 0; findResultListIndex < findResultListCount; findResultListIndex++) {
                    Matcher matcher = pattern.matcher(findResultList[findResultListIndex]);
                    while (matcher.find()) {
                        int startIndex = matcher.start();
                        int endIndex = matcher.end();
                        StyleRange style = new StyleRange();
                        style.start = startIndex + offset;
                        style.length = endIndex - startIndex;
                        style.fontStyle = SWT.BOLD;
                        style.foreground = COLOR_RED;
                        ((StyledText) editResult).setStyleRange(style);
                    }
                    offset += findResultList[findResultListIndex].length() + 1;
                }
            } else {
                String findCurrentLowerCase = WorkspaceSaveContainer.findCurrent.toLowerCase();
                String findResultLowerCase = findResult.toLowerCase();
                if (WorkspaceSaveContainer.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainer.findCurrent); else index = findResultLowerCase.indexOf(findCurrentLowerCase);
                while (index != -1) {
                    StyleRange style = new StyleRange();
                    style.start = index;
                    style.length = WorkspaceSaveContainer.findCurrent.length();
                    style.fontStyle = SWT.BOLD;
                    style.foreground = COLOR_RED;
                    ((StyledText) editResult).setStyleRange(style);
                    if (WorkspaceSaveContainer.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainer.findCurrent, index + 1); else index = findResultLowerCase.indexOf(findCurrentLowerCase, index + 1);
                }
            }
        }
    }","    public void importChannels(String data, boolean append) throws Exception {
        HashMap<String, Channel> importedChannels = new HashMap<String, Channel>();
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        ByteArrayInputStream reader = new ByteArrayInputStream(data.toString().getBytes());
        Document doc = docBuilder.parse(reader);
        NodeList items = doc.getElementsByTagName(""channel"");
        for (int x = 0; x < items.getLength(); x++) {
            Node item = items.item(x);
            Channel chan = new Channel(item);
            importedChannels.put(chan.getName(), chan);
        }
        if (append) {
            if (channels == null) channels = new HashMap<String, Channel>();
            channels.putAll(importedChannels);
        } else {
            channels = importedChannels;
        }
        saveChannels(null);
    }",0
"    @Test
    public void testDocumentDownloadKnowledgeBase() throws IOException {
        if (uploadedKbDocumentID == null) {
            fail(""Document Upload Test should run first"");
        }
        String downloadLink = GoogleDownloadLinkGenerator.generateTextDownloadLink(uploadedKbDocumentID);
        URL url = new URL(downloadLink);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        InputStream input = url.openStream();
        FileWriter fw = new FileWriter(""tmpOutput.kb"");
        Reader reader = new InputStreamReader(input);
        BufferedReader bufferedReader = new BufferedReader(reader);
        String strLine = """";
        int count = 0;
        while (count < 10000) {
            strLine = bufferedReader.readLine();
            if (strLine != null && strLine != """") {
                fw.write(strLine);
            }
            count++;
        }
    }","    public boolean ponerColorxRonda(int idJugadorDiv, int idRonda, int dato) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET color = "" + dato + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }",0
"    public static void copyFile(String fileName, String dstPath) throws IOException {
        FileChannel sourceChannel = new FileInputStream(fileName).getChannel();
        FileChannel destinationChannel = new FileOutputStream(dstPath).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }","    public static String crypt(String target) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(target.getBytes(""UTF-16""));
        BigInteger res = new BigInteger(1, md.digest(key.getBytes()));
        return res.toString(16);
    }",0
"    public static String replaceTokens(String text, Map<String, String> replacements) {
        Pattern pattern = Pattern.compile(""\\{(.+?)\\}"");
        Matcher matcher = pattern.matcher(text);
        StringBuilder builder = new StringBuilder();
        int i = 0;
        while (matcher.find()) {
            String replacement = replacements.get(matcher.group(1));
            builder.append(text.substring(i, matcher.start()));
            if (replacement == null) builder.append(matcher.group(0)); else builder.append(replacement);
            i = matcher.end();
        }
        builder.append(text.substring(i, text.length()));
        return builder.toString();
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public synchronized String encrypt(String p_plainText) throws ServiceUnavailableException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new ServiceUnavailableException(e.getMessage());
        }
        try {
            md.update(p_plainText.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new ServiceUnavailableException(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }","    public static boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                generellPathField.setText(dirChooser.getSelectedFile().toString());
            }
        }","    @Override
    public void close() throws IOException {
        super.close();
        byte[] signatureData = toByteArray();
        ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream);
        ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(this.originalZipFile));
        ZipEntry zipEntry;
        while (null != (zipEntry = zipInputStream.getNextEntry())) {
            if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) {
                ZipEntry newZipEntry = new ZipEntry(zipEntry.getName());
                zipOutputStream.putNextEntry(newZipEntry);
                LOG.debug(""copying "" + zipEntry.getName());
                IOUtils.copy(zipInputStream, zipOutputStream);
            }
        }
        zipInputStream.close();
        zipEntry = new ZipEntry(ODFUtil.SIGNATURE_FILE);
        LOG.debug(""writing "" + zipEntry.getName());
        zipOutputStream.putNextEntry(zipEntry);
        IOUtils.write(signatureData, zipOutputStream);
        zipOutputStream.close();
    }",0
"    public static void copy(String fromFile, String toFile) throws IOException {
        File inputFile = new File(fromFile);
        File outputFile = new File(toFile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                shoutcastPlayer.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"    public void doUpdateByIP() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByIP(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + "" mac_no = ?, login_id= ? "" + ""WHERE ip_address = ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.macNO);
            ps.setString(5, this.loginID);
            ps.setString(6, this.ipAddress);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByIP(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByIP(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Bill bill = (Bill) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_BILL""));
            pst.setInt(1, bill.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    @Override
    public void close() throws IOException {
        super.close();
        byte[] signatureData = toByteArray();
        ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream);
        ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(this.originalZipFile));
        ZipEntry zipEntry;
        while (null != (zipEntry = zipInputStream.getNextEntry())) {
            if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) {
                ZipEntry newZipEntry = new ZipEntry(zipEntry.getName());
                zipOutputStream.putNextEntry(newZipEntry);
                LOG.debug(""copying "" + zipEntry.getName());
                IOUtils.copy(zipInputStream, zipOutputStream);
            }
        }
        zipInputStream.close();
        zipEntry = new ZipEntry(ASiCUtil.SIGNATURE_FILE);
        LOG.debug(""writing "" + zipEntry.getName());
        zipOutputStream.putNextEntry(zipEntry);
        IOUtils.write(signatureData, zipOutputStream);
        zipOutputStream.close();
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static void copyFiles(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }","    public static String replaceTokens(String text, Map<String, String> replacements) {
        Pattern pattern = Pattern.compile(""\\{(.+?)\\}"");
        Matcher matcher = pattern.matcher(text);
        StringBuilder builder = new StringBuilder();
        int i = 0;
        while (matcher.find()) {
            String replacement = replacements.get(matcher.group(1));
            builder.append(text.substring(i, matcher.start()));
            if (replacement == null) builder.append(matcher.group(0)); else builder.append(replacement);
            i = matcher.end();
        }
        builder.append(text.substring(i, text.length()));
        return builder.toString();
    }",0
"    public static void copy(File in, File out) throws IOException {
        FileChannel ic = new FileInputStream(in).getChannel();
        FileChannel oc = new FileOutputStream(out).getChannel();
        ic.transferTo(0, ic.size(), oc);
        ic.close();
        oc.close();
    }","    public void sendMail(String smtpHost, String username, String password, String senderAddress, String recipientsAddress, String subject, String text) {
        EMailAuthenticator auth = new EMailAuthenticator(username, password);
        Properties properties = new Properties();
        properties.put(""mail.smtp.host"", smtpHost);
        properties.put(""mail.smtp.auth"", ""true"");
        Session session = Session.getDefaultInstance(properties, auth);
        try {
            Message msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(senderAddress));
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientsAddress, false));
            msg.setSubject(subject);
            msg.setText(text);
            msg.setHeader(""Test"", ""Test"");
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0
"    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Bill bill = (Bill) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_BILL""));
            pst.setInt(1, bill.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static Image[][] reversalXandY(final Image[][] array) {
        int col = array[0].length;
        int row = array.length;
        Image[][] result = new Image[col][row];
        for (int y = 0; y < col; y++) {
            for (int x = 0; x < row; x++) {
                result[x][y] = array[y][x];
            }
        }
        return result;
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"        public void actionPerformed(ActionEvent ae) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop d = Desktop.getDesktop();
                    d.browse(new URI(JCards.GPL_URL));
                } catch (Exception e) {
                    Methods.displaySimpleError(framer, ""Can't access website; check internet connection?\nPlease visit '"" + JCards.GPL_URL + ""' to view GPL"");
                }
            } else {
                Methods.displaySimpleAlert(framer, ""Please visit '"" + JCards.GPL_URL + ""' to view GPL"");
            }
        }","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    @Override
    public void close() throws IOException {
        super.close();
        byte[] signatureData = toByteArray();
        ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream);
        ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(this.originalZipFile));
        ZipEntry zipEntry;
        while (null != (zipEntry = zipInputStream.getNextEntry())) {
            if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) {
                ZipEntry newZipEntry = new ZipEntry(zipEntry.getName());
                zipOutputStream.putNextEntry(newZipEntry);
                LOG.debug(""copying "" + zipEntry.getName());
                IOUtils.copy(zipInputStream, zipOutputStream);
            }
        }
        zipInputStream.close();
        zipEntry = new ZipEntry(ODFUtil.SIGNATURE_FILE);
        LOG.debug(""writing "" + zipEntry.getName());
        zipOutputStream.putNextEntry(zipEntry);
        IOUtils.write(signatureData, zipOutputStream);
        zipOutputStream.close();
    }","    public static void copy(File in, File out) throws IOException {
        FileChannel ic = new FileInputStream(in).getChannel();
        FileChannel oc = new FileOutputStream(out).getChannel();
        ic.transferTo(0, ic.size(), oc);
        ic.close();
        oc.close();
    }",0
"    public int delete(BusinessObject o) throws DAOException {
        int delete = 0;
        Project project = (Project) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""DELETE_PROJECT""));
            pst.setInt(1, project.getId());
            delete = pst.executeUpdate();
            if (delete <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (delete > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return delete;
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","            public void actionPerformed(final ActionEvent e) {
                if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.OPEN)) {
                    try {
                        java.awt.Desktop.getDesktop().open(new File(""auftraege/test.pdf""));
                    } catch (final IOException ex) {
                        System.err.println(""Der Auftrag konnte nicht angezeigt werden."");
                    }
                }
            }",0
"    public int delete(BusinessObject o) throws DAOException {
        int delete = 0;
        Item item = (Item) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""DELETE_ITEM""));
            pst.setInt(1, item.getId());
            delete = pst.executeUpdate();
            if (delete <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (delete > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return delete;
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private static final void makeWF_BasicJavaWriterFormat_jwf(Hashtable pWriterFormats) {
        pWriterFormats.put(""BasicJavaWriterFormat.jwf"", ""!<header>\n\n\n\n$<{java.CodeWriter.package>package $<java.CodeWriter.package>;$<}java.CodeWriter.package>\n\n\n\nimport java.io.*;\nimport java.util.*;\n\n\n\n\n!<{import>// section:import\n!<import>!<}import>\n\n\n\npublic class $<main.CodeWriter> \n$<{java.CodeWriter.extends>  extends $<java.CodeWriter.extends> $<}java.CodeWriter.extends> \n$<{java.CodeWriter.implements>  implements $<java.CodeWriter.implements> $<}java.CodeWriter.implements>\n{\n\n  /* Constants << */\n \n  // Command line arguments\n  public static final String WRITER__ARGUMENT_CONTROL_PREFIX = \""$<main.CodeWriter.argument.ControlPrefix>\"";\n  public static final String WRITER__ARGUMENT_OutputFolder   = \""$<main.CodeWriter.argument.name.OutputFolder>\"";\n  public static final String WRITER__ARGUMENT_MetaPropFile   = \""$<main.CodeWriter.argument.name.MetaPropFile>$<main.CodeWriter.argument.name.BuildPropFile>\"";\n  public static final String WRITER__ARGUMENT_BackupFolder   = \""$<main.CodeWriter.argument.name.BackupFolder>\"";\n  public static final String WRITER__ARGUMENT_NoBackup       = \""$<main.CodeWriter.argument.name.NoBackup>\"";\n\n  // User Interface text message parts\n  public static final String WRITER__UITEXT_Method                     = \""method \"";\n  public static final String WRITER__UITEXT_Main                       = \""main \"";\n  public static final String WRITER__UITEXT_ExceptionIn                = \""Exception in \"";\n  public static final String WRITER__UITEXT_ColonNewLine               = \"":\\n\"";\n  public static final String WRITER__UITEXT_NewLine                    = \""\\n\"";\n  public static final String WRITER__UITEXT_Section                    = \""section \"";\n  public static final String WRITER__UITEXT_SavedFile                  = \""Saved file:       \"";\n  public static final String WRITER__UITEXT_UnableToSaveFile           = \""Unable to save file: \"";\n  public static final String WRITER__UITEXT_UnableToBackupFile         = \""Unable to backup file: \"";\n  public static final String WRITER__UITEXT_ToBackupFolder             = \"" to backup folder: \"";\n  public static final String WRITER__UITEXT_BackupFolderColon          = \""Backup folder: \"";\n  public static final String WRITER__UITEXT_BackupFolderExistFailure   = \"" does not exist and cannot be created.\"";\n  public static final String WRITER__UITEXT_BackupFolderNotAFolder     = \"" is not a folder.\"";\n  public static final String WRITER__UITEXT_BackupFolderNotWritable    = \"" is not writable.\"";\n  public static final String WRITER__UITEXT_CodeWriterState            = \""Code Writer State: \"";\n  public static final String WRITER__UITEXT_GetFileIndexEquals         = \""\\n_getFileIndex()    = \"";\n  public static final String WRITER__UITEXT_GetFullFileNameEquals      = \""\\n_getFullFileName() = \"";\n  public static final String WRITER__UITEXT_GetOutputFolderEquals      = \""\\n_getOutputFolder() = \"";\n  public static final String WRITER__UITEXT_ErrorHeader                = \""\\n\\n--- CodeWriter Error Description Start ---\\n\\n\"";\n  public static final String WRITER__UITEXT_ErrorFooter                = \""\\n--- CodeWriter Error Description End -----\\n\\n\"";\n  public static final String WRITER__UITEXT_UnableToLoadMetaProps      = \""Unable to load metadata from file: \"";\n  public static final String WRITER__UITEXT_UndefinedProperty          = \""Undefined property: \"";\n  public static final String WRITER__UITEXT_UnableToCreateOutputFolder = \""Unable to create output folder: \"";\n  public static final String WRITER__UITEXT_PlaceHolderException \n    = \""This placeholder Exception should never be thrown: there is an error in the WriterFormat.\"";\n\n  // String constants \n  public static final String WRITER__STRING_empty                    = \""\"";\n  public static final String WRITER__STRING_dot                      = \"".\"";\n  public static final String WRITER__STRING_separator                = File.separator;\n\n  public static final int WRITER__FILE_BUFFER_SIZE                   = 4096;  // initial size of StringBuffer\n\n  /* Constants >> */\n\n\n\n\n  /* Writer Variables << */\n\n  protected String[]     writer__iFileNameRoots    = new String[] {};      // generated file name roots\n  protected int          writer__iNumFiles         = 0;                    // number of generated files\n  \n  protected String       writer__iFileNamePrefix   = WRITER__STRING_empty; // failsafe default\n  protected String       writer__iFileNameSuffix   = WRITER__STRING_empty; // failsafe default\n\n  protected String       writer__iBackupPrefix     = WRITER__STRING_empty; // failsafe default\n  protected String       writer__iBackupSuffix     = WRITER__STRING_empty; // failsafe default\n\n  protected StringBuffer writer__iCurrentText      = new StringBuffer();   // current text\n  protected int          writer__iCurrentFileIndex = 0;                    // current file index\n\n  protected String[]     writer__iArgs             = new String[0];        // cmd line args\n  protected int          writer__iNumArgs          = 0;                    // number of cmd line args\n  protected String[]     writer__iUserArgs         = new String[0];        // user cmd line args\n  protected int          writer__iNumUserArgs      = 0;                    // number of user cmd line args\n\n  protected boolean      writer__iSave             = true;                 // save generated code to disk\n  protected boolean      writer__iBackup           = true;                 // make backups\n\n  protected String       writer__iOutputFolder     = WRITER__STRING_dot;   // written code is output to this folder\n  protected String       writer__iBackupFolder     = WRITER__STRING_dot;   // overwritten files are placed here\n  protected String       writer__iMetaPropFile     = null;                 // metadata properties file path\n\n  protected Properties   writer__iProperties       = null;                 // build properties\n  protected boolean      writer__iPropertiesInit   = false;                // true => lookup table initialiased\n\n  protected Object       writer__iContext          = null;                 // context object\n  protected Object       writer__iResult           = null;                 // result object\n\n  protected boolean      writer__iThrow            = false;                // throw Exceptions\n\n  /* Writer Variables >> */\n\n\n  !<{support>\n  // version 0.1 compatibility\n  // section:support\n  !<support>!<}support>\n\n\n\n  !<{declare>// section:declare\n  !<declare>!<}declare>\n\n\n\n\n  /** Execute. */\n  public static void main( String pArgs[] ) {\n    $<main.CodeWriter> cw = new $<main.CodeWriter>();\n    Object result = cw._generate( pArgs, false );\n    \n    int exitvalue = 0;\n    if( result instanceof Integer ) {\n      exitvalue = ((Integer)result).intValue();\n    }\n\n    System.exit( exitvalue );\n  }\n\n\n\n\n  /* Writer Services << */\n\n  /** Generate. */\n  public Object _generate( String[] pArgs ) {\n    return _generate( pArgs, false );\n  }\n\n\n  /** Generate. */\n  public Object _generate( String[] pArgs, boolean pThrow ) {\n     writer__iThrow = pThrow;\n\n    try {\n      writer__initialize();\n      writer__handleArgs( pArgs );\n      writer__write();    \n\n      Object result = _getResult();\n      if( null == result ) {\n        result = _getText();\n        _setResult( result );\n      }\n\n      return result;\n    } \n    catch( RuntimeException re ) { throw re; }\n    catch( Exception e ) {\n      writer__handleException( WRITER__UITEXT_ExceptionIn + WRITER__UITEXT_Method + WRITER__UITEXT_Main, e );\n      return new Integer(1);\n    }\n  }\n\n\n  /* Initialize. */\n  public void writer__initialize() {\n    writer__iCurrentFileIndex = 0;\n    writer__setDefaults();\n  }\n\n\n\n  /** Main file generation loop. Template script is placed here in the body section. */\n  public void writer__write() {\n    if( false ) { throw new RuntimeException( WRITER__UITEXT_PlaceHolderException ); }\n\n    // initialize\n    String writer__currentSection = \""init\"";\n\n    try {\n      if( false ) { throw new RuntimeException( WRITER__UITEXT_PlaceHolderException ); }\n\n      !<{init>// section:init\n      !<init>!<}init>\n\n\n      // write files loop\n      int      writer__numFiles = _getNumFiles();\n      int      writer__fileI    = 0;\n      writer__next_file: for( writer__fileI = 0; writer__fileI < writer__numFiles; writer__fileI = writer__fileI + 1 ) {\n\n        try {\n          if( false ) { throw new RuntimeException( WRITER__UITEXT_PlaceHolderException ); }\n\n\n          !<{prewrite>// section:prewrite\n          writer__currentSection = \""prewrite\"";\n          !<prewrite>!<}prewrite>\n\n\n          if( ! writer__startFile() ) { continue writer__next_file; }\n\n\n          !<{body>// section:body\n          writer__currentSection = \""body\"";\n          !<body>!<}body>\n\n\n          if( ! writer__endFile() ) { continue writer__next_file; }\n\n\n          !<{postwrite>// section:postwrite\n          writer__currentSection = \""postwrite\"";\n          !<postwrite>!<}postwrite>\n\n\n        } \n        catch( RuntimeException re ) { throw re; }\n        catch( Exception e ) {\n           writer__handleException( WRITER__UITEXT_ExceptionIn + WRITER__UITEXT_Section + writer__currentSection, e );\n        }\n\n        writer__nextFile();       \n      }\n \n\n      !<{cleanup>// section:cleanup\n      writer__currentSection = \""cleanup\"";\n      !<cleanup>!<}cleanup>\n\n    } \n    catch( RuntimeException re ) { throw re; }\n    catch( Exception e ) {\n      writer__handleException( WRITER__UITEXT_ExceptionIn + WRITER__UITEXT_Section + writer__currentSection, e );\n    }\n  }\n\n\n\n  /** Start writing a file. */\n  public boolean writer__startFile() {\n    writer__iCurrentText = new StringBuffer( WRITER__FILE_BUFFER_SIZE );\n    return true;\n  }\n\n\n\n  /** End writing a file. */\n  public boolean writer__endFile() {\n    boolean endOK = true;\n  \n    String filePath = \""output-file-path\"";\n\n    if( endOK ) {\n      String fileName = _getFullFileName();\n      filePath \n        = writer__iOutputFolder\n        + WRITER__STRING_separator\n        + fileName;\n\n      if( writer__iBackup ) {\n        try {\n          writer__backup( filePath, fileName, writer__iBackupFolder );\n        } \n        catch( RuntimeException re ) { throw re; }\n        catch( Exception e ) {\n          writer__handleException( WRITER__UITEXT_UnableToBackupFile \n                                   + filePath \n                                   + WRITER__UITEXT_ToBackupFolder\n                                   + writer__iBackupFolder\n                                   ,e );\n          endOK = false;\n        }\n      }\n    }\n\n    File outputFolder = null;\n    try {\n      outputFolder = new File( filePath ).getParentFile();\n      if( null != outputFolder && !outputFolder.exists() ) {\n        outputFolder.mkdirs();\n      }\n    }\n    catch( RuntimeException re ) { throw re; }\n    catch( Exception e ) {\n      writer__handleException( WRITER__UITEXT_UnableToCreateOutputFolder \n                               + outputFolder\n                               ,e );\n      endOK = false;\n    }\n\n\n    if( endOK && writer__iSave ) {\n      try {\n        _saveTextFile( filePath, writer__iCurrentText.toString() );\n        writer__userMessage( WRITER__UITEXT_SavedFile + filePath + WRITER__UITEXT_NewLine, false );\n      } \n      catch( RuntimeException re ) { throw re; }\n      catch( Exception e ) {\n        writer__handleException( WRITER__UITEXT_UnableToSaveFile + filePath, e );\n        endOK = false;\n      }\n    }\n\n    return endOK;\n  }\n\n\n\n  /** Move to next file. */\n  public void writer__nextFile() {\n    writer__iCurrentFileIndex = writer__iCurrentFileIndex + 1;\n  }\n\n\n\n  /** Handle command line arguments to CodeWriter. */\n  public void writer__handleArgs( String[] pArgs ) {\n\n    // set arg names\n    String argName_OutputFolder     = WRITER__ARGUMENT_CONTROL_PREFIX + WRITER__ARGUMENT_OutputFolder;\n    String argName_MetaPropFile     = WRITER__ARGUMENT_CONTROL_PREFIX + WRITER__ARGUMENT_MetaPropFile;\n    String argName_BackupFolder     = WRITER__ARGUMENT_CONTROL_PREFIX + WRITER__ARGUMENT_BackupFolder;\n    String argName_NoBackup         = WRITER__ARGUMENT_CONTROL_PREFIX + WRITER__ARGUMENT_NoBackup;\n\n    // parse\n    int numArgs = pArgs.length;\n    for(int argI = 0; argI < numArgs; argI = argI + 1 ) {\n      if( 0 < argName_OutputFolder.length() && pArgs[argI].startsWith( argName_OutputFolder ) ) {\n        _setOutputFolder( pArgs[ argI ].substring( argName_OutputFolder.length() ) );\n      }\n      else if( 0 < argName_MetaPropFile.length() && pArgs[argI].startsWith( argName_MetaPropFile ) ) {\n        _setMetaPropFile( pArgs[ argI ].substring( argName_MetaPropFile.length() ) );\n      }\n      else if( 0 < argName_BackupFolder.length() && pArgs[argI].startsWith( argName_BackupFolder ) ) {\n        _setBackupFolder( pArgs[ argI ].substring( argName_BackupFolder.length() ) );\n      }\n      else if( 0 < argName_NoBackup.length() && argName_NoBackup.equals( pArgs[ argI ] ) ) {\n        _backup( $<lang.FalseString> ); // NOTE: -B => don't make backups\n      }\n    }\n\n    writer__initArgs( pArgs.length, pArgs );\n  }\n\n\n\n  /** Set defaults from configuration property set. */\n  public void writer__setDefaults() {\n\n    $<{main.FileNameRoot>_setFileNameRoot( \""$<\\main.FileNameRoot>\"" );$<}main.FileNameRoot>\n    $<{main.FileNamePrefix>_setFileNamePrefix( \""$<\\main.FileNamePrefix>\"" );$<}main.FileNamePrefix>\n    $<{main.FileNameSuffix>_setFileNameSuffix( \""$<\\main.FileNameSuffix>\"" );$<}main.FileNameSufffix>\n\n    $<{main.OutputFolder>_setOutputFolder( \""$<\\main.OutputFolder>\"" );$<}main.OutputFolder>\n\n    $<{main.BackupFolder>_setBackupFolder( \""$<\\main.BackupFolder>\"" );$<}main.BackupFolder>\n    $<{main.BackupPrefix>_setBackupPrefix( \""$<\\main.BackupPrefix>\"" );$<}main.BackupPrefix>\n    $<{main.BackupSuffix>_setBackupSuffix( \""$<\\main.BackupSuffix>\"" );$<}main.BackupSufffix>\n    _backup( \""$<lang.TrueString>\"".equals( \""$<jostraca.MakeBackup>\"" ) );\n\n  }\n\n\n\n  /** Initialize command line arguments. */\n  public void writer__initArgs( int pNumArgs, String[] pArgs ) {\n    int      argI        = 0;\n    int      userArgI    = 0;\n\n    writer__iNumArgs     = pNumArgs;\n    writer__iArgs        = pArgs;\n    writer__iNumUserArgs = writer__iNumArgs;\n\n    for( argI = 0; argI < writer__iNumArgs; argI = argI + 1 ) {\n      if( writer__iArgs[argI].startsWith( WRITER__ARGUMENT_CONTROL_PREFIX ) ) {\n        writer__iNumUserArgs = writer__iNumUserArgs - 1;\n      }\n    }\n\n    writer__iUserArgs = new String[ writer__iNumUserArgs ];\n    for( argI = 0; argI < writer__iNumArgs; argI = argI + 1 ) {\n      if( !writer__iArgs[argI].startsWith( WRITER__ARGUMENT_CONTROL_PREFIX ) ) {\n        writer__iUserArgs[ userArgI ] = writer__iArgs[ argI ];\n        userArgI = userArgI + 1;\n      }\n    }\n  }\n\n\n\n  /** Print a user readable message. */\n  public void writer__userMessage( String pMessage, boolean pIsError ) {\n    (pIsError?System.err:System.out).print( pMessage );\n  }\n\n\n\n  /** Handle exceptions: print an explanation for user. */\n  public void writer__handleException( String pMessage, Exception pException ) {\n\n    StringBuffer userMsg = new StringBuffer();\n\n    userMsg.append( WRITER__UITEXT_ErrorHeader );\n\n    userMsg.append( writer__describeState() + pMessage + WRITER__UITEXT_ColonNewLine );\n\n    StringWriter stringWriter = new StringWriter();\n    pException.printStackTrace( new PrintWriter( stringWriter) );\n    userMsg.append( stringWriter.toString() );\n\n    userMsg.append( WRITER__UITEXT_ErrorFooter );\n\n    if( writer__iThrow ) {\n      throw new RuntimeException( userMsg.toString() );\n    }\n    else {\n      writer__userMessage( userMsg.toString(), true );\n    }\n  }\n\n\n\n  /** Provide a concise description of the state of the CodeWriter. */\n  public String writer__describeState() {\n    String currentState \n      = WRITER__UITEXT_CodeWriterState\n      + WRITER__UITEXT_GetFileIndexEquals    + _getFileIndex() \n      + WRITER__UITEXT_GetFullFileNameEquals + _getFullFileName()\n      + WRITER__UITEXT_GetOutputFolderEquals + _getOutputFolder()\n      + WRITER__UITEXT_NewLine\n      ; \n    return currentState;\n  }\n\n\n\n  /** Backup overwritten files, if they exist.\n   *  Backups have the format: [YYYYMMDDhhmmss][prefix][filename][suffix].\n   */ \n  public void writer__backup( String pFilePath, String pFileName, String pBackupFolder ) {\n\n    File backupFolder = new File( pBackupFolder );\n\n    // check backup folder ( create if necessary )\n    if( ! backupFolder.exists() ) {\n      if( ! backupFolder.mkdirs() ) {\n        throw new RuntimeException( WRITER__UITEXT_BackupFolderColon\n                                    + backupFolder\n                                    + WRITER__UITEXT_BackupFolderExistFailure );\n      }\n    }\n    if( ! backupFolder.isDirectory() ) {\n      throw new RuntimeException( WRITER__UITEXT_BackupFolderColon \n                                  + backupFolder\n                                  + WRITER__UITEXT_BackupFolderNotAFolder );\n    }\n    if( ! backupFolder.canWrite() ) {\n      throw new RuntimeException( WRITER__UITEXT_BackupFolderColon\n                                  + backupFolder\n                                  + WRITER__UITEXT_BackupFolderNotWritable );\n    }\n\n    // create backup file path\n    Calendar calendar = Calendar.getInstance();\n    String year_yyyy = _align( String.valueOf( calendar.get(Calendar.YEAR) ),         \""0\"", 4, 'r' );\n    String month_mm  = _align( String.valueOf( (1+calendar.get(Calendar.MONTH)) ),    \""0\"", 2, 'r' );\n    String day_dd    = _align( String.valueOf( calendar.get(Calendar.DAY_OF_MONTH) ), \""0\"", 2, 'r' );\n    String hour_hh   = _align( String.valueOf( calendar.get(Calendar.HOUR_OF_DAY) ),  \""0\"", 2, 'r' );\n    String minute_mm = _align( String.valueOf( calendar.get(Calendar.MINUTE) ),       \""0\"", 2, 'r' );\n    String second_ss = _align( String.valueOf( calendar.get(Calendar.SECOND) ),       \""0\"", 2, 'r' );\n    String dateTime       = year_yyyy+month_mm+day_dd+hour_hh+minute_mm+second_ss;\n    String backupFileName = dateTime + writer__iBackupPrefix + pFileName + writer__iBackupSuffix;\n    File   backupFilePath = new File( pBackupFolder, backupFileName );\n    \n    File   fullBackupFolder = backupFilePath.getParentFile();\n    if( null != fullBackupFolder && !fullBackupFolder.exists() ) {\n      if( ! fullBackupFolder.mkdirs() ) {\n        throw new RuntimeException( WRITER__UITEXT_BackupFolderColon\n                                    + fullBackupFolder\n                                    + WRITER__UITEXT_BackupFolderExistFailure );\n      }\n    }\n\n\n    // save backup file\n    File fileToBackup = new File( pFilePath );\n    if( fileToBackup.exists() ) {\n      String fileContents = _loadTextFile( pFilePath );\n      _saveTextFile( backupFilePath.getPath(), fileContents );\n    }\n  }\n\n\n\n  /** Load build properties. */\n  public void writer__initProperties() {\n\n    String metaPropFile = _getMetaPropFile();\n    if( null != metaPropFile ) {\n      writer__iProperties = new Properties();\n      \n      try {\n        FileInputStream fis = new FileInputStream( _getMetaPropFile() );\n        writer__iProperties.load( fis );\n        fis.close();\n      }\n      catch( RuntimeException re ) { throw re; }\n      catch( Exception e ) {\n        writer__handleException( WRITER__UITEXT_UnableToLoadMetaProps+_getMetaPropFile(), e );\n      }\n\n      writer__iPropertiesInit = true;\n    }\n  }\n\n  /* Writer Services >> */\n \n\n\n\n  /* Template Services (File Generation) << */\n\n  /** Set the prefix of the files to be generated. */\n  public void _setFileNamePrefix( String pPrefix ) {\n    if( null == pPrefix ) {\n      return; // ignore\n    }\n    writer__iFileNamePrefix = pPrefix;\n  }\n\n\n\n  /** Get prefix of files to be generated. */\n  public String _getFileNamePrefix() {\n    return writer__iFileNamePrefix;\n  }\n\n\n\n  /** Set the suffix of the files to be generated. */\n  public void _setFileNameSuffix( String pSuffix ) {\n    if( null == pSuffix ) {\n      return; // ignore\n    }\n    writer__iFileNameSuffix = pSuffix;\n  }\n\n\n\n  /** Get suffix of files to be generated. */\n  public String _getFileNameSuffix() {\n    return writer__iFileNameSuffix;\n  }\n\n\n\n  /** Set the full name of the file to be generated. \n   *  Prefix and Suffix are set to empty.\n   */\n  public void _setFullFileName( String pName ) {\n    _setFileNamePrefix( WRITER__STRING_empty );\n    _setFileNameRoot(   pName );\n    _setFileNameSuffix( WRITER__STRING_empty );\n  }\n\n\n\n  /** Get the full name of current file being generated. */\n  public String _getFullFileName() {\n    return _getFileNamePrefix() + _getFileNameRoot() + _getFileNameSuffix();\n  }\n\n\n\n  /** Set the names of the files to be generated. \n   *  Prefix and Suffix are set to empty.\n   */\n  public void _setFullFileNames( String[] pNames ) {\n    _setFileNamePrefix( WRITER__STRING_empty );\n    _setFileNameRoots(  pNames );\n    _setFileNameSuffix( WRITER__STRING_empty );\n  }\n\n\n\n  /** Get the full names of the files to be generated. */\n  public String[] _getFullFileNames() {\n\n    String[] fileNameRoots  = _getFileNameRoots();\n    int      numFiles       = fileNameRoots.length;\n    String[] fullFileNames  = new String[ numFiles ];\n    String   fileNamePrefix = _getFileNamePrefix();\n    String   fileNameSuffix = _getFileNameSuffix();\n\n    for( int fileI = 0; fileI < numFiles; fileI = fileI + 1 ) {\n      fullFileNames[ fileI ] = fileNamePrefix + fileNameRoots[ fileI ] + fileNameSuffix;\n    }\n\n    return fullFileNames;\n  }\n\n\n\n  /** Set the root of the name of the file to be generated. */\n  public void _setFileNameRoot( String pFileNameRoot ) {\n    if( null == pFileNameRoot ) {\n      return; // ignore\n    }\n    _setFileNameRoots( new String[] { pFileNameRoot } );\n  }\n\n\n\n  /** Get the root of the name of the current file being generated. */\n  public String _getFileNameRoot() {\n    if( 0 < writer__iFileNameRoots.length ) {\n      return writer__iFileNameRoots[ writer__iCurrentFileIndex ];\n    }\n    return WRITER__STRING_empty;\n  }\n\n\n\n  /** Set the roots of the names of the files to be generated. */\n  public void _setFileNameRoots( String[] pFileNameRoots ) {\n    if( null == pFileNameRoots ) {\n      return; // ignore\n    }\n\n    // copy\n    String[] roots = (String[]) pFileNameRoots.clone();\n\n    // normalize - replace nulls\n    int numRoots = roots.length;\n    for(int rootI = 0; rootI < numRoots; rootI = rootI + 1 ) {\n      if( null == roots[ rootI ] ) {\n        roots[ rootI ] = WRITER__STRING_empty;\n      }\n    }\n\n    // save roots\n    writer__iFileNameRoots = roots;\n    writer__iNumFiles      = numRoots;\n  }\n\n\n\n  /** Get roots of the names of files to be generated. */\n  public String[] _getFileNameRoots() {\n    return writer__iFileNameRoots;\n  }\n\n\n\n  /** Get index of file currently being generated. */\n  public int _getFileIndex() {\n    return writer__iCurrentFileIndex;\n  }\n\n\n\n  /** Get number of files to generate. */\n  public int _getNumFiles() {\n    return writer__iNumFiles;\n  }\n\n\n\n  /** Set output folder. */\n  public void _setOutputFolder( String pOutputFolder ) {\n    writer__iOutputFolder = pOutputFolder;\n  }\n\n\n\n  /** Get output folder. */\n  public String _getOutputFolder() {\n    return writer__iOutputFolder;\n  }\n\n\n\n  /** Set backup folder. */\n  public void _setBackupFolder( String pBackupFolder ) {\n    writer__iBackupFolder = pBackupFolder;\n  }\n\n\n\n  /** Get backup folder. */\n  public String _getBackupFolder() {\n    return writer__iBackupFolder;\n  }\n\n\n\n  /** Set the prefix of backup files. */\n  public void _setBackupPrefix( String pPrefix ) {\n    if( null == pPrefix ) {\n      return; // ignore\n    }\n    writer__iBackupPrefix = pPrefix;\n  }\n\n\n\n  /** Set the suffix of backup files. */\n  public void _setBackupSuffix( String pSuffix ) {\n    if( null == pSuffix ) {\n      return; // ignore\n    }\n    writer__iBackupSuffix = pSuffix;\n  }\n\n\n\n  /** Set to true if generated files are to be backed up to disk automatically. */\n  public void _backup( boolean pBackup ) {\n    writer__iBackup = pBackup;\n  }\n\n\n\n  /** Set to true if generated files are to be saved to disk automatically. */\n  public void _save( boolean pSave ) {\n    writer__iSave = pSave;\n  }\n\n\n\n  /** Save a text file. */\n  public void _saveTextFile( String pFilePath, String pContent ) {\n    try {\n      StringReader   sr = new StringReader( pContent );\n      BufferedReader br = new BufferedReader( sr );\n      FileWriter     fw = new FileWriter( pFilePath );\n      BufferedWriter bw = new BufferedWriter( fw );\n\n      String line;\n      while( null != (line = br.readLine()) ) {\n        bw.write( line );\n        bw.newLine();\n      }\n\n      bw.close();\n      br.close();\n    }\n    catch( RuntimeException re ) { throw re; }\n    catch( Exception e ) {\n      throw new RuntimeException( e.getMessage() );\n    }\n  }\n\n\n\n  /** Load a text file. */\n  public String _loadTextFile( String pFilePath ) {\n    try {\n      File       file       = new File( pFilePath );\n      FileReader in         = new FileReader( file );\n      int        size       = (int) file.length();\n      char[]     data       = new char[size];\n      int        charsRead  = 0;\n\n      while( charsRead < size ) {\n        charsRead += in.read( data, charsRead, size - charsRead );\n      }\n\n      return new String( data );\n    }\n    catch( RuntimeException re ) { throw re; }\n    catch( Exception e ) {\n      throw new RuntimeException( e.getMessage() );\n    }\n  }\n\n\n  /** Set build properties file. */\n  public void _setMetaPropFile( String pMetaPropFile ) {\n    writer__iMetaPropFile  = pMetaPropFile;\n    writer__iPropertiesInit = false;\n  }\n\n\n\n  /** Get build properties file. */\n  public String _getMetaPropFile() {\n    return writer__iMetaPropFile;\n  }\n\n\n  /* Template Services (File Generation) >> */\n\n\n\n\n  /* Template Services (Control) << */\n\n  /** Get the value of a compile-time property. */\n  public String _getProperty( String pName ) {\n    String result = WRITER__STRING_empty;\n\n    if( ! writer__iPropertiesInit ) {\n      writer__initProperties();\n    }\n\n    if( writer__iProperties.containsKey( pName ) ) {\n      result = writer__iProperties.getProperty( pName );\n    }\n    else {\n      throw new RuntimeException( WRITER__UITEXT_UndefinedProperty+pName );\n    }\n\n    return result;\n  }\n\n\n\n  /** Get first user arg. */\n  public String _getFirstUserArg() {\n    return _getUserArg(0);\n  }\n\n\n\n  /** Get second user arg. */\n  public String _getSecondUserArg() {\n    return _getUserArg(1);\n  }\n\n\n\n  /** Get third user arg. */\n  public String _getThirdUserArg() {\n    return _getUserArg(2);\n  }\n\n\n\n  /** Get nth (n=0,1,2,...) user arg (the nth arg with no WRITER__ARGUMENT_CONTROL_PREFIX). */\n  public String _getUserArg( int pOrdinal ) {\n    if( pOrdinal < _getNumUserArgs() ) {\n      String[] userargs =  _getUserArgs();\n      return userargs[ pOrdinal ];\n    }\n    else {\n      return WRITER__STRING_empty;\n    }\n  }\n\n\n\n  /** Get user command line arguments to CodeWriter. */\n  public String[] _getUserArgs() {\n    return writer__iUserArgs;\n  }\n\n\n\n  /** Get number of user command line arguments to CodeWriter. */\n  public int _getNumUserArgs() {\n    return writer__iNumUserArgs;\n  }\n\n\n\n  /** Get all command line arguments to CodeWriter. */\n  public String[] _getArgs() {\n    return writer__iArgs;\n  }\n\n\n\n  /** Get total number of command line arguments to CodeWriter. */\n  public int _getNumArgs() {\n    return writer__iNumArgs;\n  }\n\n\n  \n  /** Set a context object for the template to use. */\n  public void _setContext( Object pContext) {\n    writer__iContext = pContext;\n  }\n\n\n\n  /** Get the context object if set. NOTE: may return null. */\n  public Object _getContext() {\n    return writer__iContext;\n  }\n\n  /* Template Services (Control) >> */\n\n\n\n\n  /* Template Services (Text Production) << */\n\n  // inserts\n  // ...\n\n  public void _insert( String pText ) {\n    writer__iCurrentText.append( pText );\n  }\n\n  public void _insert( Object pObject ) {\n    writer__iCurrentText.append( String.valueOf(pObject) );\n  }\n\n  public void _insert( int pInt ) {\n    writer__iCurrentText.append( pInt );\n  }\n\n  public void _insert( long pLong ) {\n    writer__iCurrentText.append( pLong );\n  }\n\n  public void _insert( short pShort ) {\n    writer__iCurrentText.append( pShort );\n  }\n\n  public void _insert( byte pByte ) {\n    writer__iCurrentText.append( pByte );\n  }\n\n  public void _insert( double pDouble ) {\n    writer__iCurrentText.append( pDouble );\n  }\n\n  public void _insert( float pFloat ) {\n    writer__iCurrentText.append( pFloat );\n  }\n\n  public void _insert( char pChar ) {\n    writer__iCurrentText.append( pChar );\n  }\n\n  public void _insert( boolean pBoolean ) {\n    writer__iCurrentText.append( pBoolean );\n  }\n\n\n\n  /** Create a String containing specified number of spaces. */\n  public String _spaces( int pNumSpaces ) {\n    int numSpaces = pNumSpaces;\n    if( 0 > numSpaces ) { numSpaces *= -1; }\n    StringBuffer spaces = new StringBuffer( numSpaces );\n    for(int spaceI = 0; spaceI < numSpaces; spaceI = spaceI + 1 ) {\n      spaces.append(\"" \"");\n    }\n    return spaces.toString();\n  }\n\n\n\n  /** Left align String with spaces. */ \n  public String _left( String pText, int pColWidth ) {\n    return _align( pText, \"" \"", pColWidth, 'l' );\n  } \n\n\n\n  /** Right align String with spaces. */ \n  public String _right( String pText, int pColWidth ) {\n    return _align( pText, \"" \"", pColWidth, 'r' );\n  } \n\n\n\n  /** Center align String with spaces. */ \n  public String _center( String pText, int pColWidth ) {\n    return _align( pText, \"" \"", pColWidth, 'c' );\n  } \n\n\n\n  /** Align text within background text to specified column width. \n   *  Alignment can be 'l': left, 'c': center, 'r': right.\n   */\n  public String _align( String pText, String pBackText, int pColWidth, char pAlignment ) {\n    String result = pText;\n \n    if( null == pText ) { \n       result = WRITER__STRING_empty; \n    }\n    else if( null != pBackText ) {\n      try {\n        int textLen = pText.length();\n        if( pColWidth > textLen ) {\n          int    backTextLen     = pBackText.length();\n          int    remainWidth     = pColWidth - textLen;\n          int    backTextRepeats = remainWidth / backTextLen;\n          int    backTextRemain  = remainWidth % backTextLen;\n          String back            = WRITER__STRING_empty;\n          for( int backTextI = 0; backTextI < backTextRepeats; backTextI = backTextI + 1 ) {\n            back = back + pBackText;\n          }\n          back = back + pBackText.substring( 0, backTextRemain );\n \n          switch( pAlignment ) {\n          case 'l':\n            result = result + back;\n            break;\n          case 'c':\n            result = back.substring( 0, (back.length()/2) ) + result + back.substring( (back.length()/2) );\n            break;\n          case 'r':\n            result = back + result;\n            break;\n          }\n        }\n      } \n      catch( RuntimeException re ) { throw re; }\n      catch( Exception e ) {\n        result = pText;\n      }\n    }\n    return result;\n  }\n\n\n\n  /** Set the text of file currently being generated. */\n  public void _setText( String pText) {\n    writer__iCurrentText = new StringBuffer( pText );\n  }\n\n\n\n  /** Get the text of file currently being generated. */\n  public String _getText() {\n    return writer__iCurrentText.toString();\n  }\n\n\n  /** Set result object (optional). */\n  public void _setResult( Object pResult ) {\n    writer__iResult = pResult;\n  }\n\n\n\n  /** Get the result object (may be null). */\n  public Object _getResult() {\n    return writer__iResult;\n  }\n\n  /* Template Services (Text Production) >> */\n\n}\n\n\n!<footer>\n"");
    }","    public static String hashStringMD5(String string) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(string.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }",0
"    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }","    @Test
    public void testDocumentDownloadKnowledgeBase() throws IOException {
        if (uploadedKbDocumentID == null) {
            fail(""Document Upload Test should run first"");
        }
        String downloadLink = GoogleDownloadLinkGenerator.generateTextDownloadLink(uploadedKbDocumentID);
        URL url = new URL(downloadLink);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        InputStream input = url.openStream();
        FileWriter fw = new FileWriter(""tmpOutput.kb"");
        Reader reader = new InputStreamReader(input);
        BufferedReader bufferedReader = new BufferedReader(reader);
        String strLine = """";
        int count = 0;
        while (count < 10000) {
            strLine = bufferedReader.readLine();
            if (strLine != null && strLine != """") {
                fw.write(strLine);
            }
            count++;
        }
    }",0
"    public static Object[] append(Object[] source, Object obj) {
        Object[] copy = (Object[]) Array.newInstance(source.getClass().getComponentType(), source.length + 1);
        System.arraycopy(source, 0, copy, 0, source.length);
        copy[source.length] = obj;
        return copy;
    }","    public static String shaEncrypt(final String txt) {
        String enTxt = txt;
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""Error:"", e);
        }
        if (null != md) {
            byte[] shahash = new byte[32];
            try {
                md.update(txt.getBytes(""UTF-8""), 0, txt.length());
            } catch (UnsupportedEncodingException e) {
                logger.error(""Error:"", e);
            }
            shahash = md.digest();
            StringBuffer md5StrBuff = new StringBuffer();
            for (int i = 0; i < shahash.length; i++) {
                if (Integer.toHexString(0xFF & shahash[i]).length() == 1) {
                    md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & shahash[i]));
                } else {
                    md5StrBuff.append(Integer.toHexString(0xFF & shahash[i]));
                }
            }
            enTxt = md5StrBuff.toString();
        }
        return enTxt;
    }",0
"    public void doUpdateByLoginID() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByLoginID(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + ""ip_address = ?, mac_no = ? "" + ""WHERE  login_id= ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.ipAddress);
            ps.setString(5, this.macNO);
            ps.setString(6, this.loginID);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByLoginID(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }","    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }",0
"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }","    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }",0
"    public static boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }","    public static BufferedReader getUserInfoStream(String name) throws IOException {
        BufferedReader in;
        try {
            URL url = new URL(""http://www.spoj.pl/users/"" + name.toLowerCase() + ""/"");
            in = new BufferedReader(new InputStreamReader(url.openStream()));
        } catch (MalformedURLException e) {
            in = null;
            throw e;
        }
        return in;
    }",0
"    public static void add100RowsToTargetDB(int block) {
        Scanner source = null;
        Connection connection = null;
        try {
            try {
                Class.forName(""sun.jdbc.odbc.JdbcOdbcDriver"");
                String dbUrl = ""jdbc:odbc:conn"";
                connection = DriverManager.getConnection(dbUrl);
                source = new Scanner(new File(""D:/Priyanka/My/Data/TargetData.csv""));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            int counter = 0;
            source.nextLine();
            int cursor = block * 100;
            while (cursor != 0) {
                cursor--;
                source.nextLine();
            }
            while (source.hasNextLine() && counter < 100) {
                Scanner ls = new Scanner(source.nextLine());
                ls.useDelimiter("","");
                String query = ""INSERT INTO [CompTarget].[dbo].[ReadingsT] ([time],[reads],[writes],[sysCall],[sysRead],[sysWrite],[random1],[numExecs] ,[rchar],[wchar],[reading_id]) VALUES "";
                query += ""( '"" + ls.next() + ""', "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + +ls.nextInt() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pkt + "")"";
                String query2 = ""INSERT INTO [CompTarget].[dbo].[PageReadingT]([pageout],[pagedout],[pagefree],[pagescan],[pageattach],[pagein],[main_reading_id],[page_reading_id]) VALUES"";
                query2 += ""( "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pkt + "", "" + spkt + "")"";
                pkt++;
                spkt++;
                Statement statement = ((Connection) connection).createStatement();
                try {
                    statement.executeQuery(query);
                } catch (SQLException e) {
                }
                try {
                    Statement statement2 = ((Connection) connection).createStatement();
                    statement2.executeQuery(query2);
                } catch (SQLException e) {
                }
                counter++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static String replaceTokens(String text, Map<String, String> replacements) {
        Pattern pattern = Pattern.compile(""\\{(.+?)\\}"");
        Matcher matcher = pattern.matcher(text);
        StringBuilder builder = new StringBuilder();
        int i = 0;
        while (matcher.find()) {
            String replacement = replacements.get(matcher.group(1));
            builder.append(text.substring(i, matcher.start()));
            if (replacement == null) builder.append(matcher.group(0)); else builder.append(replacement);
            i = matcher.end();
        }
        builder.append(text.substring(i, text.length()));
        return builder.toString();
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private void loadTaskList() {
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(new File(this.getProperty(""path.data"") + File.separator + ""Tasks.xml""));
            NodeList tasksNodes = doc.getElementsByTagName(""task"");
            tasks = new HashMap<String, TaskCommand>();
            for (int x = 0; x < tasksNodes.getLength(); x++) {
                Node item = tasksNodes.item(x);
                TaskCommand taskCommand = new TaskCommand(item);
                tasks.put(taskCommand.getName(), taskCommand);
            }
            System.out.println(""Tasks.xml found and loaded ("" + tasksNodes.getLength() + "")"");
        } catch (Exception e) {
            tasks = new HashMap<String, TaskCommand>();
            System.out.println(""Error loading Tasks.xml, starting with no tasks."");
        }
    }","    public static String generate(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public static boolean deleteDir(File dir) {
        if (dir.exists()) {
            File[] files = dir.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDir(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (dir.delete());
    }","    public static Object[] addToArray(Object[] array, Object member) {
        Object[] newArray = (Object[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = member;
        return newArray;
    }",0
"    public static void add100RowsToTargetDB(int block) {
        Scanner source = null;
        Connection connection = null;
        try {
            try {
                Class.forName(""sun.jdbc.odbc.JdbcOdbcDriver"");
                String dbUrl = ""jdbc:odbc:conn"";
                connection = DriverManager.getConnection(dbUrl);
                source = new Scanner(new File(""D:/Priyanka/My/Data/TargetData.csv""));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            int counter = 0;
            source.nextLine();
            int cursor = block * 100;
            while (cursor != 0) {
                cursor--;
                source.nextLine();
            }
            while (source.hasNextLine() && counter < 100) {
                Scanner ls = new Scanner(source.nextLine());
                ls.useDelimiter("","");
                String query = ""INSERT INTO [CompTarget].[dbo].[ReadingsT] ([time],[reads],[writes],[sysCall],[sysRead],[sysWrite],[random1],[numExecs] ,[rchar],[wchar],[reading_id]) VALUES "";
                query += ""( '"" + ls.next() + ""', "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + +ls.nextInt() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pkt + "")"";
                String query2 = ""INSERT INTO [CompTarget].[dbo].[PageReadingT]([pageout],[pagedout],[pagefree],[pagescan],[pageattach],[pagein],[main_reading_id],[page_reading_id]) VALUES"";
                query2 += ""( "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pkt + "", "" + spkt + "")"";
                pkt++;
                spkt++;
                Statement statement = ((Connection) connection).createStatement();
                try {
                    statement.executeQuery(query);
                } catch (SQLException e) {
                }
                try {
                    Statement statement2 = ((Connection) connection).createStatement();
                    statement2.executeQuery(query2);
                } catch (SQLException e) {
                }
                counter++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public static void main(String[] args) {
        if (args.length < 2) {
            print(""Usage:\njava TestRegularExpression "" + ""characterSequence regularExpression+"");
            System.exit(0);
        }
        print(""Input: \"""" + args[0] + ""\"""");
        for (String arg : args) {
            print(""Regular expression: \"""" + arg + ""\"""");
            Pattern p = Pattern.compile(arg);
            Matcher m = p.matcher(args[0]);
            while (m.find()) {
                print(""Match \"""" + m.group() + ""\"" at positions "" + m.start() + ""-"" + (m.end() - 1));
            }
        }
    }",0
"    @Override
    public void close() throws IOException {
        super.close();
        byte[] signatureData = toByteArray();
        ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream);
        ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(this.originalZipFile));
        ZipEntry zipEntry;
        while (null != (zipEntry = zipInputStream.getNextEntry())) {
            if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) {
                ZipEntry newZipEntry = new ZipEntry(zipEntry.getName());
                zipOutputStream.putNextEntry(newZipEntry);
                LOG.debug(""copying "" + zipEntry.getName());
                IOUtils.copy(zipInputStream, zipOutputStream);
            }
        }
        zipInputStream.close();
        zipEntry = new ZipEntry(ASiCUtil.SIGNATURE_FILE);
        LOG.debug(""writing "" + zipEntry.getName());
        zipOutputStream.putNextEntry(zipEntry);
        IOUtils.write(signatureData, zipOutputStream);
        zipOutputStream.close();
    }","    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Bill bill = (Bill) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_BILL""));
            pst.setInt(1, bill.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public void sendMail(String smtpHost, String username, String password, String senderAddress, String recipientsAddress, String subject, String text) {
        MailAuthenticator auth = new MailAuthenticator(username, password);
        Properties properties = new Properties();
        properties.put(""mail.smtp.host"", smtpHost);
        properties.put(""mail.smtp.auth"", ""true"");
        Session session = Session.getDefaultInstance(properties, auth);
        try {
            Message msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(senderAddress));
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientsAddress, false));
            msg.setSubject(subject);
            msg.setText(text);
            msg.setHeader(""Test"", ""Test"");
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0
"    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""', 999, 999, 999 )"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }","    public static void copy(String a, String b) throws IOException {
        File inputFile = new File(a);
        File outputFile = new File(b);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    private boolean destroyWorkDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    destroyWorkDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }",0
"    static void addFile(String entryName, String fileName, ZipOutputStream zout) throws IOException {
        ZipEntry mf = new ZipEntry(entryName);
        File mfm = new File(fileName);
        mf.setSize(mfm.length());
        mf.setTime(mfm.lastModified());
        zout.putNextEntry(mf);
        zout.write(IOUtils.load(mfm));
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""')"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    private static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }",0
"    public void doUpdateByLoginID() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByLoginID(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + ""ip_address = ?, mac_no = ? "" + ""WHERE  login_id= ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.ipAddress);
            ps.setString(5, this.macNO);
            ps.setString(6, this.loginID);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByLoginID(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }","    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }",0
"    public void run(IAction action) {
        int style = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getStyle();
        Shell shell = new Shell((style & SWT.MIRRORED) != 0 ? SWT.RIGHT_TO_LEFT : SWT.NONE);
        GraphicalViewer viewer = new ScrollingGraphicalViewer();
        viewer.createControl(shell);
        viewer.setEditDomain(new DefaultEditDomain(null));
        viewer.setRootEditPart(new ScalableFreeformRootEditPart());
        viewer.setEditPartFactory(new ProjectEditPartFactory());
        viewer.setContents(getContents());
        viewer.flush();
        int printMode = new PrintModeDialog(shell).open();
        if (printMode == -1) return;
        PrintDialog dialog = new PrintDialog(shell, SWT.NULL);
        PrinterData data = dialog.open();
        if (data != null) {
            PrintGraphicalViewerOperation op = new PrintGraphicalViewerOperation(new Printer(data), viewer);
            op.setPrintMode(printMode);
            op.run(selectedFile.getName());
        }
    }","    public void testVowelsInner() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""H[a-z&&[aeiou]]llo"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""My name is berlin hallo what is up"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Vowel-Search \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }",0
"    private static int binarySearchArtist(Vector<MusicOutputDesign> v, int low, int high) {
        if (high < low) {
            return -1;
        }
        int mid = (high + low) / 2;
        String s = v.elementAt(mid).getArtist().replace(""\\"", ""/"");
        if (s.compareToIgnoreCase(artist) > 0) {
            return binarySearchArtist(v, low, mid - 1);
        } else if (s.compareToIgnoreCase(artist) < 0) {
            return binarySearchArtist(v, mid + 1, high);
        } else {
            return mid;
        }
    }","    public static void copy(FileInputStream in, FileOutputStream out) throws IOException {
        FileChannel fcIn = in.getChannel();
        FileChannel fcOut = out.getChannel();
        fcIn.transferTo(0, fcIn.size(), fcOut);
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    @Override
    public void close() throws IOException {
        super.close();
        byte[] signatureData = toByteArray();
        ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream);
        ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(this.originalZipFile));
        ZipEntry zipEntry;
        while (null != (zipEntry = zipInputStream.getNextEntry())) {
            if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) {
                ZipEntry newZipEntry = new ZipEntry(zipEntry.getName());
                zipOutputStream.putNextEntry(newZipEntry);
                LOG.debug(""copying "" + zipEntry.getName());
                IOUtils.copy(zipInputStream, zipOutputStream);
            }
        }
        zipInputStream.close();
        zipEntry = new ZipEntry(ASiCUtil.SIGNATURE_FILE);
        LOG.debug(""writing "" + zipEntry.getName());
        zipOutputStream.putNextEntry(zipEntry);
        IOUtils.write(signatureData, zipOutputStream);
        zipOutputStream.close();
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static void copy(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                webBrowserField.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String generate(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }",0
"    public static void copyFile(String fileName, String dstPath) throws IOException {
        FileChannel sourceChannel = new FileInputStream(fileName).getChannel();
        FileChannel destinationChannel = new FileOutputStream(dstPath).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }","    public static double[][] transpose(double[][] a) {
        int rows = a.length;
        int cols = a[0].length;
        double[][] res = new double[cols][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                res[j][i] = a[i][j];
            }
        }
        return res;
    }",0
"    @Override
    public void close() throws IOException {
        super.close();
        byte[] signatureData = toByteArray();
        ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream);
        ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(this.originalZipFile));
        ZipEntry zipEntry;
        while (null != (zipEntry = zipInputStream.getNextEntry())) {
            if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) {
                ZipEntry newZipEntry = new ZipEntry(zipEntry.getName());
                zipOutputStream.putNextEntry(newZipEntry);
                LOG.debug(""copying "" + zipEntry.getName());
                IOUtils.copy(zipInputStream, zipOutputStream);
            }
        }
        zipInputStream.close();
        zipEntry = new ZipEntry(ODFUtil.SIGNATURE_FILE);
        LOG.debug(""writing "" + zipEntry.getName());
        zipOutputStream.putNextEntry(zipEntry);
        IOUtils.write(signatureData, zipOutputStream);
        zipOutputStream.close();
    }","    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }",0
"    private void loadTaskList() {
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(new File(this.getProperty(""path.data"") + File.separator + ""Tasks.xml""));
            NodeList tasksNodes = doc.getElementsByTagName(""task"");
            tasks = new HashMap<String, TaskCommand>();
            for (int x = 0; x < tasksNodes.getLength(); x++) {
                Node item = tasksNodes.item(x);
                TaskCommand taskCommand = new TaskCommand(item);
                tasks.put(taskCommand.getName(), taskCommand);
            }
            System.out.println(""Tasks.xml found and loaded ("" + tasksNodes.getLength() + "")"");
        } catch (Exception e) {
            tasks = new HashMap<String, TaskCommand>();
            System.out.println(""Error loading Tasks.xml, starting with no tasks."");
        }
    }","    public static void copy(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public Matrix transpose() {
        final double array[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new DoubleMatrix(array);
    }",0
"    public static void compress(File srcFile, File destFile) throws IOException {
        InputStream input = null;
        OutputStream output = null;
        try {
            input = new BufferedInputStream(new FileInputStream(srcFile));
            output = new GZIPOutputStream(new FileOutputStream(destFile));
            IOUtils.copyLarge(input, output);
        } finally {
            IOUtils.closeQuietly(output);
            IOUtils.closeQuietly(input);
        }
    }","    public void imdb_search(String input) throws URISyntaxException {
        try {
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
            }
            URI uri;
            uri = new URI(""http://www.imdb.com/find?s=all&q="" + input.replace(' ', '+') + ""&x=0&y=0"");
            desktop.browse(uri);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }",0
"    private static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private void doAboutDonate() {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            if (desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(new URI(KlangConstants.KLANGEDITOR_URL_DONATE));
                } catch (Exception err) {
                    err.printStackTrace();
                }
            }
        }
    }","    public static String shaEncrypt(final String txt) {
        String enTxt = txt;
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""Error:"", e);
        }
        if (null != md) {
            byte[] shahash = new byte[32];
            try {
                md.update(txt.getBytes(""UTF-8""), 0, txt.length());
            } catch (UnsupportedEncodingException e) {
                logger.error(""Error:"", e);
            }
            shahash = md.digest();
            StringBuffer md5StrBuff = new StringBuffer();
            for (int i = 0; i < shahash.length; i++) {
                if (Integer.toHexString(0xFF & shahash[i]).length() == 1) {
                    md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & shahash[i]));
                } else {
                    md5StrBuff.append(Integer.toHexString(0xFF & shahash[i]));
                }
            }
            enTxt = md5StrBuff.toString();
        }
        return enTxt;
    }",0
"    private static List retrieveQuotes(Report report, Symbol symbol, String prefix, TradingDate startDate, TradingDate endDate) throws ImportExportException {
        List quotes = new ArrayList();
        String URLString = constructURL(symbol, prefix, startDate, endDate);
        EODQuoteFilter filter = new GoogleEODQuoteFilter(symbol);
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.getProxySettings();
        try {
            URL url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line = bufferedInput.readLine();
            while (line != null) {
                line = bufferedInput.readLine();
                if (line != null) {
                    try {
                        EODQuote quote = filter.toEODQuote(line);
                        quotes.add(quote);
                        verify(report, quote);
                    } catch (QuoteFormatException e) {
                        report.addError(Locale.getString(""GOOGLE_DISPLAY_URL"") + "":"" + symbol + "":"" + Locale.getString(""ERROR"") + "": "" + e.getMessage());
                    }
                }
            }
            bufferedInput.close();
        } catch (BindException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (ConnectException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (UnknownHostException e) {
            throw new ImportExportException(Locale.getString(""UNKNOWN_HOST_ERROR"", e.getMessage()));
        } catch (NoRouteToHostException e) {
            throw new ImportExportException(Locale.getString(""DESTINATION_UNREACHABLE_ERROR"", e.getMessage()));
        } catch (MalformedURLException e) {
            throw new ImportExportException(Locale.getString(""INVALID_PROXY_ERROR"", proxyPreferences.host, proxyPreferences.port));
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
            throw new ImportExportException(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
        }
        return quotes;
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public boolean crear() {
        int result = 0;
        String sql = ""insert into jugador"" + ""(apellidoPaterno, apellidoMaterno, nombres, fechaNacimiento, pais, rating, sexo)"" + ""values (?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(elJugador);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }","    public static void add100RowsToSourceDB(int block) {
        Scanner source = null;
        Connection connection = null;
        try {
            try {
                Class.forName(""sun.jdbc.odbc.JdbcOdbcDriver"");
                String dbUrl = ""jdbc:odbc:conn"";
                connection = DriverManager.getConnection(dbUrl);
                source = new Scanner(new File(""D:/Priyanka/My/Data/SourceData.csv""));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            int counter = 0;
            source.nextLine();
            int cursor = block * 100;
            while (cursor != 0) {
                cursor--;
                source.nextLine();
            }
            while (source.hasNextLine() && counter < 100) {
                Scanner ls = new Scanner(source.nextLine());
                ls.useDelimiter("","");
                String query = ""INSERT INTO [CompSource].[dbo].[Reading]([hours],[lread],[lwrite],[scall],[sread],[swrite],[fork],[execCalls],[rchar],[wchar],[readingNumber]) VALUES "";
                query += ""( '"" + ls.next() + ""', "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + +ls.nextInt() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pks + "")"";
                String query2 = ""INSERT INTO [CompSource].[dbo].[PageReading]([pgout],[ppgout],[pgfree],[pgscan],[atch],[pgin],[readingNumber],[pageReadingNumber]) VALUES"";
                query2 += ""( "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pks + "", "" + spks + "")"";
                pks++;
                spks++;
                Statement statement = ((Connection) connection).createStatement();
                try {
                    statement.executeQuery(query);
                } catch (SQLException e) {
                }
                try {
                    Statement statement2 = ((Connection) connection).createStatement();
                    statement2.executeQuery(query2);
                } catch (SQLException e) {
                }
                counter++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0
"    public static double[][] transpose(double[][] a) {
        int rows = a.length;
        int cols = a[0].length;
        double[][] res = new double[cols][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                res[j][i] = a[i][j];
            }
        }
        return res;
    }","    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }",0
"    public static BufferedReader getUserInfoStream(String name) throws IOException {
        BufferedReader in;
        try {
            URL url = new URL(""http://www.spoj.pl/users/"" + name.toLowerCase() + ""/"");
            in = new BufferedReader(new InputStreamReader(url.openStream()));
        } catch (MalformedURLException e) {
            in = null;
            throw e;
        }
        return in;
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public ThreadChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            ThreadInfo tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    public void start(Object context) {
        String cmd = getValueFromUser(""executables"", i18n(""WhichExecutable""), new String[0]);
        if (cmd == null) return;
        try {
            Process process = Runtime.getRuntime().exec(cmd);
            BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while (true) {
                String line = in.readLine();
                if (line == null) break;
                println(line);
            }
        } catch (IOException ioe) {
            println(i18n(""Error"") + ioe.getMessage());
        }
    }",0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public Matrix transpose() {
        final double array[][] = new double[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new DoubleMatrix(array);
    }","    private void colorizeEdit(StyledText edit) {
        String findResult = edit.getText();
        final Color COLOR_BLUE = dialog.getDisplay().getSystemColor(SWT.COLOR_BLUE);
        int start = 0;
        int index = findResult.indexOf(""\n"");
        while (index != -1) {
            String subString = findResult.substring(start, index);
            if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.underline = true;
                ((StyledText) editResult).setStyleRange(style);
            } else {
                StyleRange style = new StyleRange();
                style.start = start;
                style.length = subString.length();
                style.foreground = COLOR_BLUE;
                ((StyledText) editResult).setStyleRange(style);
            }
            start = index + 1;
            index = findResult.indexOf(""\n"", index + 1);
        }
        String subString = findResult.substring(start).replace(""\n"", """");
        if (subString.length() != 0 && subString.startsWith(""("") && subString.endsWith("")"")) {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.underline = true;
            ((StyledText) editResult).setStyleRange(style);
        } else {
            StyleRange style = new StyleRange();
            style.start = start;
            style.length = subString.length();
            style.foreground = COLOR_BLUE;
            ((StyledText) editResult).setStyleRange(style);
        }
        if (!WorkspaceSaveContainer.findCurrent.equals("""")) {
            final Color COLOR_RED = dialog.getDisplay().getSystemColor(SWT.COLOR_RED);
            if (WorkspaceSaveContainer.regularExpression) {
                Pattern pattern = null;
                try {
                    if (WorkspaceSaveContainer.caseSensitive) pattern = Pattern.compile(WorkspaceSaveContainer.findCurrent); else pattern = Pattern.compile(WorkspaceSaveContainer.findCurrent, Pattern.CASE_INSENSITIVE);
                } catch (PatternSyntaxException e) {
                    return;
                }
                String[] findResultList = findResult.split(""\n"");
                int findResultListCount = findResultList.length;
                int findResultListIndex;
                int offset = 0;
                for (findResultListIndex = 0; findResultListIndex < findResultListCount; findResultListIndex++) {
                    Matcher matcher = pattern.matcher(findResultList[findResultListIndex]);
                    while (matcher.find()) {
                        int startIndex = matcher.start();
                        int endIndex = matcher.end();
                        StyleRange style = new StyleRange();
                        style.start = startIndex + offset;
                        style.length = endIndex - startIndex;
                        style.fontStyle = SWT.BOLD;
                        style.foreground = COLOR_RED;
                        ((StyledText) editResult).setStyleRange(style);
                    }
                    offset += findResultList[findResultListIndex].length() + 1;
                }
            } else {
                String findCurrentLowerCase = WorkspaceSaveContainer.findCurrent.toLowerCase();
                String findResultLowerCase = findResult.toLowerCase();
                if (WorkspaceSaveContainer.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainer.findCurrent); else index = findResultLowerCase.indexOf(findCurrentLowerCase);
                while (index != -1) {
                    StyleRange style = new StyleRange();
                    style.start = index;
                    style.length = WorkspaceSaveContainer.findCurrent.length();
                    style.fontStyle = SWT.BOLD;
                    style.foreground = COLOR_RED;
                    ((StyledText) editResult).setStyleRange(style);
                    if (WorkspaceSaveContainer.caseSensitive) index = findResult.indexOf(WorkspaceSaveContainer.findCurrent, index + 1); else index = findResultLowerCase.indexOf(findCurrentLowerCase, index + 1);
                }
            }
        }
    }",0
"    public void sendMail(String smtpHost, String username, String password, String senderAddress, String recipientsAddress, String subject, String text) {
        EMailAuthenticator auth = new EMailAuthenticator(username, password);
        Properties properties = new Properties();
        properties.put(""mail.smtp.host"", smtpHost);
        properties.put(""mail.smtp.auth"", ""true"");
        Session session = Session.getDefaultInstance(properties, auth);
        try {
            Message msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(senderAddress));
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientsAddress, false));
            msg.setSubject(subject);
            msg.setText(text);
            msg.setHeader(""Test"", ""Test"");
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    private static void recurseFiles(File root, File file, TarArchiveOutputStream taos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, taos, absolute);
            }
        } else if ((!file.getName().endsWith("".tar"")) && (!file.getName().endsWith("".TAR""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            TarArchiveEntry tae = new TarArchiveEntry(filename);
            tae.setSize(file.length());
            taos.putArchiveEntry(tae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, taos);
            taos.closeArchiveEntry();
        }
    }","    public void testEnd() {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile(""spiritbot\\W"", Pattern.CASE_INSENSITIVE);
        m = p.matcher(""spiritbot: how are you doing"");
        boolean _found = false;
        while (m.find()) {
            System.out.println("" : Text \"""" + m.group() + ""\"" start :  "" + m.start() + "" end : "" + m.end() + ""."");
            _found = true;
        }
        assertTrue(_found);
    }",0
"    public static double[][] transp(double[][] m1) {
        int m = m1.length;
        int n = m1[0].length;
        double[][] ret = new double[n][m];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ret[j][i] = m1[i][j];
            }
        }
        return ret;
    }","        public void actionPerformed(ActionEvent e) {
            dirChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int i = dirChooser.showOpenDialog(gimme());
            if (i == JFileChooser.APPROVE_OPTION) {
                shoutcastPlayer.setText(dirChooser.getSelectedFile().toString());
            }
        }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }","    public static void copy(File source, File destination) throws IOException {
        InputStream in = new FileInputStream(source);
        OutputStream out = new FileOutputStream(destination);
        byte[] buffer = new byte[1024];
        int len;
        while ((len = in.read(buffer)) > 0) out.write(buffer, 0, len);
        in.close();
        out.close();
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static void main(String[] args) {
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(""results/in_action/chapterX/tooltip2.pdf""));
            document.open();
            writer.setPageEvent(new TooltipExample2());
            Paragraph p = new Paragraph(""Hello World "");
            Chunk c = new Chunk(""tooltip"");
            c.setGenericTag(""This is my tooltip."");
            p.add(c);
            document.add(p);
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        document.close();
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static String SHA1(String text) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        md.update(text.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public static void main(String[] args) {
        final String dbdriver = ""org.postgresql.Driver"";
        final String dbconnect = ""jdbc:postgresql://localhost:5432/wdb"";
        final String dbuser = ""wcitest"";
        final String dbpasswd = """";
        Connection con = null;
        Statement statement = null;
        try {
            Class.forName(dbdriver);
            con = DriverManager.getConnection(dbconnect, dbuser, dbpasswd);
            statement = con.createStatement();
        } catch (Exception e) {
            System.out.println(""FATAL: cant load the database driver <"" + dbdriver + "">!"");
            System.exit(1);
        }
        String wdbInit = ""SELECT wci.begin('"" + dbuser + ""', 999, 999, 999 )"";
        String sql = "" SELECT * "" + "" FROM wci.read( array['test wci 5'], NULL, "" + ""                '2009-11-13 00:00:00+00', "" + ""                NULL, "" + ""                array['air temperature', "" + ""                      'air pressure'], "" + ""                NULL, "" + ""                array[-1], "" + ""                NULL::wci.returngid )"";
        final String colNames[] = { ""valueParameterName"", ""validTimeFrom"" };
        ResultSet rs = null;
        try {
            statement.execute(wdbInit);
            rs = statement.executeQuery(sql);
            ResultSetMetaData rsMetaData = rs.getMetaData();
            String data;
            boolean first;
            while (rs.next()) {
                Statement getGridStatement = con.createStatement();
                first = true;
                long gridId = rs.getLong(""value"");
                ResultSet blobResult = getGridStatement.executeQuery(""SELECT * FROM wci.fetch("" + gridId + "", NULL::wci.grid)"");
                while (blobResult.next()) {
                    int size = blobResult.getInt(""numberX"") + blobResult.getInt(""numberX"");
                    InputStream blob = blobResult.getBinaryStream(""grid"");
                    DataInputStream blobReader = new DataInputStream(blob);
                    int floatToRead = 42;
                    blobReader.skip(floatToRead * 4);
                    float value = blobReader.readFloat();
                    System.out.print(value + ""\t"");
                    for (String name : colNames) {
                        data = rs.getString(name);
                        if (first) {
                            first = false;
                        } else {
                            System.out.print("", "");
                        }
                        if (data != null) System.out.print(data); else System.out.print(""\\N"");
                    }
                    System.out.print(""  (BLOB size: "" + size + "")"");
                    System.out.println();
                }
                blobResult.close();
            }
        } catch (Exception ex) {
            System.out.println(""SELECT error: "" + ex);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException ex) {
                System.out.println(""EXCEPTION: rs.close: "" + ex);
            }
        }
    }",0
"    public static void copy(String fromFile, String toFile) throws IOException {
        File inputFile = new File(fromFile);
        File outputFile = new File(toFile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }","    private boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }",0
"    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileInputStream input = new FileInputStream(srcFile);
        try {
            FileOutputStream output = new FileOutputStream(destFile);
            try {
                IOUtils.copy(input, output);
            } finally {
                IOUtils.closeQuietly(output);
            }
        } finally {
            IOUtils.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }","    private static boolean loadClasses() {
        switch(jvm) {
            case MRJ_2_0:
                try {
                    Class aeTargetClass = Class.forName(""com.apple.MacOS.AETarget"");
                    Class osUtilsClass = Class.forName(""com.apple.MacOS.OSUtils"");
                    Class appleEventClass = Class.forName(""com.apple.MacOS.AppleEvent"");
                    Class aeClass = Class.forName(""com.apple.MacOS.ae"");
                    aeDescClass = Class.forName(""com.apple.MacOS.AEDesc"");
                    aeTargetConstructor = aeTargetClass.getDeclaredConstructor(new Class[] { int.class });
                    appleEventConstructor = appleEventClass.getDeclaredConstructor(new Class[] { int.class, int.class, aeTargetClass, int.class, int.class });
                    aeDescConstructor = aeDescClass.getDeclaredConstructor(new Class[] { String.class });
                    makeOSType = osUtilsClass.getDeclaredMethod(""makeOSType"", new Class[] { String.class });
                    putParameter = appleEventClass.getDeclaredMethod(""putParameter"", new Class[] { int.class, aeDescClass });
                    sendNoReply = appleEventClass.getDeclaredMethod(""sendNoReply"", new Class[] {});
                    Field keyDirectObjectField = aeClass.getDeclaredField(""keyDirectObject"");
                    keyDirectObject = (Integer) keyDirectObjectField.get(null);
                    Field autoGenerateReturnIDField = appleEventClass.getDeclaredField(""kAutoGenerateReturnID"");
                    kAutoGenerateReturnID = (Integer) autoGenerateReturnIDField.get(null);
                    Field anyTransactionIDField = appleEventClass.getDeclaredField(""kAnyTransactionID"");
                    kAnyTransactionID = (Integer) anyTransactionIDField.get(null);
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_2_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    mrjOSTypeClass = Class.forName(""com.apple.mrj.MRJOSType"");
                    Field systemFolderField = mrjFileUtilsClass.getDeclaredField(""kSystemFolderType"");
                    kSystemFolderType = systemFolderField.get(null);
                    findFolder = mrjFileUtilsClass.getDeclaredMethod(""findFolder"", new Class[] { mrjOSTypeClass });
                    getFileCreator = mrjFileUtilsClass.getDeclaredMethod(""getFileCreator"", new Class[] { File.class });
                    getFileType = mrjFileUtilsClass.getDeclaredMethod(""getFileType"", new Class[] { File.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchFieldException nsfe) {
                    errorMessage = nsfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (SecurityException se) {
                    errorMessage = se.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_0:
                try {
                    Class linker = Class.forName(""com.apple.mrj.jdirect.Linker"");
                    Constructor constructor = linker.getConstructor(new Class[] { Class.class });
                    linkage = constructor.newInstance(new Object[] { BbrowserLauncher.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                } catch (InvocationTargetException ite) {
                    errorMessage = ite.getMessage();
                    return false;
                } catch (InstantiationException ie) {
                    errorMessage = ie.getMessage();
                    return false;
                } catch (IllegalAccessException iae) {
                    errorMessage = iae.getMessage();
                    return false;
                }
                break;
            case MRJ_3_1:
                try {
                    mrjFileUtilsClass = Class.forName(""com.apple.mrj.MRJFileUtils"");
                    openURL = mrjFileUtilsClass.getDeclaredMethod(""openURL"", new Class[] { String.class });
                } catch (ClassNotFoundException cnfe) {
                    errorMessage = cnfe.getMessage();
                    return false;
                } catch (NoSuchMethodException nsme) {
                    errorMessage = nsme.getMessage();
                    return false;
                }
                break;
            default:
                break;
        }
        return true;
    }",0
"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }","    private static final void makeWF_JavaComponent_jwf(Hashtable pWriterFormats) {
        pWriterFormats.put(""JavaComponent.jwf"", ""!<header>\n\n\n\n$<{java.CodeWriter.package>package $<java.CodeWriter.package>;$<}java.CodeWriter.package>\n\n\n\nimport java.io.FileOutputStream;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.io.StringReader;\nimport java.io.BufferedReader;\nimport java.io.FileWriter;\nimport java.io.BufferedWriter;\n\nimport java.util.Vector;\nimport java.util.Hashtable;\nimport java.util.Calendar;\n\n\n\n!<{import>/* section:import << */\n//\n\n!<import>\n\n//\n/* section:import >> */!<}import>\n\n\n\npublic class $<main.CodeWriter> \n$<{java.CodeWriter.extends>  extends $<java.CodeWriter.extends> $<}java.CodeWriter.extends> \n$<{java.CodeWriter.implements>  implements $<java.CodeWriter.implements> $<}java.CodeWriter.implements>\n{\n\n  /* Constants << */\n \n  // User Interface text message parts\n  public static final String writer__UITEXT_Method                   = \""method \"";\n  public static final String writer__UITEXT_Main                     = \""main \"";\n  public static final String writer__UITEXT_ExceptionIn              = \""Exception in \"";\n  public static final String writer__UITEXT_ColonNewLine             = \"":\\n\"";\n  public static final String writer__UITEXT_NewLine                  = \""\\n\"";\n  public static final String writer__UITEXT_Section                  = \""section \"";\n  public static final String writer__UITEXT_SavedFile                = \""Saved file:       \"";\n  public static final String writer__UITEXT_UnableToSaveFile         = \""Unable to save file: \"";\n  public static final String writer__UITEXT_UnableToBackupFile       = \""Unable to backup file: \"";\n  public static final String writer__UITEXT_ToBackupFolder           = \"" to backup folder: \"";\n  public static final String writer__UITEXT_BackupFolderColon        = \""Backup folder: \"";\n  public static final String writer__UITEXT_BackupFolderExistFailure = \"" does not exist and cannot be created.\"";\n  public static final String writer__UITEXT_BackupFolderNotAFolder   = \"" is not a folder.\"";\n  public static final String writer__UITEXT_BackupFolderNotWritable  = \"" is not writable.\"";\n  public static final String writer__UITEXT_CodeWriterState          = \""Code Writer State: \"";\n  public static final String writer__UITEXT_GetFileIndexEquals       = \""\\n_getFileIndex()    = \"";\n  public static final String writer__UITEXT_GetFullFileNameEquals    = \""\\n_getFullFileName() = \"";\n  public static final String writer__UITEXT_GetOutputFolderEquals    = \""\\n_getOutputFolder() = \"";\n  public static final String writer__UITEXT_ErrorHeader              = \""\\n\\n--- CodeWriter Error Description Start ---\\n\\n\"";\n  public static final String writer__UITEXT_ErrorFooter              = \""\\n--- CodeWriter Error Description End -----\\n\\n\"";\n  public static final String writer__UITEXT_PlaceHolderException \n    = \""This placeholder Exception should never be thrown: there is an error in the WriterFormat.\"";\n\n  public static final int writer__FILE_BUFFER_SIZE  = 4096;                // initial size of StringBuffer\n\n  /* Constants >> */\n\n\n  /* Writer Variables << */\n\n  protected String[]     writer__iFileNameRoots     = new String[] {};     // generated file name roots\n  protected int          writer__iNumFiles          = 0;                   // number of generated files\n  \n  protected String       writer__iFileNamePrefix    = \""\"";                  // failsafe default\n  protected String       writer__iFileNameSuffix    = \""\"";                  // failsafe default\n\n  protected String       writer__iBackupPrefix      = \""\"";                  // failsafe default\n  protected String       writer__iBackupSuffix      = \""\"";                  // failsafe default\n\n  protected StringBuffer writer__iCurrentText       = new StringBuffer();  // current text\n  protected int          writer__iCurrentFileIndex  = 0;                   // current file index\n\n  protected boolean      writer__iSave              = true;                // save generated code to disk\n  protected boolean      writer__iBackup            = true;                // make backups\n\n  protected String       writer__iOutputFolder      = \"".\"";                 // written code is output to this folder\n  protected String       writer__iBackupFolder      = \"".\"";                 // overwritten files are placed here\n\n  protected Hashtable    writer__iProperties            = new Hashtable(); // lookup table for compile time properties\n  protected boolean      writer__iPropertiesInitialised = false;           // true => lookup table initialiased\n\n  /* Writer Variables >> */\n\n\n  !<{declare>/* section:declare << */\n  //\n\n  !<declare>\n\n  //\n  /* section:declare >> */!<}declare>\n\n\n\n  /* Writer Services << */\n\n  /* Initialize. */\n  public void writer__initialize() {\n    writer__iCurrentFileIndex = 0;\n    writer__setDefaults();\n  }\n\n\n\n  /** Main loop.\n   *  Template script is placed here in the @body section.\n   */\n  public void writer__write() throws Exception {\n\n    // initialize\n    String writer__currentSection = \""init\"";\n\n    try {\n      !<{init>/* section:init << */\n      //\n\n      !<init>\n\n      //\n      /* section:init >> */!<}init>\n\n\n      // write files loop\n      int      writer__numFiles = _getNumFiles();\n      int      writer__fileI    = 0;\n      writer__next_file: for( writer__fileI = 0; writer__fileI < writer__numFiles; writer__fileI++ ) {\n\n        !<{prewrite>/* section:prewrite << */\n        // \n\n        writer__currentSection = \""prewrite\"";\n        !<prewrite>\n\n        //\n        /* section:prewrite >> */!<}prewrite>\n\n\n        if( ! writer__startFile() ) { continue writer__next_file; }\n\n\n        !<{body>/* section:body << */\n        //\n\n        writer__currentSection = \""body\"";\n        !<body>\n\n        //\n        /* section:body >> */!<}body>\n\n\n        if( ! writer__endFile() ) { continue writer__next_file; }\n\n\n        !<{postwrite>/* section:postwrite << */\n        // \n\n        writer__currentSection = \""postwrite\"";\n        !<postwrite>\n\n        //\n        /* section:postwrite >> */!<}postwrite>\n\n        writer__nextFile();       \n      }\n \n\n      !<{cleanup>/* section:cleanup << */\n      //\n \n      writer__currentSection = \""cleanup\"";\n      !<cleanup>\n\n      //\n      /* section:cleanup >> */!<}cleanup>\n\n\n    } \n    catch( Exception e ) {\n      writer__handleException( writer__UITEXT_ExceptionIn + writer__UITEXT_Section + writer__currentSection, e );\n    }\n\n  }\n\n\n\n  /** Start writing a file. */\n  public boolean writer__startFile() {\n    writer__iCurrentText = new StringBuffer( writer__FILE_BUFFER_SIZE );\n    return true;\n  }\n\n\n\n  /** End writing a file. */\n  public boolean writer__endFile() throws Exception {\n    boolean endOK = true;\n\n    String fileName = _getFullFileName();\n    String filePath \n      = writer__iOutputFolder\n      + \""$<\\jostraca.system.fileSeparator>\""\n      + fileName\n      ;\n\n    if( writer__iBackup ) {\n      try {\n        writer__backup( filePath, fileName, writer__iBackupFolder );\n\n      } \n      catch( Exception e ) {\n        writer__handleException( writer__UITEXT_UnableToBackupFile \n                                + filePath \n                                + writer__UITEXT_ToBackupFolder\n                                + writer__iBackupFolder\n                                ,e \n                              );\n        endOK = false;\n      }\n    }\n \n    if( endOK && writer__iSave ) {\n      try {\n        writer__save( filePath, writer__iCurrentText.toString() );\n      } \n      catch( Exception e ) {\n        writer__handleException( writer__UITEXT_UnableToSaveFile + filePath, e );\n        endOK = false;\n      }\n    }\n\n    return endOK;\n  }\n\n\n\n  /** Move to next file. */\n  public void writer__nextFile() {\n    writer__iCurrentFileIndex = writer__iCurrentFileIndex + 1;\n  }\n\n\n\n  /** Set defaults from configuration property set. */\n  public void writer__setDefaults() {\n\n    $<{main.FileNameRoot>_setFileNameRoot( \""$<\\main.FileNameRoot>\"" );$<}main.FileNameRoot>\n    $<{main.FileNamePrefix>_setFileNamePrefix( \""$<\\main.FileNamePrefix>\"" );$<}main.FileNamePrefix>\n    $<{main.FileNameSuffix>_setFileNameSuffix( \""$<\\main.FileNameSuffix>\"" );$<}main.FileNameSufffix>\n\n    $<{main.OutputFolder>_setOutputFolder( \""$<\\main.OutputFolder>\"" );$<}main.OutputFolder>\n\n    $<{main.BackupFolder>_setBackupFolder( \""$<\\main.BackupFolder>\"" );$<}main.BackupFolder>\n    $<{main.BackupPrefix>_setBackupPrefix( \""$<\\main.BackupPrefix>\"" );$<}main.BackupPrefix>\n    $<{main.BackupSuffix>_setBackupSuffix( \""$<\\main.BackupSuffix>\"" );$<}main.BackupSufffix>\n    _backup( \""$<lang.TrueString>\"".equals( \""$<jostraca.MakeBackup>\"" ) );\n\n  }\n\n\n\n  /** Handle exceptions: print an explanation for user. */\n  public void writer__handleException( String rMessage, Exception rException ) throws Exception {\n\n    StringBuffer userMsg = new StringBuffer( 111 );\n\n    userMsg.append( writer__UITEXT_ErrorHeader );\n\n    userMsg.append( writer__describeState() + rMessage + writer__UITEXT_ColonNewLine );\n\n    StringWriter stringWriter = new StringWriter();\n    rException.printStackTrace( new PrintWriter( stringWriter) );\n    userMsg.append( stringWriter.toString() );\n\n    userMsg.append( writer__UITEXT_ErrorFooter );\n\n    throw new Exception( userMsg.toString() );\n  }\n\n\n\n  /** Provide a concise description of the state of the CodeWriter. */\n  public String writer__describeState() {\n    String currentState \n      = writer__UITEXT_CodeWriterState\n      + writer__UITEXT_GetFileIndexEquals    + _getFileIndex() \n      + writer__UITEXT_GetFullFileNameEquals + _getFullFileName()\n      + writer__UITEXT_GetOutputFolderEquals + _getOutputFolder()\n      + writer__UITEXT_NewLine\n      ; \n    return currentState;\n  }\n\n\n\n  /** Save written files to disk. \n   *  @param rFilePath Save location.\n   *  @param rContent  File content.\n   */\n  public void writer__save( String rFilePath, String rContent ) throws Exception {\n    StringReader   sr = new StringReader( rContent );\n    BufferedReader br = new BufferedReader( sr );\n    FileWriter     fw = new FileWriter( rFilePath );\n    BufferedWriter bw = new BufferedWriter( fw );\n\n    String line;\n    while( null != (line = br.readLine()) ) {\n      bw.write( line );\n      bw.newLine();\n    }\n\n    bw.close();\n    br.close();\n\n  }\n\n\n\n  /** Read file from disk.\n   *  @param rFilePath.\n   */\n  public String writer__read( String rFilePath ) throws Exception {\n    File       file       = new File( rFilePath );\n    FileReader in         = new FileReader( file );\n    int        size       = (int) file.length();\n    char[]     data       = new char[size];\n    int        charsRead  = 0;\n\n    while( charsRead < size ) {\n      charsRead += in.read( data, charsRead, size - charsRead );\n    }\n\n    return new String( data );\n  }\n\n\n\n  /** Backup overwritten files, if they exist.\n   *  Backups have the format:\n   *  [YYYYMMDDhhmmss][prefix][filename][suffix]\n   *  @param rFilePath     Full Path of File to backup (including name).\n   *  @param rFileName     Name of File to backup.\n   *  @param rBackupFolder Folder to place backups in.\n   */ \n  public void writer__backup( String rFilePath, String rFileName, String rBackupFolder ) throws Exception {\n\n    File backupFolder = new File( rBackupFolder );\n\n    // check backup folder ( create if necessary )\n    // ...\n\n    if( ! backupFolder.exists() ) {\n      if( ! backupFolder.mkdir() ) {\n        throw new Exception( writer__UITEXT_BackupFolderColon\n                             + backupFolder\n                             + writer__UITEXT_BackupFolderExistFailure );\n      }\n    }\n    if( ! backupFolder.isDirectory() ) {\n      throw new Exception( writer__UITEXT_BackupFolderColon \n                           + backupFolder\n                           + writer__UITEXT_BackupFolderNotAFolder );\n    }\n    if( ! backupFolder.canWrite() ) {\n      throw new Exception( writer__UITEXT_BackupFolderColon\n                           + backupFolder\n                           + writer__UITEXT_BackupFolderNotWritable );\n    }\n\n    // create backup file path\n    Calendar calendar = Calendar.getInstance();\n    String year_yyyy = _align( String.valueOf( calendar.get(Calendar.YEAR) ),         \""0\"", 4, 'r' );\n    String month_mm  = _align( String.valueOf( (1+calendar.get(Calendar.MONTH)) ),    \""0\"", 2, 'r' );\n    String day_dd    = _align( String.valueOf( calendar.get(Calendar.DAY_OF_MONTH) ), \""0\"", 2, 'r' );\n    String hour_hh   = _align( String.valueOf( calendar.get(Calendar.HOUR_OF_DAY) ),  \""0\"", 2, 'r' );\n    String minute_mm = _align( String.valueOf( calendar.get(Calendar.MINUTE) ),       \""0\"", 2, 'r' );\n    String second_ss = _align( String.valueOf( calendar.get(Calendar.SECOND) ),       \""0\"", 2, 'r' );\n    String dateTime       = year_yyyy+month_mm+day_dd+hour_hh+minute_mm+second_ss;\n    String backupFileName = dateTime + writer__iBackupPrefix + rFileName + writer__iBackupSuffix;\n    File   backupFilePath = new File( rBackupFolder, backupFileName );\n    \n    // save backup file\n    File fileToBackup = new File( rFilePath );\n    if( fileToBackup.exists() ) {\n      String fileContents = writer__read( rFilePath );\n      writer__save( backupFilePath.getPath(), fileContents );\n    }\n  }\n\n\n\n  /** Set compile time properties. */\n  public void writer__initProperties() {\n    $<{jostraca.properties.NameValueList>\n    String[] propertyList = new String[] { $<jostraca.properties.NameValueList> };\n    int numProperties = propertyList.length;\n    for( int propI = 0; propI < numProperties; propI += 2 ) {\n      writer__iProperties.put( propertyList[ propI ], propertyList[ propI+1 ] );\n    }\n    writer__iPropertiesInitialised = true;\n    $<}jostraca.properties.NameValueList>\n  }\n\n\n  /* Writer Services >> */\n \n\n\n\n  /* Template Services (File Generation) << */\n\n  /** Set the prefix of the files to be written. \n   *  @param rPrefix Written files prefix.\n   */\n  public void _setFileNamePrefix( String rPrefix ) {\n    if( null == rPrefix ) {\n      return; // ignore\n    }\n    writer__iFileNamePrefix = rPrefix;\n  }\n\n\n\n  /** Get prefix of files to be written. */\n  public String _getFileNamePrefix() {\n    return writer__iFileNamePrefix;\n  }\n\n\n\n  /** Set the suffix of the files to be written. \n   *  @param rSuffix Written files suffix.\n   */\n  public void _setFileNameSuffix( String rSuffix ) {\n    if( null == rSuffix ) {\n      return; // ignore\n    }\n    writer__iFileNameSuffix = rSuffix;\n  }\n\n\n\n  /** Get suffix of files to be written. */\n  public String _getFileNameSuffix() {\n    return writer__iFileNameSuffix;\n  }\n\n\n\n  /** Set the full name of the file to be written. \n   *  Prefix and Suffix are set to empty\n   *  @param rName Full name of the file to write.\n   */\n  public void _setFullFileName( String rName ) {\n    _setFileNamePrefix( \""\"" );\n    _setFileNameRoot(   rName );\n    _setFileNameSuffix( \""\"" );\n  }\n\n\n\n  /** Get the full name of current file being generated. */\n  public String _getFullFileName() {\n    return _getFileNamePrefix() + _getFileNameRoot() + _getFileNameSuffix();\n  }\n\n\n\n  /** Set the names of the files to be written. \n   *  Prefix and Suffix are set to empty\n   *  @param rName Full name of the file to write.\n   */\n  public void _setFullFileNames( String[] rNames ) {\n    _setFileNamePrefix( \""\"" );\n    _setFileNameRoots(  rNames );\n    _setFileNameSuffix( \""\"" );\n  }\n\n\n\n  /** Get the full names of the files to be written. */\n  public String[] _getFullFileNames() {\n\n    String[] fileNameRoots  = _getFileNameRoots();\n    int      numFiles       = fileNameRoots.length;\n    String[] fullFileNames  = new String[ numFiles ];\n    String   fileNamePrefix = _getFileNamePrefix();\n    String   fileNameSuffix = _getFileNameSuffix();\n\n    for( int fileI = 0; fileI < numFiles; fileI++ ) {\n      fullFileNames[ fileI ] = fileNamePrefix + fileNameRoots[ fileI ] + fileNameSuffix;\n    }\n\n    return fullFileNames;\n  }\n\n\n\n  /** Set the root of the name of the file to be written. \n   *  @param rFileNameRoot Root of the name of file to be written.\n   */\n  public void _setFileNameRoot( String rFileNameRoot ) {\n    if( null == rFileNameRoot ) {\n      return; // ignore\n    }\n    _setFileNameRoots( new String[] { rFileNameRoot } );\n  }\n\n\n\n  /** Get the root of the name of current file being generated. */\n  public String _getFileNameRoot() {\n    if( 0 < writer__iFileNameRoots.length ) {\n      return writer__iFileNameRoots[ writer__iCurrentFileIndex ];\n    }\n    return \""\"";\n  }\n\n\n\n  /** Set the roots of the names of the files to be written. \n   *  @param rFileNameRoots Roots of names of files to be written.\n   */\n  public void _setFileNameRoots( String[] rFileNameRoots ) {\n    if( null == rFileNameRoots ) {\n      return; // ignore\n    }\n\n    // copy\n    String[] roots = (String[]) rFileNameRoots.clone();\n\n    // normalize - replace nulls\n    int numRoots = roots.length;\n    for(int rootI = 0; rootI < numRoots; rootI++) {\n      if( null == roots[ rootI ] ) {\n        roots[ rootI ] = \""\"";\n      }\n    }\n\n    // save roots\n    writer__iFileNameRoots = roots;\n    writer__iNumFiles      = numRoots;\n  }\n\n\n\n  /** Get roots of the names of files to be written. */\n  public String[] _getFileNameRoots() {\n    return writer__iFileNameRoots;\n  }\n\n\n\n  /** Get index of file currently being generated. */\n  public int _getFileIndex() {\n    return writer__iCurrentFileIndex;\n  }\n\n\n\n  /** Get number of generated files. */\n  public int _getNumFiles() {\n    return writer__iNumFiles;\n  }\n\n\n\n  /** Set output folder.\n   *  @param rOutputFolder Folder to output generated code to.\n   */\n  public void _setOutputFolder( String rOutputFolder ) {\n    writer__iOutputFolder = rOutputFolder;\n  }\n\n\n\n  /** Get output folder. */\n  public String _getOutputFolder() {\n    return writer__iOutputFolder;\n  }\n\n\n\n  /** Set backup folder.\n   *  @param rBackupFolder Folder to backup overwritten files to.\n   */\n  public void _setBackupFolder( String rBackupFolder ) {\n    writer__iBackupFolder = writer__iOutputFolder + \""$<\\jostraca.system.fileSeparator>\"" + rBackupFolder;\n  }\n\n\n\n  /** Get backup folder. */\n  public String _getBackupFolder() {\n    return writer__iBackupFolder;\n  }\n\n\n\n  /** Set the suffix of backup files.\n   *  @param rSuffix Backup files suffix.\n   */\n  public void _setBackupSuffix( String rSuffix ) {\n    if( null == rSuffix ) {\n      return; // ignore\n    }\n    writer__iBackupSuffix = rSuffix;\n  }\n\n\n\n  /** Set the prefix of backup files.\n   *  @param rPrefix Backup files prefix.\n   */\n  public void _setBackupPrefix( String rPrefix ) {\n    if( null == rPrefix ) {\n      return; // ignore\n    }\n    writer__iBackupPrefix = rPrefix;\n  }\n\n\n\n  /** Set to true if written files are to be backed up to disk automatically. \n   *  @param rBackup True => Backup files to disk.\n   */\n  public void _backup( boolean rBackup ) {\n    writer__iBackup = rBackup;\n  }\n\n\n\n  /** Set to true if written files are to be saved to disk automatically. \n   *  @param rSave True => Save written files to disk.\n   */\n  public void _save( boolean rSave ) {\n    writer__iSave = rSave;\n  }\n\n\n  /* Template Services (File Generation) >> */\n\n\n\n\n  /* Template Services (Control) << */\n\n  /** Get compile time property\n   *  @param rName Name of property to get.\n   */\n  public String _getProperty( String rName ) {\n    String result = \""\"";\n\n    if( ! writer__iPropertiesInitialised ) {\n      writer__initProperties();\n    }\n\n    if( writer__iProperties.containsKey( rName ) ) {\n      result = (String) writer__iProperties.get( rName );\n    }\n\n    return result;\n  }\n\n  /* Template Services (Control) >> */\n\n\n\n  /* Template Services (Text Production) << */\n\n\n  // inserts\n  // ...\n\n  /** Insert text into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rText Text to insert.\n   */\n  public void _insert( String rText ) {\n    writer__iCurrentText.append( rText );\n  }\n\n  /** Insert string representation of object into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rObject Object to insert.\n   */\n  public void _insert( Object rObject ) {\n    writer__iCurrentText.append( \""\""+rObject );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rInt int to insert\n   */\n  public void _insert( int rInt ) {\n    writer__iCurrentText.append( rInt );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rLong long to insert\n   */\n  public void _insert( long rLong ) {\n    writer__iCurrentText.append( rLong );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rShort short to insert\n   */\n  public void _insert( short rShort ) {\n    writer__iCurrentText.append( rShort );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rByte byte to insert\n   */\n  public void _insert( byte rByte ) {\n    writer__iCurrentText.append( rByte );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rDouble double to insert\n   */\n  public void _insert( double rDouble ) {\n    writer__iCurrentText.append( rDouble );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rFloat float to insert\n   */\n  public void _insert( float rFloat ) {\n    writer__iCurrentText.append( rFloat );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rChar char to insert\n   */\n  public void _insert( char rChar ) {\n    writer__iCurrentText.append( rChar );\n  }\n\n  /** Insert string representation of primitive data type into written file. \n   *  Abbreviated by <%=foobar%>. \n   *  @param rBoolean boolean to insert\n   */\n  public void _insert( boolean rBoolean ) {\n    writer__iCurrentText.append( rBoolean );\n  }\n\n\n\n  /** Create a String containing specified number of spaces.\n   *  @param rNumSpaces Number of spaces to place in String\n   */\n  public String _spaces( int rNumSpaces ) {\n    int numSpaces = rNumSpaces;\n    if( 0 > numSpaces ) { numSpaces *= -1; }\n    StringBuffer spaces = new StringBuffer( numSpaces );\n    for(int spaceI = 0; spaceI < numSpaces; spaceI++) {\n      spaces.append(\"" \"");\n    }\n    return spaces.toString();\n  }\n\n\n\n  /** Left align String with spaces. */ \n  public String _left( String rText, int rColWidth ) {\n    return _align( rText, \"" \"", rColWidth, 'l' );\n  } \n\n\n\n  /** Right align String with spaces. */ \n  public String _right( String rText, int rColWidth ) {\n    return _align( rText, \"" \"", rColWidth, 'r' );\n  } \n\n\n\n  /** Center align String with spaces. */ \n  public String _center( String rText, int rColWidth ) {\n    return _align( rText, \"" \"", rColWidth, 'c' );\n  } \n\n\n\n  /** Align text within background text to specified column width. \n   *  Alignment can be 'l': left, 'c': center, 'r': right\n   */\n  public String _align( String rText, String rBackText, int rColWidth, char rAlignment ) {\n    String result = rText;\n \n    if( null == rText ) { \n       result = \""\""; \n    }\n    else if( null != rBackText ) {\n      try {\n        int textLen = rText.length();\n        if( rColWidth > textLen ) {\n          int    backTextLen     = rBackText.length();\n          int    remainWidth     = rColWidth - textLen;\n          int    backTextRepeats = remainWidth / backTextLen;\n          int    backTextRemain  = remainWidth % backTextLen;\n          String back            = \""\"";\n          for( int backTextI = 0; backTextI < backTextRepeats; backTextI++ ) {\n            back = back + rBackText;\n          }\n          back = back + rBackText.substring( 0, backTextRemain );\n \n          switch( rAlignment ) {\n          case 'l':\n            result = result + back;\n            break;\n          case 'c':\n            result = back.substring( 0, (back.length()/2) ) + result + back.substring( (back.length()/2) );\n            break;\n          case 'r':\n            result = back + result;\n            break;\n          }\n        }\n      } \n      catch( Exception e ) {\n        result = rText;\n      }\n    }\n    return result;\n  }\n\n\n\n  /** Set current text of file currently being generated. */\n  public void _setText( String rText) {\n    writer__iCurrentText = new StringBuffer( rText );\n  }\n\n\n\n  /** Get current text of file currently being generated. */\n  public String _getText() {\n    return writer__iCurrentText.toString();\n  }\n\n  /* Template Services (Text Production) << */\n\n}\n\n\n!<footer>\n"");
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }",0
"    private static final void makeWF_BasicJavaWriterFormat_jwf(Hashtable pWriterFormats) {
        pWriterFormats.put(""BasicJavaWriterFormat.jwf"", ""!<header>\n\n\n\n$<{java.CodeWriter.package>package $<java.CodeWriter.package>;$<}java.CodeWriter.package>\n\n\n\nimport java.io.*;\nimport java.util.*;\n\n\n\n\n!<{import>// section:import\n!<import>!<}import>\n\n\n\npublic class $<main.CodeWriter> \n$<{java.CodeWriter.extends>  extends $<java.CodeWriter.extends> $<}java.CodeWriter.extends> \n$<{java.CodeWriter.implements>  implements $<java.CodeWriter.implements> $<}java.CodeWriter.implements>\n{\n\n  /* Constants << */\n \n  // Command line arguments\n  public static final String WRITER__ARGUMENT_CONTROL_PREFIX = \""$<main.CodeWriter.argument.ControlPrefix>\"";\n  public static final String WRITER__ARGUMENT_OutputFolder   = \""$<main.CodeWriter.argument.name.OutputFolder>\"";\n  public static final String WRITER__ARGUMENT_MetaPropFile   = \""$<main.CodeWriter.argument.name.MetaPropFile>$<main.CodeWriter.argument.name.BuildPropFile>\"";\n  public static final String WRITER__ARGUMENT_BackupFolder   = \""$<main.CodeWriter.argument.name.BackupFolder>\"";\n  public static final String WRITER__ARGUMENT_NoBackup       = \""$<main.CodeWriter.argument.name.NoBackup>\"";\n\n  // User Interface text message parts\n  public static final String WRITER__UITEXT_Method                     = \""method \"";\n  public static final String WRITER__UITEXT_Main                       = \""main \"";\n  public static final String WRITER__UITEXT_ExceptionIn                = \""Exception in \"";\n  public static final String WRITER__UITEXT_ColonNewLine               = \"":\\n\"";\n  public static final String WRITER__UITEXT_NewLine                    = \""\\n\"";\n  public static final String WRITER__UITEXT_Section                    = \""section \"";\n  public static final String WRITER__UITEXT_SavedFile                  = \""Saved file:       \"";\n  public static final String WRITER__UITEXT_UnableToSaveFile           = \""Unable to save file: \"";\n  public static final String WRITER__UITEXT_UnableToBackupFile         = \""Unable to backup file: \"";\n  public static final String WRITER__UITEXT_ToBackupFolder             = \"" to backup folder: \"";\n  public static final String WRITER__UITEXT_BackupFolderColon          = \""Backup folder: \"";\n  public static final String WRITER__UITEXT_BackupFolderExistFailure   = \"" does not exist and cannot be created.\"";\n  public static final String WRITER__UITEXT_BackupFolderNotAFolder     = \"" is not a folder.\"";\n  public static final String WRITER__UITEXT_BackupFolderNotWritable    = \"" is not writable.\"";\n  public static final String WRITER__UITEXT_CodeWriterState            = \""Code Writer State: \"";\n  public static final String WRITER__UITEXT_GetFileIndexEquals         = \""\\n_getFileIndex()    = \"";\n  public static final String WRITER__UITEXT_GetFullFileNameEquals      = \""\\n_getFullFileName() = \"";\n  public static final String WRITER__UITEXT_GetOutputFolderEquals      = \""\\n_getOutputFolder() = \"";\n  public static final String WRITER__UITEXT_ErrorHeader                = \""\\n\\n--- CodeWriter Error Description Start ---\\n\\n\"";\n  public static final String WRITER__UITEXT_ErrorFooter                = \""\\n--- CodeWriter Error Description End -----\\n\\n\"";\n  public static final String WRITER__UITEXT_UnableToLoadMetaProps      = \""Unable to load metadata from file: \"";\n  public static final String WRITER__UITEXT_UndefinedProperty          = \""Undefined property: \"";\n  public static final String WRITER__UITEXT_UnableToCreateOutputFolder = \""Unable to create output folder: \"";\n  public static final String WRITER__UITEXT_PlaceHolderException \n    = \""This placeholder Exception should never be thrown: there is an error in the WriterFormat.\"";\n\n  // String constants \n  public static final String WRITER__STRING_empty                    = \""\"";\n  public static final String WRITER__STRING_dot                      = \"".\"";\n  public static final String WRITER__STRING_separator                = File.separator;\n\n  public static final int WRITER__FILE_BUFFER_SIZE                   = 4096;  // initial size of StringBuffer\n\n  /* Constants >> */\n\n\n\n\n  /* Writer Variables << */\n\n  protected String[]     writer__iFileNameRoots    = new String[] {};      // generated file name roots\n  protected int          writer__iNumFiles         = 0;                    // number of generated files\n  \n  protected String       writer__iFileNamePrefix   = WRITER__STRING_empty; // failsafe default\n  protected String       writer__iFileNameSuffix   = WRITER__STRING_empty; // failsafe default\n\n  protected String       writer__iBackupPrefix     = WRITER__STRING_empty; // failsafe default\n  protected String       writer__iBackupSuffix     = WRITER__STRING_empty; // failsafe default\n\n  protected StringBuffer writer__iCurrentText      = new StringBuffer();   // current text\n  protected int          writer__iCurrentFileIndex = 0;                    // current file index\n\n  protected String[]     writer__iArgs             = new String[0];        // cmd line args\n  protected int          writer__iNumArgs          = 0;                    // number of cmd line args\n  protected String[]     writer__iUserArgs         = new String[0];        // user cmd line args\n  protected int          writer__iNumUserArgs      = 0;                    // number of user cmd line args\n\n  protected boolean      writer__iSave             = true;                 // save generated code to disk\n  protected boolean      writer__iBackup           = true;                 // make backups\n\n  protected String       writer__iOutputFolder     = WRITER__STRING_dot;   // written code is output to this folder\n  protected String       writer__iBackupFolder     = WRITER__STRING_dot;   // overwritten files are placed here\n  protected String       writer__iMetaPropFile     = null;                 // metadata properties file path\n\n  protected Properties   writer__iProperties       = null;                 // build properties\n  protected boolean      writer__iPropertiesInit   = false;                // true => lookup table initialiased\n\n  protected Object       writer__iContext          = null;                 // context object\n  protected Object       writer__iResult           = null;                 // result object\n\n  protected boolean      writer__iThrow            = false;                // throw Exceptions\n\n  /* Writer Variables >> */\n\n\n  !<{support>\n  // version 0.1 compatibility\n  // section:support\n  !<support>!<}support>\n\n\n\n  !<{declare>// section:declare\n  !<declare>!<}declare>\n\n\n\n\n  /** Execute. */\n  public static void main( String pArgs[] ) {\n    $<main.CodeWriter> cw = new $<main.CodeWriter>();\n    Object result = cw._generate( pArgs, false );\n    \n    int exitvalue = 0;\n    if( result instanceof Integer ) {\n      exitvalue = ((Integer)result).intValue();\n    }\n\n    System.exit( exitvalue );\n  }\n\n\n\n\n  /* Writer Services << */\n\n  /** Generate. */\n  public Object _generate( String[] pArgs ) {\n    return _generate( pArgs, false );\n  }\n\n\n  /** Generate. */\n  public Object _generate( String[] pArgs, boolean pThrow ) {\n     writer__iThrow = pThrow;\n\n    try {\n      writer__initialize();\n      writer__handleArgs( pArgs );\n      writer__write();    \n\n      Object result = _getResult();\n      if( null == result ) {\n        result = _getText();\n        _setResult( result );\n      }\n\n      return result;\n    } \n    catch( RuntimeException re ) { throw re; }\n    catch( Exception e ) {\n      writer__handleException( WRITER__UITEXT_ExceptionIn + WRITER__UITEXT_Method + WRITER__UITEXT_Main, e );\n      return new Integer(1);\n    }\n  }\n\n\n  /* Initialize. */\n  public void writer__initialize() {\n    writer__iCurrentFileIndex = 0;\n    writer__setDefaults();\n  }\n\n\n\n  /** Main file generation loop. Template script is placed here in the body section. */\n  public void writer__write() {\n    if( false ) { throw new RuntimeException( WRITER__UITEXT_PlaceHolderException ); }\n\n    // initialize\n    String writer__currentSection = \""init\"";\n\n    try {\n      if( false ) { throw new RuntimeException( WRITER__UITEXT_PlaceHolderException ); }\n\n      !<{init>// section:init\n      !<init>!<}init>\n\n\n      // write files loop\n      int      writer__numFiles = _getNumFiles();\n      int      writer__fileI    = 0;\n      writer__next_file: for( writer__fileI = 0; writer__fileI < writer__numFiles; writer__fileI = writer__fileI + 1 ) {\n\n        try {\n          if( false ) { throw new RuntimeException( WRITER__UITEXT_PlaceHolderException ); }\n\n\n          !<{prewrite>// section:prewrite\n          writer__currentSection = \""prewrite\"";\n          !<prewrite>!<}prewrite>\n\n\n          if( ! writer__startFile() ) { continue writer__next_file; }\n\n\n          !<{body>// section:body\n          writer__currentSection = \""body\"";\n          !<body>!<}body>\n\n\n          if( ! writer__endFile() ) { continue writer__next_file; }\n\n\n          !<{postwrite>// section:postwrite\n          writer__currentSection = \""postwrite\"";\n          !<postwrite>!<}postwrite>\n\n\n        } \n        catch( RuntimeException re ) { throw re; }\n        catch( Exception e ) {\n           writer__handleException( WRITER__UITEXT_ExceptionIn + WRITER__UITEXT_Section + writer__currentSection, e );\n        }\n\n        writer__nextFile();       \n      }\n \n\n      !<{cleanup>// section:cleanup\n      writer__currentSection = \""cleanup\"";\n      !<cleanup>!<}cleanup>\n\n    } \n    catch( RuntimeException re ) { throw re; }\n    catch( Exception e ) {\n      writer__handleException( WRITER__UITEXT_ExceptionIn + WRITER__UITEXT_Section + writer__currentSection, e );\n    }\n  }\n\n\n\n  /** Start writing a file. */\n  public boolean writer__startFile() {\n    writer__iCurrentText = new StringBuffer( WRITER__FILE_BUFFER_SIZE );\n    return true;\n  }\n\n\n\n  /** End writing a file. */\n  public boolean writer__endFile() {\n    boolean endOK = true;\n  \n    String filePath = \""output-file-path\"";\n\n    if( endOK ) {\n      String fileName = _getFullFileName();\n      filePath \n        = writer__iOutputFolder\n        + WRITER__STRING_separator\n        + fileName;\n\n      if( writer__iBackup ) {\n        try {\n          writer__backup( filePath, fileName, writer__iBackupFolder );\n        } \n        catch( RuntimeException re ) { throw re; }\n        catch( Exception e ) {\n          writer__handleException( WRITER__UITEXT_UnableToBackupFile \n                                   + filePath \n                                   + WRITER__UITEXT_ToBackupFolder\n                                   + writer__iBackupFolder\n                                   ,e );\n          endOK = false;\n        }\n      }\n    }\n\n    File outputFolder = null;\n    try {\n      outputFolder = new File( filePath ).getParentFile();\n      if( null != outputFolder && !outputFolder.exists() ) {\n        outputFolder.mkdirs();\n      }\n    }\n    catch( RuntimeException re ) { throw re; }\n    catch( Exception e ) {\n      writer__handleException( WRITER__UITEXT_UnableToCreateOutputFolder \n                               + outputFolder\n                               ,e );\n      endOK = false;\n    }\n\n\n    if( endOK && writer__iSave ) {\n      try {\n        _saveTextFile( filePath, writer__iCurrentText.toString() );\n        writer__userMessage( WRITER__UITEXT_SavedFile + filePath + WRITER__UITEXT_NewLine, false );\n      } \n      catch( RuntimeException re ) { throw re; }\n      catch( Exception e ) {\n        writer__handleException( WRITER__UITEXT_UnableToSaveFile + filePath, e );\n        endOK = false;\n      }\n    }\n\n    return endOK;\n  }\n\n\n\n  /** Move to next file. */\n  public void writer__nextFile() {\n    writer__iCurrentFileIndex = writer__iCurrentFileIndex + 1;\n  }\n\n\n\n  /** Handle command line arguments to CodeWriter. */\n  public void writer__handleArgs( String[] pArgs ) {\n\n    // set arg names\n    String argName_OutputFolder     = WRITER__ARGUMENT_CONTROL_PREFIX + WRITER__ARGUMENT_OutputFolder;\n    String argName_MetaPropFile     = WRITER__ARGUMENT_CONTROL_PREFIX + WRITER__ARGUMENT_MetaPropFile;\n    String argName_BackupFolder     = WRITER__ARGUMENT_CONTROL_PREFIX + WRITER__ARGUMENT_BackupFolder;\n    String argName_NoBackup         = WRITER__ARGUMENT_CONTROL_PREFIX + WRITER__ARGUMENT_NoBackup;\n\n    // parse\n    int numArgs = pArgs.length;\n    for(int argI = 0; argI < numArgs; argI = argI + 1 ) {\n      if( 0 < argName_OutputFolder.length() && pArgs[argI].startsWith( argName_OutputFolder ) ) {\n        _setOutputFolder( pArgs[ argI ].substring( argName_OutputFolder.length() ) );\n      }\n      else if( 0 < argName_MetaPropFile.length() && pArgs[argI].startsWith( argName_MetaPropFile ) ) {\n        _setMetaPropFile( pArgs[ argI ].substring( argName_MetaPropFile.length() ) );\n      }\n      else if( 0 < argName_BackupFolder.length() && pArgs[argI].startsWith( argName_BackupFolder ) ) {\n        _setBackupFolder( pArgs[ argI ].substring( argName_BackupFolder.length() ) );\n      }\n      else if( 0 < argName_NoBackup.length() && argName_NoBackup.equals( pArgs[ argI ] ) ) {\n        _backup( $<lang.FalseString> ); // NOTE: -B => don't make backups\n      }\n    }\n\n    writer__initArgs( pArgs.length, pArgs );\n  }\n\n\n\n  /** Set defaults from configuration property set. */\n  public void writer__setDefaults() {\n\n    $<{main.FileNameRoot>_setFileNameRoot( \""$<\\main.FileNameRoot>\"" );$<}main.FileNameRoot>\n    $<{main.FileNamePrefix>_setFileNamePrefix( \""$<\\main.FileNamePrefix>\"" );$<}main.FileNamePrefix>\n    $<{main.FileNameSuffix>_setFileNameSuffix( \""$<\\main.FileNameSuffix>\"" );$<}main.FileNameSufffix>\n\n    $<{main.OutputFolder>_setOutputFolder( \""$<\\main.OutputFolder>\"" );$<}main.OutputFolder>\n\n    $<{main.BackupFolder>_setBackupFolder( \""$<\\main.BackupFolder>\"" );$<}main.BackupFolder>\n    $<{main.BackupPrefix>_setBackupPrefix( \""$<\\main.BackupPrefix>\"" );$<}main.BackupPrefix>\n    $<{main.BackupSuffix>_setBackupSuffix( \""$<\\main.BackupSuffix>\"" );$<}main.BackupSufffix>\n    _backup( \""$<lang.TrueString>\"".equals( \""$<jostraca.MakeBackup>\"" ) );\n\n  }\n\n\n\n  /** Initialize command line arguments. */\n  public void writer__initArgs( int pNumArgs, String[] pArgs ) {\n    int      argI        = 0;\n    int      userArgI    = 0;\n\n    writer__iNumArgs     = pNumArgs;\n    writer__iArgs        = pArgs;\n    writer__iNumUserArgs = writer__iNumArgs;\n\n    for( argI = 0; argI < writer__iNumArgs; argI = argI + 1 ) {\n      if( writer__iArgs[argI].startsWith( WRITER__ARGUMENT_CONTROL_PREFIX ) ) {\n        writer__iNumUserArgs = writer__iNumUserArgs - 1;\n      }\n    }\n\n    writer__iUserArgs = new String[ writer__iNumUserArgs ];\n    for( argI = 0; argI < writer__iNumArgs; argI = argI + 1 ) {\n      if( !writer__iArgs[argI].startsWith( WRITER__ARGUMENT_CONTROL_PREFIX ) ) {\n        writer__iUserArgs[ userArgI ] = writer__iArgs[ argI ];\n        userArgI = userArgI + 1;\n      }\n    }\n  }\n\n\n\n  /** Print a user readable message. */\n  public void writer__userMessage( String pMessage, boolean pIsError ) {\n    (pIsError?System.err:System.out).print( pMessage );\n  }\n\n\n\n  /** Handle exceptions: print an explanation for user. */\n  public void writer__handleException( String pMessage, Exception pException ) {\n\n    StringBuffer userMsg = new StringBuffer();\n\n    userMsg.append( WRITER__UITEXT_ErrorHeader );\n\n    userMsg.append( writer__describeState() + pMessage + WRITER__UITEXT_ColonNewLine );\n\n    StringWriter stringWriter = new StringWriter();\n    pException.printStackTrace( new PrintWriter( stringWriter) );\n    userMsg.append( stringWriter.toString() );\n\n    userMsg.append( WRITER__UITEXT_ErrorFooter );\n\n    if( writer__iThrow ) {\n      throw new RuntimeException( userMsg.toString() );\n    }\n    else {\n      writer__userMessage( userMsg.toString(), true );\n    }\n  }\n\n\n\n  /** Provide a concise description of the state of the CodeWriter. */\n  public String writer__describeState() {\n    String currentState \n      = WRITER__UITEXT_CodeWriterState\n      + WRITER__UITEXT_GetFileIndexEquals    + _getFileIndex() \n      + WRITER__UITEXT_GetFullFileNameEquals + _getFullFileName()\n      + WRITER__UITEXT_GetOutputFolderEquals + _getOutputFolder()\n      + WRITER__UITEXT_NewLine\n      ; \n    return currentState;\n  }\n\n\n\n  /** Backup overwritten files, if they exist.\n   *  Backups have the format: [YYYYMMDDhhmmss][prefix][filename][suffix].\n   */ \n  public void writer__backup( String pFilePath, String pFileName, String pBackupFolder ) {\n\n    File backupFolder = new File( pBackupFolder );\n\n    // check backup folder ( create if necessary )\n    if( ! backupFolder.exists() ) {\n      if( ! backupFolder.mkdirs() ) {\n        throw new RuntimeException( WRITER__UITEXT_BackupFolderColon\n                                    + backupFolder\n                                    + WRITER__UITEXT_BackupFolderExistFailure );\n      }\n    }\n    if( ! backupFolder.isDirectory() ) {\n      throw new RuntimeException( WRITER__UITEXT_BackupFolderColon \n                                  + backupFolder\n                                  + WRITER__UITEXT_BackupFolderNotAFolder );\n    }\n    if( ! backupFolder.canWrite() ) {\n      throw new RuntimeException( WRITER__UITEXT_BackupFolderColon\n                                  + backupFolder\n                                  + WRITER__UITEXT_BackupFolderNotWritable );\n    }\n\n    // create backup file path\n    Calendar calendar = Calendar.getInstance();\n    String year_yyyy = _align( String.valueOf( calendar.get(Calendar.YEAR) ),         \""0\"", 4, 'r' );\n    String month_mm  = _align( String.valueOf( (1+calendar.get(Calendar.MONTH)) ),    \""0\"", 2, 'r' );\n    String day_dd    = _align( String.valueOf( calendar.get(Calendar.DAY_OF_MONTH) ), \""0\"", 2, 'r' );\n    String hour_hh   = _align( String.valueOf( calendar.get(Calendar.HOUR_OF_DAY) ),  \""0\"", 2, 'r' );\n    String minute_mm = _align( String.valueOf( calendar.get(Calendar.MINUTE) ),       \""0\"", 2, 'r' );\n    String second_ss = _align( String.valueOf( calendar.get(Calendar.SECOND) ),       \""0\"", 2, 'r' );\n    String dateTime       = year_yyyy+month_mm+day_dd+hour_hh+minute_mm+second_ss;\n    String backupFileName = dateTime + writer__iBackupPrefix + pFileName + writer__iBackupSuffix;\n    File   backupFilePath = new File( pBackupFolder, backupFileName );\n    \n    File   fullBackupFolder = backupFilePath.getParentFile();\n    if( null != fullBackupFolder && !fullBackupFolder.exists() ) {\n      if( ! fullBackupFolder.mkdirs() ) {\n        throw new RuntimeException( WRITER__UITEXT_BackupFolderColon\n                                    + fullBackupFolder\n                                    + WRITER__UITEXT_BackupFolderExistFailure );\n      }\n    }\n\n\n    // save backup file\n    File fileToBackup = new File( pFilePath );\n    if( fileToBackup.exists() ) {\n      String fileContents = _loadTextFile( pFilePath );\n      _saveTextFile( backupFilePath.getPath(), fileContents );\n    }\n  }\n\n\n\n  /** Load build properties. */\n  public void writer__initProperties() {\n\n    String metaPropFile = _getMetaPropFile();\n    if( null != metaPropFile ) {\n      writer__iProperties = new Properties();\n      \n      try {\n        FileInputStream fis = new FileInputStream( _getMetaPropFile() );\n        writer__iProperties.load( fis );\n        fis.close();\n      }\n      catch( RuntimeException re ) { throw re; }\n      catch( Exception e ) {\n        writer__handleException( WRITER__UITEXT_UnableToLoadMetaProps+_getMetaPropFile(), e );\n      }\n\n      writer__iPropertiesInit = true;\n    }\n  }\n\n  /* Writer Services >> */\n \n\n\n\n  /* Template Services (File Generation) << */\n\n  /** Set the prefix of the files to be generated. */\n  public void _setFileNamePrefix( String pPrefix ) {\n    if( null == pPrefix ) {\n      return; // ignore\n    }\n    writer__iFileNamePrefix = pPrefix;\n  }\n\n\n\n  /** Get prefix of files to be generated. */\n  public String _getFileNamePrefix() {\n    return writer__iFileNamePrefix;\n  }\n\n\n\n  /** Set the suffix of the files to be generated. */\n  public void _setFileNameSuffix( String pSuffix ) {\n    if( null == pSuffix ) {\n      return; // ignore\n    }\n    writer__iFileNameSuffix = pSuffix;\n  }\n\n\n\n  /** Get suffix of files to be generated. */\n  public String _getFileNameSuffix() {\n    return writer__iFileNameSuffix;\n  }\n\n\n\n  /** Set the full name of the file to be generated. \n   *  Prefix and Suffix are set to empty.\n   */\n  public void _setFullFileName( String pName ) {\n    _setFileNamePrefix( WRITER__STRING_empty );\n    _setFileNameRoot(   pName );\n    _setFileNameSuffix( WRITER__STRING_empty );\n  }\n\n\n\n  /** Get the full name of current file being generated. */\n  public String _getFullFileName() {\n    return _getFileNamePrefix() + _getFileNameRoot() + _getFileNameSuffix();\n  }\n\n\n\n  /** Set the names of the files to be generated. \n   *  Prefix and Suffix are set to empty.\n   */\n  public void _setFullFileNames( String[] pNames ) {\n    _setFileNamePrefix( WRITER__STRING_empty );\n    _setFileNameRoots(  pNames );\n    _setFileNameSuffix( WRITER__STRING_empty );\n  }\n\n\n\n  /** Get the full names of the files to be generated. */\n  public String[] _getFullFileNames() {\n\n    String[] fileNameRoots  = _getFileNameRoots();\n    int      numFiles       = fileNameRoots.length;\n    String[] fullFileNames  = new String[ numFiles ];\n    String   fileNamePrefix = _getFileNamePrefix();\n    String   fileNameSuffix = _getFileNameSuffix();\n\n    for( int fileI = 0; fileI < numFiles; fileI = fileI + 1 ) {\n      fullFileNames[ fileI ] = fileNamePrefix + fileNameRoots[ fileI ] + fileNameSuffix;\n    }\n\n    return fullFileNames;\n  }\n\n\n\n  /** Set the root of the name of the file to be generated. */\n  public void _setFileNameRoot( String pFileNameRoot ) {\n    if( null == pFileNameRoot ) {\n      return; // ignore\n    }\n    _setFileNameRoots( new String[] { pFileNameRoot } );\n  }\n\n\n\n  /** Get the root of the name of the current file being generated. */\n  public String _getFileNameRoot() {\n    if( 0 < writer__iFileNameRoots.length ) {\n      return writer__iFileNameRoots[ writer__iCurrentFileIndex ];\n    }\n    return WRITER__STRING_empty;\n  }\n\n\n\n  /** Set the roots of the names of the files to be generated. */\n  public void _setFileNameRoots( String[] pFileNameRoots ) {\n    if( null == pFileNameRoots ) {\n      return; // ignore\n    }\n\n    // copy\n    String[] roots = (String[]) pFileNameRoots.clone();\n\n    // normalize - replace nulls\n    int numRoots = roots.length;\n    for(int rootI = 0; rootI < numRoots; rootI = rootI + 1 ) {\n      if( null == roots[ rootI ] ) {\n        roots[ rootI ] = WRITER__STRING_empty;\n      }\n    }\n\n    // save roots\n    writer__iFileNameRoots = roots;\n    writer__iNumFiles      = numRoots;\n  }\n\n\n\n  /** Get roots of the names of files to be generated. */\n  public String[] _getFileNameRoots() {\n    return writer__iFileNameRoots;\n  }\n\n\n\n  /** Get index of file currently being generated. */\n  public int _getFileIndex() {\n    return writer__iCurrentFileIndex;\n  }\n\n\n\n  /** Get number of files to generate. */\n  public int _getNumFiles() {\n    return writer__iNumFiles;\n  }\n\n\n\n  /** Set output folder. */\n  public void _setOutputFolder( String pOutputFolder ) {\n    writer__iOutputFolder = pOutputFolder;\n  }\n\n\n\n  /** Get output folder. */\n  public String _getOutputFolder() {\n    return writer__iOutputFolder;\n  }\n\n\n\n  /** Set backup folder. */\n  public void _setBackupFolder( String pBackupFolder ) {\n    writer__iBackupFolder = pBackupFolder;\n  }\n\n\n\n  /** Get backup folder. */\n  public String _getBackupFolder() {\n    return writer__iBackupFolder;\n  }\n\n\n\n  /** Set the prefix of backup files. */\n  public void _setBackupPrefix( String pPrefix ) {\n    if( null == pPrefix ) {\n      return; // ignore\n    }\n    writer__iBackupPrefix = pPrefix;\n  }\n\n\n\n  /** Set the suffix of backup files. */\n  public void _setBackupSuffix( String pSuffix ) {\n    if( null == pSuffix ) {\n      return; // ignore\n    }\n    writer__iBackupSuffix = pSuffix;\n  }\n\n\n\n  /** Set to true if generated files are to be backed up to disk automatically. */\n  public void _backup( boolean pBackup ) {\n    writer__iBackup = pBackup;\n  }\n\n\n\n  /** Set to true if generated files are to be saved to disk automatically. */\n  public void _save( boolean pSave ) {\n    writer__iSave = pSave;\n  }\n\n\n\n  /** Save a text file. */\n  public void _saveTextFile( String pFilePath, String pContent ) {\n    try {\n      StringReader   sr = new StringReader( pContent );\n      BufferedReader br = new BufferedReader( sr );\n      FileWriter     fw = new FileWriter( pFilePath );\n      BufferedWriter bw = new BufferedWriter( fw );\n\n      String line;\n      while( null != (line = br.readLine()) ) {\n        bw.write( line );\n        bw.newLine();\n      }\n\n      bw.close();\n      br.close();\n    }\n    catch( RuntimeException re ) { throw re; }\n    catch( Exception e ) {\n      throw new RuntimeException( e.getMessage() );\n    }\n  }\n\n\n\n  /** Load a text file. */\n  public String _loadTextFile( String pFilePath ) {\n    try {\n      File       file       = new File( pFilePath );\n      FileReader in         = new FileReader( file );\n      int        size       = (int) file.length();\n      char[]     data       = new char[size];\n      int        charsRead  = 0;\n\n      while( charsRead < size ) {\n        charsRead += in.read( data, charsRead, size - charsRead );\n      }\n\n      return new String( data );\n    }\n    catch( RuntimeException re ) { throw re; }\n    catch( Exception e ) {\n      throw new RuntimeException( e.getMessage() );\n    }\n  }\n\n\n  /** Set build properties file. */\n  public void _setMetaPropFile( String pMetaPropFile ) {\n    writer__iMetaPropFile  = pMetaPropFile;\n    writer__iPropertiesInit = false;\n  }\n\n\n\n  /** Get build properties file. */\n  public String _getMetaPropFile() {\n    return writer__iMetaPropFile;\n  }\n\n\n  /* Template Services (File Generation) >> */\n\n\n\n\n  /* Template Services (Control) << */\n\n  /** Get the value of a compile-time property. */\n  public String _getProperty( String pName ) {\n    String result = WRITER__STRING_empty;\n\n    if( ! writer__iPropertiesInit ) {\n      writer__initProperties();\n    }\n\n    if( writer__iProperties.containsKey( pName ) ) {\n      result = writer__iProperties.getProperty( pName );\n    }\n    else {\n      throw new RuntimeException( WRITER__UITEXT_UndefinedProperty+pName );\n    }\n\n    return result;\n  }\n\n\n\n  /** Get first user arg. */\n  public String _getFirstUserArg() {\n    return _getUserArg(0);\n  }\n\n\n\n  /** Get second user arg. */\n  public String _getSecondUserArg() {\n    return _getUserArg(1);\n  }\n\n\n\n  /** Get third user arg. */\n  public String _getThirdUserArg() {\n    return _getUserArg(2);\n  }\n\n\n\n  /** Get nth (n=0,1,2,...) user arg (the nth arg with no WRITER__ARGUMENT_CONTROL_PREFIX). */\n  public String _getUserArg( int pOrdinal ) {\n    if( pOrdinal < _getNumUserArgs() ) {\n      String[] userargs =  _getUserArgs();\n      return userargs[ pOrdinal ];\n    }\n    else {\n      return WRITER__STRING_empty;\n    }\n  }\n\n\n\n  /** Get user command line arguments to CodeWriter. */\n  public String[] _getUserArgs() {\n    return writer__iUserArgs;\n  }\n\n\n\n  /** Get number of user command line arguments to CodeWriter. */\n  public int _getNumUserArgs() {\n    return writer__iNumUserArgs;\n  }\n\n\n\n  /** Get all command line arguments to CodeWriter. */\n  public String[] _getArgs() {\n    return writer__iArgs;\n  }\n\n\n\n  /** Get total number of command line arguments to CodeWriter. */\n  public int _getNumArgs() {\n    return writer__iNumArgs;\n  }\n\n\n  \n  /** Set a context object for the template to use. */\n  public void _setContext( Object pContext) {\n    writer__iContext = pContext;\n  }\n\n\n\n  /** Get the context object if set. NOTE: may return null. */\n  public Object _getContext() {\n    return writer__iContext;\n  }\n\n  /* Template Services (Control) >> */\n\n\n\n\n  /* Template Services (Text Production) << */\n\n  // inserts\n  // ...\n\n  public void _insert( String pText ) {\n    writer__iCurrentText.append( pText );\n  }\n\n  public void _insert( Object pObject ) {\n    writer__iCurrentText.append( String.valueOf(pObject) );\n  }\n\n  public void _insert( int pInt ) {\n    writer__iCurrentText.append( pInt );\n  }\n\n  public void _insert( long pLong ) {\n    writer__iCurrentText.append( pLong );\n  }\n\n  public void _insert( short pShort ) {\n    writer__iCurrentText.append( pShort );\n  }\n\n  public void _insert( byte pByte ) {\n    writer__iCurrentText.append( pByte );\n  }\n\n  public void _insert( double pDouble ) {\n    writer__iCurrentText.append( pDouble );\n  }\n\n  public void _insert( float pFloat ) {\n    writer__iCurrentText.append( pFloat );\n  }\n\n  public void _insert( char pChar ) {\n    writer__iCurrentText.append( pChar );\n  }\n\n  public void _insert( boolean pBoolean ) {\n    writer__iCurrentText.append( pBoolean );\n  }\n\n\n\n  /** Create a String containing specified number of spaces. */\n  public String _spaces( int pNumSpaces ) {\n    int numSpaces = pNumSpaces;\n    if( 0 > numSpaces ) { numSpaces *= -1; }\n    StringBuffer spaces = new StringBuffer( numSpaces );\n    for(int spaceI = 0; spaceI < numSpaces; spaceI = spaceI + 1 ) {\n      spaces.append(\"" \"");\n    }\n    return spaces.toString();\n  }\n\n\n\n  /** Left align String with spaces. */ \n  public String _left( String pText, int pColWidth ) {\n    return _align( pText, \"" \"", pColWidth, 'l' );\n  } \n\n\n\n  /** Right align String with spaces. */ \n  public String _right( String pText, int pColWidth ) {\n    return _align( pText, \"" \"", pColWidth, 'r' );\n  } \n\n\n\n  /** Center align String with spaces. */ \n  public String _center( String pText, int pColWidth ) {\n    return _align( pText, \"" \"", pColWidth, 'c' );\n  } \n\n\n\n  /** Align text within background text to specified column width. \n   *  Alignment can be 'l': left, 'c': center, 'r': right.\n   */\n  public String _align( String pText, String pBackText, int pColWidth, char pAlignment ) {\n    String result = pText;\n \n    if( null == pText ) { \n       result = WRITER__STRING_empty; \n    }\n    else if( null != pBackText ) {\n      try {\n        int textLen = pText.length();\n        if( pColWidth > textLen ) {\n          int    backTextLen     = pBackText.length();\n          int    remainWidth     = pColWidth - textLen;\n          int    backTextRepeats = remainWidth / backTextLen;\n          int    backTextRemain  = remainWidth % backTextLen;\n          String back            = WRITER__STRING_empty;\n          for( int backTextI = 0; backTextI < backTextRepeats; backTextI = backTextI + 1 ) {\n            back = back + pBackText;\n          }\n          back = back + pBackText.substring( 0, backTextRemain );\n \n          switch( pAlignment ) {\n          case 'l':\n            result = result + back;\n            break;\n          case 'c':\n            result = back.substring( 0, (back.length()/2) ) + result + back.substring( (back.length()/2) );\n            break;\n          case 'r':\n            result = back + result;\n            break;\n          }\n        }\n      } \n      catch( RuntimeException re ) { throw re; }\n      catch( Exception e ) {\n        result = pText;\n      }\n    }\n    return result;\n  }\n\n\n\n  /** Set the text of file currently being generated. */\n  public void _setText( String pText) {\n    writer__iCurrentText = new StringBuffer( pText );\n  }\n\n\n\n  /** Get the text of file currently being generated. */\n  public String _getText() {\n    return writer__iCurrentText.toString();\n  }\n\n\n  /** Set result object (optional). */\n  public void _setResult( Object pResult ) {\n    writer__iResult = pResult;\n  }\n\n\n\n  /** Get the result object (may be null). */\n  public Object _getResult() {\n    return writer__iResult;\n  }\n\n  /* Template Services (Text Production) >> */\n\n}\n\n\n!<footer>\n"");
    }","    public void sendMail(String smtpHost, String username, String password, String senderAddress, String recipientsAddress, String subject, String text) {
        MailAuthenticator auth = new MailAuthenticator(username, password);
        Properties properties = new Properties();
        properties.put(""mail.smtp.host"", smtpHost);
        properties.put(""mail.smtp.auth"", ""true"");
        Session session = Session.getDefaultInstance(properties, auth);
        try {
            Message msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(senderAddress));
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientsAddress, false));
            msg.setSubject(subject);
            msg.setText(text);
            msg.setHeader(""Test"", ""Test"");
            msg.setSentDate(new Date());
            Transport.send(msg);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    @Test
    public void testDocumentDownloadExcel() throws IOException {
        if (uploadedExcelDocumentID == null) {
            fail(""Document Upload Test should run first"");
        }
        String downloadLink = GoogleDownloadLinkGenerator.generateXlDownloadLink(uploadedExcelDocumentID);
        URL url = new URL(downloadLink);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        InputStream input = url.openStream();
        FileWriter fw = new FileWriter(""tmpOutput.kb"");
        Reader reader = new InputStreamReader(input);
        BufferedReader bufferedReader = new BufferedReader(reader);
        String strLine = """";
        int count = 0;
        while (count < 10000) {
            strLine = bufferedReader.readLine();
            if (strLine != null && strLine != """") {
                fw.write(strLine);
            }
            count++;
        }
    }",0
"    public static int deleteOrder(String likePatten) {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append("" DELETE FROM JHF_ALIVE_ORDER "").append("" WHERE   ORDER_ID LIKE  ? "");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            psmt.setString(1, ""%"" + likePatten + ""%"");
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println("" error when roll back !"");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println("" error  when psmt close or conn close ."");
            }
        }
        return deleted;
    }","    private void loadTaskList() {
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(new File(this.getProperty(""path.data"") + File.separator + ""Tasks.xml""));
            NodeList tasksNodes = doc.getElementsByTagName(""task"");
            tasks = new HashMap<String, TaskCommand>();
            for (int x = 0; x < tasksNodes.getLength(); x++) {
                Node item = tasksNodes.item(x);
                TaskCommand taskCommand = new TaskCommand(item);
                tasks.put(taskCommand.getName(), taskCommand);
            }
            System.out.println(""Tasks.xml found and loaded ("" + tasksNodes.getLength() + "")"");
        } catch (Exception e) {
            tasks = new HashMap<String, TaskCommand>();
            System.out.println(""Error loading Tasks.xml, starting with no tasks."");
        }
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        md.update(text.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }","    public static boolean deleteDirectory(File path) {
        if (path.exists()) {
            File[] files = path.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i]);
                } else {
                    files[i].delete();
                }
            }
        }
        return (path.delete());
    }",0
"    public static String SHA1(String text) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        md.update(text.getBytes());
        byte byteData[] = md.digest();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuilder hexString = new StringBuilder();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static void copyFileByNIO(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }","    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }",0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public synchronized String encrypt(String plaintext) throws PasswordException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new PasswordException(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new PasswordException(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new Base64Encoder()).encode(raw);
        return hash;
    }",0
"    @Override
    public KSA00 getEstimate() {
        int probe_count = getData().getModel().getProbes().size();
        int ch_length = getData().getModel().getChromosomeLength();
        int clone_length = getData().getModel().getCloneLength();
        int clone_count = getData().getSampleSize();
        int counter = 0;
        byte[][] scores = new byte[clone_count][];
        for (KSA00Data.Hybridization val : getData()) {
            scores[counter++] = val.getScore();
        }
        int[] probeOrder = ArrayUtil.createSequence(getData().getModel().getProbes().size(), false);
        int[][] joint = new int[probe_count][probe_count];
        for (int probeIndex1 = 0; probeIndex1 < probe_count; probeIndex1++) {
            for (int probeIndex2 = probeIndex1 + 1; probeIndex2 < probe_count; probeIndex2++) {
                for (int cloneIndex = 0; cloneIndex < clone_count; cloneIndex++) {
                    if ((scores[cloneIndex][probeIndex1] == 1) && (scores[cloneIndex][probeIndex2] == 1)) {
                        joint[probeIndex1][probeIndex2]++;
                    }
                }
                joint[probeIndex2][probeIndex1] = joint[probeIndex1][probeIndex2];
            }
        }
        int gap = ch_length - (probe_count * clone_length);
        double[] y = Initial_Ys(probeOrder, probe_count, clone_count, clone_length, gap, joint);
        return getData().getModel().create(Arrays.asList(ArrayUtils.toObject(y)));
    }","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }",0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }","    public ThreadChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            ThreadInfo tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }",0
"    public ThreadChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            ThreadInfo tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }","    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }",0
"    public static String md5Encrypt(final String txt) {
        String enTxt = txt;
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""Error:"", e);
        }
        if (null != md) {
            byte[] md5hash = new byte[32];
            try {
                md.update(txt.getBytes(""UTF-8""), 0, txt.length());
            } catch (UnsupportedEncodingException e) {
                logger.error(""Error:"", e);
            }
            md5hash = md.digest();
            StringBuffer md5StrBuff = new StringBuffer();
            for (int i = 0; i < md5hash.length; i++) {
                if (Integer.toHexString(0xFF & md5hash[i]).length() == 1) {
                    md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & md5hash[i]));
                } else {
                    md5StrBuff.append(Integer.toHexString(0xFF & md5hash[i]));
                }
            }
            enTxt = md5StrBuff.toString();
        }
        return enTxt;
    }","    public void start(Gedcom gedcom) {
        String cmd = getValueFromUser(""executables"", translate(""WhichExecutable""), new String[0]);
        if (cmd == null) return;
        try {
            Process process = Runtime.getRuntime().exec(cmd);
            BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while (true) {
                String line = in.readLine();
                if (line == null) break;
                println(line);
            }
        } catch (IOException ioe) {
            println(translate(""Error"") + ioe.getMessage());
        }
    }",0
"	public static File chooseFileOpen(JFrame frame) {
		File retval;

		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(""Select input file."");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(false);

		//Show dialog and wait for user input
		int status = fc.showOpenDialog(frame);

		//React to input
		if(status == JFileChooser.APPROVE_OPTION) {
			retval = fc.getSelectedFile();
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}

		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);

		//Return
		return retval;
	}","    @Override
    public void close() throws IOException {
        super.close();
        byte[] signatureData = toByteArray();
        ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream);
        ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(this.originalZipFile));
        ZipEntry zipEntry;
        while (null != (zipEntry = zipInputStream.getNextEntry())) {
            if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) {
                ZipEntry newZipEntry = new ZipEntry(zipEntry.getName());
                zipOutputStream.putNextEntry(newZipEntry);
                LOG.debug(""copying "" + zipEntry.getName());
                IOUtils.copy(zipInputStream, zipOutputStream);
            }
        }
        zipInputStream.close();
        zipEntry = new ZipEntry(ODFUtil.SIGNATURE_FILE);
        LOG.debug(""writing "" + zipEntry.getName());
        zipOutputStream.putNextEntry(zipEntry);
        IOUtils.write(signatureData, zipOutputStream);
        zipOutputStream.close();
    }",0
"    public static void add100RowsToTargetDB(int block) {
        Scanner source = null;
        Connection connection = null;
        try {
            try {
                Class.forName(""sun.jdbc.odbc.JdbcOdbcDriver"");
                String dbUrl = ""jdbc:odbc:conn"";
                connection = DriverManager.getConnection(dbUrl);
                source = new Scanner(new File(""D:/Priyanka/My/Data/TargetData.csv""));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            int counter = 0;
            source.nextLine();
            int cursor = block * 100;
            while (cursor != 0) {
                cursor--;
                source.nextLine();
            }
            while (source.hasNextLine() && counter < 100) {
                Scanner ls = new Scanner(source.nextLine());
                ls.useDelimiter("","");
                String query = ""INSERT INTO [CompTarget].[dbo].[ReadingsT] ([time],[reads],[writes],[sysCall],[sysRead],[sysWrite],[random1],[numExecs] ,[rchar],[wchar],[reading_id]) VALUES "";
                query += ""( '"" + ls.next() + ""', "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + ls.nextInt() + "", "" + +ls.nextInt() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pkt + "")"";
                String query2 = ""INSERT INTO [CompTarget].[dbo].[PageReadingT]([pageout],[pagedout],[pagefree],[pagescan],[pageattach],[pagein],[main_reading_id],[page_reading_id]) VALUES"";
                query2 += ""( "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + ls.nextDouble() + "", "" + pkt + "", "" + spkt + "")"";
                pkt++;
                spkt++;
                Statement statement = ((Connection) connection).createStatement();
                try {
                    statement.executeQuery(query);
                } catch (SQLException e) {
                }
                try {
                    Statement statement2 = ((Connection) connection).createStatement();
                    statement2.executeQuery(query2);
                } catch (SQLException e) {
                }
                counter++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }","    private void getRandomGuid(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = secureRandom.nextLong();
            } else {
                rand = random.nextLong();
            }
            sbValueBeforeMD5.append(id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }",0
